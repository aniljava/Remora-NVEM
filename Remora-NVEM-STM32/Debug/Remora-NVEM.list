
Remora-NVEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000146b0  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000255c  08014834  08014834  00024834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016d90  08016d90  000300cc  2**0
                  CONTENTS
  4 .ARM          00000008  08016d90  08016d90  00026d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016d98  08016d98  000300cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08016d98  08016d98  00026d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08016da0  08016da0  00026da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08016da8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006bf8  200000d0  08016e74  000300d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006cc8  08016e74  00036cc8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000300cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00061f58  00000000  00000000  000300f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a528  00000000  00000000  0009204d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d98  00000000  00000000  0009c578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c40  00000000  00000000  0009e310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034179  00000000  00000000  0009ff50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003342c  00000000  00000000  000d40c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2f07  00000000  00000000  001074f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001fa3fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099a4  00000000  00000000  001fa450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	200000d0 	.word	0x200000d0
 80001a0:	00000000 	.word	0x00000000
 80001a4:	0801481c 	.word	0x0801481c

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	200000d4 	.word	0x200000d4
 80001c0:	0801481c 	.word	0x0801481c

080001c4 <strcmp>:
 80001c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001cc:	2a01      	cmp	r2, #1
 80001ce:	bf28      	it	cs
 80001d0:	429a      	cmpcs	r2, r3
 80001d2:	d0f7      	beq.n	80001c4 <strcmp>
 80001d4:	1ad0      	subs	r0, r2, r3
 80001d6:	4770      	bx	lr

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2iz>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a9c:	d215      	bcs.n	8000aca <__aeabi_d2iz+0x36>
 8000a9e:	d511      	bpl.n	8000ac4 <__aeabi_d2iz+0x30>
 8000aa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa8:	d912      	bls.n	8000ad0 <__aeabi_d2iz+0x3c>
 8000aaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ab6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aba:	fa23 f002 	lsr.w	r0, r3, r2
 8000abe:	bf18      	it	ne
 8000ac0:	4240      	negne	r0, r0
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d105      	bne.n	8000adc <__aeabi_d2iz+0x48>
 8000ad0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	bf08      	it	eq
 8000ad6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2uiz>:
 8000ae4:	004a      	lsls	r2, r1, #1
 8000ae6:	d211      	bcs.n	8000b0c <__aeabi_d2uiz+0x28>
 8000ae8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aec:	d211      	bcs.n	8000b12 <__aeabi_d2uiz+0x2e>
 8000aee:	d50d      	bpl.n	8000b0c <__aeabi_d2uiz+0x28>
 8000af0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af8:	d40e      	bmi.n	8000b18 <__aeabi_d2uiz+0x34>
 8000afa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b16:	d102      	bne.n	8000b1e <__aeabi_d2uiz+0x3a>
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0000 	mov.w	r0, #0
 8000b22:	4770      	bx	lr

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_fmul>:
 8000d40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d48:	bf1e      	ittt	ne
 8000d4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d4e:	ea92 0f0c 	teqne	r2, ip
 8000d52:	ea93 0f0c 	teqne	r3, ip
 8000d56:	d06f      	beq.n	8000e38 <__aeabi_fmul+0xf8>
 8000d58:	441a      	add	r2, r3
 8000d5a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d5e:	0240      	lsls	r0, r0, #9
 8000d60:	bf18      	it	ne
 8000d62:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d66:	d01e      	beq.n	8000da6 <__aeabi_fmul+0x66>
 8000d68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d6c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d70:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d74:	fba0 3101 	umull	r3, r1, r0, r1
 8000d78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d7c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d80:	bf3e      	ittt	cc
 8000d82:	0049      	lslcc	r1, r1, #1
 8000d84:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d88:	005b      	lslcc	r3, r3, #1
 8000d8a:	ea40 0001 	orr.w	r0, r0, r1
 8000d8e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d92:	2afd      	cmp	r2, #253	; 0xfd
 8000d94:	d81d      	bhi.n	8000dd2 <__aeabi_fmul+0x92>
 8000d96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9e:	bf08      	it	eq
 8000da0:	f020 0001 	biceq.w	r0, r0, #1
 8000da4:	4770      	bx	lr
 8000da6:	f090 0f00 	teq	r0, #0
 8000daa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dae:	bf08      	it	eq
 8000db0:	0249      	lsleq	r1, r1, #9
 8000db2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dba:	3a7f      	subs	r2, #127	; 0x7f
 8000dbc:	bfc2      	ittt	gt
 8000dbe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc6:	4770      	bxgt	lr
 8000dc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	3a01      	subs	r2, #1
 8000dd2:	dc5d      	bgt.n	8000e90 <__aeabi_fmul+0x150>
 8000dd4:	f112 0f19 	cmn.w	r2, #25
 8000dd8:	bfdc      	itt	le
 8000dda:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dde:	4770      	bxle	lr
 8000de0:	f1c2 0200 	rsb	r2, r2, #0
 8000de4:	0041      	lsls	r1, r0, #1
 8000de6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dea:	f1c2 0220 	rsb	r2, r2, #32
 8000dee:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000df6:	f140 0000 	adc.w	r0, r0, #0
 8000dfa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dfe:	bf08      	it	eq
 8000e00:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e04:	4770      	bx	lr
 8000e06:	f092 0f00 	teq	r2, #0
 8000e0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e0e:	bf02      	ittt	eq
 8000e10:	0040      	lsleq	r0, r0, #1
 8000e12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e16:	3a01      	subeq	r2, #1
 8000e18:	d0f9      	beq.n	8000e0e <__aeabi_fmul+0xce>
 8000e1a:	ea40 000c 	orr.w	r0, r0, ip
 8000e1e:	f093 0f00 	teq	r3, #0
 8000e22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0049      	lsleq	r1, r1, #1
 8000e2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e2e:	3b01      	subeq	r3, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xe6>
 8000e32:	ea41 010c 	orr.w	r1, r1, ip
 8000e36:	e78f      	b.n	8000d58 <__aeabi_fmul+0x18>
 8000e38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	bf18      	it	ne
 8000e42:	ea93 0f0c 	teqne	r3, ip
 8000e46:	d00a      	beq.n	8000e5e <__aeabi_fmul+0x11e>
 8000e48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e4c:	bf18      	it	ne
 8000e4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	d1d8      	bne.n	8000e06 <__aeabi_fmul+0xc6>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	4770      	bx	lr
 8000e5e:	f090 0f00 	teq	r0, #0
 8000e62:	bf17      	itett	ne
 8000e64:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e68:	4608      	moveq	r0, r1
 8000e6a:	f091 0f00 	teqne	r1, #0
 8000e6e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e72:	d014      	beq.n	8000e9e <__aeabi_fmul+0x15e>
 8000e74:	ea92 0f0c 	teq	r2, ip
 8000e78:	d101      	bne.n	8000e7e <__aeabi_fmul+0x13e>
 8000e7a:	0242      	lsls	r2, r0, #9
 8000e7c:	d10f      	bne.n	8000e9e <__aeabi_fmul+0x15e>
 8000e7e:	ea93 0f0c 	teq	r3, ip
 8000e82:	d103      	bne.n	8000e8c <__aeabi_fmul+0x14c>
 8000e84:	024b      	lsls	r3, r1, #9
 8000e86:	bf18      	it	ne
 8000e88:	4608      	movne	r0, r1
 8000e8a:	d108      	bne.n	8000e9e <__aeabi_fmul+0x15e>
 8000e8c:	ea80 0001 	eor.w	r0, r0, r1
 8000e90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9c:	4770      	bx	lr
 8000e9e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ea6:	4770      	bx	lr

08000ea8 <__aeabi_fdiv>:
 8000ea8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb0:	bf1e      	ittt	ne
 8000eb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eb6:	ea92 0f0c 	teqne	r2, ip
 8000eba:	ea93 0f0c 	teqne	r3, ip
 8000ebe:	d069      	beq.n	8000f94 <__aeabi_fdiv+0xec>
 8000ec0:	eba2 0203 	sub.w	r2, r2, r3
 8000ec4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec8:	0249      	lsls	r1, r1, #9
 8000eca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ece:	d037      	beq.n	8000f40 <__aeabi_fdiv+0x98>
 8000ed0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ed8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000edc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	bf38      	it	cc
 8000ee4:	005b      	lslcc	r3, r3, #1
 8000ee6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	bf24      	itt	cs
 8000ef2:	1a5b      	subcs	r3, r3, r1
 8000ef4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ef8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f02:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f06:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0a:	bf24      	itt	cs
 8000f0c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f14:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f18:	bf24      	itt	cs
 8000f1a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f1e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f22:	011b      	lsls	r3, r3, #4
 8000f24:	bf18      	it	ne
 8000f26:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2a:	d1e0      	bne.n	8000eee <__aeabi_fdiv+0x46>
 8000f2c:	2afd      	cmp	r2, #253	; 0xfd
 8000f2e:	f63f af50 	bhi.w	8000dd2 <__aeabi_fmul+0x92>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f38:	bf08      	it	eq
 8000f3a:	f020 0001 	biceq.w	r0, r0, #1
 8000f3e:	4770      	bx	lr
 8000f40:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f44:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f48:	327f      	adds	r2, #127	; 0x7f
 8000f4a:	bfc2      	ittt	gt
 8000f4c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f50:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f54:	4770      	bxgt	lr
 8000f56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5a:	f04f 0300 	mov.w	r3, #0
 8000f5e:	3a01      	subs	r2, #1
 8000f60:	e737      	b.n	8000dd2 <__aeabi_fmul+0x92>
 8000f62:	f092 0f00 	teq	r2, #0
 8000f66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6a:	bf02      	ittt	eq
 8000f6c:	0040      	lsleq	r0, r0, #1
 8000f6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f72:	3a01      	subeq	r2, #1
 8000f74:	d0f9      	beq.n	8000f6a <__aeabi_fdiv+0xc2>
 8000f76:	ea40 000c 	orr.w	r0, r0, ip
 8000f7a:	f093 0f00 	teq	r3, #0
 8000f7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0049      	lsleq	r1, r1, #1
 8000f86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8a:	3b01      	subeq	r3, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xda>
 8000f8e:	ea41 010c 	orr.w	r1, r1, ip
 8000f92:	e795      	b.n	8000ec0 <__aeabi_fdiv+0x18>
 8000f94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f98:	ea92 0f0c 	teq	r2, ip
 8000f9c:	d108      	bne.n	8000fb0 <__aeabi_fdiv+0x108>
 8000f9e:	0242      	lsls	r2, r0, #9
 8000fa0:	f47f af7d 	bne.w	8000e9e <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	f47f af70 	bne.w	8000e8c <__aeabi_fmul+0x14c>
 8000fac:	4608      	mov	r0, r1
 8000fae:	e776      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fb0:	ea93 0f0c 	teq	r3, ip
 8000fb4:	d104      	bne.n	8000fc0 <__aeabi_fdiv+0x118>
 8000fb6:	024b      	lsls	r3, r1, #9
 8000fb8:	f43f af4c 	beq.w	8000e54 <__aeabi_fmul+0x114>
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	e76e      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc4:	bf18      	it	ne
 8000fc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fca:	d1ca      	bne.n	8000f62 <__aeabi_fdiv+0xba>
 8000fcc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd0:	f47f af5c 	bne.w	8000e8c <__aeabi_fmul+0x14c>
 8000fd4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fd8:	f47f af3c 	bne.w	8000e54 <__aeabi_fmul+0x114>
 8000fdc:	e75f      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_f2iz>:
 8000fe0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fe8:	d30f      	bcc.n	800100a <__aeabi_f2iz+0x2a>
 8000fea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff2:	d90d      	bls.n	8001010 <__aeabi_f2iz+0x30>
 8000ff4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ff8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ffc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001000:	fa23 f002 	lsr.w	r0, r3, r2
 8001004:	bf18      	it	ne
 8001006:	4240      	negne	r0, r0
 8001008:	4770      	bx	lr
 800100a:	f04f 0000 	mov.w	r0, #0
 800100e:	4770      	bx	lr
 8001010:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001014:	d101      	bne.n	800101a <__aeabi_f2iz+0x3a>
 8001016:	0242      	lsls	r2, r0, #9
 8001018:	d105      	bne.n	8001026 <__aeabi_f2iz+0x46>
 800101a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800101e:	bf08      	it	eq
 8001020:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001024:	4770      	bx	lr
 8001026:	f04f 0000 	mov.w	r0, #0
 800102a:	4770      	bx	lr

0800102c <__aeabi_uldivmod>:
 800102c:	b953      	cbnz	r3, 8001044 <__aeabi_uldivmod+0x18>
 800102e:	b94a      	cbnz	r2, 8001044 <__aeabi_uldivmod+0x18>
 8001030:	2900      	cmp	r1, #0
 8001032:	bf08      	it	eq
 8001034:	2800      	cmpeq	r0, #0
 8001036:	bf1c      	itt	ne
 8001038:	f04f 31ff 	movne.w	r1, #4294967295
 800103c:	f04f 30ff 	movne.w	r0, #4294967295
 8001040:	f000 b96e 	b.w	8001320 <__aeabi_idiv0>
 8001044:	f1ad 0c08 	sub.w	ip, sp, #8
 8001048:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800104c:	f000 f806 	bl	800105c <__udivmoddi4>
 8001050:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001054:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001058:	b004      	add	sp, #16
 800105a:	4770      	bx	lr

0800105c <__udivmoddi4>:
 800105c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001060:	9e08      	ldr	r6, [sp, #32]
 8001062:	460d      	mov	r5, r1
 8001064:	4604      	mov	r4, r0
 8001066:	468e      	mov	lr, r1
 8001068:	2b00      	cmp	r3, #0
 800106a:	f040 8083 	bne.w	8001174 <__udivmoddi4+0x118>
 800106e:	428a      	cmp	r2, r1
 8001070:	4617      	mov	r7, r2
 8001072:	d947      	bls.n	8001104 <__udivmoddi4+0xa8>
 8001074:	fab2 f382 	clz	r3, r2
 8001078:	b14b      	cbz	r3, 800108e <__udivmoddi4+0x32>
 800107a:	f1c3 0120 	rsb	r1, r3, #32
 800107e:	fa05 fe03 	lsl.w	lr, r5, r3
 8001082:	fa20 f101 	lsr.w	r1, r0, r1
 8001086:	409f      	lsls	r7, r3
 8001088:	ea41 0e0e 	orr.w	lr, r1, lr
 800108c:	409c      	lsls	r4, r3
 800108e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001092:	fbbe fcf8 	udiv	ip, lr, r8
 8001096:	fa1f f987 	uxth.w	r9, r7
 800109a:	fb08 e21c 	mls	r2, r8, ip, lr
 800109e:	fb0c f009 	mul.w	r0, ip, r9
 80010a2:	0c21      	lsrs	r1, r4, #16
 80010a4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80010a8:	4290      	cmp	r0, r2
 80010aa:	d90a      	bls.n	80010c2 <__udivmoddi4+0x66>
 80010ac:	18ba      	adds	r2, r7, r2
 80010ae:	f10c 31ff 	add.w	r1, ip, #4294967295
 80010b2:	f080 8118 	bcs.w	80012e6 <__udivmoddi4+0x28a>
 80010b6:	4290      	cmp	r0, r2
 80010b8:	f240 8115 	bls.w	80012e6 <__udivmoddi4+0x28a>
 80010bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80010c0:	443a      	add	r2, r7
 80010c2:	1a12      	subs	r2, r2, r0
 80010c4:	fbb2 f0f8 	udiv	r0, r2, r8
 80010c8:	fb08 2210 	mls	r2, r8, r0, r2
 80010cc:	fb00 f109 	mul.w	r1, r0, r9
 80010d0:	b2a4      	uxth	r4, r4
 80010d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80010d6:	42a1      	cmp	r1, r4
 80010d8:	d909      	bls.n	80010ee <__udivmoddi4+0x92>
 80010da:	193c      	adds	r4, r7, r4
 80010dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80010e0:	f080 8103 	bcs.w	80012ea <__udivmoddi4+0x28e>
 80010e4:	42a1      	cmp	r1, r4
 80010e6:	f240 8100 	bls.w	80012ea <__udivmoddi4+0x28e>
 80010ea:	3802      	subs	r0, #2
 80010ec:	443c      	add	r4, r7
 80010ee:	1a64      	subs	r4, r4, r1
 80010f0:	2100      	movs	r1, #0
 80010f2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80010f6:	b11e      	cbz	r6, 8001100 <__udivmoddi4+0xa4>
 80010f8:	2200      	movs	r2, #0
 80010fa:	40dc      	lsrs	r4, r3
 80010fc:	e9c6 4200 	strd	r4, r2, [r6]
 8001100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001104:	b902      	cbnz	r2, 8001108 <__udivmoddi4+0xac>
 8001106:	deff      	udf	#255	; 0xff
 8001108:	fab2 f382 	clz	r3, r2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d14f      	bne.n	80011b0 <__udivmoddi4+0x154>
 8001110:	1a8d      	subs	r5, r1, r2
 8001112:	2101      	movs	r1, #1
 8001114:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001118:	fa1f f882 	uxth.w	r8, r2
 800111c:	fbb5 fcfe 	udiv	ip, r5, lr
 8001120:	fb0e 551c 	mls	r5, lr, ip, r5
 8001124:	fb08 f00c 	mul.w	r0, r8, ip
 8001128:	0c22      	lsrs	r2, r4, #16
 800112a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800112e:	42a8      	cmp	r0, r5
 8001130:	d907      	bls.n	8001142 <__udivmoddi4+0xe6>
 8001132:	197d      	adds	r5, r7, r5
 8001134:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001138:	d202      	bcs.n	8001140 <__udivmoddi4+0xe4>
 800113a:	42a8      	cmp	r0, r5
 800113c:	f200 80e9 	bhi.w	8001312 <__udivmoddi4+0x2b6>
 8001140:	4694      	mov	ip, r2
 8001142:	1a2d      	subs	r5, r5, r0
 8001144:	fbb5 f0fe 	udiv	r0, r5, lr
 8001148:	fb0e 5510 	mls	r5, lr, r0, r5
 800114c:	fb08 f800 	mul.w	r8, r8, r0
 8001150:	b2a4      	uxth	r4, r4
 8001152:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001156:	45a0      	cmp	r8, r4
 8001158:	d907      	bls.n	800116a <__udivmoddi4+0x10e>
 800115a:	193c      	adds	r4, r7, r4
 800115c:	f100 32ff 	add.w	r2, r0, #4294967295
 8001160:	d202      	bcs.n	8001168 <__udivmoddi4+0x10c>
 8001162:	45a0      	cmp	r8, r4
 8001164:	f200 80d9 	bhi.w	800131a <__udivmoddi4+0x2be>
 8001168:	4610      	mov	r0, r2
 800116a:	eba4 0408 	sub.w	r4, r4, r8
 800116e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001172:	e7c0      	b.n	80010f6 <__udivmoddi4+0x9a>
 8001174:	428b      	cmp	r3, r1
 8001176:	d908      	bls.n	800118a <__udivmoddi4+0x12e>
 8001178:	2e00      	cmp	r6, #0
 800117a:	f000 80b1 	beq.w	80012e0 <__udivmoddi4+0x284>
 800117e:	2100      	movs	r1, #0
 8001180:	e9c6 0500 	strd	r0, r5, [r6]
 8001184:	4608      	mov	r0, r1
 8001186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800118a:	fab3 f183 	clz	r1, r3
 800118e:	2900      	cmp	r1, #0
 8001190:	d14b      	bne.n	800122a <__udivmoddi4+0x1ce>
 8001192:	42ab      	cmp	r3, r5
 8001194:	d302      	bcc.n	800119c <__udivmoddi4+0x140>
 8001196:	4282      	cmp	r2, r0
 8001198:	f200 80b9 	bhi.w	800130e <__udivmoddi4+0x2b2>
 800119c:	1a84      	subs	r4, r0, r2
 800119e:	eb65 0303 	sbc.w	r3, r5, r3
 80011a2:	2001      	movs	r0, #1
 80011a4:	469e      	mov	lr, r3
 80011a6:	2e00      	cmp	r6, #0
 80011a8:	d0aa      	beq.n	8001100 <__udivmoddi4+0xa4>
 80011aa:	e9c6 4e00 	strd	r4, lr, [r6]
 80011ae:	e7a7      	b.n	8001100 <__udivmoddi4+0xa4>
 80011b0:	409f      	lsls	r7, r3
 80011b2:	f1c3 0220 	rsb	r2, r3, #32
 80011b6:	40d1      	lsrs	r1, r2
 80011b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80011c0:	fa1f f887 	uxth.w	r8, r7
 80011c4:	fb0e 1110 	mls	r1, lr, r0, r1
 80011c8:	fa24 f202 	lsr.w	r2, r4, r2
 80011cc:	409d      	lsls	r5, r3
 80011ce:	fb00 fc08 	mul.w	ip, r0, r8
 80011d2:	432a      	orrs	r2, r5
 80011d4:	0c15      	lsrs	r5, r2, #16
 80011d6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80011da:	45ac      	cmp	ip, r5
 80011dc:	fa04 f403 	lsl.w	r4, r4, r3
 80011e0:	d909      	bls.n	80011f6 <__udivmoddi4+0x19a>
 80011e2:	197d      	adds	r5, r7, r5
 80011e4:	f100 31ff 	add.w	r1, r0, #4294967295
 80011e8:	f080 808f 	bcs.w	800130a <__udivmoddi4+0x2ae>
 80011ec:	45ac      	cmp	ip, r5
 80011ee:	f240 808c 	bls.w	800130a <__udivmoddi4+0x2ae>
 80011f2:	3802      	subs	r0, #2
 80011f4:	443d      	add	r5, r7
 80011f6:	eba5 050c 	sub.w	r5, r5, ip
 80011fa:	fbb5 f1fe 	udiv	r1, r5, lr
 80011fe:	fb0e 5c11 	mls	ip, lr, r1, r5
 8001202:	fb01 f908 	mul.w	r9, r1, r8
 8001206:	b295      	uxth	r5, r2
 8001208:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800120c:	45a9      	cmp	r9, r5
 800120e:	d907      	bls.n	8001220 <__udivmoddi4+0x1c4>
 8001210:	197d      	adds	r5, r7, r5
 8001212:	f101 32ff 	add.w	r2, r1, #4294967295
 8001216:	d274      	bcs.n	8001302 <__udivmoddi4+0x2a6>
 8001218:	45a9      	cmp	r9, r5
 800121a:	d972      	bls.n	8001302 <__udivmoddi4+0x2a6>
 800121c:	3902      	subs	r1, #2
 800121e:	443d      	add	r5, r7
 8001220:	eba5 0509 	sub.w	r5, r5, r9
 8001224:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001228:	e778      	b.n	800111c <__udivmoddi4+0xc0>
 800122a:	f1c1 0720 	rsb	r7, r1, #32
 800122e:	408b      	lsls	r3, r1
 8001230:	fa22 fc07 	lsr.w	ip, r2, r7
 8001234:	ea4c 0c03 	orr.w	ip, ip, r3
 8001238:	fa25 f407 	lsr.w	r4, r5, r7
 800123c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001240:	fbb4 f9fe 	udiv	r9, r4, lr
 8001244:	fa1f f88c 	uxth.w	r8, ip
 8001248:	fb0e 4419 	mls	r4, lr, r9, r4
 800124c:	fa20 f307 	lsr.w	r3, r0, r7
 8001250:	fb09 fa08 	mul.w	sl, r9, r8
 8001254:	408d      	lsls	r5, r1
 8001256:	431d      	orrs	r5, r3
 8001258:	0c2b      	lsrs	r3, r5, #16
 800125a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800125e:	45a2      	cmp	sl, r4
 8001260:	fa02 f201 	lsl.w	r2, r2, r1
 8001264:	fa00 f301 	lsl.w	r3, r0, r1
 8001268:	d909      	bls.n	800127e <__udivmoddi4+0x222>
 800126a:	eb1c 0404 	adds.w	r4, ip, r4
 800126e:	f109 30ff 	add.w	r0, r9, #4294967295
 8001272:	d248      	bcs.n	8001306 <__udivmoddi4+0x2aa>
 8001274:	45a2      	cmp	sl, r4
 8001276:	d946      	bls.n	8001306 <__udivmoddi4+0x2aa>
 8001278:	f1a9 0902 	sub.w	r9, r9, #2
 800127c:	4464      	add	r4, ip
 800127e:	eba4 040a 	sub.w	r4, r4, sl
 8001282:	fbb4 f0fe 	udiv	r0, r4, lr
 8001286:	fb0e 4410 	mls	r4, lr, r0, r4
 800128a:	fb00 fa08 	mul.w	sl, r0, r8
 800128e:	b2ad      	uxth	r5, r5
 8001290:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001294:	45a2      	cmp	sl, r4
 8001296:	d908      	bls.n	80012aa <__udivmoddi4+0x24e>
 8001298:	eb1c 0404 	adds.w	r4, ip, r4
 800129c:	f100 35ff 	add.w	r5, r0, #4294967295
 80012a0:	d22d      	bcs.n	80012fe <__udivmoddi4+0x2a2>
 80012a2:	45a2      	cmp	sl, r4
 80012a4:	d92b      	bls.n	80012fe <__udivmoddi4+0x2a2>
 80012a6:	3802      	subs	r0, #2
 80012a8:	4464      	add	r4, ip
 80012aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80012ae:	fba0 8902 	umull	r8, r9, r0, r2
 80012b2:	eba4 040a 	sub.w	r4, r4, sl
 80012b6:	454c      	cmp	r4, r9
 80012b8:	46c6      	mov	lr, r8
 80012ba:	464d      	mov	r5, r9
 80012bc:	d319      	bcc.n	80012f2 <__udivmoddi4+0x296>
 80012be:	d016      	beq.n	80012ee <__udivmoddi4+0x292>
 80012c0:	b15e      	cbz	r6, 80012da <__udivmoddi4+0x27e>
 80012c2:	ebb3 020e 	subs.w	r2, r3, lr
 80012c6:	eb64 0405 	sbc.w	r4, r4, r5
 80012ca:	fa04 f707 	lsl.w	r7, r4, r7
 80012ce:	fa22 f301 	lsr.w	r3, r2, r1
 80012d2:	431f      	orrs	r7, r3
 80012d4:	40cc      	lsrs	r4, r1
 80012d6:	e9c6 7400 	strd	r7, r4, [r6]
 80012da:	2100      	movs	r1, #0
 80012dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012e0:	4631      	mov	r1, r6
 80012e2:	4630      	mov	r0, r6
 80012e4:	e70c      	b.n	8001100 <__udivmoddi4+0xa4>
 80012e6:	468c      	mov	ip, r1
 80012e8:	e6eb      	b.n	80010c2 <__udivmoddi4+0x66>
 80012ea:	4610      	mov	r0, r2
 80012ec:	e6ff      	b.n	80010ee <__udivmoddi4+0x92>
 80012ee:	4543      	cmp	r3, r8
 80012f0:	d2e6      	bcs.n	80012c0 <__udivmoddi4+0x264>
 80012f2:	ebb8 0e02 	subs.w	lr, r8, r2
 80012f6:	eb69 050c 	sbc.w	r5, r9, ip
 80012fa:	3801      	subs	r0, #1
 80012fc:	e7e0      	b.n	80012c0 <__udivmoddi4+0x264>
 80012fe:	4628      	mov	r0, r5
 8001300:	e7d3      	b.n	80012aa <__udivmoddi4+0x24e>
 8001302:	4611      	mov	r1, r2
 8001304:	e78c      	b.n	8001220 <__udivmoddi4+0x1c4>
 8001306:	4681      	mov	r9, r0
 8001308:	e7b9      	b.n	800127e <__udivmoddi4+0x222>
 800130a:	4608      	mov	r0, r1
 800130c:	e773      	b.n	80011f6 <__udivmoddi4+0x19a>
 800130e:	4608      	mov	r0, r1
 8001310:	e749      	b.n	80011a6 <__udivmoddi4+0x14a>
 8001312:	f1ac 0c02 	sub.w	ip, ip, #2
 8001316:	443d      	add	r5, r7
 8001318:	e713      	b.n	8001142 <__udivmoddi4+0xe6>
 800131a:	3802      	subs	r0, #2
 800131c:	443c      	add	r4, r7
 800131e:	e724      	b.n	800116a <__udivmoddi4+0x10e>

08001320 <__aeabi_idiv0>:
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop

08001324 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>:
#include <cstdio>
#include <cerrno>
#include <string>


Pin::Pin(std::string portAndPin, int dir) :
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
    portAndPin(portAndPin),
    dir(dir)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	68b9      	ldr	r1, [r7, #8]
 8001334:	4618      	mov	r0, r3
 8001336:	f012 f97b 	bl	8013630 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	761a      	strb	r2, [r3, #24]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	3330      	adds	r3, #48	; 0x30
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]
{
    // Set direction
    if (this->dir == INPUT)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	7e1b      	ldrb	r3, [r3, #24]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d106      	bne.n	8001368 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi+0x44>
    {
        this->mode = GPIO_MODE_INPUT;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
        this->pull = GPIO_NOPULL;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2200      	movs	r2, #0
 8001364:	625a      	str	r2, [r3, #36]	; 0x24
 8001366:	e005      	b.n	8001374 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi+0x50>
    }
    else
    {
        this->mode = GPIO_MODE_OUTPUT_PP;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2201      	movs	r2, #1
 800136c:	621a      	str	r2, [r3, #32]
        this->pull = GPIO_NOPULL;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2200      	movs	r2, #0
 8001372:	625a      	str	r2, [r3, #36]	; 0x24
    }

    this->configPin();
 8001374:	68f8      	ldr	r0, [r7, #12]
 8001376:	f000 f805 	bl	8001384 <_ZN3Pin9configPinEv>
}
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <_ZN3Pin9configPinEv>:

    this->configPin();
}

void Pin::configPin()
{
 8001384:	b5b0      	push	{r4, r5, r7, lr}
 8001386:	b08e      	sub	sp, #56	; 0x38
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
    printf("Creating Pin @\n");
 800138c:	4867      	ldr	r0, [pc, #412]	; (800152c <_ZN3Pin9configPinEv+0x1a8>)
 800138e:	f012 fb65 	bl	8013a5c <puts>

    //x can be (A..H) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
    GPIO_TypeDef* gpios[5] ={GPIOA,GPIOB,GPIOC,GPIOD,GPIOE};
 8001392:	4b67      	ldr	r3, [pc, #412]	; (8001530 <_ZN3Pin9configPinEv+0x1ac>)
 8001394:	f107 0420 	add.w	r4, r7, #32
 8001398:	461d      	mov	r5, r3
 800139a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800139c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800139e:	682b      	ldr	r3, [r5, #0]
 80013a0:	6023      	str	r3, [r4, #0]
    

    if (this->portAndPin[0] == 'P') // PXXX e.g.PA_2 PC_15
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f012 f8a0 	bl	80134ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80013ac:	4603      	mov	r3, r0
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b50      	cmp	r3, #80	; 0x50
 80013b2:	bf0c      	ite	eq
 80013b4:	2301      	moveq	r3, #1
 80013b6:	2300      	movne	r3, #0
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d060      	beq.n	8001480 <_ZN3Pin9configPinEv+0xfc>
    {  
        this->portIndex     = this->portAndPin[1] - 'A';
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2101      	movs	r1, #1
 80013c2:	4618      	mov	r0, r3
 80013c4:	f012 f892 	bl	80134ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80013c8:	4603      	mov	r3, r0
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	3b41      	subs	r3, #65	; 0x41
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	769a      	strb	r2, [r3, #26]
        this->pinNumber     = this->portAndPin[3] - '0';       
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2103      	movs	r1, #3
 80013d8:	4618      	mov	r0, r3
 80013da:	f012 f887 	bl	80134ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80013de:	4603      	mov	r3, r0
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	3b30      	subs	r3, #48	; 0x30
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	839a      	strh	r2, [r3, #28]
        uint16_t pin2       = this->portAndPin[4] - '0';       
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2104      	movs	r1, #4
 80013f0:	4618      	mov	r0, r3
 80013f2:	f012 f87b 	bl	80134ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80013f6:	4603      	mov	r3, r0
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	3b30      	subs	r3, #48	; 0x30
 80013fe:	86fb      	strh	r3, [r7, #54]	; 0x36

        if (pin2 <= 8) 
 8001400:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001402:	2b08      	cmp	r3, #8
 8001404:	d80b      	bhi.n	800141e <_ZN3Pin9configPinEv+0x9a>
        {
            this->pinNumber = this->pinNumber * 10 + pin2;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	8b9b      	ldrh	r3, [r3, #28]
 800140a:	461a      	mov	r2, r3
 800140c:	0092      	lsls	r2, r2, #2
 800140e:	4413      	add	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	b29a      	uxth	r2, r3
 8001414:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001416:	4413      	add	r3, r2
 8001418:	b29a      	uxth	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	839a      	strh	r2, [r3, #28]
        }

        this->pin = 1 << this->pinNumber; // this is equivalent to GPIO_PIN_x definition
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	8b9b      	ldrh	r3, [r3, #28]
 8001422:	461a      	mov	r2, r3
 8001424:	2301      	movs	r3, #1
 8001426:	4093      	lsls	r3, r2
 8001428:	b29a      	uxth	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	83da      	strh	r2, [r3, #30]
    {
        printf("  Invalid port and pin definition\n");
        return;
    }    

    printf("  port = GPIO%c\n", char('A' + this->portIndex));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7e9b      	ldrb	r3, [r3, #26]
 8001432:	3341      	adds	r3, #65	; 0x41
 8001434:	b2db      	uxtb	r3, r3
 8001436:	4619      	mov	r1, r3
 8001438:	483e      	ldr	r0, [pc, #248]	; (8001534 <_ZN3Pin9configPinEv+0x1b0>)
 800143a:	f012 fa89 	bl	8013950 <iprintf>
    printf("  pin = %d\n", this->pinNumber);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	8b9b      	ldrh	r3, [r3, #28]
 8001442:	4619      	mov	r1, r3
 8001444:	483c      	ldr	r0, [pc, #240]	; (8001538 <_ZN3Pin9configPinEv+0x1b4>)
 8001446:	f012 fa83 	bl	8013950 <iprintf>

    // translate port index into something useful
    this->GPIOx = gpios[this->portIndex];
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	7e9b      	ldrb	r3, [r3, #26]
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001454:	4413      	add	r3, r2
 8001456:	f853 2c18 	ldr.w	r2, [r3, #-24]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	62da      	str	r2, [r3, #44]	; 0x2c

    // enable the peripheral clock
    switch (portIndex){
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	7e9b      	ldrb	r3, [r3, #26]
 8001462:	2b04      	cmp	r3, #4
 8001464:	d85b      	bhi.n	800151e <_ZN3Pin9configPinEv+0x19a>
 8001466:	a201      	add	r2, pc, #4	; (adr r2, 800146c <_ZN3Pin9configPinEv+0xe8>)
 8001468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800146c:	08001489 	.word	0x08001489
 8001470:	080014a7 	.word	0x080014a7
 8001474:	080014c5 	.word	0x080014c5
 8001478:	080014e3 	.word	0x080014e3
 800147c:	08001501 	.word	0x08001501
        printf("  Invalid port and pin definition\n");
 8001480:	482e      	ldr	r0, [pc, #184]	; (800153c <_ZN3Pin9configPinEv+0x1b8>)
 8001482:	f012 faeb 	bl	8013a5c <puts>
 8001486:	e04d      	b.n	8001524 <_ZN3Pin9configPinEv+0x1a0>
        case 0:
            __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
 800148c:	4b2c      	ldr	r3, [pc, #176]	; (8001540 <_ZN3Pin9configPinEv+0x1bc>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	4a2b      	ldr	r2, [pc, #172]	; (8001540 <_ZN3Pin9configPinEv+0x1bc>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6313      	str	r3, [r2, #48]	; 0x30
 8001498:	4b29      	ldr	r3, [pc, #164]	; (8001540 <_ZN3Pin9configPinEv+0x1bc>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	61fb      	str	r3, [r7, #28]
 80014a2:	69fb      	ldr	r3, [r7, #28]
            break;
 80014a4:	e03b      	b.n	800151e <_ZN3Pin9configPinEv+0x19a>

        case 1:
            __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
 80014aa:	4b25      	ldr	r3, [pc, #148]	; (8001540 <_ZN3Pin9configPinEv+0x1bc>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a24      	ldr	r2, [pc, #144]	; (8001540 <_ZN3Pin9configPinEv+0x1bc>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b22      	ldr	r3, [pc, #136]	; (8001540 <_ZN3Pin9configPinEv+0x1bc>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	61bb      	str	r3, [r7, #24]
 80014c0:	69bb      	ldr	r3, [r7, #24]
            break;
 80014c2:	e02c      	b.n	800151e <_ZN3Pin9configPinEv+0x19a>

        case 2:
            __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <_ZN3Pin9configPinEv+0x1bc>)
 80014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014cc:	4a1c      	ldr	r2, [pc, #112]	; (8001540 <_ZN3Pin9configPinEv+0x1bc>)
 80014ce:	f043 0304 	orr.w	r3, r3, #4
 80014d2:	6313      	str	r3, [r2, #48]	; 0x30
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <_ZN3Pin9configPinEv+0x1bc>)
 80014d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	697b      	ldr	r3, [r7, #20]
            break;
 80014e0:	e01d      	b.n	800151e <_ZN3Pin9configPinEv+0x19a>
        
        case 3:
            __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <_ZN3Pin9configPinEv+0x1bc>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a15      	ldr	r2, [pc, #84]	; (8001540 <_ZN3Pin9configPinEv+0x1bc>)
 80014ec:	f043 0308 	orr.w	r3, r3, #8
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <_ZN3Pin9configPinEv+0x1bc>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
            break;
 80014fe:	e00e      	b.n	800151e <_ZN3Pin9configPinEv+0x19a>

        case 4:
            __HAL_RCC_GPIOE_CLK_ENABLE();
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <_ZN3Pin9configPinEv+0x1bc>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	4a0d      	ldr	r2, [pc, #52]	; (8001540 <_ZN3Pin9configPinEv+0x1bc>)
 800150a:	f043 0310 	orr.w	r3, r3, #16
 800150e:	6313      	str	r3, [r2, #48]	; 0x30
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <_ZN3Pin9configPinEv+0x1bc>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	f003 0310 	and.w	r3, r3, #16
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]
            break;
 800151c:	bf00      	nop
    }

    this->initPin();
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 f810 	bl	8001544 <_ZN3Pin7initPinEv>
}
 8001524:	3738      	adds	r7, #56	; 0x38
 8001526:	46bd      	mov	sp, r7
 8001528:	bdb0      	pop	{r4, r5, r7, pc}
 800152a:	bf00      	nop
 800152c:	08014888 	.word	0x08014888
 8001530:	080148dc 	.word	0x080148dc
 8001534:	080148bc 	.word	0x080148bc
 8001538:	080148d0 	.word	0x080148d0
 800153c:	08014898 	.word	0x08014898
 8001540:	40023800 	.word	0x40023800

08001544 <_ZN3Pin7initPinEv>:


void Pin::initPin()
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
    // Configure GPIO pin Output Level
    HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	8bdb      	ldrh	r3, [r3, #30]
 8001554:	2200      	movs	r2, #0
 8001556:	4619      	mov	r1, r3
 8001558:	f007 fcae 	bl	8008eb8 <HAL_GPIO_WritePin>

    // Configure the GPIO pin
    this->GPIO_InitStruct.Pin = this->pin;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	8bdb      	ldrh	r3, [r3, #30]
 8001560:	461a      	mov	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	631a      	str	r2, [r3, #48]	; 0x30
    this->GPIO_InitStruct.Mode = this->mode;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a1a      	ldr	r2, [r3, #32]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	635a      	str	r2, [r3, #52]	; 0x34
    this->GPIO_InitStruct.Pull = this->pull;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	639a      	str	r2, [r3, #56]	; 0x38
    this->GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2202      	movs	r2, #2
 800157a:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_Init(this->GPIOx, &this->GPIO_InitStruct);  
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3330      	adds	r3, #48	; 0x30
 8001584:	4619      	mov	r1, r3
 8001586:	4610      	mov	r0, r2
 8001588:	f007 faf8 	bl	8008b7c <HAL_GPIO_Init>
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <_ZL9GetSectorm>:
/* Private function prototypes -----------------------------------------------*/

/* Private functions ---------------------------------------------------------*/

static uint32_t GetSector(uint32_t Address)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a44      	ldr	r2, [pc, #272]	; (80016b4 <_ZL9GetSectorm+0x120>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d806      	bhi.n	80015b6 <_ZL9GetSectorm+0x22>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80015ae:	d302      	bcc.n	80015b6 <_ZL9GetSectorm+0x22>
  {
    sector = FLASH_SECTOR_0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	e077      	b.n	80016a6 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a3f      	ldr	r2, [pc, #252]	; (80016b8 <_ZL9GetSectorm+0x124>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d806      	bhi.n	80015cc <_ZL9GetSectorm+0x38>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a3e      	ldr	r2, [pc, #248]	; (80016bc <_ZL9GetSectorm+0x128>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d302      	bcc.n	80015cc <_ZL9GetSectorm+0x38>
  {
    sector = FLASH_SECTOR_1;
 80015c6:	2301      	movs	r3, #1
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	e06c      	b.n	80016a6 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a3c      	ldr	r2, [pc, #240]	; (80016c0 <_ZL9GetSectorm+0x12c>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d806      	bhi.n	80015e2 <_ZL9GetSectorm+0x4e>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a3b      	ldr	r2, [pc, #236]	; (80016c4 <_ZL9GetSectorm+0x130>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d302      	bcc.n	80015e2 <_ZL9GetSectorm+0x4e>
  {
    sector = FLASH_SECTOR_2;
 80015dc:	2302      	movs	r3, #2
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	e061      	b.n	80016a6 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a38      	ldr	r2, [pc, #224]	; (80016c8 <_ZL9GetSectorm+0x134>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d206      	bcs.n	80015f8 <_ZL9GetSectorm+0x64>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a37      	ldr	r2, [pc, #220]	; (80016cc <_ZL9GetSectorm+0x138>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d302      	bcc.n	80015f8 <_ZL9GetSectorm+0x64>
  {
    sector = FLASH_SECTOR_3;
 80015f2:	2303      	movs	r3, #3
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	e056      	b.n	80016a6 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a35      	ldr	r2, [pc, #212]	; (80016d0 <_ZL9GetSectorm+0x13c>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d206      	bcs.n	800160e <_ZL9GetSectorm+0x7a>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a31      	ldr	r2, [pc, #196]	; (80016c8 <_ZL9GetSectorm+0x134>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d902      	bls.n	800160e <_ZL9GetSectorm+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8001608:	2304      	movs	r3, #4
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	e04b      	b.n	80016a6 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a30      	ldr	r2, [pc, #192]	; (80016d4 <_ZL9GetSectorm+0x140>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d206      	bcs.n	8001624 <_ZL9GetSectorm+0x90>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a2d      	ldr	r2, [pc, #180]	; (80016d0 <_ZL9GetSectorm+0x13c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d902      	bls.n	8001624 <_ZL9GetSectorm+0x90>
  {
    sector = FLASH_SECTOR_5;
 800161e:	2305      	movs	r3, #5
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	e040      	b.n	80016a6 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a2c      	ldr	r2, [pc, #176]	; (80016d8 <_ZL9GetSectorm+0x144>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d206      	bcs.n	800163a <_ZL9GetSectorm+0xa6>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a29      	ldr	r2, [pc, #164]	; (80016d4 <_ZL9GetSectorm+0x140>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d902      	bls.n	800163a <_ZL9GetSectorm+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8001634:	2306      	movs	r3, #6
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	e035      	b.n	80016a6 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a27      	ldr	r2, [pc, #156]	; (80016dc <_ZL9GetSectorm+0x148>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d206      	bcs.n	8001650 <_ZL9GetSectorm+0xbc>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a24      	ldr	r2, [pc, #144]	; (80016d8 <_ZL9GetSectorm+0x144>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d902      	bls.n	8001650 <_ZL9GetSectorm+0xbc>
  {
    sector = FLASH_SECTOR_7;
 800164a:	2307      	movs	r3, #7
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	e02a      	b.n	80016a6 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0809FFFF) && (Address >= 0x08080000))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a23      	ldr	r2, [pc, #140]	; (80016e0 <_ZL9GetSectorm+0x14c>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d206      	bcs.n	8001666 <_ZL9GetSectorm+0xd2>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a20      	ldr	r2, [pc, #128]	; (80016dc <_ZL9GetSectorm+0x148>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d902      	bls.n	8001666 <_ZL9GetSectorm+0xd2>
  {
    sector = FLASH_SECTOR_8;
 8001660:	2308      	movs	r3, #8
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	e01f      	b.n	80016a6 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x080BFFFF) && (Address >= 0x080A0000))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a1e      	ldr	r2, [pc, #120]	; (80016e4 <_ZL9GetSectorm+0x150>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d206      	bcs.n	800167c <_ZL9GetSectorm+0xe8>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a1b      	ldr	r2, [pc, #108]	; (80016e0 <_ZL9GetSectorm+0x14c>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d902      	bls.n	800167c <_ZL9GetSectorm+0xe8>
  {
    sector = FLASH_SECTOR_9;
 8001676:	2309      	movs	r3, #9
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	e014      	b.n	80016a6 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x080DFFFF) && (Address >= 0x080C0000))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a1a      	ldr	r2, [pc, #104]	; (80016e8 <_ZL9GetSectorm+0x154>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d806      	bhi.n	8001692 <_ZL9GetSectorm+0xfe>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <_ZL9GetSectorm+0x150>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d902      	bls.n	8001692 <_ZL9GetSectorm+0xfe>
  {
    sector = FLASH_SECTOR_10;
 800168c:	230a      	movs	r3, #10
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	e009      	b.n	80016a6 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x080FFFFF) && (Address >= 0x080E0000))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a15      	ldr	r2, [pc, #84]	; (80016ec <_ZL9GetSectorm+0x158>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d805      	bhi.n	80016a6 <_ZL9GetSectorm+0x112>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a14      	ldr	r2, [pc, #80]	; (80016f0 <_ZL9GetSectorm+0x15c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d901      	bls.n	80016a6 <_ZL9GetSectorm+0x112>
  {
    sector = FLASH_SECTOR_11;
 80016a2:	230b      	movs	r3, #11
 80016a4:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 80016a6:	68fb      	ldr	r3, [r7, #12]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	08003ffe 	.word	0x08003ffe
 80016b8:	08007ffe 	.word	0x08007ffe
 80016bc:	08004000 	.word	0x08004000
 80016c0:	0800bffe 	.word	0x0800bffe
 80016c4:	08008000 	.word	0x08008000
 80016c8:	0800ffff 	.word	0x0800ffff
 80016cc:	0800c000 	.word	0x0800c000
 80016d0:	0801ffff 	.word	0x0801ffff
 80016d4:	0803ffff 	.word	0x0803ffff
 80016d8:	0805ffff 	.word	0x0805ffff
 80016dc:	0807ffff 	.word	0x0807ffff
 80016e0:	0809ffff 	.word	0x0809ffff
 80016e4:	080bffff 	.word	0x080bffff
 80016e8:	080dfffe 	.word	0x080dfffe
 80016ec:	080ffffe 	.word	0x080ffffe
 80016f0:	080dffff 	.word	0x080dffff

080016f4 <_Z13FLASH_If_Initv>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{ 
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
   HAL_FLASH_Unlock(); 
 80016f8:	f006 ffca 	bl	8008690 <HAL_FLASH_Unlock>
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}

08001700 <_Z14FLASH_If_Erasem>:
  * @param  StartSector: start of user flash area
  * @retval 0: user flash area successfully erased
  *         1: error occurred
  */
int8_t FLASH_If_Erase(uint32_t StartSector)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	; 0x28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t FlashAddress;
 
  FlashAddress = StartSector;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
     be done by word */ 
 
  if (FlashAddress <= (uint32_t) USER_FLASH_LAST_PAGE_ADDRESS)
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	4a14      	ldr	r2, [pc, #80]	; (8001760 <_Z14FLASH_If_Erasem+0x60>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d81e      	bhi.n	8001752 <_Z14FLASH_If_Erasem+0x52>
  {
    FLASH_EraseInitTypeDef FLASH_EraseInitStruct;
    uint32_t sectornb = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
    
    FLASH_EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001718:	2300      	movs	r3, #0
 800171a:	613b      	str	r3, [r7, #16]
    FLASH_EraseInitStruct.Sector = GetSector(FlashAddress);
 800171c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800171e:	f7ff ff39 	bl	8001594 <_ZL9GetSectorm>
 8001722:	4603      	mov	r3, r0
 8001724:	61bb      	str	r3, [r7, #24]
    FLASH_EraseInitStruct.NbSectors = 1;
 8001726:	2301      	movs	r3, #1
 8001728:	61fb      	str	r3, [r7, #28]
    FLASH_EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800172a:	2302      	movs	r3, #2
 800172c:	623b      	str	r3, [r7, #32]
    
    if (HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &sectornb) != HAL_OK)
 800172e:	f107 020c 	add.w	r2, r7, #12
 8001732:	f107 0310 	add.w	r3, r7, #16
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f007 f8f7 	bl	800892c <HAL_FLASHEx_Erase>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	bf14      	ite	ne
 8001744:	2301      	movne	r3, #1
 8001746:	2300      	moveq	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <_Z14FLASH_If_Erasem+0x56>
      return (1);
 800174e:	2301      	movs	r3, #1
 8001750:	e002      	b.n	8001758 <_Z14FLASH_If_Erasem+0x58>
  }
  else
  {
    return (1);
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <_Z14FLASH_If_Erasem+0x58>
  }

  return (0);
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3728      	adds	r7, #40	; 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	080e0000 	.word	0x080e0000

08001764 <_Z14FLASH_If_WritePVmPmt>:
  * @retval 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(__IO uint32_t* FlashAddress, uint32_t* Data ,uint16_t DataLength)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	4613      	mov	r3, r2
 8001770:	80fb      	strh	r3, [r7, #6]
  uint32_t i = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]

  for (i = 0; (i < DataLength) && (*FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	429a      	cmp	r2, r3
 8001780:	d206      	bcs.n	8001790 <_Z14FLASH_If_WritePVmPmt+0x2c>
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a1f      	ldr	r2, [pc, #124]	; (8001804 <_Z14FLASH_If_WritePVmPmt+0xa0>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d801      	bhi.n	8001790 <_Z14FLASH_If_WritePVmPmt+0x2c>
 800178c:	2301      	movs	r3, #1
 800178e:	e000      	b.n	8001792 <_Z14FLASH_If_WritePVmPmt+0x2e>
 8001790:	2300      	movs	r3, #0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d031      	beq.n	80017fa <_Z14FLASH_If_WritePVmPmt+0x96>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */ 
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, *FlashAddress,  *(uint32_t*)(Data+i)) == HAL_OK)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6819      	ldr	r1, [r3, #0]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	4413      	add	r3, r2
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	2002      	movs	r0, #2
 80017ac:	f006 ff1c 	bl	80085e8 <HAL_FLASH_Program>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	bf0c      	ite	eq
 80017b6:	2301      	moveq	r3, #1
 80017b8:	2300      	movne	r3, #0
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d016      	beq.n	80017ee <_Z14FLASH_If_WritePVmPmt+0x8a>
    {
     /* Check the written value */
      if (*(uint32_t*)*FlashAddress != *(uint32_t*)(Data+i))
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	68b9      	ldr	r1, [r7, #8]
 80017cc:	440b      	add	r3, r1
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	bf14      	ite	ne
 80017d4:	2301      	movne	r3, #1
 80017d6:	2300      	moveq	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <_Z14FLASH_If_WritePVmPmt+0x7e>
      {
        /* Flash content doesn't match SRAM content */
        return(2);
 80017de:	2302      	movs	r3, #2
 80017e0:	e00c      	b.n	80017fc <_Z14FLASH_If_WritePVmPmt+0x98>
      }
      /* Increment FLASH destination address */
      *FlashAddress += 4;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	1d1a      	adds	r2, r3, #4
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	e001      	b.n	80017f2 <_Z14FLASH_If_WritePVmPmt+0x8e>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      return (1);
 80017ee:	2301      	movs	r3, #1
 80017f0:	e004      	b.n	80017fc <_Z14FLASH_If_WritePVmPmt+0x98>
  for (i = 0; (i < DataLength) && (*FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3301      	adds	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	e7bf      	b.n	800177a <_Z14FLASH_If_WritePVmPmt+0x16>
    }
  }

  return (0);
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	080ffffb 	.word	0x080ffffb

08001808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	2b00      	cmp	r3, #0
 800181a:	db0a      	blt.n	8001832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	490c      	ldr	r1, [pc, #48]	; (8001854 <__NVIC_SetPriority+0x4c>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	440b      	add	r3, r1
 800182c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001830:	e00a      	b.n	8001848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4908      	ldr	r1, [pc, #32]	; (8001858 <__NVIC_SetPriority+0x50>)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	3b04      	subs	r3, #4
 8001840:	0112      	lsls	r2, r2, #4
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	440b      	add	r3, r1
 8001846:	761a      	strb	r2, [r3, #24]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e100 	.word	0xe000e100
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <_ZNK19ArduinoJson6101_11014CollectionData4headEv>:
  VariantData *get(size_t index) const;

  template <typename TAdaptedString>
  VariantData *get(TAdaptedString key) const;

  VariantSlot *head() const {
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
    return _head;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
  }
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>:
  // - no constructor
  // - no destructor
  // - no virtual
  // - no inheritance

  VariantData* data() {
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(&_content);
 800187a:	687b      	ldr	r3, [r7, #4]
  }
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <_ZN19ArduinoJson6101_11011VariantSlot4nextEv>:

  const VariantData* data() const {
    return reinterpret_cast<const VariantData*>(&_content);
  }

  VariantSlot* next() {
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
    return _next ? this + _next : 0;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d006      	beq.n	80018a6 <_ZN19ArduinoJson6101_11011VariantSlot4nextEv+0x20>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	4413      	add	r3, r2
 80018a4:	e000      	b.n	80018a8 <_ZN19ArduinoJson6101_11011VariantSlot4nextEv+0x22>
 80018a6:	2300      	movs	r3, #0
  }
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <_ZN19ArduinoJson6101_11011VariantSlot14setNextNotNullEPS0_>:

  void setNext(VariantSlot* slot) {
    _next = VariantSlotDiff(slot ? slot - this : 0);
  }

  void setNextNotNull(VariantSlot* slot) {
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(slot != 0);
    _next = VariantSlotDiff(slot - this);
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	111b      	asrs	r3, r3, #4
 80018c4:	b21a      	sxth	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	815a      	strh	r2, [r3, #10]
  }
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <_ZN19ArduinoJson6101_11011VariantSlot11setOwnedKeyENS_8not_nullIPKcEE>:

  void setOwnedKey(not_null<const char*> k) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
    _flags |= KEY_IS_OWNED;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	7a1b      	ldrb	r3, [r3, #8]
 80018e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	721a      	strb	r2, [r3, #8]
    _key = k.get();
 80018ec:	463b      	mov	r3, r7
 80018ee:	4618      	mov	r0, r3
 80018f0:	f001 fca2 	bl	8003238 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>
 80018f4:	4602      	mov	r2, r0
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	60da      	str	r2, [r3, #12]
  }
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_ZNK19ArduinoJson6101_11011VariantSlot3keyEv>:
  void setLinkedKey(not_null<const char*> k) {
    _flags &= VALUE_MASK;
    _key = k.get();
  }

  const char* key() const {
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
    return _key;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
  }
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <_ZN19ArduinoJson6101_11011VariantSlot5clearEv>:

  bool ownsKey() const {
    return (_flags & KEY_IS_OWNED) != 0;
  }

  void clear() {
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
    _next = 0;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	815a      	strh	r2, [r3, #10]
    _flags = 0;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	721a      	strb	r2, [r3, #8]
    _key = 0;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
  }
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <_ZN19ArduinoJson6101_11010addPaddingEj>:
  const size_t mask = sizeof(void *) - 1;
  size_t addr = reinterpret_cast<size_t>(ptr);
  return (addr & mask) == 0;
}

inline size_t addPadding(size_t bytes) {
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  const size_t mask = sizeof(void *) - 1;
 8001944:	2303      	movs	r3, #3
 8001946:	60fb      	str	r3, [r7, #12]
  return (bytes + mask) & ~mask;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3303      	adds	r3, #3
 800194c:	f023 0303 	bic.w	r3, r3, #3
}
 8001950:	4618      	mov	r0, r3
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>:
//               ^              ^
//             _left          _right

class MemoryPool {
 public:
  MemoryPool(char* buf, size_t capa)
 800195a:	b480      	push	{r7}
 800195c:	b085      	sub	sp, #20
 800195e:	af00      	add	r7, sp, #0
 8001960:	60f8      	str	r0, [r7, #12]
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
      : _begin(buf),
        _left(buf),
        _right(buf ? buf + capa : 0),
        _end(buf ? buf + capa : 0) {
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	68ba      	ldr	r2, [r7, #8]
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	605a      	str	r2, [r3, #4]
        _right(buf ? buf + capa : 0),
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x26>
 8001978:	68ba      	ldr	r2, [r7, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	e000      	b.n	8001982 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x28>
 8001980:	2300      	movs	r3, #0
        _end(buf ? buf + capa : 0) {
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	6093      	str	r3, [r2, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3a>
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	e000      	b.n	8001996 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3c>
 8001994:	2300      	movs	r3, #0
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	60d3      	str	r3, [r2, #12]
    ARDUINOJSON_ASSERT(isAligned(_begin));
    ARDUINOJSON_ASSERT(isAligned(_right));
    ARDUINOJSON_ASSERT(isAligned(_end));
  }
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4618      	mov	r0, r3
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>:

  void* buffer() {
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
    return _begin;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
  }
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <_ZN19ArduinoJson6101_11010MemoryPool12allocVariantEv>:

  size_t size() const {
    return size_t(_left - _begin + _end - _right);
  }

  VariantSlot* allocVariant() {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
    return allocRight<VariantSlot>();
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f001 fc42 	bl	800324e <_ZN19ArduinoJson6101_11010MemoryPool10allocRightINS_11VariantSlotEEEPT_v>
 80019ca:	4603      	mov	r3, r0
  }
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <_ZN19ArduinoJson6101_11010MemoryPool21allocExpandableStringEv>:
    _left += n;
    checkInvariants();
    return s;
  }

  StringSlot allocExpandableString() {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
    StringSlot s;
    s.value = _left;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	601a      	str	r2, [r3, #0]
    s.size = size_t(_right - _left);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	461a      	mov	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	605a      	str	r2, [r3, #4]
    _left = _right;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	605a      	str	r2, [r3, #4]
    checkInvariants();
 80019fe:	6838      	ldr	r0, [r7, #0]
 8001a00:	f000 f862 	bl	8001ac8 <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>
    return s;
 8001a04:	bf00      	nop
  }
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <_ZN19ArduinoJson6101_11010MemoryPool12freezeStringERNS_10StringSlotEj>:

  void freezeString(StringSlot& s, size_t newSize) {
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b084      	sub	sp, #16
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
    _left -= (s.size - newSize);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	1acb      	subs	r3, r1, r3
 8001a26:	441a      	add	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	605a      	str	r2, [r3, #4]
    s.size = newSize;
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	605a      	str	r2, [r3, #4]
    checkInvariants();
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f000 f848 	bl	8001ac8 <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>
  }
 8001a38:	bf00      	nop
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_ZN19ArduinoJson6101_11010MemoryPool5clearEv>:

  void clear() {
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
    _left = _begin;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	605a      	str	r2, [r3, #4]
    _right = _end;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68da      	ldr	r2, [r3, #12]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	609a      	str	r2, [r3, #8]
  }
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <_ZNK19ArduinoJson6101_11010MemoryPool8canAllocEj>:

  bool canAlloc(size_t bytes) const {
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	6039      	str	r1, [r7, #0]
    return _left + bytes <= _right;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	441a      	add	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	bf94      	ite	ls
 8001a7c:	2301      	movls	r3, #1
 8001a7e:	2300      	movhi	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
  }
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj>:
  template <typename T>
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
    if (!canAlloc(bytes)) return 0;
 8001a96:	6839      	ldr	r1, [r7, #0]
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ffe2 	bl	8001a62 <_ZNK19ArduinoJson6101_11010MemoryPool8canAllocEj>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f083 0301 	eor.w	r3, r3, #1
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj+0x22>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e008      	b.n	8001ac0 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj+0x34>
    _right -= bytes;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	425b      	negs	r3, r3
 8001ab6:	441a      	add	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	609a      	str	r2, [r3, #8]
    return _right;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
  }
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>:
 private:
  StringSlot* allocStringSlot() {
    return allocRight<StringSlot>();
  }

  void checkInvariants() {
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_begin <= _left);
    ARDUINOJSON_ASSERT(_left <= _right);
    ARDUINOJSON_ASSERT(_right <= _end);
    ARDUINOJSON_ASSERT(isAligned(_right));
  }
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr

08001ada <_ZN19ArduinoJson6101_11021ConstRamStringAdapterC1EPKc>:

namespace ARDUINOJSON_NAMESPACE {

class ConstRamStringAdapter {
 public:
  ConstRamStringAdapter(const char* str = 0) : _str(str) {}
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr

08001af6 <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc>:

  bool equals(const char* expected) const {
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b084      	sub	sp, #16
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	6039      	str	r1, [r7, #0]
    const char* actual = _str;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	60fb      	str	r3, [r7, #12]
    if (!actual || !expected) return actual == expected;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc+0x1c>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d107      	bne.n	8001b22 <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc+0x2c>
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	bf0c      	ite	eq
 8001b1a:	2301      	moveq	r3, #1
 8001b1c:	2300      	movne	r3, #0
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	e009      	b.n	8001b36 <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc+0x40>
    return strcmp(actual, expected) == 0;
 8001b22:	6839      	ldr	r1, [r7, #0]
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f7fe fb4d 	bl	80001c4 <strcmp>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bf0c      	ite	eq
 8001b30:	2301      	moveq	r3, #1
 8001b32:	2300      	movne	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
  }
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <_ZN19ArduinoJson6101_11011adaptStringEPKc>:

 protected:
  const char* _str;
};

inline ConstRamStringAdapter adaptString(const char* str) {
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b084      	sub	sp, #16
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  return ConstRamStringAdapter(str);
 8001b46:	f107 030c 	add.w	r3, r7, #12
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ffc4 	bl	8001ada <_ZN19ArduinoJson6101_11021ConstRamStringAdapterC1EPKc>
 8001b52:	68fb      	ldr	r3, [r7, #12]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <_ZN19ArduinoJson6101_11011VariantData7asArrayEv>:

  const char *asString() const;

  bool asBoolean() const;

  CollectionData *asArray() {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
    return isArray() ? &_content.asCollection : 0;
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f81b 	bl	8001ba0 <_ZNK19ArduinoJson6101_11011VariantData7isArrayEv>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <_ZN19ArduinoJson6101_11011VariantData7asArrayEv+0x18>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	e000      	b.n	8001b76 <_ZN19ArduinoJson6101_11011VariantData7asArrayEv+0x1a>
 8001b74:	2300      	movs	r3, #0
  }
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <_ZN19ArduinoJson6101_11011VariantData8asObjectEv>:

  const CollectionData *asArray() const {
    return const_cast<VariantData *>(this)->asArray();
  }

  CollectionData *asObject() {
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
    return isObject() ? &_content.asCollection : 0;
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f81c 	bl	8001bc4 <_ZNK19ArduinoJson6101_11011VariantData8isObjectEv>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <_ZN19ArduinoJson6101_11011VariantData8asObjectEv+0x18>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	e000      	b.n	8001b98 <_ZN19ArduinoJson6101_11011VariantData8asObjectEv+0x1a>
 8001b96:	2300      	movs	r3, #0
  }
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <_ZNK19ArduinoJson6101_11011VariantData7isArrayEv>:
      default:
        return true;
    }
  }

  bool isArray() const {
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
    return (_flags & VALUE_IS_ARRAY) != 0;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	7a1b      	ldrb	r3, [r3, #8]
 8001bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	bf14      	ite	ne
 8001bb4:	2301      	movne	r3, #1
 8001bb6:	2300      	moveq	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
  }
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <_ZNK19ArduinoJson6101_11011VariantData8isObjectEv>:

  bool isString() const {
    return type() == VALUE_IS_LINKED_STRING || type() == VALUE_IS_OWNED_STRING;
  }

  bool isObject() const {
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
    return (_flags & VALUE_IS_OBJECT) != 0;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	7a1b      	ldrb	r3, [r3, #8]
 8001bd0:	f003 0320 	and.w	r3, r3, #32
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	bf14      	ite	ne
 8001bd8:	2301      	movne	r3, #1
 8001bda:	2300      	moveq	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
  }
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>:
  template <typename TAdaptedString>
  void remove(TAdaptedString key) {
    if (isObject()) _content.asCollection.remove(key);
  }

  void setBoolean(bool value) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	70fb      	strb	r3, [r7, #3]
    setType(VALUE_IS_BOOLEAN);
 8001bf4:	2105      	movs	r1, #5
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f893 	bl	8001d22 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = static_cast<UInt>(value);
 8001bfc:	78fa      	ldrb	r2, [r7, #3]
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <_ZN19ArduinoJson6101_11011VariantData8setFloatEd>:

  void setFloat(Float value) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_FLOAT);
 8001c1c:	2108      	movs	r1, #8
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	f000 f87f 	bl	8001d22 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asFloat = value;
 8001c24:	68f9      	ldr	r1, [r7, #12]
 8001c26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c2a:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <_ZN19ArduinoJson6101_11011VariantData18setPositiveIntegerEy>:
    } else {
      setNegativeInteger(~static_cast<UInt>(value) + 1);
    }
  }

  void setPositiveInteger(UInt value) {
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b084      	sub	sp, #16
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_POSITIVE_INTEGER);
 8001c42:	2106      	movs	r1, #6
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f000 f86c 	bl	8001d22 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = value;
 8001c4a:	68f9      	ldr	r1, [r7, #12]
 8001c4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c50:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8001c54:	bf00      	nop
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <_ZN19ArduinoJson6101_11011VariantData18setNegativeIntegerEy>:

  void setNegativeInteger(UInt value) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_NEGATIVE_INTEGER);
 8001c68:	2107      	movs	r1, #7
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 f859 	bl	8001d22 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = value;
 8001c70:	68f9      	ldr	r1, [r7, #12]
 8001c72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c76:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>:
    } else {
      setType(VALUE_IS_NULL);
    }
  }

  void setNull() {
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_NULL);
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f848 	bl	8001d22 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
  }
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <_ZN19ArduinoJson6101_11011VariantData14setOwnedStringENS_8not_nullIPKcEE>:

  void setOwnedString(not_null<const char *> s) {
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	6039      	str	r1, [r7, #0]
    setType(VALUE_IS_OWNED_STRING);
 8001ca4:	2104      	movs	r1, #4
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f83b 	bl	8001d22 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asString = s.get();
 8001cac:	463b      	mov	r3, r7
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f001 fac2 	bl	8003238 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	601a      	str	r2, [r3, #0]
  }
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <_ZN19ArduinoJson6101_11011VariantData7toArrayEv>:
  void setUnsignedInteger(UInt value) {
    setType(VALUE_IS_POSITIVE_INTEGER);
    _content.asInteger = static_cast<UInt>(value);
  }

  CollectionData &toArray() {
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_ARRAY);
 8001cca:	2140      	movs	r1, #64	; 0x40
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f828 	bl	8001d22 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asCollection.clear();
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 f94f 	bl	8001f78 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>
    return _content.asCollection;
 8001cda:	687b      	ldr	r3, [r7, #4]
  }
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_ZN19ArduinoJson6101_11011VariantData8toObjectEv>:

  CollectionData &toObject() {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_OBJECT);
 8001cec:	2120      	movs	r1, #32
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f817 	bl	8001d22 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asCollection.clear();
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 f93e 	bl	8001f78 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>
    return _content.asCollection;
 8001cfc:	687b      	ldr	r3, [r7, #4]
  }
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <_ZNK19ArduinoJson6101_11011VariantData4typeEv>:
    if (var) return var;
    return _content.asCollection.add(key, pool);
  }

 private:
  uint8_t type() const {
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
    return _flags & VALUE_MASK;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	7a1b      	ldrb	r3, [r3, #8]
 8001d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d16:	b2db      	uxtb	r3, r3
  }
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr

08001d22 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>:

  void setType(uint8_t t) {
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	70fb      	strb	r3, [r7, #3]
    _flags &= KEY_IS_OWNED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	7a1b      	ldrb	r3, [r3, #8]
 8001d32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	721a      	strb	r2, [r3, #8]
    _flags |= t;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7a1a      	ldrb	r2, [r3, #8]
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	721a      	strb	r2, [r3, #8]
  }
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <_ZN19ArduinoJson6101_1108slotDataEPNS_11VariantSlotE>:
    var = var->next();
  }
  return n;
}

inline VariantData* slotData(VariantSlot* slot) {
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<VariantData*>(slot);
 8001d5c:	687b      	ldr	r3, [r7, #4]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE>:

inline const CollectionData *variantAsObject(const VariantData *var) {
  return var != 0 ? var->asObject() : 0;
}

inline CollectionData *variantAsObject(VariantData *var) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  return var != 0 ? var->asObject() : 0;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d004      	beq.n	8001d80 <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE+0x18>
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff ff01 	bl	8001b7e <_ZN19ArduinoJson6101_11011VariantData8asObjectEv>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	e000      	b.n	8001d82 <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE+0x1a>
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>:
  VariantRef _variant;
};

class ArrayIterator {
 public:
  ArrayIterator() : _slot(0) {}
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <_ZN19ArduinoJson6101_11013ArrayIteratorC1EPNS_10MemoryPoolEPNS_11VariantSlotE>:
  explicit ArrayIterator(MemoryPool *pool, VariantSlot *slot)
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
      : _pool(pool), _slot(slot) {}
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <_ZNK19ArduinoJson6101_11013ArrayIteratordeEv>:

  VariantRef operator*() const {
 8001dc8:	b590      	push	{r4, r7, lr}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
    return VariantRef(_pool, _slot->data());
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681c      	ldr	r4, [r3, #0]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fd49 	bl	8001872 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 8001de0:	4603      	mov	r3, r0
 8001de2:	60fc      	str	r4, [r7, #12]
 8001de4:	60bb      	str	r3, [r7, #8]
  friend class VariantConstRef;

 public:
  // Intenal use only
  FORCE_INLINE VariantRef(MemoryPool *pool, VariantData *data)
      : base_type(data), _pool(pool) {}
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f001 fa4b 	bl	8003286 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	bf00      	nop
  }
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd90      	pop	{r4, r7, pc}

08001e00 <_ZNK19ArduinoJson6101_11013ArrayIteratorneERKS0_>:

  bool operator==(const ArrayIterator &other) const {
    return _slot == other._slot;
  }

  bool operator!=(const ArrayIterator &other) const {
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
    return _slot != other._slot;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	bf14      	ite	ne
 8001e16:	2301      	movne	r3, #1
 8001e18:	2300      	moveq	r3, #0
 8001e1a:	b2db      	uxtb	r3, r3
  }
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr

08001e26 <_ZN19ArduinoJson6101_11013ArrayIteratorppEv>:

  ArrayIterator &operator++() {
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
    _slot = _slot->next();
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fd27 	bl	8001886 <_ZN19ArduinoJson6101_11011VariantSlot4nextEv>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	605a      	str	r2, [r3, #4]
    return *this;
 8001e3e:	687b      	ldr	r3, [r7, #4]
  }
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <_ZN19ArduinoJson6101_11012JsonDocument5clearEv>:
  template <typename T>
  typename VariantConstAs<T>::type as() const {
    return getVariant().template as<T>();
  }

  void clear() {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
    _pool.clear();
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fdf4 	bl	8001a40 <_ZN19ArduinoJson6101_11010MemoryPool5clearEv>
    _data.setNull();
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3310      	adds	r3, #16
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff10 	bl	8001c82 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>
  }
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>:
    clear();
    return getVariant().template to<T>();
  }

  // for internal use only
  MemoryPool& memoryPool() {
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
    return _pool;
 8001e72:	687b      	ldr	r3, [r7, #4]
  }
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <_ZN19ArduinoJson6101_11012JsonDocument4dataEv>:

  VariantData& data() {
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
    return _data;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3310      	adds	r3, #16
  }
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>:
      const TString& key) {
    _data.remove(adaptString(key));
  }

 protected:
  JsonDocument(MemoryPool pool) : _pool(pool) {
 8001e94:	b084      	sub	sp, #16
 8001e96:	b590      	push	{r4, r7, lr}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	f107 001c 	add.w	r0, r7, #28
 8001ea2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	461c      	mov	r4, r3
 8001eaa:	f107 031c 	add.w	r3, r7, #28
 8001eae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    _data.setNull();
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3310      	adds	r3, #16
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff fee2 	bl	8001c82 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>
  }
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001eca:	b004      	add	sp, #16
 8001ecc:	4770      	bx	lr

08001ece <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>:
#include <stdlib.h>  // malloc, free

namespace ARDUINOJSON_NAMESPACE {

struct DefaultAllocator {
  void* allocate(size_t n) {
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	6039      	str	r1, [r7, #0]
    return malloc(n);
 8001ed8:	6838      	ldr	r0, [r7, #0]
 8001eda:	f011 fc37 	bl	801374c <malloc>
 8001ede:	4603      	mov	r3, r0
  }
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>:

  void deallocate(void* p) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
    free(p);
 8001ef2:	6838      	ldr	r0, [r7, #0]
 8001ef4:	f011 fc32 	bl	801375c <free>
  }
 8001ef8:	bf00      	nop
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>:
#include "../Variant/VariantData.hpp"
#include "CollectionData.hpp"

namespace ARDUINOJSON_NAMESPACE {

inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = pool->allocVariant();
 8001f0a:	6838      	ldr	r0, [r7, #0]
 8001f0c:	f7ff fd56 	bl	80019bc <_ZN19ArduinoJson6101_11010MemoryPool12allocVariantEv>
 8001f10:	60f8      	str	r0, [r7, #12]
  if (!slot) return 0;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x1c>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	e017      	b.n	8001f4c <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x4c>

  if (_tail) {
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d009      	beq.n	8001f38 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x38>
    _tail->setNextNotNull(slot);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	68f9      	ldr	r1, [r7, #12]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fcc1 	bl	80018b2 <_ZN19ArduinoJson6101_11011VariantSlot14setNextNotNullEPS0_>
    _tail = slot;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	e005      	b.n	8001f44 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x44>
  } else {
    _head = slot;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	601a      	str	r2, [r3, #0]
    _tail = slot;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	605a      	str	r2, [r3, #4]
  }

  slot->clear();
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f7ff fce7 	bl	8001918 <_ZN19ArduinoJson6101_11011VariantSlot5clearEv>
  return slot;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <_ZN19ArduinoJson6101_11014CollectionData3addEPNS_10MemoryPoolE>:

inline VariantData* CollectionData::add(MemoryPool* pool) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  return slotData(addSlot(pool));
 8001f5e:	6839      	ldr	r1, [r7, #0]
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff ffcd 	bl	8001f00 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>
 8001f66:	4603      	mov	r3, r0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fef3 	bl	8001d54 <_ZN19ArduinoJson6101_1108slotDataEPNS_11VariantSlotE>
 8001f6e:	4603      	mov	r3, r0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>:
  VariantSlot* slot = addSlot(pool);
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}

inline void CollectionData::clear() {
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  _head = 0;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
  _tail = 0;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	605a      	str	r2, [r3, #4]
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr

08001f96 <_ZN19ArduinoJson6101_1107isdigitEc>:

#pragma once

namespace ARDUINOJSON_NAMESPACE {

inline bool isdigit(char c) {
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	2b2f      	cmp	r3, #47	; 0x2f
 8001fa4:	d904      	bls.n	8001fb0 <_ZN19ArduinoJson6101_1107isdigitEc+0x1a>
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	2b39      	cmp	r3, #57	; 0x39
 8001faa:	d801      	bhi.n	8001fb0 <_ZN19ArduinoJson6101_1107isdigitEc+0x1a>
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <_ZN19ArduinoJson6101_1107isdigitEc+0x1c>
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr

08001fbc <_ZNK19ArduinoJson6101_11011VariantData8asStringEv>:
    default:
      return 0;
  }
}

inline const char *VariantData::asString() const {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  switch (type()) {
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff fe9e 	bl	8001d06 <_ZNK19ArduinoJson6101_11011VariantData4typeEv>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	3b03      	subs	r3, #3
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d802      	bhi.n	8001fd8 <_ZNK19ArduinoJson6101_11011VariantData8asStringEv+0x1c>
    case VALUE_IS_LINKED_STRING:
    case VALUE_IS_OWNED_STRING:
      return _content.asString;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	e000      	b.n	8001fda <_ZNK19ArduinoJson6101_11011VariantData8asStringEv+0x1e>
    default:
      return 0;
 8001fd8:	2300      	movs	r3, #0
  }
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <_ZN19ArduinoJson6101_11013StringBuilderC1EPNS_10MemoryPoolE>:

namespace ARDUINOJSON_NAMESPACE {

class StringBuilder {
 public:
  explicit StringBuilder(MemoryPool* parent) : _parent(parent), _size(0) {
 8001fe2:	b590      	push	{r4, r7, lr}
 8001fe4:	b085      	sub	sp, #20
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	605a      	str	r2, [r3, #4]
    _slot = _parent->allocExpandableString();
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fc      	ldr	r4, [r7, #12]
 8001ffe:	463b      	mov	r3, r7
 8002000:	4611      	mov	r1, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fce6 	bl	80019d4 <_ZN19ArduinoJson6101_11010MemoryPool21allocExpandableStringEv>
 8002008:	f104 0308 	add.w	r3, r4, #8
 800200c:	463a      	mov	r2, r7
 800200e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002012:	e883 0003 	stmia.w	r3, {r0, r1}
  }
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4618      	mov	r0, r3
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	bd90      	pop	{r4, r7, pc}

08002020 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>:

  void append(const char* s, size_t n) {
    while (n-- > 0) append(*s++);
  }

  void append(char c) {
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	70fb      	strb	r3, [r7, #3]
    if (!_slot.value) return;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d014      	beq.n	800205e <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x3e>

    if (_size >= _slot.size) {
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	429a      	cmp	r2, r3
 800203e:	d303      	bcc.n	8002048 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x28>
      _slot.value = 0;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
      return;
 8002046:	e00b      	b.n	8002060 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x40>
    }

    _slot.value[_size++] = c;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	1c58      	adds	r0, r3, #1
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	6048      	str	r0, [r1, #4]
 8002056:	4413      	add	r3, r2
 8002058:	78fa      	ldrb	r2, [r7, #3]
 800205a:	701a      	strb	r2, [r3, #0]
 800205c:	e000      	b.n	8002060 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x40>
    if (!_slot.value) return;
 800205e:	bf00      	nop
  }
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>:

  char* complete() {
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
    append('\0');
 8002070:	2100      	movs	r1, #0
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff ffd4 	bl	8002020 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
    if (_slot.value) {
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d009      	beq.n	8002094 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv+0x2c>
      _parent->freezeString(_slot, _size);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f103 0108 	add.w	r1, r3, #8
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	461a      	mov	r2, r3
 8002090:	f7ff fcbd 	bl	8001a0e <_ZN19ArduinoJson6101_11010MemoryPool12freezeStringERNS_10StringSlotEj>
    }
    return _slot.value;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
  }
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <_ZN19ArduinoJson6101_11012StringCopierC1EPNS_10MemoryPoolE>:

class StringCopier {
 public:
  typedef ARDUINOJSON_NAMESPACE::StringBuilder StringBuilder;

  StringCopier(MemoryPool* pool) : _pool(pool) {}
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4618      	mov	r0, r3
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>:

  StringBuilder startString() {
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
    return StringBuilder(_pool);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4619      	mov	r1, r3
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ff88 	bl	8001fe2 <_ZN19ArduinoJson6101_11013StringBuilderC1EPNS_10MemoryPoolE>
  }
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc>:

class UnsafeCharPointerReader {
  const char* _ptr;

 public:
  explicit UnsafeCharPointerReader(const char* ptr)
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
      : _ptr(ptr ? ptr : reinterpret_cast<const char*>("")) {}
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x14>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	e000      	b.n	80020f2 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x16>
 80020f0:	4b04      	ldr	r3, [pc, #16]	; (8002104 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x28>)
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	080148f0 	.word	0x080148f0

08002108 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReader4readEv>:

  char read() {
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
    return static_cast<char>(*_ptr++);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	1c59      	adds	r1, r3, #1
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6011      	str	r1, [r2, #0]
 800211a:	781b      	ldrb	r3, [r3, #0]
  }
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr

08002126 <_ZNK19ArduinoJson6101_11023UnsafeCharPointerReader5endedEv>:

  bool ended() const {
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
    // we cannot know, that's why it's unsafe
    return false;
 800212e:	2300      	movs	r3, #0
  }
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr

0800213a <_ZNK19ArduinoJson6101_11020DeserializationError14safeBoolHelperEv>:
namespace ARDUINOJSON_NAMESPACE {

class DeserializationError {
  // safe bool idiom
  typedef void (DeserializationError::*bool_type)() const;
  void safeBoolHelper() const {}
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>:
    NotSupported,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : _code(c) {}
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	70fb      	strb	r3, [r7, #3]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	78fa      	ldrb	r2, [r7, #3]
 800215c:	701a      	strb	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
	...

0800216c <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>:
  friend bool operator!=(Code lhs, const DeserializationError& rhs) {
    return lhs != rhs._code;
  }

  // Behaves like a bool
  operator bool_type() const {
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
    return _code != Ok ? &DeserializationError::safeBoolHelper : 0;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x20>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	e005      	b.n	8002198 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x2c>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a05      	ldr	r2, [pc, #20]	; (80021a4 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x38>)
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	605a      	str	r2, [r3, #4]
  }
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	0800213b 	.word	0x0800213b

080021a8 <_ZNK19ArduinoJson6101_11020DeserializationError4codeEv>:
  friend bool operator!=(const DeserializationError& err, bool value) {
    return static_cast<bool>(err) != value;
  }

  // Returns internal enum, useful for switch statement
  Code code() const {
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
    return _code;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	781b      	ldrb	r3, [r3, #0]
  }
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr

080021be <_ZN19ArduinoJson6101_11012NestingLimitC1Ev>:
#include "../Configuration.hpp"

namespace ARDUINOJSON_NAMESPACE {

struct NestingLimit {
  NestingLimit() : value(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2232      	movs	r2, #50	; 0x32
 80021ca:	701a      	strb	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc>:
    }
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	71fb      	strb	r3, [r7, #7]
    const char *p = escapeTable(true);
 80021e2:	2001      	movs	r0, #1
 80021e4:	f000 f818 	bl	8002218 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb>
 80021e8:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0') return c;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x1e>
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	e00c      	b.n	8002210 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c) return p[1];
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	79fa      	ldrb	r2, [r7, #7]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d103      	bne.n	8002208 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x30>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	3301      	adds	r3, #1
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	e003      	b.n	8002210 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	3302      	adds	r3, #2
 800220c:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0') return c;
 800220e:	e7ec      	b.n	80021ea <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x12>
    }
  }
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb>:

 private:
  static const char *escapeTable(bool excludeIdenticals) {
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	71fb      	strb	r3, [r7, #7]
    return &"\"\"\\\\b\bf\fn\nr\rt\t"[excludeIdenticals ? 4 : 0];
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x14>
 8002228:	2304      	movs	r3, #4
 800222a:	e000      	b.n	800222e <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x16>
 800222c:	2300      	movs	r3, #0
 800222e:	4a03      	ldr	r2, [pc, #12]	; (800223c <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x24>)
 8002230:	4413      	add	r3, r2
  }
 8002232:	4618      	mov	r0, r3
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	080148f4 	.word	0x080148f4

08002240 <TIM1_UP_TIM10_IRQHandler>:
#include "interrupt.h"

extern "C" {

	void TIM1_UP_TIM10_IRQHandler()
	{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
	  if(TIM1->SR & TIM_SR_UIF) // if UIF flag is set
 8002244:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <TIM1_UP_TIM10_IRQHandler+0x30>)
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b00      	cmp	r3, #0
 800224e:	bf14      	ite	ne
 8002250:	2301      	movne	r3, #1
 8002252:	2300      	moveq	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d007      	beq.n	800226a <TIM1_UP_TIM10_IRQHandler+0x2a>
	  {
		TIM1->SR &= ~TIM_SR_UIF; // clear UIF flag
 800225a:	4b05      	ldr	r3, [pc, #20]	; (8002270 <TIM1_UP_TIM10_IRQHandler+0x30>)
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	4a04      	ldr	r2, [pc, #16]	; (8002270 <TIM1_UP_TIM10_IRQHandler+0x30>)
 8002260:	f023 0301 	bic.w	r3, r3, #1
 8002264:	6113      	str	r3, [r2, #16]

		Interrupt::TIM1_Wrapper();
 8002266:	f003 fa3f 	bl	80056e8 <_ZN9Interrupt12TIM1_WrapperEv>
	  }
	}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40010000 	.word	0x40010000

08002274 <TIM2_IRQHandler>:

	void TIM2_IRQHandler()
	{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
	  if(TIM2->SR & TIM_SR_UIF) // if UIF flag is set
 8002278:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	bf14      	ite	ne
 8002286:	2301      	movne	r3, #1
 8002288:	2300      	moveq	r3, #0
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d009      	beq.n	80022a4 <TIM2_IRQHandler+0x30>
	  {
		TIM2->SR &= ~TIM_SR_UIF; // clear UIF flag
 8002290:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800229a:	f023 0301 	bic.w	r3, r3, #1
 800229e:	6113      	str	r3, [r2, #16]

		Interrupt::TIM2_Wrapper();
 80022a0:	f003 fa30 	bl	8005704 <_ZN9Interrupt12TIM2_WrapperEv>
	  }
	}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <DMA2_Stream2_IRQHandler>:


	void DMA2_Stream2_IRQHandler(void)
	{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
		Interrupt::DMA2_Stream2_Wrapper();
 80022ac:	f003 fa38 	bl	8005720 <_ZN9Interrupt20DMA2_Stream2_WrapperEv>
	}
 80022b0:	bf00      	nop
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <_Z13createThreadsv>:
#include "extern.h"


void createThreads(void)
{
 80022b4:	b598      	push	{r3, r4, r7, lr}
 80022b6:	af00      	add	r7, sp, #0
    baseThread = new pruThread(TIM1, TIM1_UP_TIM10_IRQn, base_freq);
 80022b8:	2030      	movs	r0, #48	; 0x30
 80022ba:	f011 f848 	bl	801334e <_Znwj>
 80022be:	4603      	mov	r3, r0
 80022c0:	461c      	mov	r4, r3
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <_Z13createThreadsv+0x54>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2219      	movs	r2, #25
 80022c8:	4910      	ldr	r1, [pc, #64]	; (800230c <_Z13createThreadsv+0x58>)
 80022ca:	4620      	mov	r0, r4
 80022cc:	f004 f858 	bl	8006380 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <_Z13createThreadsv+0x5c>)
 80022d2:	601c      	str	r4, [r3, #0]
    NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2);
 80022d4:	2102      	movs	r1, #2
 80022d6:	2019      	movs	r0, #25
 80022d8:	f7ff fa96 	bl	8001808 <__NVIC_SetPriority>

    servoThread = new pruThread(TIM2, TIM2_IRQn , servo_freq);
 80022dc:	2030      	movs	r0, #48	; 0x30
 80022de:	f011 f836 	bl	801334e <_Znwj>
 80022e2:	4603      	mov	r3, r0
 80022e4:	461c      	mov	r4, r3
 80022e6:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <_Z13createThreadsv+0x60>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	221c      	movs	r2, #28
 80022ec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80022f0:	4620      	mov	r0, r4
 80022f2:	f004 f845 	bl	8006380 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>
 80022f6:	4b08      	ldr	r3, [pc, #32]	; (8002318 <_Z13createThreadsv+0x64>)
 80022f8:	601c      	str	r4, [r3, #0]
    NVIC_SetPriority(TIM2_IRQn , 3);
 80022fa:	2103      	movs	r1, #3
 80022fc:	201c      	movs	r0, #28
 80022fe:	f7ff fa83 	bl	8001808 <__NVIC_SetPriority>
}
 8002302:	bf00      	nop
 8002304:	bd98      	pop	{r3, r4, r7, pc}
 8002306:	bf00      	nop
 8002308:	20000000 	.word	0x20000000
 800230c:	40010000 	.word	0x40010000
 8002310:	20000178 	.word	0x20000178
 8002314:	20000004 	.word	0x20000004
 8002318:	20000174 	.word	0x20000174

0800231c <__io_putchar>:
/* USER CODE BEGIN 0 */

// re-target printf to UART2 by redeclaring week function in syscalls.c
extern "C" {
	int __io_putchar(int ch)
	{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002324:	1d39      	adds	r1, r7, #4
 8002326:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800232a:	2201      	movs	r2, #1
 800232c:	4803      	ldr	r0, [pc, #12]	; (800233c <__io_putchar+0x20>)
 800232e:	f007 faba 	bl	80098a6 <HAL_UART_Transmit>
	  return ch;
 8002332:	687b      	ldr	r3, [r7, #4]
	}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	200000ec 	.word	0x200000ec

08002340 <_Z9checkJsonv>:
DynamicJsonDocument doc(JSON_BUFF_SIZE);
JsonObject thread;
JsonObject module;

int8_t checkJson()
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0
	metadata_t* meta = (metadata_t*)JSON_UPLOAD_ADDRESS;
 8002346:	4b38      	ldr	r3, [pc, #224]	; (8002428 <_Z9checkJsonv+0xe8>)
 8002348:	61bb      	str	r3, [r7, #24]
	uint32_t* json = (uint32_t*)(JSON_UPLOAD_ADDRESS + METADATA_LEN);
 800234a:	4b38      	ldr	r3, [pc, #224]	; (800242c <_Z9checkJsonv+0xec>)
 800234c:	617b      	str	r3, [r7, #20]

	// Check length is reasonable
	if (meta->length > (USER_FLASH_END_ADDRESS - JSON_UPLOAD_ADDRESS))
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002356:	d308      	bcc.n	800236a <_Z9checkJsonv+0x2a>
	{
		newJson = false;
 8002358:	4b35      	ldr	r3, [pc, #212]	; (8002430 <_Z9checkJsonv+0xf0>)
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]
		printf("JSON Config length incorrect\n");
 800235e:	4835      	ldr	r0, [pc, #212]	; (8002434 <_Z9checkJsonv+0xf4>)
 8002360:	f011 fb7c 	bl	8013a5c <puts>
		return -1;
 8002364:	f04f 33ff 	mov.w	r3, #4294967295
 8002368:	e059      	b.n	800241e <_Z9checkJsonv+0xde>
	}

	// Enable & Reset CRC
	RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
 800236a:	4b33      	ldr	r3, [pc, #204]	; (8002438 <_Z9checkJsonv+0xf8>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	4a32      	ldr	r2, [pc, #200]	; (8002438 <_Z9checkJsonv+0xf8>)
 8002370:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002374:	6313      	str	r3, [r2, #48]	; 0x30
	CRC->CR = 1;
 8002376:	4b31      	ldr	r3, [pc, #196]	; (800243c <_Z9checkJsonv+0xfc>)
 8002378:	2201      	movs	r2, #1
 800237a:	609a      	str	r2, [r3, #8]

	// Compute CRC
	// Note: __RBIT is used so that CRC will match standard calculation
	for (uint32_t i = 0; i < meta->length; i++) CRC->DR = __RBIT(*(json+i));
 800237c:	2300      	movs	r3, #0
 800237e:	61fb      	str	r3, [r7, #28]
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	429a      	cmp	r2, r3
 8002388:	d210      	bcs.n	80023ac <_Z9checkJsonv+0x6c>
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4413      	add	r3, r2
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a29      	ldr	r2, [pc, #164]	; (800243c <_Z9checkJsonv+0xfc>)
 8002396:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	fa93 f3a3 	rbit	r3, r3
 800239e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	3301      	adds	r3, #1
 80023a8:	61fb      	str	r3, [r7, #28]
 80023aa:	e7e9      	b.n	8002380 <_Z9checkJsonv+0x40>
	crc32 = __RBIT(CRC->DR) ^ 0xFFFFFFFF;
 80023ac:	4b23      	ldr	r3, [pc, #140]	; (800243c <_Z9checkJsonv+0xfc>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	fa93 f3a3 	rbit	r3, r3
 80023b8:	607b      	str	r3, [r7, #4]
  return result;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	43db      	mvns	r3, r3
 80023be:	4a20      	ldr	r2, [pc, #128]	; (8002440 <_Z9checkJsonv+0x100>)
 80023c0:	6013      	str	r3, [r2, #0]

	printf("Length = %d\n", meta->length);
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	4619      	mov	r1, r3
 80023c8:	481e      	ldr	r0, [pc, #120]	; (8002444 <_Z9checkJsonv+0x104>)
 80023ca:	f011 fac1 	bl	8013950 <iprintf>
	printf("JSON length = %d\n", meta->jsonLength);
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	4619      	mov	r1, r3
 80023d4:	481c      	ldr	r0, [pc, #112]	; (8002448 <_Z9checkJsonv+0x108>)
 80023d6:	f011 fabb 	bl	8013950 <iprintf>
	printf("crc32 = %x\n", crc32);
 80023da:	4b19      	ldr	r3, [pc, #100]	; (8002440 <_Z9checkJsonv+0x100>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4619      	mov	r1, r3
 80023e0:	481a      	ldr	r0, [pc, #104]	; (800244c <_Z9checkJsonv+0x10c>)
 80023e2:	f011 fab5 	bl	8013950 <iprintf>

	// Disable CRC
	RCC->AHB1ENR &= ~RCC_AHB1ENR_CRCEN;
 80023e6:	4b14      	ldr	r3, [pc, #80]	; (8002438 <_Z9checkJsonv+0xf8>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a13      	ldr	r2, [pc, #76]	; (8002438 <_Z9checkJsonv+0xf8>)
 80023ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30

	// Check CRC
	if (crc32 != meta->crc32)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	4b12      	ldr	r3, [pc, #72]	; (8002440 <_Z9checkJsonv+0x100>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d008      	beq.n	8002410 <_Z9checkJsonv+0xd0>
	{
		newJson = false;
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <_Z9checkJsonv+0xf0>)
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
		printf("JSON Config file CRC incorrect\n");
 8002404:	4812      	ldr	r0, [pc, #72]	; (8002450 <_Z9checkJsonv+0x110>)
 8002406:	f011 fb29 	bl	8013a5c <puts>
		return -1;
 800240a:	f04f 33ff 	mov.w	r3, #4294967295
 800240e:	e006      	b.n	800241e <_Z9checkJsonv+0xde>
	}

	// JSON is OK, don't check it again
	newJson = false;
 8002410:	4b07      	ldr	r3, [pc, #28]	; (8002430 <_Z9checkJsonv+0xf0>)
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
	printf("JSON Config file received Ok\n");
 8002416:	480f      	ldr	r0, [pc, #60]	; (8002454 <_Z9checkJsonv+0x114>)
 8002418:	f011 fb20 	bl	8013a5c <puts>
	return 1;
 800241c:	2301      	movs	r3, #1
}
 800241e:	4618      	mov	r0, r3
 8002420:	3720      	adds	r7, #32
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	080d0000 	.word	0x080d0000
 800242c:	080d0200 	.word	0x080d0200
 8002430:	200002d0 	.word	0x200002d0
 8002434:	08014904 	.word	0x08014904
 8002438:	40023800 	.word	0x40023800
 800243c:	40023000 	.word	0x40023000
 8002440:	200002d4 	.word	0x200002d4
 8002444:	08014924 	.word	0x08014924
 8002448:	08014934 	.word	0x08014934
 800244c:	08014948 	.word	0x08014948
 8002450:	08014954 	.word	0x08014954
 8002454:	08014974 	.word	0x08014974

08002458 <_Z8moveJsonv>:


void moveJson()
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
	metadata_t* meta = (metadata_t*)JSON_UPLOAD_ADDRESS;
 8002462:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <_Z8moveJsonv+0x6c>)
 8002464:	607b      	str	r3, [r7, #4]

	uint16_t jsonLength = meta->jsonLength;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	807b      	strh	r3, [r7, #2]

	// erase the old JSON config file
	FLASH_If_Erase(JSON_STORAGE_ADDRESS);
 800246c:	4816      	ldr	r0, [pc, #88]	; (80024c8 <_Z8moveJsonv+0x70>)
 800246e:	f7ff f947 	bl	8001700 <_Z14FLASH_If_Erasem>

	HAL_StatusTypeDef status;

	// store the length of the file in the 0th byte
	status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, JSON_STORAGE_ADDRESS, jsonLength);
 8002472:	887a      	ldrh	r2, [r7, #2]
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	4913      	ldr	r1, [pc, #76]	; (80024c8 <_Z8moveJsonv+0x70>)
 800247a:	2002      	movs	r0, #2
 800247c:	f006 f8b4 	bl	80085e8 <HAL_FLASH_Program>
 8002480:	4603      	mov	r3, r0
 8002482:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < jsonLength; i++)
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	887b      	ldrh	r3, [r7, #2]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	429a      	cmp	r2, r3
 800248e:	d215      	bcs.n	80024bc <_Z8moveJsonv+0x64>
    {
        if (status == HAL_OK)
 8002490:	7afb      	ldrb	r3, [r7, #11]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10e      	bne.n	80024b4 <_Z8moveJsonv+0x5c>
        {
            status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, (JSON_STORAGE_ADDRESS + 4 + i), *((uint8_t*)(JSON_UPLOAD_ADDRESS + METADATA_LEN + i)));
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	490c      	ldr	r1, [pc, #48]	; (80024cc <_Z8moveJsonv+0x74>)
 800249a:	4419      	add	r1, r3
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <_Z8moveJsonv+0x78>)
 80024a0:	4413      	add	r3, r2
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	2000      	movs	r0, #0
 80024ac:	f006 f89c 	bl	80085e8 <HAL_FLASH_Program>
 80024b0:	4603      	mov	r3, r0
 80024b2:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < jsonLength; i++)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	3301      	adds	r3, #1
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	e7e5      	b.n	8002488 <_Z8moveJsonv+0x30>
        }
    }

}
 80024bc:	bf00      	nop
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	080d0000 	.word	0x080d0000
 80024c8:	080e0000 	.word	0x080e0000
 80024cc:	080e0004 	.word	0x080e0004
 80024d0:	080d0200 	.word	0x080d0200

080024d4 <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:


void jsonFromFlash(std::string json)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
    int c;
    uint32_t i = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
    uint32_t jsonLength;

    printf("\n1. Loading JSON configuration file from Flash memory\n");
 80024e0:	4819      	ldr	r0, [pc, #100]	; (8002548 <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x74>)
 80024e2:	f011 fabb 	bl	8013a5c <puts>

    // read byte 0 to determine length to read
    jsonLength = *(uint32_t*)JSON_STORAGE_ADDRESS;
 80024e6:	4b19      	ldr	r3, [pc, #100]	; (800254c <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x78>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	613b      	str	r3, [r7, #16]

    if (jsonLength == 0xFFFFFFFF)
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f2:	d103      	bne.n	80024fc <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x28>
    {
    	printf("Flash storage location is empty - no config file\n\n");
 80024f4:	4816      	ldr	r0, [pc, #88]	; (8002550 <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7c>)
 80024f6:	f011 fab1 	bl	8013a5c <puts>
			c = *(uint8_t*)(JSON_STORAGE_ADDRESS + 4 + i);
			strJson.push_back(c);
		}
		printf("\n%s\n", json.c_str());
    }
}
 80024fa:	e020      	b.n	800253e <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6a>
		json.resize(jsonLength);
 80024fc:	6939      	ldr	r1, [r7, #16]
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f011 f86b 	bl	80135da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEj>
		for (i = 0; i < jsonLength; i++)
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	429a      	cmp	r2, r3
 800250e:	d20e      	bcs.n	800252e <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5a>
			c = *(uint8_t*)(JSON_STORAGE_ADDRESS + 4 + i);
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	4b10      	ldr	r3, [pc, #64]	; (8002554 <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80>)
 8002514:	4413      	add	r3, r2
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	60fb      	str	r3, [r7, #12]
			strJson.push_back(c);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	4619      	mov	r1, r3
 8002520:	480d      	ldr	r0, [pc, #52]	; (8002558 <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x84>)
 8002522:	f010 ffe6 	bl	80134f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
		for (i = 0; i < jsonLength; i++)
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	3301      	adds	r3, #1
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	e7ec      	b.n	8002508 <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>
		printf("\n%s\n", json.c_str());
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f011 f858 	bl	80135e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002534:	4603      	mov	r3, r0
 8002536:	4619      	mov	r1, r3
 8002538:	4808      	ldr	r0, [pc, #32]	; (800255c <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x88>)
 800253a:	f011 fa09 	bl	8013950 <iprintf>
}
 800253e:	bf00      	nop
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	08014994 	.word	0x08014994
 800254c:	080e0000 	.word	0x080e0000
 8002550:	080149cc 	.word	0x080149cc
 8002554:	080e0004 	.word	0x080e0004
 8002558:	200002d8 	.word	0x200002d8
 800255c:	08014a00 	.word	0x08014a00

08002560 <_Z15deserialiseJSONv>:

void deserialiseJSON()
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
    printf("\n2. Parsing JSON configuration file\n");
 8002566:	4820      	ldr	r0, [pc, #128]	; (80025e8 <_Z15deserialiseJSONv+0x88>)
 8002568:	f011 fa78 	bl	8013a5c <puts>

    const char *json = strJson.c_str();
 800256c:	481f      	ldr	r0, [pc, #124]	; (80025ec <_Z15deserialiseJSONv+0x8c>)
 800256e:	f011 f839 	bl	80135e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002572:	60f8      	str	r0, [r7, #12]

    // parse the json configuration file
    DeserializationError error = deserializeJson(doc, json);
 8002574:	f107 0308 	add.w	r3, r7, #8
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fe20 	bl	80021be <_ZN19ArduinoJson6101_11012NestingLimitC1Ev>
 800257e:	7a3a      	ldrb	r2, [r7, #8]
 8002580:	68f9      	ldr	r1, [r7, #12]
 8002582:	481b      	ldr	r0, [pc, #108]	; (80025f0 <_Z15deserialiseJSONv+0x90>)
 8002584:	f000 fee2 	bl	800334c <_ZN19ArduinoJson6101_11015deserializeJsonIKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT_NS_12NestingLimitE>
 8002588:	4603      	mov	r3, r0
 800258a:	713b      	strb	r3, [r7, #4]

    printf("Config deserialisation - ");
 800258c:	4819      	ldr	r0, [pc, #100]	; (80025f4 <_Z15deserialiseJSONv+0x94>)
 800258e:	f011 f9df 	bl	8013950 <iprintf>

    switch (error.code())
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fe07 	bl	80021a8 <_ZNK19ArduinoJson6101_11020DeserializationError4codeEv>
 800259a:	4603      	mov	r3, r0
 800259c:	2b03      	cmp	r3, #3
 800259e:	d011      	beq.n	80025c4 <_Z15deserialiseJSONv+0x64>
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	dc16      	bgt.n	80025d2 <_Z15deserialiseJSONv+0x72>
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <_Z15deserialiseJSONv+0x4e>
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d004      	beq.n	80025b6 <_Z15deserialiseJSONv+0x56>
 80025ac:	e011      	b.n	80025d2 <_Z15deserialiseJSONv+0x72>
    {
        case DeserializationError::Ok:
            printf("Deserialization succeeded\n");
 80025ae:	4812      	ldr	r0, [pc, #72]	; (80025f8 <_Z15deserialiseJSONv+0x98>)
 80025b0:	f011 fa54 	bl	8013a5c <puts>
            break;
 80025b4:	e014      	b.n	80025e0 <_Z15deserialiseJSONv+0x80>
        case DeserializationError::InvalidInput:
            printf("Invalid input!\n");
 80025b6:	4811      	ldr	r0, [pc, #68]	; (80025fc <_Z15deserialiseJSONv+0x9c>)
 80025b8:	f011 fa50 	bl	8013a5c <puts>
            configError = true;
 80025bc:	4b10      	ldr	r3, [pc, #64]	; (8002600 <_Z15deserialiseJSONv+0xa0>)
 80025be:	2201      	movs	r2, #1
 80025c0:	701a      	strb	r2, [r3, #0]
            break;
 80025c2:	e00d      	b.n	80025e0 <_Z15deserialiseJSONv+0x80>
        case DeserializationError::NoMemory:
            printf("Not enough memory\n");
 80025c4:	480f      	ldr	r0, [pc, #60]	; (8002604 <_Z15deserialiseJSONv+0xa4>)
 80025c6:	f011 fa49 	bl	8013a5c <puts>
            configError = true;
 80025ca:	4b0d      	ldr	r3, [pc, #52]	; (8002600 <_Z15deserialiseJSONv+0xa0>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	701a      	strb	r2, [r3, #0]
            break;
 80025d0:	e006      	b.n	80025e0 <_Z15deserialiseJSONv+0x80>
        default:
            printf("Deserialization failed\n");
 80025d2:	480d      	ldr	r0, [pc, #52]	; (8002608 <_Z15deserialiseJSONv+0xa8>)
 80025d4:	f011 fa42 	bl	8013a5c <puts>
            configError = true;
 80025d8:	4b09      	ldr	r3, [pc, #36]	; (8002600 <_Z15deserialiseJSONv+0xa0>)
 80025da:	2201      	movs	r2, #1
 80025dc:	701a      	strb	r2, [r3, #0]
            break;
 80025de:	bf00      	nop
    }
}
 80025e0:	bf00      	nop
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	08014a08 	.word	0x08014a08
 80025ec:	200002d8 	.word	0x200002d8
 80025f0:	200002f8 	.word	0x200002f8
 80025f4:	08014a2c 	.word	0x08014a2c
 80025f8:	08014a48 	.word	0x08014a48
 80025fc:	08014a64 	.word	0x08014a64
 8002600:	20000170 	.word	0x20000170
 8002604:	08014a74 	.word	0x08014a74
 8002608:	08014a88 	.word	0x08014a88

0800260c <_Z13configThreadsv>:


void configThreads()
{
 800260c:	b5b0      	push	{r4, r5, r7, lr}
 800260e:	b0bc      	sub	sp, #240	; 0xf0
 8002610:	af00      	add	r7, sp, #0
    if (configError) return;
 8002612:	4bca      	ldr	r3, [pc, #808]	; (800293c <_Z13configThreadsv+0x330>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 818c 	bne.w	8002934 <_Z13configThreadsv+0x328>

    printf("\n3. Configuring threads\n");
 800261c:	48c8      	ldr	r0, [pc, #800]	; (8002940 <_Z13configThreadsv+0x334>)
 800261e:	f011 fa1d 	bl	8013a5c <puts>
 8002622:	4bc8      	ldr	r3, [pc, #800]	; (8002944 <_Z13configThreadsv+0x338>)
 8002624:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002628:	4bc7      	ldr	r3, [pc, #796]	; (8002948 <_Z13configThreadsv+0x33c>)
 800262a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800262e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002632:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                    public Visitable {
  typedef MemberProxy<TObject, TStringRef> this_type;

 public:
  FORCE_INLINE MemberProxy(TObject variant, TStringRef key)
      : _object(variant), _key(key) {}
 8002636:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800263a:	623b      	str	r3, [r7, #32]
 800263c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
    return MemberProxy<JsonDocument&, TChar*>(*this, key);
 8002642:	bf00      	nop
template <typename TImpl>
class VariantCasts {
 public:
  template <typename T>
  FORCE_INLINE operator T() const {
    return impl()->template as<T>();
 8002644:	f107 0320 	add.w	r3, r7, #32
 8002648:	4618      	mov	r0, r3
 800264a:	f000 ff15 	bl	8003478 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRNS_12JsonDocumentEPKcEEE4implEv>
 800264e:	4603      	mov	r3, r0
 8002650:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002658:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    return getOrAddUpstreamMember().getOrAddMember(key);
  }

 private:
  FORCE_INLINE VariantRef getUpstreamMember() const {
    return _object.getMember(_key);
 800265c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800266c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    return VariantRef(&_pool, _data.getMember(adaptString(key)));
 8002670:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8002674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002678:	f103 0510 	add.w	r5, r3, #16
 800267c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002680:	f7ff fa5d 	bl	8001b3e <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8002684:	4603      	mov	r3, r0
 8002686:	4619      	mov	r1, r3
 8002688:	4628      	mov	r0, r5
 800268a:	f001 fd4e 	bl	800412a <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
 800268e:	4603      	mov	r3, r0
 8002690:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 8002694:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002698:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800269c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 fdf0 	bl	8003286 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 80026a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026ac:	bf00      	nop
 80026ae:	bf00      	nop
}

template <typename T>
inline typename enable_if<is_same<T, ArrayRef>::value, T>::type VariantRef::as()
    const {
  return ArrayRef(_pool, _data != 0 ? _data->asArray() : 0);
 80026b0:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80026b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <_Z13configThreadsv+0xb8>
 80026b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fa4e 	bl	8001b5c <_ZN19ArduinoJson6101_11011VariantData7asArrayEv>
 80026c0:	4603      	mov	r3, r0
 80026c2:	e000      	b.n	80026c6 <_Z13configThreadsv+0xba>
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
 80026ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 public:
  typedef ArrayIterator iterator;

  FORCE_INLINE ArrayRef() : base_type(0), _pool(0) {}
  FORCE_INLINE ArrayRef(MemoryPool* pool, CollectionData* data)
      : base_type(data), _pool(pool) {}
 80026ce:	f107 0318 	add.w	r3, r7, #24
 80026d2:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 fde3 	bl	80032a2 <_ZN19ArduinoJson6101_11012ArrayRefBaseINS_14CollectionDataEEC1EPS1_>
 80026dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
  VariantRef addElement() const {
    return VariantRef(_pool, arrayAdd(_data, _pool));
  }

  FORCE_INLINE iterator begin() const {
    if (!_data) return iterator();
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d105      	bne.n	80026fa <_Z13configThreadsv+0xee>
 80026ee:	f107 0310 	add.w	r3, r7, #16
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fb49 	bl	8001d8a <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>
 80026f8:	e00b      	b.n	8002712 <_Z13configThreadsv+0x106>
    return iterator(_pool, _data->head());
 80026fa:	69fc      	ldr	r4, [r7, #28]
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff f8ac 	bl	800185c <_ZNK19ArduinoJson6101_11014CollectionData4headEv>
 8002704:	4602      	mov	r2, r0
 8002706:	f107 0310 	add.w	r3, r7, #16
 800270a:	4621      	mov	r1, r4
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff fb49 	bl	8001da4 <_ZN19ArduinoJson6101_11013ArrayIteratorC1EPNS_10MemoryPoolEPNS_11VariantSlotE>
  }

  FORCE_INLINE iterator end() const {
    return iterator();
 8002712:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fb37 	bl	8001d8a <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>

    JsonArray Threads = doc["Threads"];

    // create objects from JSON data
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it)
 800271c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002720:	f107 0310 	add.w	r3, r7, #16
 8002724:	4611      	mov	r1, r2
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff fb6a 	bl	8001e00 <_ZNK19ArduinoJson6101_11013ArrayIteratorneERKS0_>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 8101 	beq.w	8002936 <_Z13configThreadsv+0x32a>
    {
        thread = *it;
 8002734:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002738:	f107 0210 	add.w	r2, r7, #16
 800273c:	4611      	mov	r1, r2
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fb42 	bl	8001dc8 <_ZNK19ArduinoJson6101_11013ArrayIteratordeEv>
 8002744:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fe9f 	bl	800348c <_ZNK19ArduinoJson6101_11012VariantCastsINS_10VariantRefEE4implEv>
 800274e:	4603      	mov	r3, r0
 8002750:	66bb      	str	r3, [r7, #104]	; 0x68
}

template <typename T>
inline typename enable_if<is_same<T, ObjectRef>::value, T>::type
VariantRef::as() const {
  return ObjectRef(_pool, variantAsObject(_data));
 8002752:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002754:	685c      	ldr	r4, [r3, #4]
 8002756:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fb04 	bl	8001d68 <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE>
 8002760:	4603      	mov	r3, r0
 8002762:	667c      	str	r4, [r7, #100]	; 0x64
 8002764:	663b      	str	r3, [r7, #96]	; 0x60
 public:
  typedef ObjectIterator iterator;

  FORCE_INLINE ObjectRef() : base_type(0), _pool(0) {}
  FORCE_INLINE ObjectRef(MemoryPool* buf, CollectionData* data)
      : base_type(data), _pool(buf) {}
 8002766:	f107 0308 	add.w	r3, r7, #8
 800276a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800276c:	4618      	mov	r0, r3
 800276e:	f000 fda6 	bl	80032be <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 8002772:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	bf00      	nop
 8002778:	bf00      	nop
 800277a:	4b74      	ldr	r3, [pc, #464]	; (800294c <_Z13configThreadsv+0x340>)
 800277c:	461a      	mov	r2, r3
 800277e:	f107 0308 	add.w	r3, r7, #8
 8002782:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002786:	e882 0003 	stmia.w	r2, {r0, r1}
 800278a:	4b71      	ldr	r3, [pc, #452]	; (8002950 <_Z13configThreadsv+0x344>)
 800278c:	677b      	str	r3, [r7, #116]	; 0x74
template <typename TObject>
template <typename TString>
inline typename enable_if<IsString<TString *>::value,
                          MemberProxy<const TObject &, TString *> >::type
    ObjectShortcuts<TObject>::operator[](TString *key) const {
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 800278e:	486f      	ldr	r0, [pc, #444]	; (800294c <_Z13configThreadsv+0x340>)
 8002790:	f000 fe86 	bl	80034a0 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8002794:	4603      	mov	r3, r0
 8002796:	673b      	str	r3, [r7, #112]	; 0x70
 8002798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800279a:	66fb      	str	r3, [r7, #108]	; 0x6c
      : _object(variant), _key(key) {}
 800279c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800279e:	63bb      	str	r3, [r7, #56]	; 0x38
 80027a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 80027a4:	bf00      	nop
 80027a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 fe82 	bl	80034b4 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80027b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    return _object.getMember(_key);
 80027be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80027ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  // getMember(char*) const
  // getMember(const char*) const
  // getMember(const __FlashStringHelper*) const
  template <typename TChar>
  FORCE_INLINE VariantRef getMember(TChar* key) const {
    return get_impl(adaptString(key));
 80027d2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80027d6:	f7ff f9b2 	bl	8001b3e <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 80027da:	4602      	mov	r2, r0
 80027dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027e4:	607a      	str	r2, [r7, #4]
  }

 private:
  template <typename TAdaptedString>
  FORCE_INLINE VariantRef get_impl(TAdaptedString key) const {
    return VariantRef(_pool, objectGet(_data, key));
 80027e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027ea:	685c      	ldr	r4, [r3, #4]
 80027ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f002 f81e 	bl	8004836 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 80027fa:	4603      	mov	r3, r0
 80027fc:	67fc      	str	r4, [r7, #124]	; 0x7c
 80027fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8002800:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002804:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002806:	4618      	mov	r0, r3
 8002808:	f000 fd3d 	bl	8003286 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 800280c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800280e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002810:	bf00      	nop
    return get_impl(adaptString(key));
 8002812:	bf00      	nop
 8002814:	bf00      	nop
  FORCE_INLINE typename enable_if<!is_same<T, ArrayRef>::value &&
                                      !is_same<T, ObjectRef>::value &&
                                      !is_same<T, VariantRef>::value,
                                  typename VariantAs<T>::type>::type
  as() const {
    return variantAs<T>(_data);
 8002816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002818:	4618      	mov	r0, r3
 800281a:	f001 fb1b 	bl	8003e54 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
 800281e:	4603      	mov	r3, r0
 8002820:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8002822:	bf00      	nop
 8002824:	bf00      	nop

        const char* configor = thread["Thread"];
 8002826:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800282a:	4b4a      	ldr	r3, [pc, #296]	; (8002954 <_Z13configThreadsv+0x348>)
 800282c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8002830:	4846      	ldr	r0, [pc, #280]	; (800294c <_Z13configThreadsv+0x340>)
 8002832:	f000 fe35 	bl	80034a0 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8002836:	4603      	mov	r3, r0
 8002838:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800283c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002840:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      : _object(variant), _key(key) {}
 8002844:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002848:	643b      	str	r3, [r7, #64]	; 0x40
 800284a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800284e:	647b      	str	r3, [r7, #68]	; 0x44
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8002850:	bf00      	nop
 8002852:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002856:	4618      	mov	r0, r3
 8002858:	f000 fe2c 	bl	80034b4 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 800285c:	4603      	mov	r3, r0
 800285e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002862:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002866:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    return _object.getMember(_key);
 800286a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800287a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800287e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8002882:	f7ff f95c 	bl	8001b3e <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8002886:	4602      	mov	r2, r0
 8002888:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800288c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002890:	603a      	str	r2, [r7, #0]
    return VariantRef(_pool, objectGet(_data, key));
 8002892:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002896:	685c      	ldr	r4, [r3, #4]
 8002898:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6839      	ldr	r1, [r7, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f001 ffc8 	bl	8004836 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 80028a6:	4603      	mov	r3, r0
 80028a8:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
 80028ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      : base_type(data), _pool(pool) {}
 80028b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028b4:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fce4 	bl	8003286 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 80028be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028c2:	657b      	str	r3, [r7, #84]	; 0x54
 80028c4:	bf00      	nop
    return get_impl(adaptString(key));
 80028c6:	bf00      	nop
 80028c8:	bf00      	nop
    return variantAs<T>(_data);
 80028ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028cc:	4618      	mov	r0, r3
 80028ce:	f001 fad2 	bl	8003e76 <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>
 80028d2:	4603      	mov	r3, r0
 80028d4:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 80028d6:	bf00      	nop
 80028d8:	bf00      	nop
        uint32_t    freq = thread["Frequency"];
 80028da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

        if (!strcmp(configor,"Base"))
 80028de:	491e      	ldr	r1, [pc, #120]	; (8002958 <_Z13configThreadsv+0x34c>)
 80028e0:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 80028e4:	f7fd fc6e 	bl	80001c4 <strcmp>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10a      	bne.n	8002904 <_Z13configThreadsv+0x2f8>
        {
            base_freq = freq;
 80028ee:	4a1b      	ldr	r2, [pc, #108]	; (800295c <_Z13configThreadsv+0x350>)
 80028f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80028f4:	6013      	str	r3, [r2, #0]
            printf("Setting BASE thread frequency to %d\n", base_freq);
 80028f6:	4b19      	ldr	r3, [pc, #100]	; (800295c <_Z13configThreadsv+0x350>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4619      	mov	r1, r3
 80028fc:	4818      	ldr	r0, [pc, #96]	; (8002960 <_Z13configThreadsv+0x354>)
 80028fe:	f011 f827 	bl	8013950 <iprintf>
 8002902:	e011      	b.n	8002928 <_Z13configThreadsv+0x31c>
        }
        else if (!strcmp(configor,"Servo"))
 8002904:	4917      	ldr	r1, [pc, #92]	; (8002964 <_Z13configThreadsv+0x358>)
 8002906:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800290a:	f7fd fc5b 	bl	80001c4 <strcmp>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d109      	bne.n	8002928 <_Z13configThreadsv+0x31c>
        {
            servo_freq = freq;
 8002914:	4a14      	ldr	r2, [pc, #80]	; (8002968 <_Z13configThreadsv+0x35c>)
 8002916:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800291a:	6013      	str	r3, [r2, #0]
            printf("Setting SERVO thread frequency to %d\n", servo_freq);
 800291c:	4b12      	ldr	r3, [pc, #72]	; (8002968 <_Z13configThreadsv+0x35c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4619      	mov	r1, r3
 8002922:	4812      	ldr	r0, [pc, #72]	; (800296c <_Z13configThreadsv+0x360>)
 8002924:	f011 f814 	bl	8013950 <iprintf>
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it)
 8002928:	f107 0310 	add.w	r3, r7, #16
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff fa7a 	bl	8001e26 <_ZN19ArduinoJson6101_11013ArrayIteratorppEv>
 8002932:	e6ee      	b.n	8002712 <_Z13configThreadsv+0x106>
    if (configError) return;
 8002934:	bf00      	nop
        }
    }
}
 8002936:	37f0      	adds	r7, #240	; 0xf0
 8002938:	46bd      	mov	sp, r7
 800293a:	bdb0      	pop	{r4, r5, r7, pc}
 800293c:	20000170 	.word	0x20000170
 8002940:	08014aa0 	.word	0x08014aa0
 8002944:	08014ab8 	.word	0x08014ab8
 8002948:	200002f8 	.word	0x200002f8
 800294c:	20000318 	.word	0x20000318
 8002950:	08014ac0 	.word	0x08014ac0
 8002954:	08014ac8 	.word	0x08014ac8
 8002958:	08014ad4 	.word	0x08014ad4
 800295c:	20000000 	.word	0x20000000
 8002960:	08014adc 	.word	0x08014adc
 8002964:	08014b04 	.word	0x08014b04
 8002968:	20000004 	.word	0x20000004
 800296c:	08014b0c 	.word	0x08014b0c

08002970 <_Z11loadModulesv>:

void loadModules()
{
 8002970:	b5b0      	push	{r4, r5, r7, lr}
 8002972:	b0bc      	sub	sp, #240	; 0xf0
 8002974:	af00      	add	r7, sp, #0
    printf("\n4. Loading modules\n");
 8002976:	48ce      	ldr	r0, [pc, #824]	; (8002cb0 <_Z11loadModulesv+0x340>)
 8002978:	f011 f870 	bl	8013a5c <puts>

	// Ethernet communication monitoring
	comms = new RemoraComms();
 800297c:	2018      	movs	r0, #24
 800297e:	f010 fce6 	bl	801334e <_Znwj>
 8002982:	4603      	mov	r3, r0
 8002984:	461c      	mov	r4, r3
 8002986:	4620      	mov	r0, r4
 8002988:	f002 fef8 	bl	800577c <_ZN11RemoraCommsC1Ev>
 800298c:	4bc9      	ldr	r3, [pc, #804]	; (8002cb4 <_Z11loadModulesv+0x344>)
 800298e:	601c      	str	r4, [r3, #0]
	servoThread->registerModule(comms);
 8002990:	4bc9      	ldr	r3, [pc, #804]	; (8002cb8 <_Z11loadModulesv+0x348>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4ac7      	ldr	r2, [pc, #796]	; (8002cb4 <_Z11loadModulesv+0x344>)
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	4611      	mov	r1, r2
 800299a:	4618      	mov	r0, r3
 800299c:	f003 fd3a 	bl	8006414 <_ZN9pruThread14registerModuleEP6Module>

    if (configError) return;
 80029a0:	4bc6      	ldr	r3, [pc, #792]	; (8002cbc <_Z11loadModulesv+0x34c>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f040 817f 	bne.w	8002ca8 <_Z11loadModulesv+0x338>
 80029aa:	4bc5      	ldr	r3, [pc, #788]	; (8002cc0 <_Z11loadModulesv+0x350>)
 80029ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80029b0:	4bc4      	ldr	r3, [pc, #784]	; (8002cc4 <_Z11loadModulesv+0x354>)
 80029b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      : _object(variant), _key(key) {}
 80029be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029c2:	623b      	str	r3, [r7, #32]
 80029c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
    return MemberProxy<JsonDocument&, TChar*>(*this, key);
 80029ca:	bf00      	nop
 80029cc:	f107 0320 	add.w	r3, r7, #32
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 fd51 	bl	8003478 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRNS_12JsonDocumentEPKcEEE4implEv>
 80029d6:	4603      	mov	r3, r0
 80029d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80029dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    return _object.getMember(_key);
 80029e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80029f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    return VariantRef(&_pool, _data.getMember(adaptString(key)));
 80029f8:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 80029fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a00:	f103 0510 	add.w	r5, r3, #16
 8002a04:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002a08:	f7ff f899 	bl	8001b3e <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4628      	mov	r0, r5
 8002a12:	f001 fb8a 	bl	800412a <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 8002a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      : base_type(data), _pool(pool) {}
 8002a20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a24:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 fc2c 	bl	8003286 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8002a2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop
  return ArrayRef(_pool, _data != 0 ? _data->asArray() : 0);
 8002a38:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8002a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <_Z11loadModulesv+0xdc>
 8002a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff f88a 	bl	8001b5c <_ZN19ArduinoJson6101_11011VariantData7asArrayEv>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	e000      	b.n	8002a4e <_Z11loadModulesv+0xde>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
 8002a52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      : base_type(data), _pool(pool) {}
 8002a56:	f107 0318 	add.w	r3, r7, #24
 8002a5a:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 fc1f 	bl	80032a2 <_ZN19ArduinoJson6101_11012ArrayRefBaseINS_14CollectionDataEEC1EPS1_>
 8002a64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8002a6c:	bf00      	nop
 8002a6e:	bf00      	nop
    if (!_data) return iterator();
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d105      	bne.n	8002a82 <_Z11loadModulesv+0x112>
 8002a76:	f107 0310 	add.w	r3, r7, #16
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff f985 	bl	8001d8a <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>
 8002a80:	e00b      	b.n	8002a9a <_Z11loadModulesv+0x12a>
    return iterator(_pool, _data->head());
 8002a82:	69fc      	ldr	r4, [r7, #28]
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fe fee8 	bl	800185c <_ZNK19ArduinoJson6101_11014CollectionData4headEv>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	f107 0310 	add.w	r3, r7, #16
 8002a92:	4621      	mov	r1, r4
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff f985 	bl	8001da4 <_ZN19ArduinoJson6101_11013ArrayIteratorC1EPNS_10MemoryPoolEPNS_11VariantSlotE>
    return iterator();
 8002a9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff f973 	bl	8001d8a <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>

    JsonArray Modules = doc["Modules"];

    // create objects from JSON data
    for (JsonArray::iterator it=Modules.begin(); it!=Modules.end(); ++it)
 8002aa4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002aa8:	f107 0310 	add.w	r3, r7, #16
 8002aac:	4611      	mov	r1, r2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff f9a6 	bl	8001e00 <_ZNK19ArduinoJson6101_11013ArrayIteratorneERKS0_>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 80f7 	beq.w	8002caa <_Z11loadModulesv+0x33a>
    {
        module = *it;
 8002abc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ac0:	f107 0210 	add.w	r2, r7, #16
 8002ac4:	4611      	mov	r1, r2
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff f97e 	bl	8001dc8 <_ZNK19ArduinoJson6101_11013ArrayIteratordeEv>
 8002acc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 fcdb 	bl	800348c <_ZNK19ArduinoJson6101_11012VariantCastsINS_10VariantRefEE4implEv>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	66bb      	str	r3, [r7, #104]	; 0x68
  return ObjectRef(_pool, variantAsObject(_data));
 8002ada:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002adc:	685c      	ldr	r4, [r3, #4]
 8002ade:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff f940 	bl	8001d68 <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	667c      	str	r4, [r7, #100]	; 0x64
 8002aec:	663b      	str	r3, [r7, #96]	; 0x60
      : base_type(data), _pool(buf) {}
 8002aee:	f107 0308 	add.w	r3, r7, #8
 8002af2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 fbe2 	bl	80032be <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 8002afa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	bf00      	nop
 8002b00:	bf00      	nop
 8002b02:	4b71      	ldr	r3, [pc, #452]	; (8002cc8 <_Z11loadModulesv+0x358>)
 8002b04:	461a      	mov	r2, r3
 8002b06:	f107 0308 	add.w	r3, r7, #8
 8002b0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002b0e:	e882 0003 	stmia.w	r2, {r0, r1}
 8002b12:	4b6e      	ldr	r3, [pc, #440]	; (8002ccc <_Z11loadModulesv+0x35c>)
 8002b14:	677b      	str	r3, [r7, #116]	; 0x74
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8002b16:	486c      	ldr	r0, [pc, #432]	; (8002cc8 <_Z11loadModulesv+0x358>)
 8002b18:	f000 fcc2 	bl	80034a0 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	673b      	str	r3, [r7, #112]	; 0x70
 8002b20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b22:	66fb      	str	r3, [r7, #108]	; 0x6c
      : _object(variant), _key(key) {}
 8002b24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b26:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8002b2c:	bf00      	nop
 8002b2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fcbe 	bl	80034b4 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    return _object.getMember(_key);
 8002b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002b56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    return get_impl(adaptString(key));
 8002b5a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002b5e:	f7fe ffee 	bl	8001b3e <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8002b62:	4602      	mov	r2, r0
 8002b64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b6c:	607a      	str	r2, [r7, #4]
    return VariantRef(_pool, objectGet(_data, key));
 8002b6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b72:	685c      	ldr	r4, [r3, #4]
 8002b74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f001 fe5a 	bl	8004836 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8002b82:	4603      	mov	r3, r0
 8002b84:	67fc      	str	r4, [r7, #124]	; 0x7c
 8002b86:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b8c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fb79 	bl	8003286 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8002b94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b98:	bf00      	nop
    return get_impl(adaptString(key));
 8002b9a:	bf00      	nop
 8002b9c:	bf00      	nop
    return variantAs<T>(_data);
 8002b9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f001 f957 	bl	8003e54 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8002baa:	bf00      	nop
 8002bac:	bf00      	nop

        const char* thread = module["Thread"];
 8002bae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002bb2:	4b47      	ldr	r3, [pc, #284]	; (8002cd0 <_Z11loadModulesv+0x360>)
 8002bb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8002bb8:	4843      	ldr	r0, [pc, #268]	; (8002cc8 <_Z11loadModulesv+0x358>)
 8002bba:	f000 fc71 	bl	80034a0 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002bc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bc8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      : _object(variant), _key(key) {}
 8002bcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bd0:	643b      	str	r3, [r7, #64]	; 0x40
 8002bd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002bd6:	647b      	str	r3, [r7, #68]	; 0x44
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8002bd8:	bf00      	nop
 8002bda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fc68 	bl	80034b4 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002bea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002bee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    return _object.getMember(_key);
 8002bf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8002c02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c06:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8002c0a:	f7fe ff98 	bl	8001b3e <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c18:	603a      	str	r2, [r7, #0]
    return VariantRef(_pool, objectGet(_data, key));
 8002c1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c1e:	685c      	ldr	r4, [r3, #4]
 8002c20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6839      	ldr	r1, [r7, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f001 fe04 	bl	8004836 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
 8002c34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      : base_type(data), _pool(pool) {}
 8002c38:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c3c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 fb20 	bl	8003286 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8002c46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c4a:	657b      	str	r3, [r7, #84]	; 0x54
 8002c4c:	bf00      	nop
    return get_impl(adaptString(key));
 8002c4e:	bf00      	nop
 8002c50:	bf00      	nop
    return variantAs<T>(_data);
 8002c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c54:	4618      	mov	r0, r3
 8002c56:	f001 f8fd 	bl	8003e54 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8002c5e:	bf00      	nop
 8002c60:	bf00      	nop
        const char* type = module["Type"];
 8002c62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

        if (!strcmp(thread,"Base"))
 8002c66:	491b      	ldr	r1, [pc, #108]	; (8002cd4 <_Z11loadModulesv+0x364>)
 8002c68:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8002c6c:	f7fd faaa 	bl	80001c4 <strcmp>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10d      	bne.n	8002c92 <_Z11loadModulesv+0x322>
        {
            printf("\nBase thread object\n");
 8002c76:	4818      	ldr	r0, [pc, #96]	; (8002cd8 <_Z11loadModulesv+0x368>)
 8002c78:	f010 fef0 	bl	8013a5c <puts>

            if (!strcmp(type,"Stepgen"))
 8002c7c:	4917      	ldr	r1, [pc, #92]	; (8002cdc <_Z11loadModulesv+0x36c>)
 8002c7e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8002c82:	f7fd fa9f 	bl	80001c4 <strcmp>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d107      	bne.n	8002c9c <_Z11loadModulesv+0x32c>
            {
                createStepgen();
 8002c8c:	f002 fe86 	bl	800599c <_Z13createStepgenv>
 8002c90:	e004      	b.n	8002c9c <_Z11loadModulesv+0x32c>
            }
         }
        else if (!strcmp(thread,"Servo"))
 8002c92:	4913      	ldr	r1, [pc, #76]	; (8002ce0 <_Z11loadModulesv+0x370>)
 8002c94:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8002c98:	f7fd fa94 	bl	80001c4 <strcmp>
    for (JsonArray::iterator it=Modules.begin(); it!=Modules.end(); ++it)
 8002c9c:	f107 0310 	add.w	r3, r7, #16
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff f8c0 	bl	8001e26 <_ZN19ArduinoJson6101_11013ArrayIteratorppEv>
 8002ca6:	e6f8      	b.n	8002a9a <_Z11loadModulesv+0x12a>
    if (configError) return;
 8002ca8:	bf00      	nop
        {

        }
    }

}
 8002caa:	37f0      	adds	r7, #240	; 0xf0
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bdb0      	pop	{r4, r5, r7, pc}
 8002cb0:	08014b34 	.word	0x08014b34
 8002cb4:	20000248 	.word	0x20000248
 8002cb8:	20000174 	.word	0x20000174
 8002cbc:	20000170 	.word	0x20000170
 8002cc0:	08014b48 	.word	0x08014b48
 8002cc4:	200002f8 	.word	0x200002f8
 8002cc8:	20000320 	.word	0x20000320
 8002ccc:	08014ac0 	.word	0x08014ac0
 8002cd0:	08014b50 	.word	0x08014b50
 8002cd4:	08014ad4 	.word	0x08014ad4
 8002cd8:	08014b58 	.word	0x08014b58
 8002cdc:	08014b6c 	.word	0x08014b6c
 8002ce0:	08014b04 	.word	0x08014b04

08002ce4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cea:	f004 f9fb 	bl	80070e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cee:	f000 f91d 	bl	8002f2c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LWIP_Init();
 8002cf2:	f006 ff9f 	bl	8009c34 <MX_LWIP_Init>
  MX_USART2_UART_Init();
 8002cf6:	f000 f969 	bl	8002fcc <_ZL19MX_USART2_UART_Initv>
  MX_IWDG_Init();
 8002cfa:	f000 f995 	bl	8003028 <_ZL12MX_IWDG_Initv>

  /* USER CODE BEGIN 2 */
  enum State currentState;
  enum State prevState;

  currentState = ST_SETUP;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	77fb      	strb	r3, [r7, #31]
  prevState = ST_RESET;
 8002d02:	2305      	movs	r3, #5
 8002d04:	77bb      	strb	r3, [r7, #30]

  printf("Remora-NVEM starting\n");
 8002d06:	4873      	ldr	r0, [pc, #460]	; (8002ed4 <main+0x1f0>)
 8002d08:	f010 fea8 	bl	8013a5c <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(currentState){
 8002d0c:	7ffb      	ldrb	r3, [r7, #31]
 8002d0e:	2b06      	cmp	r3, #6
 8002d10:	f200 80be 	bhi.w	8002e90 <main+0x1ac>
 8002d14:	a201      	add	r2, pc, #4	; (adr r2, 8002d1c <main+0x38>)
 8002d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1a:	bf00      	nop
 8002d1c:	08002d39 	.word	0x08002d39
 8002d20:	08002d83 	.word	0x08002d83
 8002d24:	08002dcf 	.word	0x08002dcf
 8002d28:	08002df7 	.word	0x08002df7
 8002d2c:	08002e29 	.word	0x08002e29
 8002d30:	08002e41 	.word	0x08002e41
 8002d34:	08002e83 	.word	0x08002e83
	          case ST_SETUP:
	              // do setup tasks
	              if (currentState != prevState)
 8002d38:	7ffa      	ldrb	r2, [r7, #31]
 8002d3a:	7fbb      	ldrb	r3, [r7, #30]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d002      	beq.n	8002d46 <main+0x62>
	              {
	                  printf("\n## Entering SETUP state\n\n");
 8002d40:	4865      	ldr	r0, [pc, #404]	; (8002ed8 <main+0x1f4>)
 8002d42:	f010 fe8b 	bl	8013a5c <puts>
	              }
	              prevState = currentState;
 8002d46:	7ffb      	ldrb	r3, [r7, #31]
 8002d48:	77bb      	strb	r3, [r7, #30]

	              jsonFromFlash(strJson);
 8002d4a:	463b      	mov	r3, r7
 8002d4c:	4963      	ldr	r1, [pc, #396]	; (8002edc <main+0x1f8>)
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f010 fc6e 	bl	8013630 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002d54:	463b      	mov	r3, r7
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fbbc 	bl	80024d4 <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002d5c:	463b      	mov	r3, r7
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f010 fbbe 	bl	80134e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	              deserialiseJSON();
 8002d64:	f7ff fbfc 	bl	8002560 <_Z15deserialiseJSONv>
	              configThreads();
 8002d68:	f7ff fc50 	bl	800260c <_Z13configThreadsv>
	              createThreads();
 8002d6c:	f7ff faa2 	bl	80022b4 <_Z13createThreadsv>
	              //debugThreadHigh();
	              loadModules();
 8002d70:	f7ff fdfe 	bl	8002970 <_Z11loadModulesv>
	              //debugThreadLow();
	              udpServer_init();
 8002d74:	f000 f97e 	bl	8003074 <_Z14udpServer_initv>
	              IAP_tftpd_init();
 8002d78:	f002 fc62 	bl	8005640 <_Z14IAP_tftpd_initv>

	              currentState = ST_START;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	77fb      	strb	r3, [r7, #31]
	              break;
 8002d80:	e086      	b.n	8002e90 <main+0x1ac>

	          case ST_START:
	              // do start tasks
	              if (currentState != prevState)
 8002d82:	7ffa      	ldrb	r2, [r7, #31]
 8002d84:	7fbb      	ldrb	r3, [r7, #30]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d002      	beq.n	8002d90 <main+0xac>
	              {
	                  printf("\n## Entering START state\n");
 8002d8a:	4855      	ldr	r0, [pc, #340]	; (8002ee0 <main+0x1fc>)
 8002d8c:	f010 fe66 	bl	8013a5c <puts>
	              }
	              prevState = currentState;
 8002d90:	7ffb      	ldrb	r3, [r7, #31]
 8002d92:	77bb      	strb	r3, [r7, #30]

	              if (!threadsRunning)
 8002d94:	4b53      	ldr	r3, [pc, #332]	; (8002ee4 <main+0x200>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	f083 0301 	eor.w	r3, r3, #1
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d012      	beq.n	8002dc8 <main+0xe4>
	              {
	                  // Start the threads
	                  printf("\nStarting the BASE thread\n");
 8002da2:	4851      	ldr	r0, [pc, #324]	; (8002ee8 <main+0x204>)
 8002da4:	f010 fe5a 	bl	8013a5c <puts>
	                  baseThread->startThread();
 8002da8:	4b50      	ldr	r3, [pc, #320]	; (8002eec <main+0x208>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f003 fb15 	bl	80063dc <_ZN9pruThread11startThreadEv>

	                  printf("\nStarting the SERVO thread\n");
 8002db2:	484f      	ldr	r0, [pc, #316]	; (8002ef0 <main+0x20c>)
 8002db4:	f010 fe52 	bl	8013a5c <puts>
	                  servoThread->startThread();
 8002db8:	4b4e      	ldr	r3, [pc, #312]	; (8002ef4 <main+0x210>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f003 fb0d 	bl	80063dc <_ZN9pruThread11startThreadEv>

	                  threadsRunning = true;
 8002dc2:	4b48      	ldr	r3, [pc, #288]	; (8002ee4 <main+0x200>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	701a      	strb	r2, [r3, #0]
	              }

	              currentState = ST_IDLE;
 8002dc8:	2302      	movs	r3, #2
 8002dca:	77fb      	strb	r3, [r7, #31]

	              break;
 8002dcc:	e060      	b.n	8002e90 <main+0x1ac>


	          case ST_IDLE:
	              // do something when idle
	              if (currentState != prevState)
 8002dce:	7ffa      	ldrb	r2, [r7, #31]
 8002dd0:	7fbb      	ldrb	r3, [r7, #30]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d002      	beq.n	8002ddc <main+0xf8>
	              {
	                  printf("\n## Entering IDLE state\n");
 8002dd6:	4848      	ldr	r0, [pc, #288]	; (8002ef8 <main+0x214>)
 8002dd8:	f010 fe40 	bl	8013a5c <puts>
	              }
	              prevState = currentState;
 8002ddc:	7ffb      	ldrb	r3, [r7, #31]
 8002dde:	77bb      	strb	r3, [r7, #30]

	              //wait for data before changing to running state
	              if (comms->getStatus())
 8002de0:	4b46      	ldr	r3, [pc, #280]	; (8002efc <main+0x218>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f002 fd14 	bl	8005812 <_ZN11RemoraComms9getStatusEv>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d04c      	beq.n	8002e8a <main+0x1a6>
	              {
	                  currentState = ST_RUNNING;
 8002df0:	2303      	movs	r3, #3
 8002df2:	77fb      	strb	r3, [r7, #31]
	              }

	              break;
 8002df4:	e049      	b.n	8002e8a <main+0x1a6>

	          case ST_RUNNING:
	              // do running tasks
	              if (currentState != prevState)
 8002df6:	7ffa      	ldrb	r2, [r7, #31]
 8002df8:	7fbb      	ldrb	r3, [r7, #30]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d002      	beq.n	8002e04 <main+0x120>
	              {
	                  printf("\n## Entering RUNNING state\n");
 8002dfe:	4840      	ldr	r0, [pc, #256]	; (8002f00 <main+0x21c>)
 8002e00:	f010 fe2c 	bl	8013a5c <puts>
	              }
	              prevState = currentState;
 8002e04:	7ffb      	ldrb	r3, [r7, #31]
 8002e06:	77bb      	strb	r3, [r7, #30]

	              if (comms->getStatus() == false)
 8002e08:	4b3c      	ldr	r3, [pc, #240]	; (8002efc <main+0x218>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f002 fd00 	bl	8005812 <_ZN11RemoraComms9getStatusEv>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	bf0c      	ite	eq
 8002e18:	2301      	moveq	r3, #1
 8002e1a:	2300      	movne	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d035      	beq.n	8002e8e <main+0x1aa>
	              {
	            	  currentState = ST_RESET;
 8002e22:	2305      	movs	r3, #5
 8002e24:	77fb      	strb	r3, [r7, #31]
	              }

	              break;
 8002e26:	e032      	b.n	8002e8e <main+0x1aa>

	          case ST_STOP:
	              // do stop tasks
	              if (currentState != prevState)
 8002e28:	7ffa      	ldrb	r2, [r7, #31]
 8002e2a:	7fbb      	ldrb	r3, [r7, #30]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d002      	beq.n	8002e36 <main+0x152>
	              {
	                  printf("\n## Entering STOP state\n");
 8002e30:	4834      	ldr	r0, [pc, #208]	; (8002f04 <main+0x220>)
 8002e32:	f010 fe13 	bl	8013a5c <puts>
	              }
	              prevState = currentState;
 8002e36:	7ffb      	ldrb	r3, [r7, #31]
 8002e38:	77bb      	strb	r3, [r7, #30]


	              currentState = ST_STOP;
 8002e3a:	2304      	movs	r3, #4
 8002e3c:	77fb      	strb	r3, [r7, #31]
	              break;
 8002e3e:	e027      	b.n	8002e90 <main+0x1ac>

	          case ST_RESET:
	              // do reset tasks
	              if (currentState != prevState)
 8002e40:	7ffa      	ldrb	r2, [r7, #31]
 8002e42:	7fbb      	ldrb	r3, [r7, #30]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d002      	beq.n	8002e4e <main+0x16a>
	              {
	                  printf("\n## Entering RESET state\n");
 8002e48:	482f      	ldr	r0, [pc, #188]	; (8002f08 <main+0x224>)
 8002e4a:	f010 fe07 	bl	8013a5c <puts>
	              }
	              prevState = currentState;
 8002e4e:	7ffb      	ldrb	r3, [r7, #31]
 8002e50:	77bb      	strb	r3, [r7, #30]

	              // set all of the rxData buffer to 0
	              // rxData.rxBuffer is volatile so need to do this the long way. memset cannot be used for volatile
	              printf("   Resetting rxBuffer\n");
 8002e52:	482e      	ldr	r0, [pc, #184]	; (8002f0c <main+0x228>)
 8002e54:	f010 fe02 	bl	8013a5c <puts>
	              {
	                  int n = sizeof(rxData.rxBuffer);
 8002e58:	2344      	movs	r3, #68	; 0x44
 8002e5a:	61bb      	str	r3, [r7, #24]
	                  while(n-- > 0)
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	1e5a      	subs	r2, r3, #1
 8002e60:	61ba      	str	r2, [r7, #24]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	bfcc      	ite	gt
 8002e66:	2301      	movgt	r3, #1
 8002e68:	2300      	movle	r3, #0
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <main+0x198>
	                  {
	                      rxData.rxBuffer[n] = 0;
 8002e70:	4a27      	ldr	r2, [pc, #156]	; (8002f10 <main+0x22c>)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	4413      	add	r3, r2
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]
	                  while(n-- > 0)
 8002e7a:	e7ef      	b.n	8002e5c <main+0x178>
	                  }
	              }

	              currentState = ST_IDLE;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	77fb      	strb	r3, [r7, #31]
	              break;
 8002e80:	e006      	b.n	8002e90 <main+0x1ac>

	          case ST_WDRESET:
	              // do a watch dog reset
	              printf("\n## Entering WDRESET state\n");
 8002e82:	4824      	ldr	r0, [pc, #144]	; (8002f14 <main+0x230>)
 8002e84:	f010 fdea 	bl	8013a5c <puts>

	              // force a watchdog reset by looping here
	              while(1){}
 8002e88:	e7fe      	b.n	8002e88 <main+0x1a4>
	              break;
 8002e8a:	bf00      	nop
 8002e8c:	e000      	b.n	8002e90 <main+0x1ac>
	              break;
 8002e8e:	bf00      	nop

	              break;
	  }

	  // refresh the watchdog
	  HAL_IWDG_Refresh(&hiwdg);
 8002e90:	4821      	ldr	r0, [pc, #132]	; (8002f18 <main+0x234>)
 8002e92:	f006 f86b 	bl	8008f6c <HAL_IWDG_Refresh>

	  // do Ethernet tasks
	  ethernetif_input(&gnetif);
 8002e96:	4821      	ldr	r0, [pc, #132]	; (8002f1c <main+0x238>)
 8002e98:	f007 faa2 	bl	800a3e0 <ethernetif_input>
	  sys_check_timeouts();
 8002e9c:	f00d fc06 	bl	80106ac <sys_check_timeouts>

	  if (newJson)
 8002ea0:	4b1f      	ldr	r3, [pc, #124]	; (8002f20 <main+0x23c>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f43f af30 	beq.w	8002d0c <main+0x28>
	  {
		  printf("\n\nChecking new configuration file\n");
 8002eac:	481d      	ldr	r0, [pc, #116]	; (8002f24 <main+0x240>)
 8002eae:	f010 fdd5 	bl	8013a5c <puts>
		  if (checkJson() > 0)
 8002eb2:	f7ff fa45 	bl	8002340 <_Z9checkJsonv>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bfcc      	ite	gt
 8002ebc:	2301      	movgt	r3, #1
 8002ebe:	2300      	movle	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f43f af22 	beq.w	8002d0c <main+0x28>
		  {
			  printf("Moving new config file to Flash storage\n");
 8002ec8:	4817      	ldr	r0, [pc, #92]	; (8002f28 <main+0x244>)
 8002eca:	f010 fdc7 	bl	8013a5c <puts>
			  moveJson();
 8002ece:	f7ff fac3 	bl	8002458 <_Z8moveJsonv>
			  // force a watchdog reset to force load of new configuration
			  while(1){}
 8002ed2:	e7fe      	b.n	8002ed2 <main+0x1ee>
 8002ed4:	08014b84 	.word	0x08014b84
 8002ed8:	08014b9c 	.word	0x08014b9c
 8002edc:	200002d8 	.word	0x200002d8
 8002ee0:	08014bb8 	.word	0x08014bb8
 8002ee4:	20000171 	.word	0x20000171
 8002ee8:	08014bd4 	.word	0x08014bd4
 8002eec:	20000178 	.word	0x20000178
 8002ef0:	08014bf0 	.word	0x08014bf0
 8002ef4:	20000174 	.word	0x20000174
 8002ef8:	08014c0c 	.word	0x08014c0c
 8002efc:	20000248 	.word	0x20000248
 8002f00:	08014c24 	.word	0x08014c24
 8002f04:	08014c40 	.word	0x08014c40
 8002f08:	08014c58 	.word	0x08014c58
 8002f0c:	08014c74 	.word	0x08014c74
 8002f10:	200001c0 	.word	0x200001c0
 8002f14:	08014c8c 	.word	0x08014c8c
 8002f18:	20000130 	.word	0x20000130
 8002f1c:	2000013c 	.word	0x2000013c
 8002f20:	200002d0 	.word	0x200002d0
 8002f24:	08014ca8 	.word	0x08014ca8
 8002f28:	08014ccc 	.word	0x08014ccc

08002f2c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b092      	sub	sp, #72	; 0x48
 8002f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f32:	f107 0318 	add.w	r3, r7, #24
 8002f36:	2230      	movs	r2, #48	; 0x30
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f010 fc5a 	bl	80137f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f40:	1d3b      	adds	r3, r7, #4
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	605a      	str	r2, [r3, #4]
 8002f48:	609a      	str	r2, [r3, #8]
 8002f4a:	60da      	str	r2, [r3, #12]
 8002f4c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f52:	2301      	movs	r3, #1
 8002f54:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f56:	2302      	movs	r3, #2
 8002f58:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002f60:	2319      	movs	r3, #25
 8002f62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 240;
 8002f64:	23f0      	movs	r3, #240	; 0xf0
 8002f66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f70:	f107 0318 	add.w	r3, r7, #24
 8002f74:	4618      	mov	r0, r3
 8002f76:	f006 f809 	bl	8008f8c <HAL_RCC_OscConfig>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	bf14      	ite	ne
 8002f80:	2301      	movne	r3, #1
 8002f82:	2300      	moveq	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8002f8a:	f000 f86d 	bl	8003068 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f8e:	230f      	movs	r3, #15
 8002f90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f92:	2302      	movs	r3, #2
 8002f94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f96:	2300      	movs	r3, #0
 8002f98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f9a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fa4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002fa6:	1d3b      	adds	r3, r7, #4
 8002fa8:	2103      	movs	r1, #3
 8002faa:	4618      	mov	r0, r3
 8002fac:	f006 fa3e 	bl	800942c <HAL_RCC_ClockConfig>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	bf14      	ite	ne
 8002fb6:	2301      	movne	r3, #1
 8002fb8:	2300      	moveq	r3, #0
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <_Z18SystemClock_Configv+0x98>
  {
    Error_Handler();
 8002fc0:	f000 f852 	bl	8003068 <Error_Handler>
  }
}
 8002fc4:	bf00      	nop
 8002fc6:	3748      	adds	r7, #72	; 0x48
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fd0:	4b13      	ldr	r3, [pc, #76]	; (8003020 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002fd2:	4a14      	ldr	r2, [pc, #80]	; (8003024 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002fd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002fd6:	4b12      	ldr	r3, [pc, #72]	; (8003020 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002fd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fde:	4b10      	ldr	r3, [pc, #64]	; (8003020 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fe4:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fea:	4b0d      	ldr	r3, [pc, #52]	; (8003020 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ff2:	220c      	movs	r2, #12
 8002ff4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ffc:	4b08      	ldr	r3, [pc, #32]	; (8003020 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003002:	4807      	ldr	r0, [pc, #28]	; (8003020 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003004:	f006 fc02 	bl	800980c <HAL_UART_Init>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	bf14      	ite	ne
 800300e:	2301      	movne	r3, #1
 8003010:	2300      	moveq	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8003018:	f000 f826 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800301c:	bf00      	nop
 800301e:	bd80      	pop	{r7, pc}
 8003020:	200000ec 	.word	0x200000ec
 8003024:	40004400 	.word	0x40004400

08003028 <_ZL12MX_IWDG_Initv>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800302c:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <_ZL12MX_IWDG_Initv+0x38>)
 800302e:	4a0d      	ldr	r2, [pc, #52]	; (8003064 <_ZL12MX_IWDG_Initv+0x3c>)
 8003030:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8003032:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <_ZL12MX_IWDG_Initv+0x38>)
 8003034:	2204      	movs	r2, #4
 8003036:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 499;
 8003038:	4b09      	ldr	r3, [pc, #36]	; (8003060 <_ZL12MX_IWDG_Initv+0x38>)
 800303a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800303e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003040:	4807      	ldr	r0, [pc, #28]	; (8003060 <_ZL12MX_IWDG_Initv+0x38>)
 8003042:	f005 ff51 	bl	8008ee8 <HAL_IWDG_Init>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	bf14      	ite	ne
 800304c:	2301      	movne	r3, #1
 800304e:	2300      	moveq	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <_ZL12MX_IWDG_Initv+0x32>
  {
    Error_Handler();
 8003056:	f000 f807 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	20000130 	.word	0x20000130
 8003064:	40003000 	.word	0x40003000

08003068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800306c:	b672      	cpsid	i
}
 800306e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003070:	e7fe      	b.n	8003070 <Error_Handler+0x8>
	...

08003074 <_Z14udpServer_initv>:
}
#endif /* USE_FULL_ASSERT */


void udpServer_init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   struct udp_pcb *upcb, *upcb2;
   err_t err;

   /* 1. Create a new UDP control block  */
   upcb = udp_new();
 800307a:	f00d ff01 	bl	8010e80 <udp_new>
 800307e:	60f8      	str	r0, [r7, #12]

   /* 2. Bind the upcb to the local port */
   ip_addr_t myIPADDR;
   IP_ADDR4(&myIPADDR, 10, 10, 10, 10);
 8003080:	f04f 330a 	mov.w	r3, #168430090	; 0xa0a0a0a
 8003084:	603b      	str	r3, [r7, #0]

   err = udp_bind(upcb, &myIPADDR, 27181);  // 27181 is the server UDP port
 8003086:	463b      	mov	r3, r7
 8003088:	f646 222d 	movw	r2, #27181	; 0x6a2d
 800308c:	4619      	mov	r1, r3
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f00d fdd6 	bl	8010c40 <udp_bind>
 8003094:	4603      	mov	r3, r0
 8003096:	72fb      	strb	r3, [r7, #11]


   /* 3. Set a receive callback for the upcb */
   if(err == ERR_OK)
 8003098:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d105      	bne.n	80030ac <_Z14udpServer_initv+0x38>
   {
	   udp_recv(upcb, udp_data_callback, NULL);
 80030a0:	2200      	movs	r2, #0
 80030a2:	4912      	ldr	r1, [pc, #72]	; (80030ec <_Z14udpServer_initv+0x78>)
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f00d fea7 	bl	8010df8 <udp_recv>
 80030aa:	e002      	b.n	80030b2 <_Z14udpServer_initv+0x3e>
   }
   else
   {
	   udp_remove(upcb);
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f00d feb5 	bl	8010e1c <udp_remove>
   }


   // Try making a second UDP control block...?

   upcb2 = udp_new();
 80030b2:	f00d fee5 	bl	8010e80 <udp_new>
 80030b6:	6078      	str	r0, [r7, #4]
   err = udp_bind(upcb2, &myIPADDR, 27182);  // 27182 is the server UDP port for NVMPG
 80030b8:	463b      	mov	r3, r7
 80030ba:	f646 222e 	movw	r2, #27182	; 0x6a2e
 80030be:	4619      	mov	r1, r3
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f00d fdbd 	bl	8010c40 <udp_bind>
 80030c6:	4603      	mov	r3, r0
 80030c8:	72fb      	strb	r3, [r7, #11]

   if(err == ERR_OK)
 80030ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d105      	bne.n	80030de <_Z14udpServer_initv+0x6a>
   {
	   udp_recv(upcb2, udp_mpg_callback, NULL);
 80030d2:	2200      	movs	r2, #0
 80030d4:	4906      	ldr	r1, [pc, #24]	; (80030f0 <_Z14udpServer_initv+0x7c>)
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f00d fe8e 	bl	8010df8 <udp_recv>
   }
   else
   {
	   udp_remove(upcb2);
   }
}
 80030dc:	e002      	b.n	80030e4 <_Z14udpServer_initv+0x70>
	   udp_remove(upcb2);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f00d fe9c 	bl	8010e1c <udp_remove>
}
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	080030f5 	.word	0x080030f5
 80030f0:	080031e5 	.word	0x080031e5

080030f4 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt>:

void udp_data_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
	int txlen = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
	struct pbuf *txBuf;

	// copy the UDP payload into the rxData structure
	memcpy(&rxBuffer.rxBuffer, p->payload, p->len);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6859      	ldr	r1, [r3, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	895b      	ldrh	r3, [r3, #10]
 800310e:	461a      	mov	r2, r3
 8003110:	482c      	ldr	r0, [pc, #176]	; (80031c4 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xd0>)
 8003112:	f010 fb47 	bl	80137a4 <memcpy>

	if (rxBuffer.header == PRU_READ)
 8003116:	4b2b      	ldr	r3, [pc, #172]	; (80031c4 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xd0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a2b      	ldr	r2, [pc, #172]	; (80031c8 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xd4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d10a      	bne.n	8003136 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x42>
	{
		txData.header = PRU_DATA;
 8003120:	4b2a      	ldr	r3, [pc, #168]	; (80031cc <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xd8>)
 8003122:	4a2b      	ldr	r2, [pc, #172]	; (80031d0 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xdc>)
 8003124:	601a      	str	r2, [r3, #0]
		txlen = BUFFER_SIZE;
 8003126:	2344      	movs	r3, #68	; 0x44
 8003128:	61fb      	str	r3, [r7, #28]
		comms->dataReceived();
 800312a:	4b2a      	ldr	r3, [pc, #168]	; (80031d4 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xe0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f002 fb63 	bl	80057fa <_ZN11RemoraComms12dataReceivedEv>
 8003134:	e020      	b.n	8003178 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x84>
	}
	else if (rxBuffer.header == PRU_WRITE)
 8003136:	4b23      	ldr	r3, [pc, #140]	; (80031c4 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xd0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a27      	ldr	r2, [pc, #156]	; (80031d8 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xe4>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d11b      	bne.n	8003178 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x84>
	{
		txData.header = PRU_ACKNOWLEDGE;
 8003140:	4b22      	ldr	r3, [pc, #136]	; (80031cc <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xd8>)
 8003142:	4a26      	ldr	r2, [pc, #152]	; (80031dc <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xe8>)
 8003144:	601a      	str	r2, [r3, #0]
		txlen = sizeof(txData.header);
 8003146:	2304      	movs	r3, #4
 8003148:	61fb      	str	r3, [r7, #28]
		comms->dataReceived();
 800314a:	4b22      	ldr	r3, [pc, #136]	; (80031d4 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xe0>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f002 fb53 	bl	80057fa <_ZN11RemoraComms12dataReceivedEv>

		// then move the data
		for (int i = 0; i < BUFFER_SIZE; i++)
 8003154:	2300      	movs	r3, #0
 8003156:	61bb      	str	r3, [r7, #24]
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	2b43      	cmp	r3, #67	; 0x43
 800315c:	dc0c      	bgt.n	8003178 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x84>
		{
			rxData.rxBuffer[i] = rxBuffer.rxBuffer[i];
 800315e:	4a19      	ldr	r2, [pc, #100]	; (80031c4 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xd0>)
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	4413      	add	r3, r2
 8003164:	7819      	ldrb	r1, [r3, #0]
 8003166:	4a1e      	ldr	r2, [pc, #120]	; (80031e0 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xec>)
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	4413      	add	r3, r2
 800316c:	460a      	mov	r2, r1
 800316e:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < BUFFER_SIZE; i++)
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	3301      	adds	r3, #1
 8003174:	61bb      	str	r3, [r7, #24]
 8003176:	e7ef      	b.n	8003158 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x64>
		}
	}


	// allocate pbuf from RAM
	txBuf = pbuf_alloc(PBUF_TRANSPORT, txlen, PBUF_RAM);
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	b29b      	uxth	r3, r3
 800317c:	2200      	movs	r2, #0
 800317e:	4619      	mov	r1, r3
 8003180:	2000      	movs	r0, #0
 8003182:	f007 ffc3 	bl	800b10c <pbuf_alloc>
 8003186:	6178      	str	r0, [r7, #20]

	// copy the data into the buffer
	pbuf_take(txBuf, (char*)&txData.txBuffer, txlen);
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	b29b      	uxth	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	490f      	ldr	r1, [pc, #60]	; (80031cc <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xd8>)
 8003190:	6978      	ldr	r0, [r7, #20]
 8003192:	f008 fda5 	bl	800bce0 <pbuf_take>

	// Connect to the remote client
	udp_connect(upcb, addr, port);
 8003196:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003198:	461a      	mov	r2, r3
 800319a:	6839      	ldr	r1, [r7, #0]
 800319c:	68b8      	ldr	r0, [r7, #8]
 800319e:	f00d fdbf 	bl	8010d20 <udp_connect>

	// Send a Reply to the Client
	udp_send(upcb, txBuf);
 80031a2:	6979      	ldr	r1, [r7, #20]
 80031a4:	68b8      	ldr	r0, [r7, #8]
 80031a6:	f00d fc31 	bl	8010a0c <udp_send>

	// free the UDP connection, so we can accept new clients
	udp_disconnect(upcb);
 80031aa:	68b8      	ldr	r0, [r7, #8]
 80031ac:	f00d fe0e 	bl	8010dcc <udp_disconnect>

	// Free the p_tx buffer
	pbuf_free(txBuf);
 80031b0:	6978      	ldr	r0, [r7, #20]
 80031b2:	f008 fb1d 	bl	800b7f0 <pbuf_free>

	// Free the p buffer
	pbuf_free(p);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f008 fb1a 	bl	800b7f0 <pbuf_free>
}
 80031bc:	bf00      	nop
 80031be:	3720      	adds	r7, #32
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	2000017c 	.word	0x2000017c
 80031c8:	72656164 	.word	0x72656164
 80031cc:	20000204 	.word	0x20000204
 80031d0:	64617461 	.word	0x64617461
 80031d4:	20000248 	.word	0x20000248
 80031d8:	77726974 	.word	0x77726974
 80031dc:	61636b6e 	.word	0x61636b6e
 80031e0:	200001c0 	.word	0x200001c0

080031e4 <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt>:


void udp_mpg_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
	// copy the UDP payload into the nvmpg structure
	memcpy(&mpgData.payload, p->payload, p->len);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6859      	ldr	r1, [r3, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	895b      	ldrh	r3, [r3, #10]
 80031fa:	461a      	mov	r2, r3
 80031fc:	480b      	ldr	r0, [pc, #44]	; (800322c <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x48>)
 80031fe:	f010 fad1 	bl	80137a4 <memcpy>

	// Free the p buffer
	pbuf_free(p);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f008 faf4 	bl	800b7f0 <pbuf_free>

	if (mpgData.header == PRU_NVMPG)
 8003208:	4b08      	ldr	r3, [pc, #32]	; (800322c <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x48>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a08      	ldr	r2, [pc, #32]	; (8003230 <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x4c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d108      	bne.n	8003224 <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x40>
	{
		// use a standard module interface to trigger the update of the MPG
		MPG->configure();
 8003212:	4b08      	ldr	r3, [pc, #32]	; (8003234 <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x50>)
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	4b07      	ldr	r3, [pc, #28]	; (8003234 <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x50>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	3314      	adds	r3, #20
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4610      	mov	r0, r2
 8003222:	4798      	blx	r3
	}
}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	2000024c 	.word	0x2000024c
 8003230:	6d706764 	.word	0x6d706764
 8003234:	20000288 	.word	0x20000288

08003238 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>:
 public:
  explicit not_null(T ptr) : _ptr(ptr) {
    ARDUINOJSON_ASSERT(ptr != NULL);
  }

  T get() const {
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_ptr != NULL);
    return _ptr;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
  }
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr

0800324e <_ZN19ArduinoJson6101_11010MemoryPool10allocRightINS_11VariantSlotEEEPT_v>:
  T* allocRight() {
 800324e:	b580      	push	{r7, lr}
 8003250:	b082      	sub	sp, #8
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
 8003256:	2110      	movs	r1, #16
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7fe fc17 	bl	8001a8c <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj>
 800325e:	4603      	mov	r3, r0
  }
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>:
 private:
  T _ptr;
};

template <typename T>
not_null<T> make_not_null(T ptr) {
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  ARDUINOJSON_ASSERT(ptr != NULL);
  return not_null<T>(ptr);
 8003270:	f107 030c 	add.w	r3, r7, #12
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	4618      	mov	r0, r3
 8003278:	f000 f878 	bl	800336c <_ZN19ArduinoJson6101_1108not_nullIPKcEC1ES2_>
 800327c:	68fb      	ldr	r3, [r7, #12]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>:
  VariantRefBase(TData *data) : _data(data) {}
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	6039      	str	r1, [r7, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4618      	mov	r0, r3
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	bc80      	pop	{r7}
 80032a0:	4770      	bx	lr

080032a2 <_ZN19ArduinoJson6101_11012ArrayRefBaseINS_14CollectionDataEEC1EPS1_>:
  ArrayRefBase(TData* data) : _data(data) {}
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	6039      	str	r1, [r7, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4618      	mov	r0, r3
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr

080032be <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>:
  ObjectRefBase(TData* data) : _data(data) {}
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	6039      	str	r1, [r7, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4618      	mov	r0, r3
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr

080032da <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_>:
  }
  return 0;
}

template <typename TAdaptedString>
inline VariantData* CollectionData::get(TAdaptedString key) const {
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = getSlot(key);
 80032e4:	6839      	ldr	r1, [r7, #0]
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f84e 	bl	8003388 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_>
 80032ec:	60f8      	str	r0, [r7, #12]
  return slot ? slot->data() : 0;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d004      	beq.n	80032fe <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_+0x24>
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f7fe fabc 	bl	8001872 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 80032fa:	4603      	mov	r3, r0
 80032fc:	e000      	b.n	8003300 <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_+0x26>
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>:
};

template <typename TAllocator>
class BasicJsonDocument : AllocatorOwner<TAllocator>, public JsonDocument {
 public:
  explicit BasicJsonDocument(size_t capa, TAllocator allocator = TAllocator())
 8003308:	b590      	push	{r4, r7, lr}
 800330a:	b08b      	sub	sp, #44	; 0x2c
 800330c:	af02      	add	r7, sp, #8
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	713a      	strb	r2, [r7, #4]
      : AllocatorOwner<TAllocator>(allocator), JsonDocument(allocPool(capa)) {}
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4621      	mov	r1, r4
 8003318:	4618      	mov	r0, r3
 800331a:	f000 f870 	bl	80033fe <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f103 0408 	add.w	r4, r3, #8
 8003324:	f107 0310 	add.w	r3, r7, #16
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	68f9      	ldr	r1, [r7, #12]
 800332c:	4618      	mov	r0, r3
 800332e:	f000 f84d 	bl	80033cc <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	f107 0310 	add.w	r3, r7, #16
 800333a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800333c:	4620      	mov	r0, r4
 800333e:	f7fe fda9 	bl	8001e94 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4618      	mov	r0, r3
 8003346:	3724      	adds	r7, #36	; 0x24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd90      	pop	{r4, r7, pc}

0800334c <_ZN19ArduinoJson6101_11015deserializeJsonIKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT_NS_12NestingLimitE>:
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
}

template <typename TInput>
DeserializationError deserializeJson(
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	713a      	strb	r2, [r7, #4]
    JsonDocument &doc, TInput *input,
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
 8003358:	793a      	ldrb	r2, [r7, #4]
 800335a:	68b9      	ldr	r1, [r7, #8]
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 f859 	bl	8003414 <_ZN19ArduinoJson6101_11011deserializeINS_16JsonDeserializerEKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT0_NS_12NestingLimitE>
 8003362:	4603      	mov	r3, r0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <_ZN19ArduinoJson6101_1108not_nullIPKcEC1ES2_>:
  explicit not_null(T ptr) : _ptr(ptr) {
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	601a      	str	r2, [r3, #0]
  }
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4618      	mov	r0, r3
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr

08003388 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_>:
inline VariantSlot* CollectionData::getSlot(TAdaptedString key) const {
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = _head;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60fb      	str	r3, [r7, #12]
  while (slot) {
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d011      	beq.n	80033c2 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x3a>
    if (key.equals(slot->key())) break;
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f7fe faaf 	bl	8001902 <_ZNK19ArduinoJson6101_11011VariantSlot3keyEv>
 80033a4:	4602      	mov	r2, r0
 80033a6:	463b      	mov	r3, r7
 80033a8:	4611      	mov	r1, r2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fe fba3 	bl	8001af6 <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d104      	bne.n	80033c0 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x38>
    slot = slot->next();
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f7fe fa65 	bl	8001886 <_ZN19ArduinoJson6101_11011VariantSlot4nextEv>
 80033bc:	60f8      	str	r0, [r7, #12]
  while (slot) {
 80033be:	e7eb      	b.n	8003398 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x10>
    if (key.equals(slot->key())) break;
 80033c0:	bf00      	nop
  return slot;
 80033c2:	68fb      	ldr	r3, [r7, #12]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>:
    set(src);
    return *this;
  }

 private:
  MemoryPool allocPool(size_t requiredSize) {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
    size_t capa = addPadding(requiredSize);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7fe faaf 	bl	800193c <_ZN19ArduinoJson6101_11010addPaddingEj>
 80033de:	6178      	str	r0, [r7, #20]
    return MemoryPool(reinterpret_cast<char*>(this->allocate(capa)), capa);
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	6979      	ldr	r1, [r7, #20]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 f86f 	bl	80034c8 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>
 80033ea:	4603      	mov	r3, r0
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	4619      	mov	r1, r3
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f7fe fab2 	bl	800195a <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>
  }
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>:
  AllocatorOwner(TAllocator allocator) : _allocator(allocator) {}
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
 8003406:	7039      	strb	r1, [r7, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4618      	mov	r0, r3
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr

08003414 <_ZN19ArduinoJson6101_11011deserializeINS_16JsonDeserializerEKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT0_NS_12NestingLimitE>:
//
// deserialize(JsonDocument&, char*);
// deserialize(JsonDocument&, const char*);
// deserialize(JsonDocument&, const __FlashStringHelper*);
template <template <typename, typename> class TDeserializer, typename TChar>
DeserializationError deserialize(JsonDocument &doc, TChar *input,
 8003414:	b5b0      	push	{r4, r5, r7, lr}
 8003416:	b08a      	sub	sp, #40	; 0x28
 8003418:	af02      	add	r7, sp, #8
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	713a      	strb	r2, [r7, #4]
                                 NestingLimit nestingLimit) {
  doc.clear();
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f7fe fd11 	bl	8001e48 <_ZN19ArduinoJson6101_11012JsonDocument5clearEv>
  return makeDeserializer<TDeserializer>(
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f7fe fd1f 	bl	8001e6a <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 800342c:	4604      	mov	r4, r0
 800342e:	68b8      	ldr	r0, [r7, #8]
 8003430:	f000 f859 	bl	80034e6 <_ZN19ArduinoJson6101_11010makeReaderIKcEENS_23UnsafeCharPointerReaderEPT_>
 8003434:	4605      	mov	r5, r0
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f7fe fd17 	bl	8001e6a <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 800343c:	4603      	mov	r3, r0
 800343e:	68b9      	ldr	r1, [r7, #8]
 8003440:	4618      	mov	r0, r3
 8003442:	f000 f85f 	bl	8003504 <_ZN19ArduinoJson6101_11017makeStringStorageIKcEENS_13StringStorageIPT_vE4typeERNS_10MemoryPoolES4_>
 8003446:	4602      	mov	r2, r0
 8003448:	793b      	ldrb	r3, [r7, #4]
 800344a:	f107 0010 	add.w	r0, r7, #16
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	4613      	mov	r3, r2
 8003452:	462a      	mov	r2, r5
 8003454:	4621      	mov	r1, r4
 8003456:	f000 f864 	bl	8003522 <_ZN19ArduinoJson6101_11016makeDeserializerINS_16JsonDeserializerENS_23UnsafeCharPointerReaderENS_12StringCopierEEET_IT0_T1_ERNS_10MemoryPoolES5_S6_h>
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), nestingLimit.value)
      .parse(doc.data());
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f7fe fd0f 	bl	8001e7e <_ZN19ArduinoJson6101_11012JsonDocument4dataEv>
 8003460:	4602      	mov	r2, r0
 8003462:	f107 0310 	add.w	r3, r7, #16
 8003466:	4611      	mov	r1, r2
 8003468:	4618      	mov	r0, r3
 800346a:	f000 f86d 	bl	8003548 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 800346e:	4603      	mov	r3, r0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3720      	adds	r7, #32
 8003474:	46bd      	mov	sp, r7
 8003476:	bdb0      	pop	{r4, r5, r7, pc}

08003478 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRNS_12JsonDocumentEPKcEEE4implEv>:
  }

 private:
  const TImpl *impl() const {
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
    return static_cast<const TImpl *>(this);
 8003480:	687b      	ldr	r3, [r7, #4]
  }
 8003482:	4618      	mov	r0, r3
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr

0800348c <_ZNK19ArduinoJson6101_11012VariantCastsINS_10VariantRefEE4implEv>:
  const TImpl *impl() const {
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
    return static_cast<const TImpl *>(this);
 8003494:	687b      	ldr	r3, [r7, #4]
  }
 8003496:	4618      	mov	r0, r3
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr

080034a0 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>:
  // createNestedObject(const __FlashStringHelper*) const
  template <typename TChar>
  ObjectRef createNestedObject(TChar *key) const;

 private:
  const TObject *impl() const {
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
    return static_cast<const TObject *>(this);
 80034a8:	687b      	ldr	r3, [r7, #4]
  }
 80034aa:	4618      	mov	r0, r3
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>:
  const TImpl *impl() const {
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
    return static_cast<const TImpl *>(this);
 80034bc:	687b      	ldr	r3, [r7, #4]
  }
 80034be:	4618      	mov	r0, r3
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr

080034c8 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>:
  void* allocate(size_t n) {
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
    return _allocator.allocate(n);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6839      	ldr	r1, [r7, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe fcf9 	bl	8001ece <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>
 80034dc:	4603      	mov	r3, r0
  }
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <_ZN19ArduinoJson6101_11010makeReaderIKcEENS_23UnsafeCharPointerReaderEPT_>:
    return _ptr == _end;
  }
};

template <typename TChar>
inline UnsafeCharPointerReader makeReader(TChar* input) {
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  return UnsafeCharPointerReader(reinterpret_cast<const char*>(input));
 80034ee:	f107 030c 	add.w	r3, r7, #12
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fe fdf1 	bl	80020dc <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc>
 80034fa:	68fb      	ldr	r3, [r7, #12]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <_ZN19ArduinoJson6101_11017makeStringStorageIKcEENS_13StringStorageIPT_vE4typeERNS_10MemoryPoolES4_>:
                                                       TInput& input) {
  return StringStorage<TInput>::create(pool, input);
}

template <typename TChar>
typename StringStorage<TChar*>::type makeStringStorage(MemoryPool& pool,
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
                                                       TChar* input) {
  return StringStorage<TChar*>::create(pool, input);
 800350e:	463b      	mov	r3, r7
 8003510:	4619      	mov	r1, r3
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f862 	bl	80035dc <_ZN19ArduinoJson6101_11013StringStorageIPKcvE6createERNS_10MemoryPoolERS2_>
 8003518:	4603      	mov	r3, r0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <_ZN19ArduinoJson6101_11016makeDeserializerINS_16JsonDeserializerENS_23UnsafeCharPointerReaderENS_12StringCopierEEET_IT0_T1_ERNS_10MemoryPoolES5_S6_h>:
TDeserializer<TReader, TWriter> makeDeserializer(MemoryPool &pool,
 8003522:	b580      	push	{r7, lr}
 8003524:	b086      	sub	sp, #24
 8003526:	af02      	add	r7, sp, #8
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	607a      	str	r2, [r7, #4]
 800352e:	603b      	str	r3, [r7, #0]
  return TDeserializer<TReader, TWriter>(pool, reader, writer, nestingLimit);
 8003530:	7e3b      	ldrb	r3, [r7, #24]
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68b9      	ldr	r1, [r7, #8]
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 f85e 	bl	80035fc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEEC1ERNS_10MemoryPoolES1_S2_h>
}
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>:
  DeserializationError parse(VariantData &variant) {
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
    DeserializationError err = skipSpacesAndComments();
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f86e 	bl	8003634 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8003558:	4603      	mov	r3, r0
 800355a:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 800355c:	f107 0310 	add.w	r3, r7, #16
 8003560:	f107 020c 	add.w	r2, r7, #12
 8003564:	4611      	mov	r1, r2
 8003566:	4618      	mov	r0, r3
 8003568:	f7fe fe00 	bl	800216c <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d106      	bne.n	8003580 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x38>
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x38>
 800357c:	2301      	movs	r3, #1
 800357e:	e000      	b.n	8003582 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x3a>
 8003580:	2300      	movs	r3, #0
 8003582:	f083 0301 	eor.w	r3, r3, #1
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x48>
 800358c:	7b3b      	ldrb	r3, [r7, #12]
 800358e:	e021      	b.n	80035d4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8c>
    switch (current()) {
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f92f 	bl	80037f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003596:	4603      	mov	r3, r0
 8003598:	2b5b      	cmp	r3, #91	; 0x5b
 800359a:	d002      	beq.n	80035a2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x5a>
 800359c:	2b7b      	cmp	r3, #123	; 0x7b
 800359e:	d00a      	beq.n	80035b6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x6e>
 80035a0:	e013      	b.n	80035ca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x82>
        return parseArray(variant.toArray());
 80035a2:	6838      	ldr	r0, [r7, #0]
 80035a4:	f7fe fb8d 	bl	8001cc2 <_ZN19ArduinoJson6101_11011VariantData7toArrayEv>
 80035a8:	4603      	mov	r3, r0
 80035aa:	4619      	mov	r1, r3
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f94a 	bl	8003846 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>
 80035b2:	4603      	mov	r3, r0
 80035b4:	e00e      	b.n	80035d4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8c>
        return parseObject(variant.toObject());
 80035b6:	6838      	ldr	r0, [r7, #0]
 80035b8:	f7fe fb94 	bl	8001ce4 <_ZN19ArduinoJson6101_11011VariantData8toObjectEv>
 80035bc:	4603      	mov	r3, r0
 80035be:	4619      	mov	r1, r3
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 fa67 	bl	8003a94 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>
 80035c6:	4603      	mov	r3, r0
 80035c8:	e004      	b.n	80035d4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8c>
        return parseValue(variant);
 80035ca:	6839      	ldr	r1, [r7, #0]
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fc23 	bl	8003e18 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE>
 80035d2:	4603      	mov	r3, r0
  }
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <_ZN19ArduinoJson6101_11013StringStorageIPKcvE6createERNS_10MemoryPoolERS2_>:
  static type create(MemoryPool& pool, TInput&) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
    return type(&pool);
 80035e6:	f107 030c 	add.w	r3, r7, #12
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fe fd57 	bl	80020a0 <_ZN19ArduinoJson6101_11012StringCopierC1EPNS_10MemoryPoolE>
 80035f2:	68fb      	ldr	r3, [r7, #12]
  }
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEEC1ERNS_10MemoryPoolES1_S2_h>:
  JsonDeserializer(MemoryPool &pool, TReader reader,
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	603b      	str	r3, [r7, #0]
        _loaded(false) {}
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	609a      	str	r2, [r3, #8]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	7e3a      	ldrb	r2, [r7, #24]
 8003620:	731a      	strb	r2, [r3, #12]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	739a      	strb	r2, [r3, #14]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4618      	mov	r0, r3
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr

08003634 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>:
  DeserializationError skipSpacesAndComments() {
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
      switch (current()) {
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f8d9 	bl	80037f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003642:	4603      	mov	r3, r0
 8003644:	2b2f      	cmp	r3, #47	; 0x2f
 8003646:	f200 80c7 	bhi.w	80037d8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a4>
 800364a:	a201      	add	r2, pc, #4	; (adr r2, 8003650 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1c>)
 800364c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003650:	08003711 	.word	0x08003711
 8003654:	080037d9 	.word	0x080037d9
 8003658:	080037d9 	.word	0x080037d9
 800365c:	080037d9 	.word	0x080037d9
 8003660:	080037d9 	.word	0x080037d9
 8003664:	080037d9 	.word	0x080037d9
 8003668:	080037d9 	.word	0x080037d9
 800366c:	080037d9 	.word	0x080037d9
 8003670:	080037d9 	.word	0x080037d9
 8003674:	08003721 	.word	0x08003721
 8003678:	08003721 	.word	0x08003721
 800367c:	080037d9 	.word	0x080037d9
 8003680:	080037d9 	.word	0x080037d9
 8003684:	08003721 	.word	0x08003721
 8003688:	080037d9 	.word	0x080037d9
 800368c:	080037d9 	.word	0x080037d9
 8003690:	080037d9 	.word	0x080037d9
 8003694:	080037d9 	.word	0x080037d9
 8003698:	080037d9 	.word	0x080037d9
 800369c:	080037d9 	.word	0x080037d9
 80036a0:	080037d9 	.word	0x080037d9
 80036a4:	080037d9 	.word	0x080037d9
 80036a8:	080037d9 	.word	0x080037d9
 80036ac:	080037d9 	.word	0x080037d9
 80036b0:	080037d9 	.word	0x080037d9
 80036b4:	080037d9 	.word	0x080037d9
 80036b8:	080037d9 	.word	0x080037d9
 80036bc:	080037d9 	.word	0x080037d9
 80036c0:	080037d9 	.word	0x080037d9
 80036c4:	080037d9 	.word	0x080037d9
 80036c8:	080037d9 	.word	0x080037d9
 80036cc:	080037d9 	.word	0x080037d9
 80036d0:	08003721 	.word	0x08003721
 80036d4:	080037d9 	.word	0x080037d9
 80036d8:	080037d9 	.word	0x080037d9
 80036dc:	080037d9 	.word	0x080037d9
 80036e0:	080037d9 	.word	0x080037d9
 80036e4:	080037d9 	.word	0x080037d9
 80036e8:	080037d9 	.word	0x080037d9
 80036ec:	080037d9 	.word	0x080037d9
 80036f0:	080037d9 	.word	0x080037d9
 80036f4:	080037d9 	.word	0x080037d9
 80036f8:	080037d9 	.word	0x080037d9
 80036fc:	080037d9 	.word	0x080037d9
 8003700:	080037d9 	.word	0x080037d9
 8003704:	080037d9 	.word	0x080037d9
 8003708:	080037d9 	.word	0x080037d9
 800370c:	08003729 	.word	0x08003729
          return DeserializationError::IncompleteInput;
 8003710:	f107 030c 	add.w	r3, r7, #12
 8003714:	2101      	movs	r1, #1
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe fd18 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800371c:	7b3b      	ldrb	r3, [r7, #12]
 800371e:	e064      	b.n	80037ea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
          move();
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 fbb9 	bl	8003e98 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
          continue;
 8003726:	e05f      	b.n	80037e8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b4>
          move();  // skip '/'
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 fbb5 	bl	8003e98 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
          switch (current()) {
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f860 	bl	80037f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003734:	4603      	mov	r3, r0
 8003736:	2b2a      	cmp	r3, #42	; 0x2a
 8003738:	d002      	beq.n	8003740 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x10c>
 800373a:	2b2f      	cmp	r3, #47	; 0x2f
 800373c:	d02a      	beq.n	8003794 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x160>
 800373e:	e042      	b.n	80037c6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x192>
              move();  // skip '*'
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fba9 	bl	8003e98 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
              bool wasStar = false;
 8003746:	2300      	movs	r3, #0
 8003748:	77fb      	strb	r3, [r7, #31]
                char c = current();
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f852 	bl	80037f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003750:	4603      	mov	r3, r0
 8003752:	777b      	strb	r3, [r7, #29]
                if (c == '\0') return DeserializationError::IncompleteInput;
 8003754:	7f7b      	ldrb	r3, [r7, #29]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d107      	bne.n	800376a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x136>
 800375a:	f107 0310 	add.w	r3, r7, #16
 800375e:	2101      	movs	r1, #1
 8003760:	4618      	mov	r0, r3
 8003762:	f7fe fcf3 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003766:	7c3b      	ldrb	r3, [r7, #16]
 8003768:	e03f      	b.n	80037ea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
                if (c == '/' && wasStar) {
 800376a:	7f7b      	ldrb	r3, [r7, #29]
 800376c:	2b2f      	cmp	r3, #47	; 0x2f
 800376e:	d107      	bne.n	8003780 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x14c>
 8003770:	7ffb      	ldrb	r3, [r7, #31]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d004      	beq.n	8003780 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x14c>
                  move();
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 fb8e 	bl	8003e98 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
                  break;
 800377c:	bf00      	nop
              break;
 800377e:	e02a      	b.n	80037d6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a2>
                wasStar = c == '*';
 8003780:	7f7b      	ldrb	r3, [r7, #29]
 8003782:	2b2a      	cmp	r3, #42	; 0x2a
 8003784:	bf0c      	ite	eq
 8003786:	2301      	moveq	r3, #1
 8003788:	2300      	movne	r3, #0
 800378a:	77fb      	strb	r3, [r7, #31]
                move();
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fb83 	bl	8003e98 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
              for (;;) {
 8003792:	e7da      	b.n	800374a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x116>
                move();
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 fb7f 	bl	8003e98 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
                char c = current();
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f82a 	bl	80037f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80037a0:	4603      	mov	r3, r0
 80037a2:	77bb      	strb	r3, [r7, #30]
                if (c == '\0') return DeserializationError::IncompleteInput;
 80037a4:	7fbb      	ldrb	r3, [r7, #30]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d107      	bne.n	80037ba <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x186>
 80037aa:	f107 0314 	add.w	r3, r7, #20
 80037ae:	2101      	movs	r1, #1
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fe fccb 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80037b6:	7d3b      	ldrb	r3, [r7, #20]
 80037b8:	e017      	b.n	80037ea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
                if (c == '\n') break;
 80037ba:	7fbb      	ldrb	r3, [r7, #30]
 80037bc:	2b0a      	cmp	r3, #10
 80037be:	d000      	beq.n	80037c2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x18e>
              for (;;) {
 80037c0:	e7e8      	b.n	8003794 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x160>
                if (c == '\n') break;
 80037c2:	bf00      	nop
              break;
 80037c4:	e007      	b.n	80037d6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a2>
              return DeserializationError::InvalidInput;
 80037c6:	f107 0318 	add.w	r3, r7, #24
 80037ca:	2102      	movs	r1, #2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fe fcbd 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80037d2:	7e3b      	ldrb	r3, [r7, #24]
 80037d4:	e009      	b.n	80037ea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
          break;
 80037d6:	e007      	b.n	80037e8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b4>
          return DeserializationError::Ok;
 80037d8:	f107 031c 	add.w	r3, r7, #28
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe fcb4 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80037e4:	7f3b      	ldrb	r3, [r7, #28]
 80037e6:	e000      	b.n	80037ea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
    for (;;) {
 80037e8:	e728      	b.n	800363c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x8>
  }
 80037ea:	4618      	mov	r0, r3
 80037ec:	3720      	adds	r7, #32
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop

080037f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>:
  char current() {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
    if (!_loaded) {
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	7b9b      	ldrb	r3, [r3, #14]
 8003800:	f083 0301 	eor.w	r3, r3, #1
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d017      	beq.n	800383a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x46>
      if (_reader.ended())
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3304      	adds	r3, #4
 800380e:	4618      	mov	r0, r3
 8003810:	f7fe fc89 	bl	8002126 <_ZNK19ArduinoJson6101_11023UnsafeCharPointerReader5endedEv>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x2e>
        _current = 0;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	735a      	strb	r2, [r3, #13]
 8003820:	e008      	b.n	8003834 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x40>
        _current = _reader.read();
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3304      	adds	r3, #4
 8003826:	4618      	mov	r0, r3
 8003828:	f7fe fc6e 	bl	8002108 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReader4readEv>
 800382c:	4603      	mov	r3, r0
 800382e:	461a      	mov	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	735a      	strb	r2, [r3, #13]
      _loaded = true;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	739a      	strb	r2, [r3, #14]
    return _current;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	7b5b      	ldrb	r3, [r3, #13]
  }
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>:
  DeserializationError parseArray(CollectionData &array) {
 8003846:	b580      	push	{r7, lr}
 8003848:	b098      	sub	sp, #96	; 0x60
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	6039      	str	r1, [r7, #0]
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	7b1b      	ldrb	r3, [r3, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d107      	bne.n	8003868 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x22>
 8003858:	f107 0310 	add.w	r3, r7, #16
 800385c:	2105      	movs	r1, #5
 800385e:	4618      	mov	r0, r3
 8003860:	f7fe fc74 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003864:	7c3b      	ldrb	r3, [r7, #16]
 8003866:	e111      	b.n	8003a8c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	65bb      	str	r3, [r7, #88]	; 0x58
 800386c:	235b      	movs	r3, #91	; 0x5b
 800386e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (current() != charToSkip) return false;
 8003872:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003874:	f7ff ffbe 	bl	80037f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003878:	4603      	mov	r3, r0
 800387a:	461a      	mov	r2, r3
 800387c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003880:	4293      	cmp	r3, r2
 8003882:	bf14      	ite	ne
 8003884:	2301      	movne	r3, #1
 8003886:	2300      	moveq	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x4c>
 800388e:	2300      	movs	r3, #0
 8003890:	e003      	b.n	800389a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x54>
    move();
 8003892:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003894:	f000 fb00 	bl	8003e98 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003898:	2301      	movs	r3, #1
    if (!eat('[')) return DeserializationError::InvalidInput;
 800389a:	f083 0301 	eor.w	r3, r3, #1
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d007      	beq.n	80038b4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x6e>
 80038a4:	f107 0314 	add.w	r3, r7, #20
 80038a8:	2102      	movs	r1, #2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe fc4e 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80038b0:	7d3b      	ldrb	r3, [r7, #20]
 80038b2:	e0eb      	b.n	8003a8c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
    DeserializationError err = skipSpacesAndComments();
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff febd 	bl	8003634 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 80038ba:	4603      	mov	r3, r0
 80038bc:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 80038be:	f107 0318 	add.w	r3, r7, #24
 80038c2:	f107 020c 	add.w	r2, r7, #12
 80038c6:	4611      	mov	r1, r2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fe fc4f 	bl	800216c <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d106      	bne.n	80038e2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9c>
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9c>
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9e>
 80038e2:	2300      	movs	r3, #0
 80038e4:	f083 0301 	eor.w	r3, r3, #1
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xac>
 80038ee:	7b3b      	ldrb	r3, [r7, #12]
 80038f0:	e0cc      	b.n	8003a8c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	653b      	str	r3, [r7, #80]	; 0x50
 80038f6:	235d      	movs	r3, #93	; 0x5d
 80038f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (current() != charToSkip) return false;
 80038fc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80038fe:	f7ff ff79 	bl	80037f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003902:	4603      	mov	r3, r0
 8003904:	461a      	mov	r2, r3
 8003906:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800390a:	4293      	cmp	r3, r2
 800390c:	bf14      	ite	ne
 800390e:	2301      	movne	r3, #1
 8003910:	2300      	moveq	r3, #0
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xd6>
 8003918:	2300      	movs	r3, #0
 800391a:	e003      	b.n	8003924 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xde>
    move();
 800391c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800391e:	f000 fabb 	bl	8003e98 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003922:	2301      	movs	r3, #1
    if (eat(']')) return DeserializationError::Ok;
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xf4>
 8003928:	f107 0320 	add.w	r3, r7, #32
 800392c:	2100      	movs	r1, #0
 800392e:	4618      	mov	r0, r3
 8003930:	f7fe fc0c 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003934:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003938:	e0a8      	b.n	8003a8c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      VariantData *value = array.add(_pool);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4619      	mov	r1, r3
 8003940:	6838      	ldr	r0, [r7, #0]
 8003942:	f7fe fb07 	bl	8001f54 <_ZN19ArduinoJson6101_11014CollectionData3addEPNS_10MemoryPoolE>
 8003946:	65f8      	str	r0, [r7, #92]	; 0x5c
      if (!value) return DeserializationError::NoMemory;
 8003948:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800394a:	2b00      	cmp	r3, #0
 800394c:	d108      	bne.n	8003960 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x11a>
 800394e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003952:	2103      	movs	r1, #3
 8003954:	4618      	mov	r0, r3
 8003956:	f7fe fbf9 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800395a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800395e:	e095      	b.n	8003a8c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      _nestingLimit--;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	7b1b      	ldrb	r3, [r3, #12]
 8003964:	3b01      	subs	r3, #1
 8003966:	b2da      	uxtb	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	731a      	strb	r2, [r3, #12]
      err = parse(*value);
 800396c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff fdea 	bl	8003548 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8003974:	4603      	mov	r3, r0
 8003976:	733b      	strb	r3, [r7, #12]
      _nestingLimit++;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	7b1b      	ldrb	r3, [r3, #12]
 800397c:	3301      	adds	r3, #1
 800397e:	b2da      	uxtb	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	731a      	strb	r2, [r3, #12]
      if (err) return err;
 8003984:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003988:	f107 020c 	add.w	r2, r7, #12
 800398c:	4611      	mov	r1, r2
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe fbec 	bl	800216c <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x162>
 800399a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x162>
 80039a4:	2301      	movs	r3, #1
 80039a6:	e000      	b.n	80039aa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x164>
 80039a8:	2300      	movs	r3, #0
 80039aa:	f083 0301 	eor.w	r3, r3, #1
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x172>
 80039b4:	7b3b      	ldrb	r3, [r7, #12]
 80039b6:	e069      	b.n	8003a8c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      err = skipSpacesAndComments();
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7ff fe3b 	bl	8003634 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 80039be:	4603      	mov	r3, r0
 80039c0:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 80039c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039c6:	f107 020c 	add.w	r2, r7, #12
 80039ca:	4611      	mov	r1, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fe fbcd 	bl	800216c <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80039d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d106      	bne.n	80039e6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a0>
 80039d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a0>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a2>
 80039e6:	2300      	movs	r3, #0
 80039e8:	f083 0301 	eor.w	r3, r3, #1
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1b0>
 80039f2:	7b3b      	ldrb	r3, [r7, #12]
 80039f4:	e04a      	b.n	8003a8c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80039fa:	235d      	movs	r3, #93	; 0x5d
 80039fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (current() != charToSkip) return false;
 8003a00:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003a02:	f7ff fef7 	bl	80037f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003a06:	4603      	mov	r3, r0
 8003a08:	461a      	mov	r2, r3
 8003a0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	bf14      	ite	ne
 8003a12:	2301      	movne	r3, #1
 8003a14:	2300      	moveq	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1da>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	e003      	b.n	8003a28 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1e2>
    move();
 8003a20:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003a22:	f000 fa39 	bl	8003e98 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003a26:	2301      	movs	r3, #1
      if (eat(']')) return DeserializationError::Ok;
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d008      	beq.n	8003a3e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1f8>
 8003a2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003a30:	2100      	movs	r1, #0
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe fb8a 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003a38:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003a3c:	e026      	b.n	8003a8c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	643b      	str	r3, [r7, #64]	; 0x40
 8003a42:	232c      	movs	r3, #44	; 0x2c
 8003a44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (current() != charToSkip) return false;
 8003a48:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003a4a:	f7ff fed3 	bl	80037f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	461a      	mov	r2, r3
 8003a52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a56:	4293      	cmp	r3, r2
 8003a58:	bf14      	ite	ne
 8003a5a:	2301      	movne	r3, #1
 8003a5c:	2300      	moveq	r3, #0
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x222>
 8003a64:	2300      	movs	r3, #0
 8003a66:	e003      	b.n	8003a70 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x22a>
    move();
 8003a68:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003a6a:	f000 fa15 	bl	8003e98 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003a6e:	2301      	movs	r3, #1
      if (!eat(',')) return DeserializationError::InvalidInput;
 8003a70:	f083 0301 	eor.w	r3, r3, #1
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f43f af5f 	beq.w	800393a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xf4>
 8003a7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a80:	2102      	movs	r1, #2
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe fb62 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003a88:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
  }
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3760      	adds	r7, #96	; 0x60
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>:
  DeserializationError parseObject(CollectionData &object) {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b0a2      	sub	sp, #136	; 0x88
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	7b1b      	ldrb	r3, [r3, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d107      	bne.n	8003ab6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x22>
 8003aa6:	f107 0310 	add.w	r3, r7, #16
 8003aaa:	2105      	movs	r1, #5
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fe fb4d 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003ab2:	7c3b      	ldrb	r3, [r7, #16]
 8003ab4:	e1ac      	b.n	8003e10 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37c>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003abc:	237b      	movs	r3, #123	; 0x7b
 8003abe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    if (current() != charToSkip) return false;
 8003ac2:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8003ac6:	f7ff fe95 	bl	80037f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003aca:	4603      	mov	r3, r0
 8003acc:	461a      	mov	r2, r3
 8003ace:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	bf14      	ite	ne
 8003ad6:	2301      	movne	r3, #1
 8003ad8:	2300      	moveq	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x50>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e004      	b.n	8003aee <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x5a>
    move();
 8003ae4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8003ae8:	f000 f9d6 	bl	8003e98 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003aec:	2301      	movs	r3, #1
    if (!eat('{')) return DeserializationError::InvalidInput;
 8003aee:	f083 0301 	eor.w	r3, r3, #1
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d007      	beq.n	8003b08 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x74>
 8003af8:	f107 0314 	add.w	r3, r7, #20
 8003afc:	2102      	movs	r1, #2
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fe fb24 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003b04:	7d3b      	ldrb	r3, [r7, #20]
 8003b06:	e183      	b.n	8003e10 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37c>
    DeserializationError err = skipSpacesAndComments();
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff fd93 	bl	8003634 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8003b12:	f107 0318 	add.w	r3, r7, #24
 8003b16:	f107 020c 	add.w	r2, r7, #12
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fe fb25 	bl	800216c <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d106      	bne.n	8003b36 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa2>
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa2>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa4>
 8003b36:	2300      	movs	r3, #0
 8003b38:	f083 0301 	eor.w	r3, r3, #1
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xb2>
 8003b42:	7b3b      	ldrb	r3, [r7, #12]
 8003b44:	e164      	b.n	8003e10 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37c>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b4a:	237d      	movs	r3, #125	; 0x7d
 8003b4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    if (current() != charToSkip) return false;
 8003b50:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003b52:	f7ff fe4f 	bl	80037f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003b56:	4603      	mov	r3, r0
 8003b58:	461a      	mov	r2, r3
 8003b5a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	bf14      	ite	ne
 8003b62:	2301      	movne	r3, #1
 8003b64:	2300      	moveq	r3, #0
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xdc>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	e003      	b.n	8003b78 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xe4>
    move();
 8003b70:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003b72:	f000 f991 	bl	8003e98 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003b76:	2301      	movs	r3, #1
    if (eat('}')) return DeserializationError::Ok;
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d008      	beq.n	8003b8e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xfa>
 8003b7c:	f107 0320 	add.w	r3, r7, #32
 8003b80:	2100      	movs	r1, #0
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fe fae2 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003b88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003b8c:	e140      	b.n	8003e10 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37c>
      VariantSlot *slot = object.addSlot(_pool);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4619      	mov	r1, r3
 8003b94:	6838      	ldr	r0, [r7, #0]
 8003b96:	f7fe f9b3 	bl	8001f00 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>
 8003b9a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
      if (!slot) return DeserializationError::NoMemory;
 8003b9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d108      	bne.n	8003bb8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x124>
 8003ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003baa:	2103      	movs	r1, #3
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fe facd 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003bb2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003bb6:	e12b      	b.n	8003e10 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37c>
      err = parseKey(key);
 8003bb8:	f107 0308 	add.w	r3, r7, #8
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f976 	bl	8003eb0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 8003bc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bcc:	f107 020c 	add.w	r2, r7, #12
 8003bd0:	4611      	mov	r1, r2
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fe faca 	bl	800216c <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d106      	bne.n	8003bec <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x158>
 8003bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x158>
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x15a>
 8003bec:	2300      	movs	r3, #0
 8003bee:	f083 0301 	eor.w	r3, r3, #1
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x168>
 8003bf8:	7b3b      	ldrb	r3, [r7, #12]
 8003bfa:	e109      	b.n	8003e10 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37c>
      slot->setOwnedKey(make_not_null(key));
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fb32 	bl	8003268 <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>
 8003c04:	4603      	mov	r3, r0
 8003c06:	4619      	mov	r1, r3
 8003c08:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8003c0c:	f7fd fe62 	bl	80018d4 <_ZN19ArduinoJson6101_11011VariantSlot11setOwnedKeyENS_8not_nullIPKcEE>
      err = skipSpacesAndComments();
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff fd0f 	bl	8003634 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8003c16:	4603      	mov	r3, r0
 8003c18:	733b      	strb	r3, [r7, #12]
      if (err) return err;  // Colon
 8003c1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c1e:	f107 020c 	add.w	r2, r7, #12
 8003c22:	4611      	mov	r1, r2
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7fe faa1 	bl	800216c <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d106      	bne.n	8003c3e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1aa>
 8003c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1aa>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ac>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	f083 0301 	eor.w	r3, r3, #1
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ba>
 8003c4a:	7b3b      	ldrb	r3, [r7, #12]
 8003c4c:	e0e0      	b.n	8003e10 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37c>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	673b      	str	r3, [r7, #112]	; 0x70
 8003c52:	233a      	movs	r3, #58	; 0x3a
 8003c54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (current() != charToSkip) return false;
 8003c58:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003c5a:	f7ff fdcb 	bl	80037f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	461a      	mov	r2, r3
 8003c62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003c66:	4293      	cmp	r3, r2
 8003c68:	bf14      	ite	ne
 8003c6a:	2301      	movne	r3, #1
 8003c6c:	2300      	moveq	r3, #0
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1e4>
 8003c74:	2300      	movs	r3, #0
 8003c76:	e003      	b.n	8003c80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ec>
    move();
 8003c78:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003c7a:	f000 f90d 	bl	8003e98 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003c7e:	2301      	movs	r3, #1
      if (!eat(':')) return DeserializationError::InvalidInput;
 8003c80:	f083 0301 	eor.w	r3, r3, #1
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d008      	beq.n	8003c9c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x208>
 8003c8a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003c8e:	2102      	movs	r1, #2
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7fe fa5b 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003c96:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003c9a:	e0b9      	b.n	8003e10 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37c>
      _nestingLimit--;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	7b1b      	ldrb	r3, [r3, #12]
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	731a      	strb	r2, [r3, #12]
      err = parse(*slot->data());
 8003ca8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8003cac:	f7fd fde1 	bl	8001872 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7ff fc47 	bl	8003548 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	733b      	strb	r3, [r7, #12]
      _nestingLimit++;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	7b1b      	ldrb	r3, [r3, #12]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	731a      	strb	r2, [r3, #12]
      if (err) return err;
 8003cca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003cce:	f107 020c 	add.w	r2, r7, #12
 8003cd2:	4611      	mov	r1, r2
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fe fa49 	bl	800216c <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d106      	bne.n	8003cee <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25a>
 8003ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25a>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e000      	b.n	8003cf0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25c>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	f083 0301 	eor.w	r3, r3, #1
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x26a>
 8003cfa:	7b3b      	ldrb	r3, [r7, #12]
 8003cfc:	e088      	b.n	8003e10 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37c>
      err = skipSpacesAndComments();
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff fc98 	bl	8003634 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8003d04:	4603      	mov	r3, r0
 8003d06:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 8003d08:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003d0c:	f107 020c 	add.w	r2, r7, #12
 8003d10:	4611      	mov	r1, r2
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fe fa2a 	bl	800216c <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d106      	bne.n	8003d2c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x298>
 8003d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x298>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29a>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f083 0301 	eor.w	r3, r3, #1
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2a8>
 8003d38:	7b3b      	ldrb	r3, [r7, #12]
 8003d3a:	e069      	b.n	8003e10 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37c>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d40:	237d      	movs	r3, #125	; 0x7d
 8003d42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (current() != charToSkip) return false;
 8003d46:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003d48:	f7ff fd54 	bl	80037f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	461a      	mov	r2, r3
 8003d50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003d54:	4293      	cmp	r3, r2
 8003d56:	bf14      	ite	ne
 8003d58:	2301      	movne	r3, #1
 8003d5a:	2300      	moveq	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2d2>
 8003d62:	2300      	movs	r3, #0
 8003d64:	e003      	b.n	8003d6e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2da>
    move();
 8003d66:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003d68:	f000 f896 	bl	8003e98 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003d6c:	2301      	movs	r3, #1
      if (eat('}')) return DeserializationError::Ok;
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d008      	beq.n	8003d84 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2f0>
 8003d72:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d76:	2100      	movs	r1, #0
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fe f9e7 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003d7e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003d82:	e045      	b.n	8003e10 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37c>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	663b      	str	r3, [r7, #96]	; 0x60
 8003d88:	232c      	movs	r3, #44	; 0x2c
 8003d8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (current() != charToSkip) return false;
 8003d8e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003d90:	f7ff fd30 	bl	80037f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003d94:	4603      	mov	r3, r0
 8003d96:	461a      	mov	r2, r3
 8003d98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	bf14      	ite	ne
 8003da0:	2301      	movne	r3, #1
 8003da2:	2300      	moveq	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x31a>
 8003daa:	2300      	movs	r3, #0
 8003dac:	e003      	b.n	8003db6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x322>
    move();
 8003dae:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003db0:	f000 f872 	bl	8003e98 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003db4:	2301      	movs	r3, #1
      if (!eat(',')) return DeserializationError::InvalidInput;
 8003db6:	f083 0301 	eor.w	r3, r3, #1
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x33e>
 8003dc0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003dc4:	2102      	movs	r1, #2
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fe f9c0 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003dcc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003dd0:	e01e      	b.n	8003e10 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37c>
      err = skipSpacesAndComments();
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff fc2e 	bl	8003634 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 8003ddc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003de0:	f107 020c 	add.w	r2, r7, #12
 8003de4:	4611      	mov	r1, r2
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fe f9c0 	bl	800216c <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36c>
 8003df2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36c>
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e000      	b.n	8003e02 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36e>
 8003e00:	2300      	movs	r3, #0
 8003e02:	f083 0301 	eor.w	r3, r3, #1
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f43f aec0 	beq.w	8003b8e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xfa>
 8003e0e:	7b3b      	ldrb	r3, [r7, #12]
  }
 8003e10:	4618      	mov	r0, r3
 8003e12:	3788      	adds	r7, #136	; 0x88
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE>:
  DeserializationError parseValue(VariantData &variant) {
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
    if (isQuote(current())) {
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff fce6 	bl	80037f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 f85e 	bl	8003eec <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d005      	beq.n	8003e42 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE+0x2a>
      return parseStringValue(variant);
 8003e36:	6839      	ldr	r1, [r7, #0]
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f86a 	bl	8003f12 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	e004      	b.n	8003e4c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE+0x34>
      return parseNumericValue(variant);
 8003e42:	6839      	ldr	r1, [r7, #0]
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f89f 	bl	8003f88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>
 8003e4a:	4603      	mov	r3, r0
  }
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>:

template <typename T>
inline typename enable_if<is_same<T, const char*>::value ||
                              is_same<T, char*>::value,
                          const char*>::type
variantAs(const VariantData* _data) {
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  return _data != 0 ? _data->asString() : 0;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d004      	beq.n	8003e6c <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE+0x18>
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fe f8aa 	bl	8001fbc <_ZNK19ArduinoJson6101_11011VariantData8asStringEv>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	e000      	b.n	8003e6e <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE+0x1a>
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>:
inline typename enable_if<is_integral<T>::value, T>::type variantAs(
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b082      	sub	sp, #8
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  return _data != 0 ? _data->asIntegral<T>() : T(0);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d004      	beq.n	8003e8e <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x18>
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f967 	bl	8004158 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	e000      	b.n	8003e90 <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x1a>
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>:
  void move() {
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
    _loaded = false;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	739a      	strb	r2, [r3, #14]
  }
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bc80      	pop	{r7}
 8003eae:	4770      	bx	lr

08003eb0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>:
  DeserializationError parseKey(const char *&key) {
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
    if (isQuote(current())) {
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7ff fc9a 	bl	80037f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 f812 	bl	8003eec <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d005      	beq.n	8003eda <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x2a>
      return parseQuotedString(key);
 8003ece:	6839      	ldr	r1, [r7, #0]
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f983 	bl	80041dc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	e004      	b.n	8003ee4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x34>
      return parseNonQuotedString(key);
 8003eda:	6839      	ldr	r1, [r7, #0]
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 fa15 	bl	800430c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc>
 8003ee2:	4603      	mov	r3, r0
  }
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	2b27      	cmp	r3, #39	; 0x27
 8003efa:	d002      	beq.n	8003f02 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x16>
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	2b22      	cmp	r3, #34	; 0x22
 8003f00:	d101      	bne.n	8003f06 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x1a>
 8003f02:	2301      	movs	r3, #1
 8003f04:	e000      	b.n	8003f08 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x1c>
 8003f06:	2300      	movs	r3, #0
  }
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr

08003f12 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE>:
  DeserializationError parseStringValue(VariantData &variant) {
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b088      	sub	sp, #32
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	6039      	str	r1, [r7, #0]
    DeserializationError err = parseQuotedString(value);
 8003f1c:	f107 0310 	add.w	r3, r7, #16
 8003f20:	4619      	mov	r1, r3
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f95a 	bl	80041dc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8003f2c:	f107 0314 	add.w	r3, r7, #20
 8003f30:	f107 020c 	add.w	r2, r7, #12
 8003f34:	4611      	mov	r1, r2
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fe f918 	bl	800216c <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d106      	bne.n	8003f50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x3e>
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x3e>
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e000      	b.n	8003f52 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x40>
 8003f50:	2300      	movs	r3, #0
 8003f52:	f083 0301 	eor.w	r3, r3, #1
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x4e>
 8003f5c:	7b3b      	ldrb	r3, [r7, #12]
 8003f5e:	e00f      	b.n	8003f80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x6e>
    variant.setOwnedString(make_not_null(value));
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff f980 	bl	8003268 <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	6838      	ldr	r0, [r7, #0]
 8003f6e:	f7fd fe94 	bl	8001c9a <_ZN19ArduinoJson6101_11011VariantData14setOwnedStringENS_8not_nullIPKcEE>
    return DeserializationError::Ok;
 8003f72:	f107 031c 	add.w	r3, r7, #28
 8003f76:	2100      	movs	r1, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fe f8e7 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003f7e:	7f3b      	ldrb	r3, [r7, #28]
  }
 8003f80:	4618      	mov	r0, r3
 8003f82:	3720      	adds	r7, #32
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>:
  DeserializationError parseNumericValue(VariantData &result) {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b0a0      	sub	sp, #128	; 0x80
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 8003f92:	2300      	movs	r3, #0
 8003f94:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    char c = current();
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7ff fc2b 	bl	80037f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    while (canBeInNonQuotedString(c) && n < 63) {
 8003fa4:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 fa1a 	bl	80043e2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d005      	beq.n	8003fc0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x38>
 8003fb4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003fb8:	2b3e      	cmp	r3, #62	; 0x3e
 8003fba:	d801      	bhi.n	8003fc0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x38>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e000      	b.n	8003fc2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x3a>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d015      	beq.n	8003ff2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x6a>
      move();
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7ff ff66 	bl	8003e98 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      buffer[n++] = c;
 8003fcc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003fd0:	1c5a      	adds	r2, r3, #1
 8003fd2:	f887 207f 	strb.w	r2, [r7, #127]	; 0x7f
 8003fd6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003fda:	4413      	add	r3, r2
 8003fdc:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8003fe0:	f803 2c5c 	strb.w	r2, [r3, #-92]
      c = current();
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7ff fc05 	bl	80037f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003fea:	4603      	mov	r3, r0
 8003fec:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    while (canBeInNonQuotedString(c) && n < 63) {
 8003ff0:	e7d8      	b.n	8003fa4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1c>
    buffer[n] = 0;
 8003ff2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003ff6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003ffa:	4413      	add	r3, r2
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f803 2c5c 	strb.w	r2, [r3, #-92]
    c = buffer[0];
 8004002:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004006:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    if (c == 't') {  // true
 800400a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800400e:	2b74      	cmp	r3, #116	; 0x74
 8004010:	d113      	bne.n	800403a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xb2>
      result.setBoolean(true);
 8004012:	2101      	movs	r1, #1
 8004014:	6838      	ldr	r0, [r7, #0]
 8004016:	f7fd fde7 	bl	8001be8 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>
                    : DeserializationError::IncompleteInput;
 800401a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800401e:	2b04      	cmp	r3, #4
 8004020:	d101      	bne.n	8004026 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x9e>
 8004022:	2200      	movs	r2, #0
 8004024:	e000      	b.n	8004028 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xa0>
 8004026:	2201      	movs	r2, #1
 8004028:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800402c:	4611      	mov	r1, r2
 800402e:	4618      	mov	r0, r3
 8004030:	f7fe f88c 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8004034:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8004038:	e073      	b.n	8004122 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x19a>
    if (c == 'f') {  // false
 800403a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800403e:	2b66      	cmp	r3, #102	; 0x66
 8004040:	d113      	bne.n	800406a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xe2>
      result.setBoolean(false);
 8004042:	2100      	movs	r1, #0
 8004044:	6838      	ldr	r0, [r7, #0]
 8004046:	f7fd fdcf 	bl	8001be8 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>
                    : DeserializationError::IncompleteInput;
 800404a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800404e:	2b05      	cmp	r3, #5
 8004050:	d101      	bne.n	8004056 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xce>
 8004052:	2200      	movs	r2, #0
 8004054:	e000      	b.n	8004058 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xd0>
 8004056:	2201      	movs	r2, #1
 8004058:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800405c:	4611      	mov	r1, r2
 800405e:	4618      	mov	r0, r3
 8004060:	f7fe f874 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8004064:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8004068:	e05b      	b.n	8004122 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x19a>
    if (c == 'n') {  // null
 800406a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800406e:	2b6e      	cmp	r3, #110	; 0x6e
 8004070:	d10f      	bne.n	8004092 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x10a>
                    : DeserializationError::IncompleteInput;
 8004072:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004076:	2b04      	cmp	r3, #4
 8004078:	d101      	bne.n	800407e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xf6>
 800407a:	2200      	movs	r2, #0
 800407c:	e000      	b.n	8004080 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xf8>
 800407e:	2201      	movs	r2, #1
 8004080:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004084:	4611      	mov	r1, r2
 8004086:	4618      	mov	r0, r3
 8004088:	f7fe f860 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800408c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8004090:	e047      	b.n	8004122 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x19a>
    ParsedNumber<Float, UInt> num = parseNumber<Float, UInt>(buffer);
 8004092:	f107 0308 	add.w	r3, r7, #8
 8004096:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800409a:	4611      	mov	r1, r2
 800409c:	4618      	mov	r0, r3
 800409e:	f000 f9d1 	bl	8004444 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>
    switch (num.type()) {
 80040a2:	f107 0308 	add.w	r3, r7, #8
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fbba 	bl	8004820 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE4typeEv>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d021      	beq.n	80040f6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x16e>
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	dc2d      	bgt.n	8004112 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x18a>
 80040b6:	2b06      	cmp	r3, #6
 80040b8:	d00f      	beq.n	80040da <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x152>
 80040ba:	2b07      	cmp	r3, #7
 80040bc:	d129      	bne.n	8004112 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x18a>
        result.setNegativeInteger(num.uintValue);
 80040be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040c2:	6838      	ldr	r0, [r7, #0]
 80040c4:	f7fd fdca 	bl	8001c5c <_ZN19ArduinoJson6101_11011VariantData18setNegativeIntegerEy>
        return DeserializationError::Ok;
 80040c8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80040cc:	2100      	movs	r1, #0
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fe f83c 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80040d4:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80040d8:	e023      	b.n	8004122 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x19a>
        result.setPositiveInteger(num.uintValue);
 80040da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040de:	6838      	ldr	r0, [r7, #0]
 80040e0:	f7fd fda9 	bl	8001c36 <_ZN19ArduinoJson6101_11011VariantData18setPositiveIntegerEy>
        return DeserializationError::Ok;
 80040e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80040e8:	2100      	movs	r1, #0
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fe f82e 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80040f0:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80040f4:	e015      	b.n	8004122 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x19a>
        result.setFloat(num.floatValue);
 80040f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80040fa:	6838      	ldr	r0, [r7, #0]
 80040fc:	f7fd fd88 	bl	8001c10 <_ZN19ArduinoJson6101_11011VariantData8setFloatEd>
        return DeserializationError::Ok;
 8004100:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004104:	2100      	movs	r1, #0
 8004106:	4618      	mov	r0, r3
 8004108:	f7fe f820 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800410c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8004110:	e007      	b.n	8004122 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x19a>
    return DeserializationError::InvalidInput;
 8004112:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004116:	2102      	movs	r1, #2
 8004118:	4618      	mov	r0, r3
 800411a:	f7fe f817 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800411e:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
  }
 8004122:	4618      	mov	r0, r3
 8004124:	3780      	adds	r7, #128	; 0x80
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>:
  VariantData *getMember(TAdaptedString key) const {
 800412a:	b580      	push	{r7, lr}
 800412c:	b082      	sub	sp, #8
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	6039      	str	r1, [r7, #0]
    return isObject() ? _content.asCollection.get(key) : 0;
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7fd fd45 	bl	8001bc4 <_ZNK19ArduinoJson6101_11011VariantData8isObjectEv>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d006      	beq.n	800414e <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_+0x24>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6839      	ldr	r1, [r7, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff f8c8 	bl	80032da <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_>
 800414a:	4603      	mov	r3, r0
 800414c:	e000      	b.n	8004150 <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_+0x26>
 800414e:	2300      	movs	r3, #0
  }
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v>:
inline T VariantData::asIntegral() const {
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  switch (type()) {
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7fd fdd0 	bl	8001d06 <_ZNK19ArduinoJson6101_11011VariantData4typeEv>
 8004166:	4603      	mov	r3, r0
 8004168:	3b03      	subs	r3, #3
 800416a:	2b05      	cmp	r3, #5
 800416c:	d830      	bhi.n	80041d0 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x78>
 800416e:	a201      	add	r2, pc, #4	; (adr r2, 8004174 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x1c>)
 8004170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004174:	080041b1 	.word	0x080041b1
 8004178:	080041b1 	.word	0x080041b1
 800417c:	0800418d 	.word	0x0800418d
 8004180:	0800418d 	.word	0x0800418d
 8004184:	0800419f 	.word	0x0800419f
 8004188:	080041bf 	.word	0x080041bf
      return convertPositiveInteger<T>(_content.asInteger);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004192:	4610      	mov	r0, r2
 8004194:	4619      	mov	r1, r3
 8004196:	f000 fb61 	bl	800485c <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_>
 800419a:	4603      	mov	r3, r0
 800419c:	e019      	b.n	80041d2 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return convertNegativeInteger<T>(_content.asInteger);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a4:	4610      	mov	r0, r2
 80041a6:	4619      	mov	r1, r3
 80041a8:	f000 fb6b 	bl	8004882 <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_>
 80041ac:	4603      	mov	r3, r0
 80041ae:	e010      	b.n	80041d2 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return parseInteger<T>(_content.asString);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 fb78 	bl	80048aa <_ZN19ArduinoJson6101_11012parseIntegerImEET_PKc>
 80041ba:	4603      	mov	r3, r0
 80041bc:	e009      	b.n	80041d2 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return convertFloat<T>(_content.asFloat);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c4:	4610      	mov	r0, r2
 80041c6:	4619      	mov	r1, r3
 80041c8:	f000 fb83 	bl	80048d2 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>
 80041cc:	4603      	mov	r3, r0
 80041ce:	e000      	b.n	80041d2 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return 0;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop

080041dc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>:
  DeserializationError parseQuotedString(const char *&result) {
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08c      	sub	sp, #48	; 0x30
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
    StringBuilder builder = _stringStorage.startString();
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f103 0208 	add.w	r2, r3, #8
 80041ec:	f107 0308 	add.w	r3, r7, #8
 80041f0:	4611      	mov	r1, r2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fd ff62 	bl	80020bc <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>
    const char stopChar = current();
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7ff fafb 	bl	80037f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80041fe:	4603      	mov	r3, r0
 8004200:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    move();
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff fe47 	bl	8003e98 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      char c = current();
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7ff faf2 	bl	80037f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8004210:	4603      	mov	r3, r0
 8004212:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      move();
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7ff fe3e 	bl	8003e98 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      if (c == stopChar) break;
 800421c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004220:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004224:	429a      	cmp	r2, r3
 8004226:	d04f      	beq.n	80042c8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xec>
      if (c == '\0') return DeserializationError::IncompleteInput;
 8004228:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800422c:	2b00      	cmp	r3, #0
 800422e:	d107      	bne.n	8004240 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x64>
 8004230:	f107 0318 	add.w	r3, r7, #24
 8004234:	2101      	movs	r1, #1
 8004236:	4618      	mov	r0, r3
 8004238:	f7fd ff88 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800423c:	7e3b      	ldrb	r3, [r7, #24]
 800423e:	e061      	b.n	8004304 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
      if (c == '\\') {
 8004240:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004244:	2b5c      	cmp	r3, #92	; 0x5c
 8004246:	d136      	bne.n	80042b6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xda>
        c = current();
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff fad3 	bl	80037f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800424e:	4603      	mov	r3, r0
 8004250:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (c == '\0') return DeserializationError::IncompleteInput;
 8004254:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004258:	2b00      	cmp	r3, #0
 800425a:	d107      	bne.n	800426c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x90>
 800425c:	f107 031c 	add.w	r3, r7, #28
 8004260:	2101      	movs	r1, #1
 8004262:	4618      	mov	r0, r3
 8004264:	f7fd ff72 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8004268:	7f3b      	ldrb	r3, [r7, #28]
 800426a:	e04b      	b.n	8004304 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        if (c == 'u') {
 800426c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004270:	2b75      	cmp	r3, #117	; 0x75
 8004272:	d108      	bne.n	8004286 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xaa>
          return DeserializationError::NotSupported;
 8004274:	f107 0320 	add.w	r3, r7, #32
 8004278:	2104      	movs	r1, #4
 800427a:	4618      	mov	r0, r3
 800427c:	f7fd ff66 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8004280:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004284:	e03e      	b.n	8004304 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        c = EscapeSequence::unescapeChar(c);
 8004286:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800428a:	4618      	mov	r0, r3
 800428c:	f7fd ffa4 	bl	80021d8 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc>
 8004290:	4603      	mov	r3, r0
 8004292:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (c == '\0') return DeserializationError::InvalidInput;
 8004296:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800429a:	2b00      	cmp	r3, #0
 800429c:	d108      	bne.n	80042b0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xd4>
 800429e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042a2:	2102      	movs	r1, #2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fd ff51 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80042aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80042ae:	e029      	b.n	8004304 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        move();
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7ff fdf1 	bl	8003e98 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      builder.append(c);
 80042b6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80042ba:	f107 0308 	add.w	r3, r7, #8
 80042be:	4611      	mov	r1, r2
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fd fead 	bl	8002020 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
    for (;;) {
 80042c6:	e7a0      	b.n	800420a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x2e>
      if (c == stopChar) break;
 80042c8:	bf00      	nop
    result = builder.complete();
 80042ca:	f107 0308 	add.w	r3, r7, #8
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fd feca 	bl	8002068 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>
 80042d4:	4602      	mov	r2, r0
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	601a      	str	r2, [r3, #0]
    if (!result) return DeserializationError::NoMemory;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d108      	bne.n	80042f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x118>
 80042e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042e6:	2103      	movs	r1, #3
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7fd ff2f 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80042ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80042f2:	e007      	b.n	8004304 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
    return DeserializationError::Ok;
 80042f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042f8:	2100      	movs	r1, #0
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fd ff26 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8004300:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
  }
 8004304:	4618      	mov	r0, r3
 8004306:	3730      	adds	r7, #48	; 0x30
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc>:
  DeserializationError parseNonQuotedString(const char *&result) {
 800430c:	b580      	push	{r7, lr}
 800430e:	b08a      	sub	sp, #40	; 0x28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
    StringBuilder builder = _stringStorage.startString();
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f103 0208 	add.w	r2, r3, #8
 800431c:	f107 0308 	add.w	r3, r7, #8
 8004320:	4611      	mov	r1, r2
 8004322:	4618      	mov	r0, r3
 8004324:	f7fd feca 	bl	80020bc <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>
    char c = current();
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7ff fa63 	bl	80037f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800432e:	4603      	mov	r3, r0
 8004330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (c == '\0') return DeserializationError::IncompleteInput;
 8004334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004338:	2b00      	cmp	r3, #0
 800433a:	d107      	bne.n	800434c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x40>
 800433c:	f107 0318 	add.w	r3, r7, #24
 8004340:	2101      	movs	r1, #1
 8004342:	4618      	mov	r0, r3
 8004344:	f7fd ff02 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8004348:	7e3b      	ldrb	r3, [r7, #24]
 800434a:	e046      	b.n	80043da <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    if (canBeInNonQuotedString(c)) {  // no quotes
 800434c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004350:	4618      	mov	r0, r3
 8004352:	f000 f846 	bl	80043e2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d019      	beq.n	8004390 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x84>
        move();
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7ff fd9b 	bl	8003e98 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
        builder.append(c);
 8004362:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004366:	f107 0308 	add.w	r3, r7, #8
 800436a:	4611      	mov	r1, r2
 800436c:	4618      	mov	r0, r3
 800436e:	f7fd fe57 	bl	8002020 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
        c = current();
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7ff fa3e 	bl	80037f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8004378:	4603      	mov	r3, r0
 800437a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      } while (canBeInNonQuotedString(c));
 800437e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004382:	4618      	mov	r0, r3
 8004384:	f000 f82d 	bl	80043e2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d008      	beq.n	80043a0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x94>
      do {
 800438e:	e7e5      	b.n	800435c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x50>
      return DeserializationError::InvalidInput;
 8004390:	f107 031c 	add.w	r3, r7, #28
 8004394:	2102      	movs	r1, #2
 8004396:	4618      	mov	r0, r3
 8004398:	f7fd fed8 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800439c:	7f3b      	ldrb	r3, [r7, #28]
 800439e:	e01c      	b.n	80043da <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    result = builder.complete();
 80043a0:	f107 0308 	add.w	r3, r7, #8
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fd fe5f 	bl	8002068 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>
 80043aa:	4602      	mov	r2, r0
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	601a      	str	r2, [r3, #0]
    if (!result) return DeserializationError::NoMemory;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d108      	bne.n	80043ca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xbe>
 80043b8:	f107 0320 	add.w	r3, r7, #32
 80043bc:	2103      	movs	r1, #3
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fd fec4 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80043c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043c8:	e007      	b.n	80043da <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    return DeserializationError::Ok;
 80043ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043ce:	2100      	movs	r1, #0
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fd febb 	bl	800214c <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80043d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
  }
 80043da:	4618      	mov	r0, r3
 80043dc:	3728      	adds	r7, #40	; 0x28
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b082      	sub	sp, #8
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	4603      	mov	r3, r0
 80043ea:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	2239      	movs	r2, #57	; 0x39
 80043f0:	2130      	movs	r1, #48	; 0x30
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fa9b 	bl	800492e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 80043f8:	4603      	mov	r3, r0
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d11a      	bne.n	8004434 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 80043fe:	79fb      	ldrb	r3, [r7, #7]
 8004400:	227a      	movs	r2, #122	; 0x7a
 8004402:	215f      	movs	r1, #95	; 0x5f
 8004404:	4618      	mov	r0, r3
 8004406:	f000 fa92 	bl	800492e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d111      	bne.n	8004434 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8004410:	79fb      	ldrb	r3, [r7, #7]
 8004412:	225a      	movs	r2, #90	; 0x5a
 8004414:	2141      	movs	r1, #65	; 0x41
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fa89 	bl	800492e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 800441c:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 800441e:	2b00      	cmp	r3, #0
 8004420:	d108      	bne.n	8004434 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8004422:	79fb      	ldrb	r3, [r7, #7]
 8004424:	2b2b      	cmp	r3, #43	; 0x2b
 8004426:	d005      	beq.n	8004434 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
 8004428:	79fb      	ldrb	r3, [r7, #7]
 800442a:	2b2d      	cmp	r3, #45	; 0x2d
 800442c:	d002      	beq.n	8004434 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
 800442e:	79fb      	ldrb	r3, [r7, #7]
 8004430:	2b2e      	cmp	r3, #46	; 0x2e
 8004432:	d101      	bne.n	8004438 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x56>
 8004434:	2301      	movs	r3, #1
 8004436:	e000      	b.n	800443a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x58>
 8004438:	2300      	movs	r3, #0
  }
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
	...

08004444 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>:

template <typename A, typename B>
struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};

template <typename TFloat, typename TUInt>
inline ParsedNumber<TFloat, TUInt> parseNumber(const char *s) {
 8004444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004448:	b09c      	sub	sp, #112	; 0x70
 800444a:	af02      	add	r7, sp, #8
 800444c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800444e:	62b9      	str	r1, [r7, #40]	; 0x28
  typedef typename traits::exponent_type exponent_t;
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 8004450:	2300      	movs	r3, #0
 8004452:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  switch (*s) {
 8004456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2b2b      	cmp	r3, #43	; 0x2b
 800445c:	d008      	beq.n	8004470 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2c>
 800445e:	2b2d      	cmp	r3, #45	; 0x2d
 8004460:	d10a      	bne.n	8004478 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x34>
    case '-':
      is_negative = true;
 8004462:	2301      	movs	r3, #1
 8004464:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      s++;
 8004468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446a:	3301      	adds	r3, #1
 800446c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800446e:	e003      	b.n	8004478 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x34>
    case '+':
      s++;
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	3301      	adds	r3, #1
 8004474:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004476:	bf00      	nop
  }

  if (*s == 'n' || *s == 'N') return traits::nan();
 8004478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	2b6e      	cmp	r3, #110	; 0x6e
 800447e:	d003      	beq.n	8004488 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x44>
 8004480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b4e      	cmp	r3, #78	; 0x4e
 8004486:	d107      	bne.n	8004498 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x54>
 8004488:	f000 fa6a 	bl	8004960 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004492:	f000 fa73 	bl	800497c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8004496:	e1be      	b.n	8004816 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3d2>
  if (*s == 'i' || *s == 'I')
 8004498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b69      	cmp	r3, #105	; 0x69
 800449e:	d003      	beq.n	80044a8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x64>
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b49      	cmp	r3, #73	; 0x49
 80044a6:	d115      	bne.n	80044d4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x90>
    return is_negative ? -traits::inf() : traits::inf();
 80044a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d007      	beq.n	80044c0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x7c>
 80044b0:	f000 fa78 	bl	80049a4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4614      	mov	r4, r2
 80044ba:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80044be:	e003      	b.n	80044c8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x84>
 80044c0:	f000 fa70 	bl	80049a4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 80044c4:	4604      	mov	r4, r0
 80044c6:	460d      	mov	r5, r1
 80044c8:	4622      	mov	r2, r4
 80044ca:	462b      	mov	r3, r5
 80044cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044ce:	f000 fa55 	bl	800497c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 80044d2:	e1a0      	b.n	8004816 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3d2>
  if (!isdigit(*s) && *s != '.') return return_type();
 80044d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fd fd5c 	bl	8001f96 <_ZN19ArduinoJson6101_1107isdigitEc>
 80044de:	4603      	mov	r3, r0
 80044e0:	f083 0301 	eor.w	r3, r3, #1
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d005      	beq.n	80044f6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb2>
 80044ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	2b2e      	cmp	r3, #46	; 0x2e
 80044f0:	d001      	beq.n	80044f6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb2>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb4>
 80044f6:	2300      	movs	r3, #0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xc0>
 80044fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044fe:	f000 fa5f 	bl	80049c0 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>
 8004502:	e188      	b.n	8004816 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3d2>

  mantissa_t mantissa = 0;
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  exponent_t exponent_offset = 0;
 8004510:	2300      	movs	r3, #0
 8004512:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  const mantissa_t maxUint = TUInt(-1);
 8004516:	f04f 32ff 	mov.w	r2, #4294967295
 800451a:	f04f 33ff 	mov.w	r3, #4294967295
 800451e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  while (isdigit(*s)) {
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f7fd fd35 	bl	8001f96 <_ZN19ArduinoJson6101_1107isdigitEc>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d049      	beq.n	80045c6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x182>
    uint8_t digit = uint8_t(*s - '0');
 8004532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	3b30      	subs	r3, #48	; 0x30
 8004538:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (mantissa > maxUint / 10) break;
 800453c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004540:	f04f 3299 	mov.w	r2, #2576980377	; 0x99999999
 8004544:	4bad      	ldr	r3, [pc, #692]	; (80047fc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3b8>)
 8004546:	428b      	cmp	r3, r1
 8004548:	bf08      	it	eq
 800454a:	4282      	cmpeq	r2, r0
 800454c:	d338      	bcc.n	80045c0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x17c>
    mantissa *= 10;
 800454e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8004552:	4622      	mov	r2, r4
 8004554:	462b      	mov	r3, r5
 8004556:	f04f 0000 	mov.w	r0, #0
 800455a:	f04f 0100 	mov.w	r1, #0
 800455e:	0099      	lsls	r1, r3, #2
 8004560:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8004564:	0090      	lsls	r0, r2, #2
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	1912      	adds	r2, r2, r4
 800456c:	eb45 0303 	adc.w	r3, r5, r3
 8004570:	1891      	adds	r1, r2, r2
 8004572:	6139      	str	r1, [r7, #16]
 8004574:	415b      	adcs	r3, r3
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800457c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    if (mantissa > maxUint - digit) break;
 8004580:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004584:	f04f 0300 	mov.w	r3, #0
 8004588:	43d1      	mvns	r1, r2
 800458a:	61b9      	str	r1, [r7, #24]
 800458c:	43db      	mvns	r3, r3
 800458e:	61fb      	str	r3, [r7, #28]
 8004590:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004594:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004598:	4299      	cmp	r1, r3
 800459a:	bf08      	it	eq
 800459c:	4290      	cmpeq	r0, r2
 800459e:	d311      	bcc.n	80045c4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x180>
    mantissa += digit;
 80045a0:	f897 003f 	ldrb.w	r0, [r7, #63]	; 0x3f
 80045a4:	f04f 0100 	mov.w	r1, #0
 80045a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045ac:	eb12 0a00 	adds.w	sl, r2, r0
 80045b0:	eb43 0b01 	adc.w	fp, r3, r1
 80045b4:	e9c7 ab16 	strd	sl, fp, [r7, #88]	; 0x58
    s++;
 80045b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ba:	3301      	adds	r3, #1
 80045bc:	62bb      	str	r3, [r7, #40]	; 0x28
  while (isdigit(*s)) {
 80045be:	e7b0      	b.n	8004522 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xde>
    if (mantissa > maxUint / 10) break;
 80045c0:	bf00      	nop
 80045c2:	e000      	b.n	80045c6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x182>
    if (mantissa > maxUint - digit) break;
 80045c4:	bf00      	nop
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d108      	bne.n	80045e0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x19c>
 80045ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80045da:	f000 fa0c 	bl	80049f6 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb>
 80045de:	e11a      	b.n	8004816 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3d2>

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
 80045e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045e8:	bf08      	it	eq
 80045ea:	2a00      	cmpeq	r2, #0
 80045ec:	d313      	bcc.n	8004616 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1d2>
    mantissa /= 10;
 80045ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80045f2:	f04f 020a 	mov.w	r2, #10
 80045f6:	f04f 0300 	mov.w	r3, #0
 80045fa:	f7fc fd17 	bl	800102c <__aeabi_uldivmod>
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    exponent_offset++;
 8004606:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800460a:	b29b      	uxth	r3, r3
 800460c:	3301      	adds	r3, #1
 800460e:	b29b      	uxth	r3, r3
 8004610:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  while (mantissa > traits::mantissa_max) {
 8004614:	e7e4      	b.n	80045e0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x19c>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f7fd fcbb 	bl	8001f96 <_ZN19ArduinoJson6101_1107isdigitEc>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1f8>
    exponent_offset++;
 8004626:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800462a:	b29b      	uxth	r3, r3
 800462c:	3301      	adds	r3, #1
 800462e:	b29b      	uxth	r3, r3
 8004630:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    s++;
 8004634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004636:	3301      	adds	r3, #1
 8004638:	62bb      	str	r3, [r7, #40]	; 0x28
  while (isdigit(*s)) {
 800463a:	e7ec      	b.n	8004616 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1d2>
  }

  if (*s == '.') {
 800463c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	2b2e      	cmp	r3, #46	; 0x2e
 8004642:	d147      	bne.n	80046d4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x290>
    s++;
 8004644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004646:	3301      	adds	r3, #1
 8004648:	62bb      	str	r3, [r7, #40]	; 0x28
    while (isdigit(*s)) {
 800464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f7fd fca1 	bl	8001f96 <_ZN19ArduinoJson6101_1107isdigitEc>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d03c      	beq.n	80046d4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x290>
      if (mantissa < traits::mantissa_max / 10) {
 800465a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800465e:	f04f 3099 	mov.w	r0, #2576980377	; 0x99999999
 8004662:	4967      	ldr	r1, [pc, #412]	; (8004800 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3bc>)
 8004664:	428b      	cmp	r3, r1
 8004666:	bf08      	it	eq
 8004668:	4282      	cmpeq	r2, r0
 800466a:	d22f      	bcs.n	80046cc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x288>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 800466c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8004670:	4622      	mov	r2, r4
 8004672:	462b      	mov	r3, r5
 8004674:	f04f 0000 	mov.w	r0, #0
 8004678:	f04f 0100 	mov.w	r1, #0
 800467c:	0099      	lsls	r1, r3, #2
 800467e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8004682:	0090      	lsls	r0, r2, #2
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	1912      	adds	r2, r2, r4
 800468a:	eb45 0303 	adc.w	r3, r5, r3
 800468e:	1891      	adds	r1, r2, r2
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	415b      	adcs	r3, r3
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800469a:	4610      	mov	r0, r2
 800469c:	4619      	mov	r1, r3
 800469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	3b30      	subs	r3, #48	; 0x30
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	1884      	adds	r4, r0, r2
 80046ae:	603c      	str	r4, [r7, #0]
 80046b0:	eb41 0303 	adc.w	r3, r1, r3
 80046b4:	607b      	str	r3, [r7, #4]
 80046b6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80046ba:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
        exponent_offset--;
 80046be:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
      }
      s++;
 80046cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ce:	3301      	adds	r3, #1
 80046d0:	62bb      	str	r3, [r7, #40]	; 0x28
    while (isdigit(*s)) {
 80046d2:	e7ba      	b.n	800464a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x206>
    }
  }

  int exponent = 0;
 80046d4:	2300      	movs	r3, #0
 80046d6:	653b      	str	r3, [r7, #80]	; 0x50
  if (*s == 'e' || *s == 'E') {
 80046d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b65      	cmp	r3, #101	; 0x65
 80046de:	d003      	beq.n	80046e8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a4>
 80046e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b45      	cmp	r3, #69	; 0x45
 80046e6:	d167      	bne.n	80047b8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x374>
    s++;
 80046e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ea:	3301      	adds	r3, #1
 80046ec:	62bb      	str	r3, [r7, #40]	; 0x28
    bool negative_exponent = false;
 80046ee:	2300      	movs	r3, #0
 80046f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (*s == '-') {
 80046f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	2b2d      	cmp	r3, #45	; 0x2d
 80046fa:	d106      	bne.n	800470a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2c6>
      negative_exponent = true;
 80046fc:	2301      	movs	r3, #1
 80046fe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      s++;
 8004702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004704:	3301      	adds	r3, #1
 8004706:	62bb      	str	r3, [r7, #40]	; 0x28
 8004708:	e006      	b.n	8004718 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2d4>
    } else if (*s == '+') {
 800470a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	2b2b      	cmp	r3, #43	; 0x2b
 8004710:	d102      	bne.n	8004718 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2d4>
      s++;
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	3301      	adds	r3, #1
 8004716:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    while (isdigit(*s)) {
 8004718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	4618      	mov	r0, r3
 800471e:	f7fd fc3a 	bl	8001f96 <_ZN19ArduinoJson6101_1107isdigitEc>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d040      	beq.n	80047aa <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x366>
      exponent = exponent * 10 + (*s - '0');
 8004728:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800472a:	4613      	mov	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	461a      	mov	r2, r3
 8004734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	3b30      	subs	r3, #48	; 0x30
 800473a:	4413      	add	r3, r2
 800473c:	653b      	str	r3, [r7, #80]	; 0x50
      if (exponent + exponent_offset > traits::exponent_max) {
 800473e:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8004742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004744:	4413      	add	r3, r2
 8004746:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800474a:	dd2a      	ble.n	80047a2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x35e>
        if (negative_exponent)
 800474c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004750:	2b00      	cmp	r3, #0
 8004752:	d010      	beq.n	8004776 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x332>
          return is_negative ? -0.0f : 0.0f;
 8004754:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004758:	2b00      	cmp	r3, #0
 800475a:	d004      	beq.n	8004766 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x322>
 800475c:	f04f 0200 	mov.w	r2, #0
 8004760:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004764:	e003      	b.n	800476e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x32a>
 8004766:	f04f 0200 	mov.w	r2, #0
 800476a:	f04f 0300 	mov.w	r3, #0
 800476e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004770:	f000 f904 	bl	800497c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8004774:	e04f      	b.n	8004816 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3d2>
        else
          return is_negative ? -traits::inf() : traits::inf();
 8004776:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800477a:	2b00      	cmp	r3, #0
 800477c:	d007      	beq.n	800478e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x34a>
 800477e:	f000 f911 	bl	80049a4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	4690      	mov	r8, r2
 8004788:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800478c:	e003      	b.n	8004796 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x352>
 800478e:	f000 f909 	bl	80049a4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8004792:	4680      	mov	r8, r0
 8004794:	4689      	mov	r9, r1
 8004796:	4642      	mov	r2, r8
 8004798:	464b      	mov	r3, r9
 800479a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800479c:	f000 f8ee 	bl	800497c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 80047a0:	e039      	b.n	8004816 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3d2>
      }
      s++;
 80047a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a4:	3301      	adds	r3, #1
 80047a6:	62bb      	str	r3, [r7, #40]	; 0x28
    while (isdigit(*s)) {
 80047a8:	e7b6      	b.n	8004718 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2d4>
    }
    if (negative_exponent) exponent = -exponent;
 80047aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x374>
 80047b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047b4:	425b      	negs	r3, r3
 80047b6:	653b      	str	r3, [r7, #80]	; 0x50
  }
  exponent += exponent_offset;
 80047b8:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80047bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047be:	4413      	add	r3, r2
 80047c0:	653b      	str	r3, [r7, #80]	; 0x50

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0') return return_type();
 80047c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x38e>
 80047ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047cc:	f000 f8f8 	bl	80049c0 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>
 80047d0:	e021      	b.n	8004816 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3d2>

  TFloat result = traits::make_float(static_cast<TFloat>(mantissa), exponent);
 80047d2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80047d6:	f7fb fe8d 	bl	80004f4 <__aeabi_ul2d>
 80047da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047dc:	f000 f92c 	bl	8004a38 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>
 80047e0:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

  return is_negative ? -result : result;
 80047e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00b      	beq.n	8004804 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c0>
 80047ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ee:	623b      	str	r3, [r7, #32]
 80047f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24
 80047f8:	e008      	b.n	800480c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c8>
 80047fa:	bf00      	nop
 80047fc:	19999999 	.word	0x19999999
 8004800:	00019999 	.word	0x00019999
 8004804:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004808:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800480c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004810:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004812:	f000 f8b3 	bl	800497c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
}
 8004816:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004818:	3768      	adds	r7, #104	; 0x68
 800481a:	46bd      	mov	sp, r7
 800481c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004820 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE4typeEv>:
  uint8_t type() const {
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
    return _type;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	7c1b      	ldrb	r3, [r3, #16]
  }
 800482c:	4618      	mov	r0, r3
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr

08004836 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>:
  if (!lhs || !rhs) return false;
  return lhs->equalsObject(*rhs);
}

template <typename TAdaptedString>
inline VariantData *objectGet(const CollectionData *obj, TAdaptedString key) {
 8004836:	b580      	push	{r7, lr}
 8004838:	b082      	sub	sp, #8
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	6039      	str	r1, [r7, #0]
  if (!obj) return 0;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_+0x14>
 8004846:	2300      	movs	r3, #0
 8004848:	e004      	b.n	8004854 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_+0x1e>
  return obj->get(key);
 800484a:	6839      	ldr	r1, [r7, #0]
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7fe fd44 	bl	80032da <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_>
 8004852:	4603      	mov	r3, r0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_>:
canStoreNegativeInteger(TIn) {
  return false;
}

template <typename TOut, typename TIn>
TOut convertPositiveInteger(TIn value) {
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	e9c7 0100 	strd	r0, r1, [r7]
  return canStorePositiveInteger<TOut>(value) ? TOut(value) : 0;
 8004866:	e9d7 0100 	ldrd	r0, r1, [r7]
 800486a:	f000 f936 	bl	8004ada <_ZN19ArduinoJson6101_11023canStorePositiveIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuelestS3_stT0_EbE4typeES5_>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_+0x1c>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	e000      	b.n	800487a <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_+0x1e>
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_>:

template <typename TOut, typename TIn>
TOut convertNegativeInteger(TIn value) {
 8004882:	b580      	push	{r7, lr}
 8004884:	b082      	sub	sp, #8
 8004886:	af00      	add	r7, sp, #0
 8004888:	e9c7 0100 	strd	r0, r1, [r7]
  return canStoreNegativeInteger<TOut>(value) ? TOut(~value + 1) : 0;
 800488c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004890:	f000 f93b 	bl	8004b0a <_ZN19ArduinoJson6101_11023canStoreNegativeIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueEbE4typeET0_>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_+0x1e>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	425b      	negs	r3, r3
 800489e:	e000      	b.n	80048a2 <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_+0x20>
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <_ZN19ArduinoJson6101_11012parseIntegerImEET_PKc>:
#include "convertNumber.hpp"
#include "parseNumber.hpp"

namespace ARDUINOJSON_NAMESPACE {
template <typename T>
T parseInteger(const char *s) {
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b088      	sub	sp, #32
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  // try to reuse the same parameters as JsonDeserializer
  typedef typename choose_largest<UInt, typename make_unsigned<T>::type>::type
      TUInt;
  return parseNumber<Float, TUInt>(s).template as<T>();
 80048b2:	f107 0308 	add.w	r3, r7, #8
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7ff fdc3 	bl	8004444 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>
 80048be:	f107 0308 	add.w	r3, r7, #8
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 f92c 	bl	8004b20 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v>
 80048c8:	4603      	mov	r3, r0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3720      	adds	r7, #32
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>:
    TIn value) {
  return TOut(value);
}

template <typename TOut, typename TIn>
typename enable_if<!is_floating_point<TOut>::value, TOut>::type convertFloat(
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b082      	sub	sp, #8
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	e9c7 0100 	strd	r0, r1, [r7]
    TIn value) {
  return value >= numeric_limits<TOut>::lowest() &&
 80048dc:	f000 f94e 	bl	8004b7c <_ZN19ArduinoJson6101_11014numeric_limitsImvE6lowestEv>
 80048e0:	4603      	mov	r3, r0
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fb fdc2 	bl	800046c <__aeabi_ui2d>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
                 value <= numeric_limits<TOut>::highest()
             ? TOut(value)
 80048ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048f0:	f7fc f8bc 	bl	8000a6c <__aeabi_dcmpge>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d014      	beq.n	8004924 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x52>
                 value <= numeric_limits<TOut>::highest()
 80048fa:	f000 f946 	bl	8004b8a <_ZN19ArduinoJson6101_11014numeric_limitsImvE7highestEv>
 80048fe:	4603      	mov	r3, r0
 8004900:	4618      	mov	r0, r3
 8004902:	f7fb fdb3 	bl	800046c <__aeabi_ui2d>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
  return value >= numeric_limits<TOut>::lowest() &&
 800490a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800490e:	f7fc f8a3 	bl	8000a58 <__aeabi_dcmple>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d005      	beq.n	8004924 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x52>
             ? TOut(value)
 8004918:	e9d7 0100 	ldrd	r0, r1, [r7]
 800491c:	f7fc f8e2 	bl	8000ae4 <__aeabi_d2uiz>
 8004920:	4603      	mov	r3, r0
 8004922:	e000      	b.n	8004926 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x54>
 8004924:	2300      	movs	r3, #0
             : 0;
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	4603      	mov	r3, r0
 8004936:	71fb      	strb	r3, [r7, #7]
 8004938:	460b      	mov	r3, r1
 800493a:	71bb      	strb	r3, [r7, #6]
 800493c:	4613      	mov	r3, r2
 800493e:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 8004940:	79ba      	ldrb	r2, [r7, #6]
 8004942:	79fb      	ldrb	r3, [r7, #7]
 8004944:	429a      	cmp	r2, r3
 8004946:	d805      	bhi.n	8004954 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x26>
 8004948:	79fa      	ldrb	r2, [r7, #7]
 800494a:	797b      	ldrb	r3, [r7, #5]
 800494c:	429a      	cmp	r2, r3
 800494e:	d801      	bhi.n	8004954 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x26>
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x28>
 8004954:	2300      	movs	r3, #0
  }
 8004956:	4618      	mov	r0, r3
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	bc80      	pop	{r7}
 800495e:	4770      	bx	lr

08004960 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv>:
        forge(0x0AFE07B2, 0x7DD78B14)   // 1e-255
    };
    return factors[index];
  }

  static T nan() {
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
    return forge(0x7ff80000, 0x00000000);
 8004964:	2100      	movs	r1, #0
 8004966:	4804      	ldr	r0, [pc, #16]	; (8004978 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv+0x18>)
 8004968:	f000 f917 	bl	8004b9a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
  }
 8004970:	4610      	mov	r0, r2
 8004972:	4619      	mov	r1, r3
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	7ff80000 	.word	0x7ff80000

0800497c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>:
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	e9c7 2300 	strd	r2, r3, [r7]
 8004988:	68f9      	ldr	r1, [r7, #12]
 800498a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800498e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2208      	movs	r2, #8
 8004996:	741a      	strb	r2, [r3, #16]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr

080049a4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>:

  static T inf() {
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
    return forge(0x7ff00000, 0x00000000);
 80049a8:	2100      	movs	r1, #0
 80049aa:	4804      	ldr	r0, [pc, #16]	; (80049bc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv+0x18>)
 80049ac:	f000 f8f5 	bl	8004b9a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
  }
 80049b4:	4610      	mov	r0, r2
 80049b6:	4619      	mov	r1, r3
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	7ff00000 	.word	0x7ff00000

080049c0 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>:
  ParsedNumber() : uintValue(0), floatValue(0), _type(VALUE_IS_NULL) {}
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	e9c1 2300 	strd	r2, r3, [r1]
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	f04f 0200 	mov.w	r2, #0
 80049dc:	f04f 0300 	mov.w	r3, #0
 80049e0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	741a      	strb	r2, [r3, #16]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4618      	mov	r0, r3
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr

080049f6 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb>:
  ParsedNumber(TUInt value, bool is_negative)
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b084      	sub	sp, #16
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	e9c7 2300 	strd	r2, r3, [r7]
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
 8004a02:	68f9      	ldr	r1, [r7, #12]
 8004a04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a08:	e9c1 2300 	strd	r2, r3, [r1]
 8004a0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a10:	f7fb fd70 	bl	80004f4 <__aeabi_ul2d>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	68f9      	ldr	r1, [r7, #12]
 8004a1a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004a1e:	7e3b      	ldrb	r3, [r7, #24]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb+0x32>
 8004a24:	2207      	movs	r2, #7
 8004a26:	e000      	b.n	8004a2a <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb+0x34>
 8004a28:	2206      	movs	r2, #6
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	741a      	strb	r2, [r3, #16]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>:
  static T make_float(T m, TExponent e) {
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
    if (e > 0) {
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	dd1e      	ble.n	8004a88 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x50>
      for (uint8_t index = 0; e != 0; index++) {
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	75fb      	strb	r3, [r7, #23]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d03b      	beq.n	8004acc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x94>
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00d      	beq.n	8004a7a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x42>
 8004a5e:	7dfb      	ldrb	r3, [r7, #23]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 f8bd 	bl	8004be0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a6e:	f7fb fd77 	bl	8000560 <__aeabi_dmul>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	e9c7 2302 	strd	r2, r3, [r7, #8]
        e >>= 1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	105b      	asrs	r3, r3, #1
 8004a7e:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 8004a80:	7dfb      	ldrb	r3, [r7, #23]
 8004a82:	3301      	adds	r3, #1
 8004a84:	75fb      	strb	r3, [r7, #23]
 8004a86:	e7e2      	b.n	8004a4e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x16>
      e = TExponent(-e);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	425b      	negs	r3, r3
 8004a8c:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 8004a8e:	2300      	movs	r3, #0
 8004a90:	75bb      	strb	r3, [r7, #22]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d019      	beq.n	8004acc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x94>
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00d      	beq.n	8004abe <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x86>
 8004aa2:	7dbb      	ldrb	r3, [r7, #22]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 f8ff 	bl	8004ca8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ab2:	f7fb fd55 	bl	8000560 <__aeabi_dmul>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	e9c7 2302 	strd	r2, r3, [r7, #8]
        e >>= 1;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	105b      	asrs	r3, r3, #1
 8004ac2:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 8004ac4:	7dbb      	ldrb	r3, [r7, #22]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	75bb      	strb	r3, [r7, #22]
 8004aca:	e7e2      	b.n	8004a92 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x5a>
    return m;
 8004acc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
  }
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <_ZN19ArduinoJson6101_11023canStorePositiveIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuelestS3_stT0_EbE4typeES5_>:
canStorePositiveInteger(TIn value) {
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b082      	sub	sp, #8
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8004ae4:	f000 f851 	bl	8004b8a <_ZN19ArduinoJson6101_11014numeric_limitsImvE7highestEv>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	4618      	mov	r0, r3
 8004aec:	f04f 0100 	mov.w	r1, #0
 8004af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004af4:	4299      	cmp	r1, r3
 8004af6:	bf08      	it	eq
 8004af8:	4290      	cmpeq	r0, r2
 8004afa:	bf2c      	ite	cs
 8004afc:	2301      	movcs	r3, #1
 8004afe:	2300      	movcc	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <_ZN19ArduinoJson6101_11023canStoreNegativeIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueEbE4typeET0_>:
canStoreNegativeInteger(TIn) {
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	e9c7 0100 	strd	r0, r1, [r7]
  return false;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bc80      	pop	{r7}
 8004b1e:	4770      	bx	lr

08004b20 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v>:
  T as() const {
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
    switch (_type) {
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	7c1b      	ldrb	r3, [r3, #16]
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d017      	beq.n	8004b60 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x40>
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	dc1e      	bgt.n	8004b72 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x52>
 8004b34:	2b06      	cmp	r3, #6
 8004b36:	d00a      	beq.n	8004b4e <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x2e>
 8004b38:	2b07      	cmp	r3, #7
 8004b3a:	d11a      	bne.n	8004b72 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x52>
        return convertNegativeInteger<T>(uintValue);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b42:	4610      	mov	r0, r2
 8004b44:	4619      	mov	r1, r3
 8004b46:	f7ff fe9c 	bl	8004882 <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	e012      	b.n	8004b74 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x54>
        return convertPositiveInteger<T>(uintValue);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b54:	4610      	mov	r0, r2
 8004b56:	4619      	mov	r1, r3
 8004b58:	f7ff fe80 	bl	800485c <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	e009      	b.n	8004b74 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x54>
        return convertFloat<T>(floatValue);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004b66:	4610      	mov	r0, r2
 8004b68:	4619      	mov	r1, r3
 8004b6a:	f7ff feb2 	bl	80048d2 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	e000      	b.n	8004b74 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x54>
        return 0;
 8004b72:	2300      	movs	r3, #0
  }
 8004b74:	4618      	mov	r0, r3
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <_ZN19ArduinoJson6101_11014numeric_limitsImvE6lowestEv>:
template <typename T, typename Enable = void>
struct numeric_limits;

template <typename T>
struct numeric_limits<T, typename enable_if<is_unsigned<T>::value>::type> {
  static T lowest() {
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
    return 0;
 8004b80:	2300      	movs	r3, #0
  }
 8004b82:	4618      	mov	r0, r3
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bc80      	pop	{r7}
 8004b88:	4770      	bx	lr

08004b8a <_ZN19ArduinoJson6101_11014numeric_limitsImvE7highestEv>:
  static T highest() {
 8004b8a:	b480      	push	{r7}
 8004b8c:	af00      	add	r7, sp, #0
    return T(-1);
 8004b8e:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8004b92:	4618      	mov	r0, r3
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bc80      	pop	{r7}
 8004b98:	4770      	bx	lr

08004b9a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>:
  }

  // constructs a double floating point values from its binary representation
  // we use this function to workaround platforms with single precision literals
  // (for example, when -fsingle-precision-constant is passed to GCC)
  static T forge(uint32_t msb, uint32_t lsb) {
 8004b9a:	b5b0      	push	{r4, r5, r7, lr}
 8004b9c:	b082      	sub	sp, #8
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	6039      	str	r1, [r7, #0]
    return alias_cast<T>((uint64_t(msb) << 32) | lsb);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f04f 0100 	mov.w	r1, #0
 8004bac:	f04f 0200 	mov.w	r2, #0
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	0003      	movs	r3, r0
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	6839      	ldr	r1, [r7, #0]
 8004bba:	4608      	mov	r0, r1
 8004bbc:	f04f 0100 	mov.w	r1, #0
 8004bc0:	ea42 0400 	orr.w	r4, r2, r0
 8004bc4:	ea43 0501 	orr.w	r5, r3, r1
 8004bc8:	4620      	mov	r0, r4
 8004bca:	4629      	mov	r1, r5
 8004bcc:	f000 f910 	bl	8004df0 <_ZN19ArduinoJson6101_11010alias_castIdyEET_T0_>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
  }
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004be0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>:
  static T positiveBinaryPowerOfTen(int index) {
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
    static T factors[] = {
 8004be8:	4b25      	ldr	r3, [pc, #148]	; (8004c80 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	f3bf 8f5b 	dmb	ish
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	bf0c      	ite	eq
 8004bfa:	2301      	moveq	r3, #1
 8004bfc:	2300      	movne	r3, #0
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d031      	beq.n	8004c68 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x88>
 8004c04:	481e      	ldr	r0, [pc, #120]	; (8004c80 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 8004c06:	f00e fb93 	bl	8013330 <__cxa_guard_acquire>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	bf14      	ite	ne
 8004c10:	2301      	movne	r3, #1
 8004c12:	2300      	moveq	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d026      	beq.n	8004c68 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x88>
        forge(0x4693B8B5, 0xB5056E17),  // 1e32
 8004c1a:	491a      	ldr	r1, [pc, #104]	; (8004c84 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa4>)
 8004c1c:	481a      	ldr	r0, [pc, #104]	; (8004c88 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa8>)
 8004c1e:	f7ff ffbc 	bl	8004b9a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004c22:	4602      	mov	r2, r0
 8004c24:	460b      	mov	r3, r1
    static T factors[] = {
 8004c26:	4919      	ldr	r1, [pc, #100]	; (8004c8c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8004c28:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        forge(0x4D384F03, 0xE93FF9F5),  // 1e64
 8004c2c:	4918      	ldr	r1, [pc, #96]	; (8004c90 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb0>)
 8004c2e:	4819      	ldr	r0, [pc, #100]	; (8004c94 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb4>)
 8004c30:	f7ff ffb3 	bl	8004b9a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
    static T factors[] = {
 8004c38:	4914      	ldr	r1, [pc, #80]	; (8004c8c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8004c3a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        forge(0x5A827748, 0xF9301D32),  // 1e128
 8004c3e:	4916      	ldr	r1, [pc, #88]	; (8004c98 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb8>)
 8004c40:	4816      	ldr	r0, [pc, #88]	; (8004c9c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xbc>)
 8004c42:	f7ff ffaa 	bl	8004b9a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004c46:	4602      	mov	r2, r0
 8004c48:	460b      	mov	r3, r1
    static T factors[] = {
 8004c4a:	4910      	ldr	r1, [pc, #64]	; (8004c8c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8004c4c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        forge(0x75154FDD, 0x7F73BF3C)   // 1e256
 8004c50:	4913      	ldr	r1, [pc, #76]	; (8004ca0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc0>)
 8004c52:	4814      	ldr	r0, [pc, #80]	; (8004ca4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc4>)
 8004c54:	f7ff ffa1 	bl	8004b9a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
    static T factors[] = {
 8004c5c:	490b      	ldr	r1, [pc, #44]	; (8004c8c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8004c5e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8004c62:	4807      	ldr	r0, [pc, #28]	; (8004c80 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 8004c64:	f00e fb70 	bl	8013348 <__cxa_guard_release>
    return factors[index];
 8004c68:	4a08      	ldr	r2, [pc, #32]	; (8004c8c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	4413      	add	r3, r2
 8004c70:	e9d3 2300 	ldrd	r2, r3, [r3]
  }
 8004c74:	4610      	mov	r0, r2
 8004c76:	4619      	mov	r1, r3
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20000328 	.word	0x20000328
 8004c84:	b5056e17 	.word	0xb5056e17
 8004c88:	4693b8b5 	.word	0x4693b8b5
 8004c8c:	20000008 	.word	0x20000008
 8004c90:	e93ff9f5 	.word	0xe93ff9f5
 8004c94:	4d384f03 	.word	0x4d384f03
 8004c98:	f9301d32 	.word	0xf9301d32
 8004c9c:	5a827748 	.word	0x5a827748
 8004ca0:	7f73bf3c 	.word	0x7f73bf3c
 8004ca4:	75154fdd 	.word	0x75154fdd

08004ca8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>:
  static T negativeBinaryPowerOfTen(int index) {
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
    static T factors[] = {
 8004cb0:	4b3b      	ldr	r3, [pc, #236]	; (8004da0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xf8>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	f3bf 8f5b 	dmb	ish
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	bf0c      	ite	eq
 8004cc2:	2301      	moveq	r3, #1
 8004cc4:	2300      	movne	r3, #0
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d05e      	beq.n	8004d8a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xe2>
 8004ccc:	4834      	ldr	r0, [pc, #208]	; (8004da0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xf8>)
 8004cce:	f00e fb2f 	bl	8013330 <__cxa_guard_acquire>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	bf14      	ite	ne
 8004cd8:	2301      	movne	r3, #1
 8004cda:	2300      	moveq	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d053      	beq.n	8004d8a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xe2>
        forge(0x3FB99999, 0x9999999A),  // 1e-1
 8004ce2:	4930      	ldr	r1, [pc, #192]	; (8004da4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 8004ce4:	4830      	ldr	r0, [pc, #192]	; (8004da8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x100>)
 8004ce6:	f7ff ff58 	bl	8004b9a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
    static T factors[] = {
 8004cee:	492f      	ldr	r1, [pc, #188]	; (8004dac <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x104>)
 8004cf0:	e9c1 2300 	strd	r2, r3, [r1]
        forge(0x3F847AE1, 0x47AE147B),  // 1e-2
 8004cf4:	492e      	ldr	r1, [pc, #184]	; (8004db0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8004cf6:	482f      	ldr	r0, [pc, #188]	; (8004db4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x10c>)
 8004cf8:	f7ff ff4f 	bl	8004b9a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
    static T factors[] = {
 8004d00:	492a      	ldr	r1, [pc, #168]	; (8004dac <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x104>)
 8004d02:	e9c1 2302 	strd	r2, r3, [r1, #8]
        forge(0x3F1A36E2, 0xEB1C432D),  // 1e-4
 8004d06:	492c      	ldr	r1, [pc, #176]	; (8004db8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x110>)
 8004d08:	482c      	ldr	r0, [pc, #176]	; (8004dbc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x114>)
 8004d0a:	f7ff ff46 	bl	8004b9a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
    static T factors[] = {
 8004d12:	4926      	ldr	r1, [pc, #152]	; (8004dac <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x104>)
 8004d14:	e9c1 2304 	strd	r2, r3, [r1, #16]
        forge(0x3E45798E, 0xE2308C3A),  // 1e-8
 8004d18:	4929      	ldr	r1, [pc, #164]	; (8004dc0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x118>)
 8004d1a:	482a      	ldr	r0, [pc, #168]	; (8004dc4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x11c>)
 8004d1c:	f7ff ff3d 	bl	8004b9a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
    static T factors[] = {
 8004d24:	4921      	ldr	r1, [pc, #132]	; (8004dac <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x104>)
 8004d26:	e9c1 2306 	strd	r2, r3, [r1, #24]
        forge(0x3C9CD2B2, 0x97D889BC),  // 1e-16
 8004d2a:	4927      	ldr	r1, [pc, #156]	; (8004dc8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x120>)
 8004d2c:	4827      	ldr	r0, [pc, #156]	; (8004dcc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x124>)
 8004d2e:	f7ff ff34 	bl	8004b9a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
    static T factors[] = {
 8004d36:	491d      	ldr	r1, [pc, #116]	; (8004dac <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x104>)
 8004d38:	e9c1 2308 	strd	r2, r3, [r1, #32]
        forge(0x3949F623, 0xD5A8A733),  // 1e-32
 8004d3c:	4924      	ldr	r1, [pc, #144]	; (8004dd0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x128>)
 8004d3e:	4825      	ldr	r0, [pc, #148]	; (8004dd4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x12c>)
 8004d40:	f7ff ff2b 	bl	8004b9a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
    static T factors[] = {
 8004d48:	4918      	ldr	r1, [pc, #96]	; (8004dac <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x104>)
 8004d4a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        forge(0x32A50FFD, 0x44F4A73D),  // 1e-64
 8004d4e:	4922      	ldr	r1, [pc, #136]	; (8004dd8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x130>)
 8004d50:	4822      	ldr	r0, [pc, #136]	; (8004ddc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x134>)
 8004d52:	f7ff ff22 	bl	8004b9a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
    static T factors[] = {
 8004d5a:	4914      	ldr	r1, [pc, #80]	; (8004dac <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x104>)
 8004d5c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        forge(0x255BBA08, 0xCF8C979D),  // 1e-128
 8004d60:	491f      	ldr	r1, [pc, #124]	; (8004de0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x138>)
 8004d62:	4820      	ldr	r0, [pc, #128]	; (8004de4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x13c>)
 8004d64:	f7ff ff19 	bl	8004b9a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
    static T factors[] = {
 8004d6c:	490f      	ldr	r1, [pc, #60]	; (8004dac <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x104>)
 8004d6e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        forge(0x0AC80628, 0x64AC6F43)   // 1e-256
 8004d72:	491d      	ldr	r1, [pc, #116]	; (8004de8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x140>)
 8004d74:	481d      	ldr	r0, [pc, #116]	; (8004dec <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x144>)
 8004d76:	f7ff ff10 	bl	8004b9a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
    static T factors[] = {
 8004d7e:	490b      	ldr	r1, [pc, #44]	; (8004dac <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x104>)
 8004d80:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8004d84:	4806      	ldr	r0, [pc, #24]	; (8004da0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xf8>)
 8004d86:	f00e fadf 	bl	8013348 <__cxa_guard_release>
    return factors[index];
 8004d8a:	4a08      	ldr	r2, [pc, #32]	; (8004dac <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x104>)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	4413      	add	r3, r2
 8004d92:	e9d3 2300 	ldrd	r2, r3, [r3]
  }
 8004d96:	4610      	mov	r0, r2
 8004d98:	4619      	mov	r1, r3
 8004d9a:	3708      	adds	r7, #8
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	20000378 	.word	0x20000378
 8004da4:	9999999a 	.word	0x9999999a
 8004da8:	3fb99999 	.word	0x3fb99999
 8004dac:	20000330 	.word	0x20000330
 8004db0:	47ae147b 	.word	0x47ae147b
 8004db4:	3f847ae1 	.word	0x3f847ae1
 8004db8:	eb1c432d 	.word	0xeb1c432d
 8004dbc:	3f1a36e2 	.word	0x3f1a36e2
 8004dc0:	e2308c3a 	.word	0xe2308c3a
 8004dc4:	3e45798e 	.word	0x3e45798e
 8004dc8:	97d889bc 	.word	0x97d889bc
 8004dcc:	3c9cd2b2 	.word	0x3c9cd2b2
 8004dd0:	d5a8a733 	.word	0xd5a8a733
 8004dd4:	3949f623 	.word	0x3949f623
 8004dd8:	44f4a73d 	.word	0x44f4a73d
 8004ddc:	32a50ffd 	.word	0x32a50ffd
 8004de0:	cf8c979d 	.word	0xcf8c979d
 8004de4:	255bba08 	.word	0x255bba08
 8004de8:	64ac6f43 	.word	0x64ac6f43
 8004dec:	0ac80628 	.word	0x0ac80628

08004df0 <_ZN19ArduinoJson6101_11010alias_castIdyEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	e9c7 0100 	strd	r0, r1, [r7]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 8004dfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dfe:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 8004e02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8004e06:	4610      	mov	r0, r2
 8004e08:	4619      	mov	r1, r3
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bc80      	pop	{r7}
 8004e10:	4770      	bx	lr
	...

08004e14 <_Z41__static_initialization_and_destruction_0ii>:
 8004e14:	b590      	push	{r4, r7, lr}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d11e      	bne.n	8004e62 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d119      	bne.n	8004e62 <_Z41__static_initialization_and_destruction_0ii+0x4e>
string strJson;
 8004e2e:	4816      	ldr	r0, [pc, #88]	; (8004e88 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004e30:	f00e fb4f 	bl	80134d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 8004e34:	4622      	mov	r2, r4
 8004e36:	f242 7110 	movw	r1, #10000	; 0x2710
 8004e3a:	4814      	ldr	r0, [pc, #80]	; (8004e8c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004e3c:	f7fe fa64 	bl	8003308 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>
  FORCE_INLINE ObjectRef() : base_type(0), _pool(0) {}
 8004e40:	4b13      	ldr	r3, [pc, #76]	; (8004e90 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004e42:	2100      	movs	r1, #0
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fe fa3a 	bl	80032be <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 8004e4a:	4b11      	ldr	r3, [pc, #68]	; (8004e90 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	605a      	str	r2, [r3, #4]
 8004e50:	4b10      	ldr	r3, [pc, #64]	; (8004e94 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004e52:	2100      	movs	r1, #0
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fe fa32 	bl	80032be <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 8004e5a:	4b0e      	ldr	r3, [pc, #56]	; (8004e94 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	605a      	str	r2, [r3, #4]
 8004e60:	bf00      	nop
JsonObject module;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10a      	bne.n	8004e7e <_Z41__static_initialization_and_destruction_0ii+0x6a>
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d105      	bne.n	8004e7e <_Z41__static_initialization_and_destruction_0ii+0x6a>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 8004e72:	4806      	ldr	r0, [pc, #24]	; (8004e8c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004e74:	f000 f810 	bl	8004e98 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>
string strJson;
 8004e78:	4803      	ldr	r0, [pc, #12]	; (8004e88 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004e7a:	f00e fb31 	bl	80134e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8004e7e:	bf00      	nop
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd90      	pop	{r4, r7, pc}
 8004e86:	bf00      	nop
 8004e88:	200002d8 	.word	0x200002d8
 8004e8c:	200002f0 	.word	0x200002f0
 8004e90:	20000318 	.word	0x20000318
 8004e94:	20000320 	.word	0x20000320

08004e98 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>:
  ~BasicJsonDocument() {
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
    freePool();
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f805 	bl	8004eb0 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>
  }
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>:
    if (requiredSize <= capacity()) return;
    freePool();
    replacePool(allocPool(addPadding(requiredSize)));
  }

  void freePool() {
 8004eb0:	b590      	push	{r4, r7, lr}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
    this->deallocate(memoryPool().buffer());
 8004eb8:	687c      	ldr	r4, [r7, #4]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3308      	adds	r3, #8
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fc ffd3 	bl	8001e6a <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fc fd6d 	bl	80019a6 <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	f000 f804 	bl	8004ede <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>
  }
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd90      	pop	{r4, r7, pc}

08004ede <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>:
  void deallocate(void* p) {
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b082      	sub	sp, #8
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	6039      	str	r1, [r7, #0]
    _allocator.deallocate(p);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6839      	ldr	r1, [r7, #0]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fc fffb 	bl	8001ee8 <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>
  }
 8004ef2:	bf00      	nop
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <_GLOBAL__sub_I_TIM1_UP_TIM10_IRQHandler>:
 8004efa:	b580      	push	{r7, lr}
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004f02:	2001      	movs	r0, #1
 8004f04:	f7ff ff86 	bl	8004e14 <_Z41__static_initialization_and_destruction_0ii>
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <_GLOBAL__sub_D_TIM1_UP_TIM10_IRQHandler>:
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004f12:	2000      	movs	r0, #0
 8004f14:	f7ff ff7e 	bl	8004e14 <_Z41__static_initialization_and_destruction_0ii>
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f22:	2300      	movs	r3, #0
 8004f24:	607b      	str	r3, [r7, #4]
 8004f26:	4b0f      	ldr	r3, [pc, #60]	; (8004f64 <HAL_MspInit+0x48>)
 8004f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2a:	4a0e      	ldr	r2, [pc, #56]	; (8004f64 <HAL_MspInit+0x48>)
 8004f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f30:	6453      	str	r3, [r2, #68]	; 0x44
 8004f32:	4b0c      	ldr	r3, [pc, #48]	; (8004f64 <HAL_MspInit+0x48>)
 8004f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f3a:	607b      	str	r3, [r7, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f3e:	2300      	movs	r3, #0
 8004f40:	603b      	str	r3, [r7, #0]
 8004f42:	4b08      	ldr	r3, [pc, #32]	; (8004f64 <HAL_MspInit+0x48>)
 8004f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f46:	4a07      	ldr	r2, [pc, #28]	; (8004f64 <HAL_MspInit+0x48>)
 8004f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f4e:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <HAL_MspInit+0x48>)
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc80      	pop	{r7}
 8004f62:	4770      	bx	lr
 8004f64:	40023800 	.word	0x40023800

08004f68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08c      	sub	sp, #48	; 0x30
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f70:	f107 031c 	add.w	r3, r7, #28
 8004f74:	2200      	movs	r2, #0
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	605a      	str	r2, [r3, #4]
 8004f7a:	609a      	str	r2, [r3, #8]
 8004f7c:	60da      	str	r2, [r3, #12]
 8004f7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a32      	ldr	r2, [pc, #200]	; (8005050 <HAL_UART_MspInit+0xe8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d12d      	bne.n	8004fe6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	61bb      	str	r3, [r7, #24]
 8004f8e:	4b31      	ldr	r3, [pc, #196]	; (8005054 <HAL_UART_MspInit+0xec>)
 8004f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f92:	4a30      	ldr	r2, [pc, #192]	; (8005054 <HAL_UART_MspInit+0xec>)
 8004f94:	f043 0310 	orr.w	r3, r3, #16
 8004f98:	6453      	str	r3, [r2, #68]	; 0x44
 8004f9a:	4b2e      	ldr	r3, [pc, #184]	; (8005054 <HAL_UART_MspInit+0xec>)
 8004f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9e:	f003 0310 	and.w	r3, r3, #16
 8004fa2:	61bb      	str	r3, [r7, #24]
 8004fa4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	617b      	str	r3, [r7, #20]
 8004faa:	4b2a      	ldr	r3, [pc, #168]	; (8005054 <HAL_UART_MspInit+0xec>)
 8004fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fae:	4a29      	ldr	r2, [pc, #164]	; (8005054 <HAL_UART_MspInit+0xec>)
 8004fb0:	f043 0301 	orr.w	r3, r3, #1
 8004fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fb6:	4b27      	ldr	r3, [pc, #156]	; (8005054 <HAL_UART_MspInit+0xec>)
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004fc2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fc8:	2302      	movs	r3, #2
 8004fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004fd4:	2307      	movs	r3, #7
 8004fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fd8:	f107 031c 	add.w	r3, r7, #28
 8004fdc:	4619      	mov	r1, r3
 8004fde:	481e      	ldr	r0, [pc, #120]	; (8005058 <HAL_UART_MspInit+0xf0>)
 8004fe0:	f003 fdcc 	bl	8008b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004fe4:	e030      	b.n	8005048 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a1c      	ldr	r2, [pc, #112]	; (800505c <HAL_UART_MspInit+0xf4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d12b      	bne.n	8005048 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	613b      	str	r3, [r7, #16]
 8004ff4:	4b17      	ldr	r3, [pc, #92]	; (8005054 <HAL_UART_MspInit+0xec>)
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff8:	4a16      	ldr	r2, [pc, #88]	; (8005054 <HAL_UART_MspInit+0xec>)
 8004ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ffe:	6413      	str	r3, [r2, #64]	; 0x40
 8005000:	4b14      	ldr	r3, [pc, #80]	; (8005054 <HAL_UART_MspInit+0xec>)
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005008:	613b      	str	r3, [r7, #16]
 800500a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800500c:	2300      	movs	r3, #0
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	4b10      	ldr	r3, [pc, #64]	; (8005054 <HAL_UART_MspInit+0xec>)
 8005012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005014:	4a0f      	ldr	r2, [pc, #60]	; (8005054 <HAL_UART_MspInit+0xec>)
 8005016:	f043 0308 	orr.w	r3, r3, #8
 800501a:	6313      	str	r3, [r2, #48]	; 0x30
 800501c:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <HAL_UART_MspInit+0xec>)
 800501e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005020:	f003 0308 	and.w	r3, r3, #8
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005028:	2360      	movs	r3, #96	; 0x60
 800502a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800502c:	2302      	movs	r3, #2
 800502e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005030:	2300      	movs	r3, #0
 8005032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005034:	2303      	movs	r3, #3
 8005036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005038:	2307      	movs	r3, #7
 800503a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800503c:	f107 031c 	add.w	r3, r7, #28
 8005040:	4619      	mov	r1, r3
 8005042:	4807      	ldr	r0, [pc, #28]	; (8005060 <HAL_UART_MspInit+0xf8>)
 8005044:	f003 fd9a 	bl	8008b7c <HAL_GPIO_Init>
}
 8005048:	bf00      	nop
 800504a:	3730      	adds	r7, #48	; 0x30
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	40011000 	.word	0x40011000
 8005054:	40023800 	.word	0x40023800
 8005058:	40020000 	.word	0x40020000
 800505c:	40004400 	.word	0x40004400
 8005060:	40020c00 	.word	0x40020c00

08005064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005068:	e7fe      	b.n	8005068 <NMI_Handler+0x4>

0800506a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800506a:	b480      	push	{r7}
 800506c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800506e:	e7fe      	b.n	800506e <HardFault_Handler+0x4>

08005070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005074:	e7fe      	b.n	8005074 <MemManage_Handler+0x4>

08005076 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005076:	b480      	push	{r7}
 8005078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800507a:	e7fe      	b.n	800507a <BusFault_Handler+0x4>

0800507c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005080:	e7fe      	b.n	8005080 <UsageFault_Handler+0x4>

08005082 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005082:	b480      	push	{r7}
 8005084:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005086:	bf00      	nop
 8005088:	46bd      	mov	sp, r7
 800508a:	bc80      	pop	{r7}
 800508c:	4770      	bx	lr

0800508e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800508e:	b480      	push	{r7}
 8005090:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005092:	bf00      	nop
 8005094:	46bd      	mov	sp, r7
 8005096:	bc80      	pop	{r7}
 8005098:	4770      	bx	lr

0800509a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800509a:	b480      	push	{r7}
 800509c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800509e:	bf00      	nop
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr

080050a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80050aa:	f002 f86d 	bl	8007188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80050ae:	bf00      	nop
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80050b2:	b480      	push	{r7}
 80050b4:	af00      	add	r7, sp, #0
	return 1;
 80050b6:	2301      	movs	r3, #1
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bc80      	pop	{r7}
 80050be:	4770      	bx	lr

080050c0 <_kill>:

int _kill(int pid, int sig)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80050ca:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <_kill+0x20>)
 80050cc:	2216      	movs	r2, #22
 80050ce:	601a      	str	r2, [r3, #0]
	return -1;
 80050d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	bc80      	pop	{r7}
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	20006cb8 	.word	0x20006cb8

080050e4 <_exit>:

void _exit (int status)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80050ec:	f04f 31ff 	mov.w	r1, #4294967295
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f7ff ffe5 	bl	80050c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80050f6:	e7fe      	b.n	80050f6 <_exit+0x12>

080050f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005104:	2300      	movs	r3, #0
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	e00a      	b.n	8005120 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800510a:	f3af 8000 	nop.w
 800510e:	4601      	mov	r1, r0
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	60ba      	str	r2, [r7, #8]
 8005116:	b2ca      	uxtb	r2, r1
 8005118:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	3301      	adds	r3, #1
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	429a      	cmp	r2, r3
 8005126:	dbf0      	blt.n	800510a <_read+0x12>
	}

return len;
 8005128:	687b      	ldr	r3, [r7, #4]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b086      	sub	sp, #24
 8005136:	af00      	add	r7, sp, #0
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800513e:	2300      	movs	r3, #0
 8005140:	617b      	str	r3, [r7, #20]
 8005142:	e009      	b.n	8005158 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	60ba      	str	r2, [r7, #8]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	4618      	mov	r0, r3
 800514e:	f7fd f8e5 	bl	800231c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	3301      	adds	r3, #1
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	429a      	cmp	r2, r3
 800515e:	dbf1      	blt.n	8005144 <_write+0x12>
	}
	return len;
 8005160:	687b      	ldr	r3, [r7, #4]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3718      	adds	r7, #24
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <_close>:

int _close(int file)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
	return -1;
 8005172:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005176:	4618      	mov	r0, r3
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr

08005180 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005190:	605a      	str	r2, [r3, #4]
	return 0;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	bc80      	pop	{r7}
 800519c:	4770      	bx	lr

0800519e <_isatty>:

int _isatty(int file)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
	return 1;
 80051a6:	2301      	movs	r3, #1
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bc80      	pop	{r7}
 80051b0:	4770      	bx	lr

080051b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b085      	sub	sp, #20
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	607a      	str	r2, [r7, #4]
	return 0;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bc80      	pop	{r7}
 80051c8:	4770      	bx	lr
	...

080051cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80051d4:	4a14      	ldr	r2, [pc, #80]	; (8005228 <_sbrk+0x5c>)
 80051d6:	4b15      	ldr	r3, [pc, #84]	; (800522c <_sbrk+0x60>)
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80051e0:	4b13      	ldr	r3, [pc, #76]	; (8005230 <_sbrk+0x64>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d102      	bne.n	80051ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80051e8:	4b11      	ldr	r3, [pc, #68]	; (8005230 <_sbrk+0x64>)
 80051ea:	4a12      	ldr	r2, [pc, #72]	; (8005234 <_sbrk+0x68>)
 80051ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80051ee:	4b10      	ldr	r3, [pc, #64]	; (8005230 <_sbrk+0x64>)
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4413      	add	r3, r2
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d205      	bcs.n	8005208 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80051fc:	4b0e      	ldr	r3, [pc, #56]	; (8005238 <_sbrk+0x6c>)
 80051fe:	220c      	movs	r2, #12
 8005200:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005202:	f04f 33ff 	mov.w	r3, #4294967295
 8005206:	e009      	b.n	800521c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8005208:	4b09      	ldr	r3, [pc, #36]	; (8005230 <_sbrk+0x64>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800520e:	4b08      	ldr	r3, [pc, #32]	; (8005230 <_sbrk+0x64>)
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4413      	add	r3, r2
 8005216:	4a06      	ldr	r2, [pc, #24]	; (8005230 <_sbrk+0x64>)
 8005218:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800521a:	68fb      	ldr	r3, [r7, #12]
}
 800521c:	4618      	mov	r0, r3
 800521e:	371c      	adds	r7, #28
 8005220:	46bd      	mov	sp, r7
 8005222:	bc80      	pop	{r7}
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	2001c000 	.word	0x2001c000
 800522c:	00000400 	.word	0x00000400
 8005230:	2000037c 	.word	0x2000037c
 8005234:	20006cc8 	.word	0x20006cc8
 8005238:	20006cb8 	.word	0x20006cb8

0800523c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005240:	bf00      	nop
 8005242:	46bd      	mov	sp, r7
 8005244:	bc80      	pop	{r7}
 8005246:	4770      	bx	lr

08005248 <_ZL18IAP_tftp_decode_opPc>:
  * @brief Returns the TFTP opcode
  * @param buf: pointer on the TFTP packet
  * @retval None
  */
static tftp_opcode IAP_tftp_decode_op(char *buf)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  return (tftp_opcode)(buf[1]);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	3301      	adds	r3, #1
 8005254:	781b      	ldrb	r3, [r3, #0]
}
 8005256:	4618      	mov	r0, r3
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	bc80      	pop	{r7}
 800525e:	4770      	bx	lr

08005260 <_ZL22IAP_tftp_extract_blockPc>:
  * @brief  Extracts the block number
  * @param  buf: pointer on the TFTP packet
  * @retval block number
  */
static u16_t IAP_tftp_extract_block(char *buf)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  u16_t *b = (u16_t*)buf;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	60fb      	str	r3, [r7, #12]
  return ntohs(b[1]);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	3302      	adds	r3, #2
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f005 f98f 	bl	800a596 <lwip_htons>
 8005278:	4603      	mov	r3, r0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <_ZL19IAP_tftp_set_opcodePc11tftp_opcode>:
  * @param  buffer: pointer on the TFTP packet
  * @param  opcode: TFTP opcode
  * @retval None
  */
static void IAP_tftp_set_opcode(char *buffer, tftp_opcode opcode)
{
 8005282:	b480      	push	{r7}
 8005284:	b083      	sub	sp, #12
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	460b      	mov	r3, r1
 800528c:	70fb      	strb	r3, [r7, #3]
  buffer[0] = 0;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	701a      	strb	r2, [r3, #0]
  buffer[1] = (u8_t)opcode;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3301      	adds	r3, #1
 8005298:	78fa      	ldrb	r2, [r7, #3]
 800529a:	701a      	strb	r2, [r3, #0]
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bc80      	pop	{r7}
 80052a4:	4770      	bx	lr

080052a6 <_ZL18IAP_tftp_set_blockPct>:
  * @param packet: pointer on the TFTP packet
  * @param  block: block number
  * @retval None
  */
static void IAP_tftp_set_block(char* packet, u16_t block)
{
 80052a6:	b590      	push	{r4, r7, lr}
 80052a8:	b085      	sub	sp, #20
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	460b      	mov	r3, r1
 80052b0:	807b      	strh	r3, [r7, #2]
  u16_t *p = (u16_t *)packet;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	60fb      	str	r3, [r7, #12]
  p[1] = htons(block);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	1c9c      	adds	r4, r3, #2
 80052ba:	887b      	ldrh	r3, [r7, #2]
 80052bc:	4618      	mov	r0, r3
 80052be:	f005 f96a 	bl	800a596 <lwip_htons>
 80052c2:	4603      	mov	r3, r0
 80052c4:	8023      	strh	r3, [r4, #0]
}
 80052c6:	bf00      	nop
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd90      	pop	{r4, r7, pc}

080052ce <_ZL24IAP_tftp_send_ack_packetP7udp_pcbPK8ip4_addrii>:
  * @param to_port: receive port number
  * @param block: block number
  * @retval: err_t: error code
  */
static err_t IAP_tftp_send_ack_packet(struct udp_pcb *upcb, const ip_addr_t *to, int to_port, int block)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b088      	sub	sp, #32
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	607a      	str	r2, [r7, #4]
 80052da:	603b      	str	r3, [r7, #0]
  struct pbuf *pkt_buf; /* Chain of pbuf's to be sent */

  /* create the maximum possible size packet that a TFTP ACK packet can be */
  char packet[TFTP_ACK_PKT_LEN];

	memset(packet, 0, TFTP_ACK_PKT_LEN *sizeof(char));
 80052dc:	f107 0314 	add.w	r3, r7, #20
 80052e0:	2204      	movs	r2, #4
 80052e2:	2100      	movs	r1, #0
 80052e4:	4618      	mov	r0, r3
 80052e6:	f00e fa85 	bl	80137f4 <memset>

  /* define the first two bytes of the packet */
  IAP_tftp_set_opcode(packet, TFTP_ACK);
 80052ea:	f107 0314 	add.w	r3, r7, #20
 80052ee:	2104      	movs	r1, #4
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff ffc6 	bl	8005282 <_ZL19IAP_tftp_set_opcodePc11tftp_opcode>
   * If we are ACK'ing a DATA pkt then the block number echoes that of the DATA pkt being ACK'd (duh)
   * If we are ACK'ing a WRQ pkt then the block number is always 0
   * RRQ packets are never sent ACK pkts by the server, instead the server sends DATA pkts to the
   * host which are, obviously, used as the "acknowledgement".  This saves from having to sEndTransferboth
   * an ACK packet and a DATA packet for RRQs - see RFC1350 for more info.  */
  IAP_tftp_set_block(packet, block);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	f107 0314 	add.w	r3, r7, #20
 80052fe:	4611      	mov	r1, r2
 8005300:	4618      	mov	r0, r3
 8005302:	f7ff ffd0 	bl	80052a6 <_ZL18IAP_tftp_set_blockPct>

  /* PBUF_TRANSPORT - specifies the transport layer */
  pkt_buf = pbuf_alloc(PBUF_TRANSPORT, TFTP_ACK_PKT_LEN, PBUF_POOL);
 8005306:	2203      	movs	r2, #3
 8005308:	2104      	movs	r1, #4
 800530a:	2000      	movs	r0, #0
 800530c:	f005 fefe 	bl	800b10c <pbuf_alloc>
 8005310:	61f8      	str	r0, [r7, #28]

  if (!pkt_buf)      /*if the packet pbuf == NULL exit and EndTransfertransmission */
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d102      	bne.n	800531e <_ZL24IAP_tftp_send_ack_packetP7udp_pcbPK8ip4_addrii+0x50>
  {
    return ERR_MEM;
 8005318:	f04f 33ff 	mov.w	r3, #4294967295
 800531c:	e011      	b.n	8005342 <_ZL24IAP_tftp_send_ack_packetP7udp_pcbPK8ip4_addrii+0x74>
  }

  /* Copy the original data buffer over to the packet buffer's payload */
  memcpy(pkt_buf->payload, packet, TFTP_ACK_PKT_LEN);
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	601a      	str	r2, [r3, #0]

  /* Sending packet by UDP protocol */
  err = udp_sendto(upcb, pkt_buf, to, to_port);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	b29b      	uxth	r3, r3
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	69f9      	ldr	r1, [r7, #28]
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f00b fb84 	bl	8010a3c <udp_sendto>
 8005334:	4603      	mov	r3, r0
 8005336:	76fb      	strb	r3, [r7, #27]

  /* free the buffer pbuf */
  pbuf_free(pkt_buf);
 8005338:	69f8      	ldr	r0, [r7, #28]
 800533a:	f006 fa59 	bl	800b7f0 <pbuf_free>

  return err;
 800533e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3720      	adds	r7, #32
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt>:
  * @param ip_addr: pointer on the receive IP_address structure
  * @param port: receive port address
  * @retval None
  */
static void IAP_wrq_recv_callback(void *_args, struct udp_pcb *upcb, struct pbuf *pkt_buf, const ip_addr_t *addr, u16_t port)
{
 800534c:	b590      	push	{r4, r7, lr}
 800534e:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8005352:	af00      	add	r7, sp, #0
 8005354:	f107 040c 	add.w	r4, r7, #12
 8005358:	6020      	str	r0, [r4, #0]
 800535a:	f107 0008 	add.w	r0, r7, #8
 800535e:	6001      	str	r1, [r0, #0]
 8005360:	1d39      	adds	r1, r7, #4
 8005362:	600a      	str	r2, [r1, #0]
 8005364:	463a      	mov	r2, r7
 8005366:	6013      	str	r3, [r2, #0]
  tftp_connection_args *args = (tftp_connection_args *)_args;
 8005368:	f107 030c 	add.w	r3, r7, #12
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
  uint32_t data_buffer[128];
  uint16_t count=0;
 8005372:	2300      	movs	r3, #0
 8005374:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216

  if (pkt_buf->len != pkt_buf->tot_len)
 8005378:	1d3b      	adds	r3, r7, #4
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	895a      	ldrh	r2, [r3, #10]
 800537e:	1d3b      	adds	r3, r7, #4
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	891b      	ldrh	r3, [r3, #8]
 8005384:	429a      	cmp	r2, r3
 8005386:	f040 80a9 	bne.w	80054dc <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x190>
  {
    return;
  }

  /* Does this packet have any valid data to write? */
  if ((pkt_buf->len > TFTP_DATA_PKT_HDR_LEN) &&
 800538a:	1d3b      	adds	r3, r7, #4
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	895b      	ldrh	r3, [r3, #10]
 8005390:	2b04      	cmp	r3, #4
 8005392:	d910      	bls.n	80053b6 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x6a>
      (IAP_tftp_extract_block((char*)pkt_buf->payload) == (args->block + 1)))
 8005394:	1d3b      	adds	r3, r7, #4
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	4618      	mov	r0, r3
 800539c:	f7ff ff60 	bl	8005260 <_ZL22IAP_tftp_extract_blockPc>
 80053a0:	4603      	mov	r3, r0
 80053a2:	461a      	mov	r2, r3
 80053a4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80053a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80053ac:	3301      	adds	r3, #1
  if ((pkt_buf->len > TFTP_DATA_PKT_HDR_LEN) &&
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d101      	bne.n	80053b6 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x6a>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e000      	b.n	80053b8 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x6c>
 80053b6:	2300      	movs	r3, #0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d04b      	beq.n	8005454 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x108>
  {
    /* copy packet payload to data_buffer */
    pbuf_copy_partial(pkt_buf, data_buffer, pkt_buf->len - TFTP_DATA_PKT_HDR_LEN,
 80053bc:	1d3b      	adds	r3, r7, #4
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	895b      	ldrh	r3, [r3, #10]
 80053c2:	3b04      	subs	r3, #4
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	f107 0110 	add.w	r1, r7, #16
 80053ca:	1d38      	adds	r0, r7, #4
 80053cc:	2304      	movs	r3, #4
 80053ce:	6800      	ldr	r0, [r0, #0]
 80053d0:	f006 fc0c 	bl	800bbec <pbuf_copy_partial>
                      TFTP_DATA_PKT_HDR_LEN);

    total_count += pkt_buf->len - TFTP_DATA_PKT_HDR_LEN;
 80053d4:	1d3b      	adds	r3, r7, #4
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	895b      	ldrh	r3, [r3, #10]
 80053da:	461a      	mov	r2, r3
 80053dc:	4b42      	ldr	r3, [pc, #264]	; (80054e8 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x19c>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4413      	add	r3, r2
 80053e2:	3b04      	subs	r3, #4
 80053e4:	4a40      	ldr	r2, [pc, #256]	; (80054e8 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x19c>)
 80053e6:	6013      	str	r3, [r2, #0]

    count = (pkt_buf->len - TFTP_DATA_PKT_HDR_LEN)/4;
 80053e8:	1d3b      	adds	r3, r7, #4
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	895b      	ldrh	r3, [r3, #10]
 80053ee:	3b04      	subs	r3, #4
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	da00      	bge.n	80053f6 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xaa>
 80053f4:	3303      	adds	r3, #3
 80053f6:	109b      	asrs	r3, r3, #2
 80053f8:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    if (((pkt_buf->len - TFTP_DATA_PKT_HDR_LEN)%4)!=0)
 80053fc:	1d3b      	adds	r3, r7, #4
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	895b      	ldrh	r3, [r3, #10]
 8005402:	3b04      	subs	r3, #4
 8005404:	f003 0303 	and.w	r3, r3, #3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d004      	beq.n	8005416 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xca>
    count++;
 800540c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8005410:	3301      	adds	r3, #1
 8005412:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216

    /* Write received data in Flash */
    FLASH_If_Write(&Flash_Write_Address, data_buffer ,count);
 8005416:	f8b7 2216 	ldrh.w	r2, [r7, #534]	; 0x216
 800541a:	f107 0310 	add.w	r3, r7, #16
 800541e:	4619      	mov	r1, r3
 8005420:	4832      	ldr	r0, [pc, #200]	; (80054ec <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x1a0>)
 8005422:	f7fc f99f 	bl	8001764 <_Z14FLASH_If_WritePVmPmt>

    /* update our block number to match the block number just received */
    args->block++;
 8005426:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800542a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005434:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    /* update total bytes  */
    (args->tot_bytes) += (pkt_buf->len - TFTP_DATA_PKT_HDR_LEN);
 8005438:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800543c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005440:	1d3b      	adds	r3, r7, #4
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	895b      	ldrh	r3, [r3, #10]
 8005446:	3b04      	subs	r3, #4
 8005448:	441a      	add	r2, r3
 800544a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800544e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8005452:	e01c      	b.n	800548e <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x142>

    /* This is a valid pkt but it has no data.  This would occur if the file being
       written is an exact multiple of 512 bytes.  In this case, the args->block
       value must still be updated, but we can skip everything else.    */
  }
  else if (IAP_tftp_extract_block((char*)pkt_buf->payload) == (args->block + 1))
 8005454:	1d3b      	adds	r3, r7, #4
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	4618      	mov	r0, r3
 800545c:	f7ff ff00 	bl	8005260 <_ZL22IAP_tftp_extract_blockPc>
 8005460:	4603      	mov	r3, r0
 8005462:	461a      	mov	r2, r3
 8005464:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005468:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800546c:	3301      	adds	r3, #1
 800546e:	429a      	cmp	r2, r3
 8005470:	bf0c      	ite	eq
 8005472:	2301      	moveq	r3, #1
 8005474:	2300      	movne	r3, #0
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d008      	beq.n	800548e <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x142>
  {
    /* update our block number to match the block number just received  */
    args->block++;
 800547c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005480:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800548a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  /* Send the appropriate ACK pkt*/
  IAP_tftp_send_ack_packet(upcb, addr, port, args->block);
 800548e:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 8005492:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005496:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800549a:	4639      	mov	r1, r7
 800549c:	f107 0008 	add.w	r0, r7, #8
 80054a0:	6809      	ldr	r1, [r1, #0]
 80054a2:	6800      	ldr	r0, [r0, #0]
 80054a4:	f7ff ff13 	bl	80052ce <_ZL24IAP_tftp_send_ack_packetP7udp_pcbPK8ip4_addrii>

  /* If the last write returned less than the maximum TFTP data pkt length,
   * then we've received the whole file and so we can quit (this is how TFTP
   * signals the EndTransferof a transfer!)
   */
  if (pkt_buf->len < TFTP_DATA_PKT_LEN_MAX)
 80054a8:	1d3b      	adds	r3, r7, #4
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	895b      	ldrh	r3, [r3, #10]
 80054ae:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 80054b2:	d20e      	bcs.n	80054d2 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x186>
  {
    IAP_tftp_cleanup_wr(upcb, args);
 80054b4:	f107 0308 	add.w	r3, r7, #8
 80054b8:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 80054bc:	6818      	ldr	r0, [r3, #0]
 80054be:	f000 f8a1 	bl	8005604 <_ZL19IAP_tftp_cleanup_wrP7udp_pcbP20tftp_connection_args>
    pbuf_free(pkt_buf);
 80054c2:	1d3b      	adds	r3, r7, #4
 80054c4:	6818      	ldr	r0, [r3, #0]
 80054c6:	f006 f993 	bl	800b7f0 <pbuf_free>
    newJson = true;
 80054ca:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x1a4>)
 80054cc:	2201      	movs	r2, #1
 80054ce:	701a      	strb	r2, [r3, #0]
 80054d0:	e005      	b.n	80054de <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x192>
  }
  else
  {
    pbuf_free(pkt_buf);
 80054d2:	1d3b      	adds	r3, r7, #4
 80054d4:	6818      	ldr	r0, [r3, #0]
 80054d6:	f006 f98b 	bl	800b7f0 <pbuf_free>
    return;
 80054da:	e000      	b.n	80054de <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x192>
    return;
 80054dc:	bf00      	nop
  }
}
 80054de:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd90      	pop	{r4, r7, pc}
 80054e6:	bf00      	nop
 80054e8:	20000388 	.word	0x20000388
 80054ec:	20000380 	.word	0x20000380
 80054f0:	200002d0 	.word	0x200002d0

080054f4 <_ZL22IAP_tftp_process_writeP7udp_pcbPK8ip4_addri>:
  * @param  to: pointer on the receive IP address
  * @param  to_port: receive port number
  * @retval None
  */
static int IAP_tftp_process_write(struct udp_pcb *upcb, const ip_addr_t *to, int to_port)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  tftp_connection_args *args = NULL;
 8005500:	2300      	movs	r3, #0
 8005502:	617b      	str	r3, [r7, #20]
  /* This function is called from a callback,
  * therefore interrupts are disabled,
  * therefore we can use regular malloc   */
  args = (tftp_connection_args*)mem_malloc(sizeof *args);
 8005504:	f44f 700a 	mov.w	r0, #552	; 0x228
 8005508:	f005 fa92 	bl	800aa30 <mem_malloc>
 800550c:	6178      	str	r0, [r7, #20]
  if (!args)
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d105      	bne.n	8005520 <_ZL22IAP_tftp_process_writeP7udp_pcbPK8ip4_addri+0x2c>
  {
    IAP_tftp_cleanup_wr(upcb, args);
 8005514:	6979      	ldr	r1, [r7, #20]
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f000 f874 	bl	8005604 <_ZL19IAP_tftp_cleanup_wrP7udp_pcbP20tftp_connection_args>
    return 0;
 800551c:	2300      	movs	r3, #0
 800551e:	e02c      	b.n	800557a <_ZL22IAP_tftp_process_writeP7udp_pcbPK8ip4_addri+0x86>
  }

  args->op = TFTP_WRQ;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	2202      	movs	r2, #2
 8005524:	601a      	str	r2, [r3, #0]
  args->to_ip.addr = to->addr;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  args->to_port = to_port;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  /* the block # used as a positive response to a WRQ is _always_ 0!!! (see RFC1350)  */
  args->block = 0;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	2200      	movs	r2, #0
 800553c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  args->tot_bytes = 0;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2200      	movs	r2, #0
 8005544:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  /* set callback for receives on this UDP PCB (Protocol Control Block) */
  udp_recv(upcb, IAP_wrq_recv_callback, args);
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	490e      	ldr	r1, [pc, #56]	; (8005584 <_ZL22IAP_tftp_process_writeP7udp_pcbPK8ip4_addri+0x90>)
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f00b fc53 	bl	8010df8 <udp_recv>

  total_count =0;
 8005552:	4b0d      	ldr	r3, [pc, #52]	; (8005588 <_ZL22IAP_tftp_process_writeP7udp_pcbPK8ip4_addri+0x94>)
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]

  /* init flash */
  FLASH_If_Init();
 8005558:	f7fc f8cc 	bl	80016f4 <_Z13FLASH_If_Initv>

  /* erase user flash area */
  FLASH_If_Erase(JSON_UPLOAD_ADDRESS);
 800555c:	480b      	ldr	r0, [pc, #44]	; (800558c <_ZL22IAP_tftp_process_writeP7udp_pcbPK8ip4_addri+0x98>)
 800555e:	f7fc f8cf 	bl	8001700 <_Z14FLASH_If_Erasem>

  Flash_Write_Address = JSON_UPLOAD_ADDRESS;
 8005562:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <_ZL22IAP_tftp_process_writeP7udp_pcbPK8ip4_addri+0x9c>)
 8005564:	4a09      	ldr	r2, [pc, #36]	; (800558c <_ZL22IAP_tftp_process_writeP7udp_pcbPK8ip4_addri+0x98>)
 8005566:	601a      	str	r2, [r3, #0]
  /* initiate the write transaction by sending the first ack */
  IAP_tftp_send_ack_packet(upcb, to, to_port, args->block);
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	68b9      	ldr	r1, [r7, #8]
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f7ff feab 	bl	80052ce <_ZL24IAP_tftp_send_ack_packetP7udp_pcbPK8ip4_addrii>

  return 0;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	0800534d 	.word	0x0800534d
 8005588:	20000388 	.word	0x20000388
 800558c:	080d0000 	.word	0x080d0000
 8005590:	20000380 	.word	0x20000380

08005594 <_ZL22IAP_tftp_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt>:
  * @param  port: receive port number
  * @retval None
  */
static void IAP_tftp_recv_callback(void *arg, struct udp_pcb *upcb, struct pbuf *pkt_buf,
                        const ip_addr_t *addr, u16_t port)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
 80055a0:	603b      	str	r3, [r7, #0]
  tftp_opcode op;
  struct udp_pcb *upcb_tftp_data;
  err_t err;

  /* create new UDP PCB structure */
  upcb_tftp_data = udp_new();
 80055a2:	f00b fc6d 	bl	8010e80 <udp_new>
 80055a6:	6178      	str	r0, [r7, #20]
  if (!upcb_tftp_data)
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d022      	beq.n	80055f4 <_ZL22IAP_tftp_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x60>

  /* bind to port 0 to receive next available free port */
  /* NOTE:  This is how TFTP works.  There is a UDP PCB for the standard port
  * 69 which al transactions begin communication on, however, _all_ subsequent
  * transactions for a given "stream" occur on another port  */
  err = udp_bind(upcb_tftp_data, IP_ADDR_ANY, 0);
 80055ae:	2200      	movs	r2, #0
 80055b0:	4913      	ldr	r1, [pc, #76]	; (8005600 <_ZL22IAP_tftp_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x6c>)
 80055b2:	6978      	ldr	r0, [r7, #20]
 80055b4:	f00b fb44 	bl	8010c40 <udp_bind>
 80055b8:	4603      	mov	r3, r0
 80055ba:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK)
 80055bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d119      	bne.n	80055f8 <_ZL22IAP_tftp_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x64>
  {
    /* Unable to bind to port */
    return;
  }

  op = IAP_tftp_decode_op((char*)pkt_buf->payload);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7ff fe3d 	bl	8005248 <_ZL18IAP_tftp_decode_opPc>
 80055ce:	4603      	mov	r3, r0
 80055d0:	74bb      	strb	r3, [r7, #18]
  if (op != TFTP_WRQ)
 80055d2:	7cbb      	ldrb	r3, [r7, #18]
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d003      	beq.n	80055e0 <_ZL22IAP_tftp_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x4c>
  {
    /* remove PCB */
    udp_remove(upcb_tftp_data);
 80055d8:	6978      	ldr	r0, [r7, #20]
 80055da:	f00b fc1f 	bl	8010e1c <udp_remove>
 80055de:	e005      	b.n	80055ec <_ZL22IAP_tftp_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x58>
  }
  else
  {
    /* Start the TFTP write mode*/
    IAP_tftp_process_write(upcb_tftp_data, addr, port);
 80055e0:	8c3b      	ldrh	r3, [r7, #32]
 80055e2:	461a      	mov	r2, r3
 80055e4:	6839      	ldr	r1, [r7, #0]
 80055e6:	6978      	ldr	r0, [r7, #20]
 80055e8:	f7ff ff84 	bl	80054f4 <_ZL22IAP_tftp_process_writeP7udp_pcbPK8ip4_addri>
  }
  pbuf_free(pkt_buf);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f006 f8ff 	bl	800b7f0 <pbuf_free>
 80055f2:	e002      	b.n	80055fa <_ZL22IAP_tftp_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x66>
    return;
 80055f4:	bf00      	nop
 80055f6:	e000      	b.n	80055fa <_ZL22IAP_tftp_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x66>
    return;
 80055f8:	bf00      	nop
}
 80055fa:	3718      	adds	r7, #24
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	08016c84 	.word	0x08016c84

08005604 <_ZL19IAP_tftp_cleanup_wrP7udp_pcbP20tftp_connection_args>:
  * @param  upcb: pointer on udp_pcb structure
  * @param  args: pointer on tftp_connection arguments
  * @retval None
  */
static void IAP_tftp_cleanup_wr(struct udp_pcb *upcb, tftp_connection_args *args)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  /* Free the tftp_connection_args structure */
  mem_free(args);
 800560e:	6838      	ldr	r0, [r7, #0]
 8005610:	f005 f8d0 	bl	800a7b4 <mem_free>

  /* Disconnect the udp_pcb */
  udp_disconnect(upcb);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f00b fbd9 	bl	8010dcc <udp_disconnect>

  /* close the connection */
  udp_remove(upcb);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f00b fbfe 	bl	8010e1c <udp_remove>

  /* reset the callback function */
  udp_recv(UDPpcb, IAP_tftp_recv_callback, NULL);
 8005620:	4b05      	ldr	r3, [pc, #20]	; (8005638 <_ZL19IAP_tftp_cleanup_wrP7udp_pcbP20tftp_connection_args+0x34>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2200      	movs	r2, #0
 8005626:	4905      	ldr	r1, [pc, #20]	; (800563c <_ZL19IAP_tftp_cleanup_wrP7udp_pcbP20tftp_connection_args+0x38>)
 8005628:	4618      	mov	r0, r3
 800562a:	f00b fbe5 	bl	8010df8 <udp_recv>

}
 800562e:	bf00      	nop
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	20000384 	.word	0x20000384
 800563c:	08005595 	.word	0x08005595

08005640 <_Z14IAP_tftpd_initv>:
  * @brief  Creates and initializes a UDP PCB for TFTP receive operation
  * @param  None
  * @retval None
  */
void IAP_tftpd_init(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
  err_t err;
  unsigned port = 69; /* 69 is the port used for TFTP protocol initial transaction */
 8005646:	2345      	movs	r3, #69	; 0x45
 8005648:	607b      	str	r3, [r7, #4]

  /* create a new UDP PCB structure  */
  UDPpcb = udp_new();
 800564a:	f00b fc19 	bl	8010e80 <udp_new>
 800564e:	4603      	mov	r3, r0
 8005650:	4a0f      	ldr	r2, [pc, #60]	; (8005690 <_Z14IAP_tftpd_initv+0x50>)
 8005652:	6013      	str	r3, [r2, #0]
  if (!UDPpcb)
 8005654:	4b0e      	ldr	r3, [pc, #56]	; (8005690 <_Z14IAP_tftpd_initv+0x50>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d015      	beq.n	8005688 <_Z14IAP_tftpd_initv+0x48>
    /* Error creating PCB. Out of Memory  */
    return;
  }

  /* Bind this PCB to port 69  */
  err = udp_bind(UDPpcb, IP_ADDR_ANY, port);
 800565c:	4b0c      	ldr	r3, [pc, #48]	; (8005690 <_Z14IAP_tftpd_initv+0x50>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	b292      	uxth	r2, r2
 8005664:	490b      	ldr	r1, [pc, #44]	; (8005694 <_Z14IAP_tftpd_initv+0x54>)
 8005666:	4618      	mov	r0, r3
 8005668:	f00b faea 	bl	8010c40 <udp_bind>
 800566c:	4603      	mov	r3, r0
 800566e:	70fb      	strb	r3, [r7, #3]
  if (err == ERR_OK)
 8005670:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d108      	bne.n	800568a <_Z14IAP_tftpd_initv+0x4a>
  {
    /* Initialize receive callback function  */
    udp_recv(UDPpcb, IAP_tftp_recv_callback, NULL);
 8005678:	4b05      	ldr	r3, [pc, #20]	; (8005690 <_Z14IAP_tftpd_initv+0x50>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2200      	movs	r2, #0
 800567e:	4906      	ldr	r1, [pc, #24]	; (8005698 <_Z14IAP_tftpd_initv+0x58>)
 8005680:	4618      	mov	r0, r3
 8005682:	f00b fbb9 	bl	8010df8 <udp_recv>
 8005686:	e000      	b.n	800568a <_Z14IAP_tftpd_initv+0x4a>
    return;
 8005688:	bf00      	nop
  }
}
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	20000384 	.word	0x20000384
 8005694:	08016c84 	.word	0x08016c84
 8005698:	08005595 	.word	0x08005595

0800569c <_ZN9InterruptC1Ev>:

// Define the vector table, it is only declared in the class declaration
Interrupt* Interrupt::ISRVectorTable[] = {0};

// Constructor
Interrupt::Interrupt(void){}
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	4a04      	ldr	r2, [pc, #16]	; (80056b8 <_ZN9InterruptC1Ev+0x1c>)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4618      	mov	r0, r3
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bc80      	pop	{r7}
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	08016b38 	.word	0x08016b38

080056bc <_ZN9Interrupt8RegisterEiPS_>:


// Methods

void Interrupt::Register(int interruptNumber, Interrupt* intThisPtr)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
	printf("Registering interrupt for interrupt number = %d\n", interruptNumber);
 80056c6:	6879      	ldr	r1, [r7, #4]
 80056c8:	4805      	ldr	r0, [pc, #20]	; (80056e0 <_ZN9Interrupt8RegisterEiPS_+0x24>)
 80056ca:	f00e f941 	bl	8013950 <iprintf>
	ISRVectorTable[interruptNumber] = intThisPtr;
 80056ce:	4905      	ldr	r1, [pc, #20]	; (80056e4 <_ZN9Interrupt8RegisterEiPS_+0x28>)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80056d8:	bf00      	nop
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	08014cf4 	.word	0x08014cf4
 80056e4:	2000038c 	.word	0x2000038c

080056e8 <_ZN9Interrupt12TIM1_WrapperEv>:

void Interrupt::TIM1_Wrapper(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM1_UP_TIM10_IRQn]->ISR_Handler();
 80056ec:	4b04      	ldr	r3, [pc, #16]	; (8005700 <_ZN9Interrupt12TIM1_WrapperEv+0x18>)
 80056ee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80056f0:	4b03      	ldr	r3, [pc, #12]	; (8005700 <_ZN9Interrupt12TIM1_WrapperEv+0x18>)
 80056f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4610      	mov	r0, r2
 80056fa:	4798      	blx	r3
}
 80056fc:	bf00      	nop
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	2000038c 	.word	0x2000038c

08005704 <_ZN9Interrupt12TIM2_WrapperEv>:

void Interrupt::TIM2_Wrapper(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM2_IRQn]->ISR_Handler();
 8005708:	4b04      	ldr	r3, [pc, #16]	; (800571c <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 800570a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800570c:	4b03      	ldr	r3, [pc, #12]	; (800571c <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 800570e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4610      	mov	r0, r2
 8005716:	4798      	blx	r3
}
 8005718:	bf00      	nop
 800571a:	bd80      	pop	{r7, pc}
 800571c:	2000038c 	.word	0x2000038c

08005720 <_ZN9Interrupt20DMA2_Stream2_WrapperEv>:
{
	ISRVectorTable[TIM3_IRQn]->ISR_Handler();
}

void Interrupt::DMA2_Stream2_Wrapper(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA2_Stream2_IRQn]->ISR_Handler();
 8005724:	4b05      	ldr	r3, [pc, #20]	; (800573c <_ZN9Interrupt20DMA2_Stream2_WrapperEv+0x1c>)
 8005726:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800572a:	4b04      	ldr	r3, [pc, #16]	; (800573c <_ZN9Interrupt20DMA2_Stream2_WrapperEv+0x1c>)
 800572c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4610      	mov	r0, r2
 8005736:	4798      	blx	r3
}
 8005738:	bf00      	nop
 800573a:	bd80      	pop	{r7, pc}
 800573c:	2000038c 	.word	0x2000038c

08005740 <_ZN3Pin3setEb>:
        inline bool get()
        {
            return HAL_GPIO_ReadPin(this->GPIOx, this->pin);
        }

        inline void set(bool value)
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	460b      	mov	r3, r1
 800574a:	70fb      	strb	r3, [r7, #3]
        {
            if (value)
 800574c:	78fb      	ldrb	r3, [r7, #3]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d008      	beq.n	8005764 <_ZN3Pin3setEb+0x24>
            {
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_SET);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	8bdb      	ldrh	r3, [r3, #30]
 800575a:	2201      	movs	r2, #1
 800575c:	4619      	mov	r1, r3
 800575e:	f003 fbab 	bl	8008eb8 <HAL_GPIO_WritePin>
            }
            else
            {
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
            }
        }
 8005762:	e007      	b.n	8005774 <_ZN3Pin3setEb+0x34>
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	8bdb      	ldrh	r3, [r3, #30]
 800576c:	2200      	movs	r2, #0
 800576e:	4619      	mov	r1, r3
 8005770:	f003 fba2 	bl	8008eb8 <HAL_GPIO_WritePin>
        }
 8005774:	bf00      	nop
 8005776:	3708      	adds	r7, #8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <_ZN11RemoraCommsC1Ev>:
#include "RemoraComms.h"


RemoraComms::RemoraComms()
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4618      	mov	r0, r3
 8005788:	f000 f870 	bl	800586c <_ZN6ModuleC1Ev>
 800578c:	4a05      	ldr	r2, [pc, #20]	; (80057a4 <_ZN11RemoraCommsC1Ev+0x28>)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	601a      	str	r2, [r3, #0]
{
	printf("Creating an Ethernet communication monitoring module\n");
 8005792:	4805      	ldr	r0, [pc, #20]	; (80057a8 <_ZN11RemoraCommsC1Ev+0x2c>)
 8005794:	f00e f962 	bl	8013a5c <puts>

}
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	08016b44 	.word	0x08016b44
 80057a8:	08014d28 	.word	0x08014d28

080057ac <_ZN11RemoraComms6updateEv>:


void RemoraComms::update()
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
	if (data)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	7d1b      	ldrb	r3, [r3, #20]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d006      	beq.n	80057ca <_ZN11RemoraComms6updateEv+0x1e>
	{
		this->noDataCount = 0;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	759a      	strb	r2, [r3, #22]
		this->status = true;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	755a      	strb	r2, [r3, #21]
 80057c8:	e005      	b.n	80057d6 <_ZN11RemoraComms6updateEv+0x2a>
	}
	else
	{
		this->noDataCount++;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	7d9b      	ldrb	r3, [r3, #22]
 80057ce:	3301      	adds	r3, #1
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	759a      	strb	r2, [r3, #22]
	}

	if (this->noDataCount > DATA_ERR_MAX)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	7d9b      	ldrb	r3, [r3, #22]
 80057da:	2b05      	cmp	r3, #5
 80057dc:	d905      	bls.n	80057ea <_ZN11RemoraComms6updateEv+0x3e>
	{
		this->noDataCount = 0;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	759a      	strb	r2, [r3, #22]
		this->status = false;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	755a      	strb	r2, [r3, #21]
	}

	this->data = false;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	751a      	strb	r2, [r3, #20]
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bc80      	pop	{r7}
 80057f8:	4770      	bx	lr

080057fa <_ZN11RemoraComms12dataReceivedEv>:



void RemoraComms::dataReceived()
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
	this->data= true;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	751a      	strb	r2, [r3, #20]
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	bc80      	pop	{r7}
 8005810:	4770      	bx	lr

08005812 <_ZN11RemoraComms9getStatusEv>:


bool RemoraComms::getStatus()
{
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
	return this->status;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	7d5b      	ldrb	r3, [r3, #21]
}
 800581e:	4618      	mov	r0, r3
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	bc80      	pop	{r7}
 8005826:	4770      	bx	lr

08005828 <_ZN11RemoraCommsD1Ev>:
#include "configuration.h"
#include "remora.h"

#include "../module.h"

class RemoraComms : public Module
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	4a05      	ldr	r2, [pc, #20]	; (8005848 <_ZN11RemoraCommsD1Ev+0x20>)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4618      	mov	r0, r3
 800583a:	f000 f831 	bl	80058a0 <_ZN6ModuleD1Ev>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4618      	mov	r0, r3
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	08016b44 	.word	0x08016b44

0800584c <_ZN11RemoraCommsD0Ev>:
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7ff ffe7 	bl	8005828 <_ZN11RemoraCommsD1Ev>
 800585a:	2118      	movs	r1, #24
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f00d fd65 	bl	801332c <_ZdlPvj>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4618      	mov	r0, r3
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <_ZN6ModuleC1Ev>:
#include "module.h"

#include <cstdio>

Module::Module()
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	4a08      	ldr	r2, [pc, #32]	; (8005898 <_ZN6ModuleC1Ev+0x2c>)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	601a      	str	r2, [r3, #0]
{
	this->counter = 0;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	611a      	str	r2, [r3, #16]
	this->updateCount = 1;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	60da      	str	r2, [r3, #12]
	printf("\nCreating a std module\n");
 8005886:	4805      	ldr	r0, [pc, #20]	; (800589c <_ZN6ModuleC1Ev+0x30>)
 8005888:	f00e f8e8 	bl	8013a5c <puts>
}
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4618      	mov	r0, r3
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	08016b68 	.word	0x08016b68
 800589c:	08014d60 	.word	0x08014d60

080058a0 <_ZN6ModuleD1Ev>:
	this->counter = 0;
	this->updateCount = this->threadFreq / this->slowUpdateFreq;
	printf("\nCreating a slower module, updating every %d thread cycles\n",this->updateCount);
}

Module::~Module(){}
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	4a04      	ldr	r2, [pc, #16]	; (80058bc <_ZN6ModuleD1Ev+0x1c>)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4618      	mov	r0, r3
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bc80      	pop	{r7}
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	08016b68 	.word	0x08016b68

080058c0 <_ZN6ModuleD0Ev>:
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7ff ffe9 	bl	80058a0 <_ZN6ModuleD1Ev>
 80058ce:	2114      	movs	r1, #20
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f00d fd2b 	bl	801332c <_ZdlPvj>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4618      	mov	r0, r3
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <_ZN6Module9runModuleEv>:


void Module::runModule()
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
	++this->counter;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	611a      	str	r2, [r3, #16]

	if (this->counter >= this->updateCount)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691a      	ldr	r2, [r3, #16]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	db08      	blt.n	8005910 <_ZN6Module9runModuleEv+0x30>
	{
		this->slowUpdate();
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3310      	adds	r3, #16
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	4798      	blx	r3
		this->counter = 0;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	611a      	str	r2, [r3, #16]
	}

	this->update();
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3308      	adds	r3, #8
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	4798      	blx	r3
}
 800591c:	bf00      	nop
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <_ZN6Module13runModulePostEv>:


void Module::runModulePost()
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
	this->updatePost();
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	330c      	adds	r3, #12
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	4798      	blx	r3
}
 8005938:	bf00      	nop
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <_ZN6Module6updateEv>:

void Module::update(){}
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	bc80      	pop	{r7}
 8005950:	4770      	bx	lr

08005952 <_ZN6Module10updatePostEv>:
void Module::updatePost(){}
 8005952:	b480      	push	{r7}
 8005954:	b083      	sub	sp, #12
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
 800595a:	bf00      	nop
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	bc80      	pop	{r7}
 8005962:	4770      	bx	lr

08005964 <_ZN6Module10slowUpdateEv>:
void Module::slowUpdate(){}
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	bc80      	pop	{r7}
 8005974:	4770      	bx	lr

08005976 <_ZN6Module9configureEv>:
void Module::configure(){}
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	bf00      	nop
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	bc80      	pop	{r7}
 8005986:	4770      	bx	lr

08005988 <_ZN6Module15handleInterruptEv>:
void Module::handleInterrupt(){}
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	bc80      	pop	{r7}
 8005998:	4770      	bx	lr
	...

0800599c <_Z13createStepgenv>:
/***********************************************************************
                MODULE CONFIGURATION AND CREATION FROM JSON     
************************************************************************/

void createStepgen()
{
 800599c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800599e:	b0d7      	sub	sp, #348	; 0x15c
 80059a0:	af06      	add	r7, sp, #24
 80059a2:	4be4      	ldr	r3, [pc, #912]	; (8005d34 <_Z13createStepgenv+0x398>)
 80059a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
template <typename TObject>
template <typename TString>
inline typename enable_if<IsString<TString *>::value,
                          MemberProxy<const TObject &, TString *> >::type
    ObjectShortcuts<TObject>::operator[](TString *key) const {
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 80059a8:	48e3      	ldr	r0, [pc, #908]	; (8005d38 <_Z13createStepgenv+0x39c>)
 80059aa:	f7fd fd79 	bl	80034a0 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 80059ae:	4603      	mov	r3, r0
 80059b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80059b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      : _object(variant), _key(key) {}
 80059bc:	f107 0314 	add.w	r3, r7, #20
 80059c0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	f107 0314 	add.w	r3, r7, #20
 80059ca:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80059ce:	605a      	str	r2, [r3, #4]
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 80059d0:	bf00      	nop
template <typename TImpl>
class VariantCasts {
 public:
  template <typename T>
  FORCE_INLINE operator T() const {
    return impl()->template as<T>();
 80059d2:	f107 0314 	add.w	r3, r7, #20
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fd fd6c 	bl	80034b4 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 80059dc:	4603      	mov	r3, r0
 80059de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80059e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    return _object.getMember(_key);
 80059ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80059fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  // getMember(char*) const
  // getMember(const char*) const
  // getMember(const __FlashStringHelper*) const
  template <typename TChar>
  FORCE_INLINE VariantRef getMember(TChar* key) const {
    return get_impl(adaptString(key));
 80059fe:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8005a02:	f7fc f89c 	bl	8001b3e <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8005a06:	4602      	mov	r2, r0
 8005a08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a10:	f107 0310 	add.w	r3, r7, #16
 8005a14:	601a      	str	r2, [r3, #0]
  }

 private:
  template <typename TAdaptedString>
  FORCE_INLINE VariantRef get_impl(TAdaptedString key) const {
    return VariantRef(_pool, objectGet(_data, key));
 8005a16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a1a:	685c      	ldr	r4, [r3, #4]
 8005a1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	f107 0310 	add.w	r3, r7, #16
 8005a26:	6819      	ldr	r1, [r3, #0]
 8005a28:	4610      	mov	r0, r2
 8005a2a:	f7fe ff04 	bl	8004836 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
 8005a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  friend class VariantConstRef;

 public:
  // Intenal use only
  FORCE_INLINE VariantRef(MemoryPool *pool, VariantData *data)
      : base_type(data), _pool(pool) {}
 8005a38:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005a3c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7fd fc20 	bl	8003286 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8005a46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a4e:	bf00      	nop
    return get_impl(adaptString(key));
 8005a50:	bf00      	nop
 8005a52:	bf00      	nop
  FORCE_INLINE typename enable_if<!is_same<T, ArrayRef>::value &&
                                      !is_same<T, ObjectRef>::value &&
                                      !is_same<T, VariantRef>::value,
                                  typename VariantAs<T>::type>::type
  as() const {
    return variantAs<T>(_data);
 8005a54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fe f9fb 	bl	8003e54 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8005a62:	bf00      	nop
 8005a64:	bf00      	nop
    const char* comment = module["Comment"];
 8005a66:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    printf("%s\n",comment);
 8005a6a:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8005a6e:	f00d fff5 	bl	8013a5c <puts>
 8005a72:	4bb2      	ldr	r3, [pc, #712]	; (8005d3c <_Z13createStepgenv+0x3a0>)
 8005a74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8005a78:	48af      	ldr	r0, [pc, #700]	; (8005d38 <_Z13createStepgenv+0x39c>)
 8005a7a:	f7fd fd11 	bl	80034a0 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      : _object(variant), _key(key) {}
 8005a8c:	f107 031c 	add.w	r3, r7, #28
 8005a90:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	f107 031c 	add.w	r3, r7, #28
 8005a9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a9e:	605a      	str	r2, [r3, #4]
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8005aa0:	bf00      	nop
 8005aa2:	f107 031c 	add.w	r3, r7, #28
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fd fd04 	bl	80034b4 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8005aac:	4603      	mov	r3, r0
 8005aae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ab2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ab6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    return _object.getMember(_key);
 8005aba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8005aca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ace:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005ad2:	f7fc f834 	bl	8001b3e <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005adc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ae0:	f107 030c 	add.w	r3, r7, #12
 8005ae4:	601a      	str	r2, [r3, #0]
    return VariantRef(_pool, objectGet(_data, key));
 8005ae6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005aea:	685c      	ldr	r4, [r3, #4]
 8005aec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	f107 030c 	add.w	r3, r7, #12
 8005af6:	6819      	ldr	r1, [r3, #0]
 8005af8:	4610      	mov	r0, r2
 8005afa:	f7fe fe9c 	bl	8004836 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8005afe:	4603      	mov	r3, r0
 8005b00:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
 8005b04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      : base_type(data), _pool(pool) {}
 8005b08:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005b0c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7fd fbb8 	bl	8003286 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8005b16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b1e:	bf00      	nop
    return get_impl(adaptString(key));
 8005b20:	bf00      	nop
 8005b22:	bf00      	nop
    return variantAs<T>(_data);
 8005b24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 faaa 	bl	8006080 <_ZN19ArduinoJson6101_1109variantAsIiEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8005b30:	bf00      	nop
 8005b32:	bf00      	nop

    int joint = module["Joint Number"];
 8005b34:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8005b38:	4b81      	ldr	r3, [pc, #516]	; (8005d40 <_Z13createStepgenv+0x3a4>)
 8005b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8005b3e:	487e      	ldr	r0, [pc, #504]	; (8005d38 <_Z13createStepgenv+0x39c>)
 8005b40:	f7fd fcae 	bl	80034a0 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8005b44:	4603      	mov	r3, r0
 8005b46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      : _object(variant), _key(key) {}
 8005b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b60:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005b64:	605a      	str	r2, [r3, #4]
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8005b66:	bf00      	nop
 8005b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fd fca1 	bl	80034b4 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8005b72:	4603      	mov	r3, r0
 8005b74:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b78:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b7c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    return _object.getMember(_key);
 8005b80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8005b90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b94:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8005b98:	f7fb ffd1 	bl	8001b3e <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ba2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ba6:	f107 0308 	add.w	r3, r7, #8
 8005baa:	601a      	str	r2, [r3, #0]
    return VariantRef(_pool, objectGet(_data, key));
 8005bac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005bb0:	685c      	ldr	r4, [r3, #4]
 8005bb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	f107 0308 	add.w	r3, r7, #8
 8005bbc:	6819      	ldr	r1, [r3, #0]
 8005bbe:	4610      	mov	r0, r2
 8005bc0:	f7fe fe39 	bl	8004836 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 8005bca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      : base_type(data), _pool(pool) {}
 8005bce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005bd2:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fd fb55 	bl	8003286 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8005bdc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005be0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005be2:	bf00      	nop
    return get_impl(adaptString(key));
 8005be4:	bf00      	nop
 8005be6:	bf00      	nop
    return variantAs<T>(_data);
 8005be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fe f932 	bl	8003e54 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8005bf4:	bf00      	nop
 8005bf6:	bf00      	nop
    const char* step = module["Step Pin"];
 8005bf8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8005bfc:	4b51      	ldr	r3, [pc, #324]	; (8005d44 <_Z13createStepgenv+0x3a8>)
 8005bfe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8005c02:	484d      	ldr	r0, [pc, #308]	; (8005d38 <_Z13createStepgenv+0x39c>)
 8005c04:	f7fd fc4c 	bl	80034a0 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c12:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
      : _object(variant), _key(key) {}
 8005c16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c1a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c24:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8005c28:	605a      	str	r2, [r3, #4]
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8005c2a:	bf00      	nop
 8005c2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fd fc3f 	bl	80034b4 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8005c36:	4603      	mov	r3, r0
 8005c38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005c3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    return _object.getMember(_key);
 8005c44:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8005c54:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c58:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8005c5c:	f7fb ff6f 	bl	8001b3e <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8005c60:	4602      	mov	r2, r0
 8005c62:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c66:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005c6a:	1d3b      	adds	r3, r7, #4
 8005c6c:	601a      	str	r2, [r3, #0]
    return VariantRef(_pool, objectGet(_data, key));
 8005c6e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c72:	685c      	ldr	r4, [r3, #4]
 8005c74:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	1d3b      	adds	r3, r7, #4
 8005c7c:	6819      	ldr	r1, [r3, #0]
 8005c7e:	4610      	mov	r0, r2
 8005c80:	f7fe fdd9 	bl	8004836 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8005c84:	4603      	mov	r3, r0
 8005c86:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 8005c8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
      : base_type(data), _pool(pool) {}
 8005c8e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005c92:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fd faf5 	bl	8003286 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8005c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ca0:	673b      	str	r3, [r7, #112]	; 0x70
 8005ca2:	bf00      	nop
    return get_impl(adaptString(key));
 8005ca4:	bf00      	nop
 8005ca6:	bf00      	nop
    return variantAs<T>(_data);
 8005ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fe f8d2 	bl	8003e54 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8005cb4:	bf00      	nop
 8005cb6:	bf00      	nop
    const char* dir = module["Direction Pin"];
 8005cb8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    // configure pointers to data source and feedback location
    ptrJointFreqCmd[joint] = &rxData.jointFreqCmd[joint];
 8005cbc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4a21      	ldr	r2, [pc, #132]	; (8005d48 <_Z13createStepgenv+0x3ac>)
 8005cc4:	4413      	add	r3, r2
 8005cc6:	1d1a      	adds	r2, r3, #4
 8005cc8:	4920      	ldr	r1, [pc, #128]	; (8005d4c <_Z13createStepgenv+0x3b0>)
 8005cca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ptrJointFeedback[joint] = &txData.jointFeedback[joint];
 8005cd2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4a1d      	ldr	r2, [pc, #116]	; (8005d50 <_Z13createStepgenv+0x3b4>)
 8005cda:	4413      	add	r3, r2
 8005cdc:	1d1a      	adds	r2, r3, #4
 8005cde:	491d      	ldr	r1, [pc, #116]	; (8005d54 <_Z13createStepgenv+0x3b8>)
 8005ce0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ptrJointEnable = &rxData.jointEnable;
 8005ce8:	4b1b      	ldr	r3, [pc, #108]	; (8005d58 <_Z13createStepgenv+0x3bc>)
 8005cea:	4a1c      	ldr	r2, [pc, #112]	; (8005d5c <_Z13createStepgenv+0x3c0>)
 8005cec:	601a      	str	r2, [r3, #0]

    // create the step generator, register it in the thread
    Module* stepgen = new Stepgen(base_freq, joint, step, dir, STEPBIT, *ptrJointFreqCmd[joint], *ptrJointFeedback[joint], *ptrJointEnable);
 8005cee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f00d fb3f 	bl	8013376 <_ZNSaIcEC1Ev>
 8005cf8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8005cfc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005d00:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8005d04:	4618      	mov	r0, r3
 8005d06:	f00d fcc5 	bl	8013694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005d0a:	f107 0634 	add.w	r6, r7, #52	; 0x34
 8005d0e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005d12:	4618      	mov	r0, r3
 8005d14:	f00d fb2f 	bl	8013376 <_ZNSaIcEC1Ev>
 8005d18:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8005d1c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005d20:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8005d24:	4618      	mov	r0, r3
 8005d26:	f00d fcb5 	bl	8013694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005d2a:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8005d2e:	207c      	movs	r0, #124	; 0x7c
 8005d30:	e016      	b.n	8005d60 <_Z13createStepgenv+0x3c4>
 8005d32:	bf00      	nop
 8005d34:	08014db4 	.word	0x08014db4
 8005d38:	20000320 	.word	0x20000320
 8005d3c:	08014dbc 	.word	0x08014dbc
 8005d40:	08014dcc 	.word	0x08014dcc
 8005d44:	08014dd8 	.word	0x08014dd8
 8005d48:	200001c0 	.word	0x200001c0
 8005d4c:	2000028c 	.word	0x2000028c
 8005d50:	20000204 	.word	0x20000204
 8005d54:	200002ac 	.word	0x200002ac
 8005d58:	200002cc 	.word	0x200002cc
 8005d5c:	200001fc 	.word	0x200001fc
 8005d60:	f00d faf5 	bl	801334e <_Znwj>
 8005d64:	4603      	mov	r3, r0
 8005d66:	461d      	mov	r5, r3
 8005d68:	4b22      	ldr	r3, [pc, #136]	; (8005df4 <_Z13createStepgenv+0x458>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	4a22      	ldr	r2, [pc, #136]	; (8005df8 <_Z13createStepgenv+0x45c>)
 8005d70:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d78:	4920      	ldr	r1, [pc, #128]	; (8005dfc <_Z13createStepgenv+0x460>)
 8005d7a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8005d7e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005d82:	491f      	ldr	r1, [pc, #124]	; (8005e00 <_Z13createStepgenv+0x464>)
 8005d84:	6809      	ldr	r1, [r1, #0]
 8005d86:	9104      	str	r1, [sp, #16]
 8005d88:	9203      	str	r2, [sp, #12]
 8005d8a:	9302      	str	r3, [sp, #8]
 8005d8c:	2316      	movs	r3, #22
 8005d8e:	9301      	str	r3, [sp, #4]
 8005d90:	9400      	str	r4, [sp, #0]
 8005d92:	4633      	mov	r3, r6
 8005d94:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8005d98:	4601      	mov	r1, r0
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	f000 f834 	bl	8005e08 <_ZN7StepgenC1EliNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_iRVlS7_RVh>
 8005da0:	f8c7 512c 	str.w	r5, [r7, #300]	; 0x12c
 8005da4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005da8:	4618      	mov	r0, r3
 8005daa:	f00d fb99 	bl	80134e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005dae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005db2:	4618      	mov	r0, r3
 8005db4:	f00d fae0 	bl	8013378 <_ZNSaIcED1Ev>
 8005db8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f00d fb8f 	bl	80134e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005dc2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f00d fad6 	bl	8013378 <_ZNSaIcED1Ev>
    baseThread->registerModule(stepgen);
 8005dcc:	4b0d      	ldr	r3, [pc, #52]	; (8005e04 <_Z13createStepgenv+0x468>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 fb1d 	bl	8006414 <_ZN9pruThread14registerModuleEP6Module>
    baseThread->registerModulePost(stepgen);
 8005dda:	4b0a      	ldr	r3, [pc, #40]	; (8005e04 <_Z13createStepgenv+0x468>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 fb26 	bl	8006434 <_ZN9pruThread18registerModulePostEP6Module>
}
 8005de8:	bf00      	nop
 8005dea:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005df2:	bf00      	nop
 8005df4:	20000000 	.word	0x20000000
 8005df8:	2000028c 	.word	0x2000028c
 8005dfc:	200002ac 	.word	0x200002ac
 8005e00:	200002cc 	.word	0x200002cc
 8005e04:	20000178 	.word	0x20000178

08005e08 <_ZN7StepgenC1EliNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_iRVlS7_RVh>:

/***********************************************************************
                METHOD DEFINITIONS
************************************************************************/

Stepgen::Stepgen(int32_t threadFreq, int jointNumber, std::string step, std::string direction, int stepBit, volatile int32_t &ptrFrequencyCommand, volatile int32_t &ptrFeedback, volatile uint8_t &ptrJointEnable) :
 8005e08:	b5b0      	push	{r4, r5, r7, lr}
 8005e0a:	b090      	sub	sp, #64	; 0x40
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
 8005e14:	603b      	str	r3, [r7, #0]
	step(step),
	direction(direction),
	stepBit(stepBit),
	ptrFrequencyCommand(&ptrFrequencyCommand),
	ptrFeedback(&ptrFeedback),
	ptrJointEnable(&ptrJointEnable)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7ff fd27 	bl	800586c <_ZN6ModuleC1Ev>
 8005e1e:	4a40      	ldr	r2, [pc, #256]	; (8005f20 <_ZN7StepgenC1EliNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_iRVlS7_RVh+0x118>)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	615a      	str	r2, [r3, #20]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	331c      	adds	r3, #28
 8005e2e:	6839      	ldr	r1, [r7, #0]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f00d fbfd 	bl	8013630 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	3334      	adds	r3, #52	; 0x34
 8005e3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f00d fbf7 	bl	8013630 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e46:	655a      	str	r2, [r3, #84]	; 0x54
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e52:	661a      	str	r2, [r3, #96]	; 0x60
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e58:	671a      	str	r2, [r3, #112]	; 0x70
{
	this->stepPin = new Pin(this->step, OUTPUT);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f103 021c 	add.w	r2, r3, #28
 8005e60:	f107 0310 	add.w	r3, r7, #16
 8005e64:	4611      	mov	r1, r2
 8005e66:	4618      	mov	r0, r3
 8005e68:	f00d fbe2 	bl	8013630 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005e6c:	f107 0510 	add.w	r5, r7, #16
 8005e70:	2044      	movs	r0, #68	; 0x44
 8005e72:	f00d fa6c 	bl	801334e <_Znwj>
 8005e76:	4603      	mov	r3, r0
 8005e78:	461c      	mov	r4, r3
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	4629      	mov	r1, r5
 8005e7e:	4620      	mov	r0, r4
 8005e80:	f7fb fa50 	bl	8001324 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	675c      	str	r4, [r3, #116]	; 0x74
 8005e88:	f107 0310 	add.w	r3, r7, #16
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f00d fb27 	bl	80134e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	this->directionPin = new Pin(this->direction, OUTPUT);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005e98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f00d fbc6 	bl	8013630 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005ea4:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8005ea8:	2044      	movs	r0, #68	; 0x44
 8005eaa:	f00d fa50 	bl	801334e <_Znwj>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	461c      	mov	r4, r3
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	4629      	mov	r1, r5
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f7fb fa34 	bl	8001324 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	679c      	str	r4, [r3, #120]	; 0x78
 8005ec0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f00d fb0b 	bl	80134e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	this->DDSaccumulator = 0;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	665a      	str	r2, [r3, #100]	; 0x64
	this->frequencyScale = (float)(1 << this->stepBit) / (float)threadFreq;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fa fedc 	bl	8000c98 <__aeabi_i2f>
 8005ee0:	4604      	mov	r4, r0
 8005ee2:	68b8      	ldr	r0, [r7, #8]
 8005ee4:	f7fa fed8 	bl	8000c98 <__aeabi_i2f>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	4619      	mov	r1, r3
 8005eec:	4620      	mov	r0, r4
 8005eee:	f7fa ffdb 	bl	8000ea8 <__aeabi_fdiv>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	669a      	str	r2, [r3, #104]	; 0x68
	this->mask = 1 << this->jointNumber;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	2201      	movs	r2, #1
 8005f00:	409a      	lsls	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	619a      	str	r2, [r3, #24]
	this->isEnabled = false;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	this->isForward = false;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
}
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3740      	adds	r7, #64	; 0x40
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8005f20:	08016b8c 	.word	0x08016b8c

08005f24 <_ZN7Stepgen6updateEv>:


void Stepgen::update()
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
	// Use the standard Module interface to run makePulses()
	this->makePulses();
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f818 	bl	8005f62 <_ZN7Stepgen10makePulsesEv>
}
 8005f32:	bf00      	nop
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <_ZN7Stepgen10updatePostEv>:

void Stepgen::updatePost()
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b082      	sub	sp, #8
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
	this->stopPulses();
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f88a 	bl	800605c <_ZN7Stepgen10stopPulsesEv>
}
 8005f48:	bf00      	nop
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <_ZN7Stepgen10slowUpdateEv>:

void Stepgen::slowUpdate()
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
	return;
 8005f58:	bf00      	nop
}
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bc80      	pop	{r7}
 8005f60:	4770      	bx	lr

08005f62 <_ZN7Stepgen10makePulsesEv>:

void Stepgen::makePulses()
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b084      	sub	sp, #16
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
	int32_t stepNow = 0;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60fb      	str	r3, [r7, #12]

	this->isEnabled = ((*(this->ptrJointEnable) & this->mask) != 0);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	461a      	mov	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	bf14      	ite	ne
 8005f82:	2301      	movne	r3, #1
 8005f84:	2300      	moveq	r3, #0
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	if (this->isEnabled == true)  												// this Step generator is enables so make the pulses
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d15d      	bne.n	8006054 <_ZN7Stepgen10makePulsesEv+0xf2>
	{
		this->frequencyCommand = *(this->ptrFrequencyCommand);            		// Get the latest frequency command via pointer to the data source
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	651a      	str	r2, [r3, #80]	; 0x50
		this->DDSaddValue = this->frequencyCommand * this->frequencyScale;		// Scale the frequency command to get the DDS add value
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fa fe76 	bl	8000c98 <__aeabi_i2f>
 8005fac:	4602      	mov	r2, r0
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	f7fa fec3 	bl	8000d40 <__aeabi_fmul>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7fb f80f 	bl	8000fe0 <__aeabi_f2iz>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	66da      	str	r2, [r3, #108]	; 0x6c
		stepNow = this->DDSaccumulator;                           				// Save the current DDS accumulator value
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fcc:	60fb      	str	r3, [r7, #12]
		this->DDSaccumulator += this->DDSaddValue;           	  				// Update the DDS accumulator with the new add value
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fd6:	441a      	add	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	665a      	str	r2, [r3, #100]	; 0x64
		stepNow ^= this->DDSaccumulator;                          				// Test for changes in the low half of the DDS accumulator
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	4053      	eors	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]
		stepNow &= (1L << this->stepBit);                         				// Check for the step bit
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fea:	2201      	movs	r2, #1
 8005fec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]
		this->rawCount = this->DDSaccumulator >> this->stepBit;   				// Update the position raw count
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffe:	411a      	asrs	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	659a      	str	r2, [r3, #88]	; 0x58

		if (this->DDSaddValue > 0)												// The sign of the DDS add value indicates the desired direction
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006008:	2b00      	cmp	r3, #0
 800600a:	dd04      	ble.n	8006016 <_ZN7Stepgen10makePulsesEv+0xb4>
		{
			this->isForward = true;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8006014:	e003      	b.n	800601e <_ZN7Stepgen10makePulsesEv+0xbc>
		}
		else //if (this->DDSaddValue < 0)
		{
			this->isForward = false;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		}

		if (stepNow)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d017      	beq.n	8006054 <_ZN7Stepgen10makePulsesEv+0xf2>
		{
			this->directionPin->set(this->isForward);             		// Set direction pin
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800602e:	4619      	mov	r1, r3
 8006030:	4610      	mov	r0, r2
 8006032:	f7ff fb85 	bl	8005740 <_ZN3Pin3setEb>
			this->stepPin->set(true);										// Raise step pin - A4988 / DRV8825 stepper drivers only need 200ns setup time
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800603a:	2101      	movs	r1, #1
 800603c:	4618      	mov	r0, r3
 800603e:	f7ff fb7f 	bl	8005740 <_ZN3Pin3setEb>
			*(this->ptrFeedback) = this->DDSaccumulator;                     // Update position feedback via pointer to the data receiver
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800604a:	601a      	str	r2, [r3, #0]
			this->isStepping = true;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		}
	}


}
 8006054:	bf00      	nop
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <_ZN7Stepgen10stopPulsesEv>:


void Stepgen::stopPulses()
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
	this->stepPin->set(false);	// Reset step pin
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006068:	2100      	movs	r1, #0
 800606a:	4618      	mov	r0, r3
 800606c:	f7ff fb68 	bl	8005740 <_ZN3Pin3setEb>
	this->isStepping = false;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
}
 8006078:	bf00      	nop
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <_ZN19ArduinoJson6101_1109variantAsIiEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>:
inline typename enable_if<is_integral<T>::value, T>::type variantAs(
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  return _data != 0 ? _data->asIntegral<T>() : T(0);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d004      	beq.n	8006098 <_ZN19ArduinoJson6101_1109variantAsIiEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x18>
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f808 	bl	80060a4 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralIiEET_v>
 8006094:	4603      	mov	r3, r0
 8006096:	e000      	b.n	800609a <_ZN19ArduinoJson6101_1109variantAsIiEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x1a>
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
	...

080060a4 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralIiEET_v>:
#include <string.h>  // for strcmp

namespace ARDUINOJSON_NAMESPACE {

template <typename T>
inline T VariantData::asIntegral() const {
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  switch (type()) {
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7fb fe2a 	bl	8001d06 <_ZNK19ArduinoJson6101_11011VariantData4typeEv>
 80060b2:	4603      	mov	r3, r0
 80060b4:	3b03      	subs	r3, #3
 80060b6:	2b05      	cmp	r3, #5
 80060b8:	d830      	bhi.n	800611c <_ZNK19ArduinoJson6101_11011VariantData10asIntegralIiEET_v+0x78>
 80060ba:	a201      	add	r2, pc, #4	; (adr r2, 80060c0 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralIiEET_v+0x1c>)
 80060bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c0:	080060fd 	.word	0x080060fd
 80060c4:	080060fd 	.word	0x080060fd
 80060c8:	080060d9 	.word	0x080060d9
 80060cc:	080060d9 	.word	0x080060d9
 80060d0:	080060eb 	.word	0x080060eb
 80060d4:	0800610b 	.word	0x0800610b
    case VALUE_IS_POSITIVE_INTEGER:
    case VALUE_IS_BOOLEAN:
      return convertPositiveInteger<T>(_content.asInteger);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060de:	4610      	mov	r0, r2
 80060e0:	4619      	mov	r1, r3
 80060e2:	f000 f821 	bl	8006128 <_ZN19ArduinoJson6101_11022convertPositiveIntegerIiyEET_T0_>
 80060e6:	4603      	mov	r3, r0
 80060e8:	e019      	b.n	800611e <_ZNK19ArduinoJson6101_11011VariantData10asIntegralIiEET_v+0x7a>
    case VALUE_IS_NEGATIVE_INTEGER:
      return convertNegativeInteger<T>(_content.asInteger);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f0:	4610      	mov	r0, r2
 80060f2:	4619      	mov	r1, r3
 80060f4:	f000 f82b 	bl	800614e <_ZN19ArduinoJson6101_11022convertNegativeIntegerIiyEET_T0_>
 80060f8:	4603      	mov	r3, r0
 80060fa:	e010      	b.n	800611e <_ZNK19ArduinoJson6101_11011VariantData10asIntegralIiEET_v+0x7a>
    case VALUE_IS_LINKED_STRING:
    case VALUE_IS_OWNED_STRING:
      return parseInteger<T>(_content.asString);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4618      	mov	r0, r3
 8006102:	f000 f838 	bl	8006176 <_ZN19ArduinoJson6101_11012parseIntegerIiEET_PKc>
 8006106:	4603      	mov	r3, r0
 8006108:	e009      	b.n	800611e <_ZNK19ArduinoJson6101_11011VariantData10asIntegralIiEET_v+0x7a>
    case VALUE_IS_FLOAT:
      return convertFloat<T>(_content.asFloat);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006110:	4610      	mov	r0, r2
 8006112:	4619      	mov	r1, r3
 8006114:	f000 f843 	bl	800619e <_ZN19ArduinoJson6101_11012convertFloatIidEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>
 8006118:	4603      	mov	r3, r0
 800611a:	e000      	b.n	800611e <_ZNK19ArduinoJson6101_11011VariantData10asIntegralIiEET_v+0x7a>
    default:
      return 0;
 800611c:	2300      	movs	r3, #0
  }
}
 800611e:	4618      	mov	r0, r3
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop

08006128 <_ZN19ArduinoJson6101_11022convertPositiveIntegerIiyEET_T0_>:
canStoreNegativeInteger(TIn) {
  return false;
}

template <typename TOut, typename TIn>
TOut convertPositiveInteger(TIn value) {
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	e9c7 0100 	strd	r0, r1, [r7]
  return canStorePositiveInteger<TOut>(value) ? TOut(value) : 0;
 8006132:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006136:	f000 f860 	bl	80061fa <_ZN19ArduinoJson6101_11023canStorePositiveIntegerIiyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuelestS3_stT0_EbE4typeES5_>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <_ZN19ArduinoJson6101_11022convertPositiveIntegerIiyEET_T0_+0x1c>
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	e000      	b.n	8006146 <_ZN19ArduinoJson6101_11022convertPositiveIntegerIiyEET_T0_+0x1e>
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <_ZN19ArduinoJson6101_11022convertNegativeIntegerIiyEET_T0_>:

template <typename TOut, typename TIn>
TOut convertNegativeInteger(TIn value) {
 800614e:	b580      	push	{r7, lr}
 8006150:	b082      	sub	sp, #8
 8006152:	af00      	add	r7, sp, #0
 8006154:	e9c7 0100 	strd	r0, r1, [r7]
  return canStoreNegativeInteger<TOut>(value) ? TOut(~value + 1) : 0;
 8006158:	e9d7 0100 	ldrd	r0, r1, [r7]
 800615c:	f000 f865 	bl	800622a <_ZN19ArduinoJson6101_11023canStoreNegativeIntegerIiyEENS_9enable_ifIXaaaasrNS_11is_integralIT_EE5valuesrNS_9is_signedIS3_EE5valuelestS3_stT0_EbE4typeES7_>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d002      	beq.n	800616c <_ZN19ArduinoJson6101_11022convertNegativeIntegerIiyEET_T0_+0x1e>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	425b      	negs	r3, r3
 800616a:	e000      	b.n	800616e <_ZN19ArduinoJson6101_11022convertNegativeIntegerIiyEET_T0_+0x20>
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <_ZN19ArduinoJson6101_11012parseIntegerIiEET_PKc>:
#include "convertNumber.hpp"
#include "parseNumber.hpp"

namespace ARDUINOJSON_NAMESPACE {
template <typename T>
T parseInteger(const char *s) {
 8006176:	b580      	push	{r7, lr}
 8006178:	b088      	sub	sp, #32
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  // try to reuse the same parameters as JsonDeserializer
  typedef typename choose_largest<UInt, typename make_unsigned<T>::type>::type
      TUInt;
  return parseNumber<Float, TUInt>(s).template as<T>();
 800617e:	f107 0308 	add.w	r3, r7, #8
 8006182:	6879      	ldr	r1, [r7, #4]
 8006184:	4618      	mov	r0, r3
 8006186:	f7fe f95d 	bl	8004444 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>
 800618a:	f107 0308 	add.w	r3, r7, #8
 800618e:	4618      	mov	r0, r3
 8006190:	f000 f866 	bl	8006260 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asIiEET_v>
 8006194:	4603      	mov	r3, r0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3720      	adds	r7, #32
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <_ZN19ArduinoJson6101_11012convertFloatIidEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>:
    TIn value) {
  return TOut(value);
}

template <typename TOut, typename TIn>
typename enable_if<!is_floating_point<TOut>::value, TOut>::type convertFloat(
 800619e:	b580      	push	{r7, lr}
 80061a0:	b082      	sub	sp, #8
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	e9c7 0100 	strd	r0, r1, [r7]
    TIn value) {
  return value >= numeric_limits<TOut>::lowest() &&
 80061a8:	f000 f888 	bl	80062bc <_ZN19ArduinoJson6101_11014numeric_limitsIivE6lowestEv>
 80061ac:	4603      	mov	r3, r0
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fa f96c 	bl	800048c <__aeabi_i2d>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
                 value <= numeric_limits<TOut>::highest()
             ? TOut(value)
 80061b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061bc:	f7fa fc56 	bl	8000a6c <__aeabi_dcmpge>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d014      	beq.n	80061f0 <_ZN19ArduinoJson6101_11012convertFloatIidEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x52>
                 value <= numeric_limits<TOut>::highest()
 80061c6:	f000 f881 	bl	80062cc <_ZN19ArduinoJson6101_11014numeric_limitsIivE7highestEv>
 80061ca:	4603      	mov	r3, r0
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fa f95d 	bl	800048c <__aeabi_i2d>
 80061d2:	4602      	mov	r2, r0
 80061d4:	460b      	mov	r3, r1
  return value >= numeric_limits<TOut>::lowest() &&
 80061d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061da:	f7fa fc3d 	bl	8000a58 <__aeabi_dcmple>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d005      	beq.n	80061f0 <_ZN19ArduinoJson6101_11012convertFloatIidEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x52>
             ? TOut(value)
 80061e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061e8:	f7fa fc54 	bl	8000a94 <__aeabi_d2iz>
 80061ec:	4603      	mov	r3, r0
 80061ee:	e000      	b.n	80061f2 <_ZN19ArduinoJson6101_11012convertFloatIidEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x54>
 80061f0:	2300      	movs	r3, #0
             : 0;
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <_ZN19ArduinoJson6101_11023canStorePositiveIntegerIiyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuelestS3_stT0_EbE4typeES5_>:
canStorePositiveInteger(TIn value) {
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b082      	sub	sp, #8
 80061fe:	af00      	add	r7, sp, #0
 8006200:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8006204:	f000 f862 	bl	80062cc <_ZN19ArduinoJson6101_11014numeric_limitsIivE7highestEv>
 8006208:	4603      	mov	r3, r0
 800620a:	4618      	mov	r0, r3
 800620c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006210:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006214:	4299      	cmp	r1, r3
 8006216:	bf08      	it	eq
 8006218:	4290      	cmpeq	r0, r2
 800621a:	bf2c      	ite	cs
 800621c:	2301      	movcs	r3, #1
 800621e:	2300      	movcc	r3, #0
 8006220:	b2db      	uxtb	r3, r3
}
 8006222:	4618      	mov	r0, r3
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <_ZN19ArduinoJson6101_11023canStoreNegativeIntegerIiyEENS_9enable_ifIXaaaasrNS_11is_integralIT_EE5valuesrNS_9is_signedIS3_EE5valuelestS3_stT0_EbE4typeES7_>:
canStoreNegativeInteger(TIn value) {
 800622a:	b5b0      	push	{r4, r5, r7, lr}
 800622c:	b082      	sub	sp, #8
 800622e:	af00      	add	r7, sp, #0
 8006230:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest()) + 1;
 8006234:	f000 f84a 	bl	80062cc <_ZN19ArduinoJson6101_11014numeric_limitsIivE7highestEv>
 8006238:	4603      	mov	r3, r0
 800623a:	461a      	mov	r2, r3
 800623c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006240:	1c54      	adds	r4, r2, #1
 8006242:	f143 0500 	adc.w	r5, r3, #0
 8006246:	e9d7 2300 	ldrd	r2, r3, [r7]
 800624a:	429d      	cmp	r5, r3
 800624c:	bf08      	it	eq
 800624e:	4294      	cmpeq	r4, r2
 8006250:	bf2c      	ite	cs
 8006252:	2301      	movcs	r3, #1
 8006254:	2300      	movcc	r3, #0
 8006256:	b2db      	uxtb	r3, r3
}
 8006258:	4618      	mov	r0, r3
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bdb0      	pop	{r4, r5, r7, pc}

08006260 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asIiEET_v>:
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}

  template <typename T>
  T as() const {
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
    switch (_type) {
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	7c1b      	ldrb	r3, [r3, #16]
 800626c:	2b08      	cmp	r3, #8
 800626e:	d017      	beq.n	80062a0 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asIiEET_v+0x40>
 8006270:	2b08      	cmp	r3, #8
 8006272:	dc1e      	bgt.n	80062b2 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asIiEET_v+0x52>
 8006274:	2b06      	cmp	r3, #6
 8006276:	d00a      	beq.n	800628e <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asIiEET_v+0x2e>
 8006278:	2b07      	cmp	r3, #7
 800627a:	d11a      	bne.n	80062b2 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asIiEET_v+0x52>
      case VALUE_IS_NEGATIVE_INTEGER:
        return convertNegativeInteger<T>(uintValue);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006282:	4610      	mov	r0, r2
 8006284:	4619      	mov	r1, r3
 8006286:	f7ff ff62 	bl	800614e <_ZN19ArduinoJson6101_11022convertNegativeIntegerIiyEET_T0_>
 800628a:	4603      	mov	r3, r0
 800628c:	e012      	b.n	80062b4 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asIiEET_v+0x54>
      case VALUE_IS_POSITIVE_INTEGER:
        return convertPositiveInteger<T>(uintValue);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006294:	4610      	mov	r0, r2
 8006296:	4619      	mov	r1, r3
 8006298:	f7ff ff46 	bl	8006128 <_ZN19ArduinoJson6101_11022convertPositiveIntegerIiyEET_T0_>
 800629c:	4603      	mov	r3, r0
 800629e:	e009      	b.n	80062b4 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asIiEET_v+0x54>
      case VALUE_IS_FLOAT:
        return convertFloat<T>(floatValue);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80062a6:	4610      	mov	r0, r2
 80062a8:	4619      	mov	r1, r3
 80062aa:	f7ff ff78 	bl	800619e <_ZN19ArduinoJson6101_11012convertFloatIidEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>
 80062ae:	4603      	mov	r3, r0
 80062b0:	e000      	b.n	80062b4 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asIiEET_v+0x54>
      default:
        return 0;
 80062b2:	2300      	movs	r3, #0
    }
  }
 80062b4:	4618      	mov	r0, r3
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <_ZN19ArduinoJson6101_11014numeric_limitsIivE6lowestEv>:
};

template <typename T>
struct numeric_limits<
    T, typename enable_if<is_integral<T>::value && is_signed<T>::value>::type> {
  static T lowest() {
 80062bc:	b480      	push	{r7}
 80062be:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 80062c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  }
 80062c4:	4618      	mov	r0, r3
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bc80      	pop	{r7}
 80062ca:	4770      	bx	lr

080062cc <_ZN19ArduinoJson6101_11014numeric_limitsIivE7highestEv>:
  static T highest() {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	af00      	add	r7, sp, #0
    return T(~lowest());
 80062d0:	f7ff fff4 	bl	80062bc <_ZN19ArduinoJson6101_11014numeric_limitsIivE6lowestEv>
 80062d4:	4603      	mov	r3, r0
 80062d6:	43db      	mvns	r3, r3
  }
 80062d8:	4618      	mov	r0, r3
 80062da:	bd80      	pop	{r7, pc}

080062dc <_ZN7StepgenD1Ev>:

#include "extern.h"

void createStepgen(void);

class Stepgen : public Module
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	4a0a      	ldr	r2, [pc, #40]	; (8006310 <_ZN7StepgenD1Ev+0x34>)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3334      	adds	r3, #52	; 0x34
 80062ee:	4618      	mov	r0, r3
 80062f0:	f00d f8f6 	bl	80134e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	331c      	adds	r3, #28
 80062f8:	4618      	mov	r0, r3
 80062fa:	f00d f8f1 	bl	80134e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4618      	mov	r0, r3
 8006302:	f7ff facd 	bl	80058a0 <_ZN6ModuleD1Ev>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4618      	mov	r0, r3
 800630a:	3708      	adds	r7, #8
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	08016b8c 	.word	0x08016b8c

08006314 <_ZN7StepgenD0Ev>:
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f7ff ffdd 	bl	80062dc <_ZN7StepgenD1Ev>
 8006322:	217c      	movs	r1, #124	; 0x7c
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f00d f801 	bl	801332c <_ZdlPvj>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4618      	mov	r0, r3
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	4618      	mov	r0, r3
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	bc80      	pop	{r7}
 8006348:	4770      	bx	lr

0800634a <_ZNSt12_Vector_baseIP6ModuleSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800634a:	b580      	push	{r7, lr}
 800634c:	b082      	sub	sp, #8
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4618      	mov	r0, r3
 8006356:	f000 f8e0 	bl	800651a <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE12_Vector_implC1Ev>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4618      	mov	r0, r3
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4618      	mov	r0, r3
 8006370:	f7ff ffeb 	bl	800634a <_ZNSt12_Vector_baseIP6ModuleSaIS1_EEC1Ev>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4618      	mov	r0, r3
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
	...

08006380 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>:


using namespace std;

// Thread constructor
pruThread::pruThread(TIM_TypeDef* timer, IRQn_Type irq, uint32_t frequency) :
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	603b      	str	r3, [r7, #0]
 800638c:	4613      	mov	r3, r2
 800638e:	71fb      	strb	r3, [r7, #7]
	timer(timer),
	irq(irq),
	frequency(frequency)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	605a      	str	r2, [r3, #4]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	79fa      	ldrb	r2, [r7, #7]
 800639a:	721a      	strb	r2, [r3, #8]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	60da      	str	r2, [r3, #12]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	3314      	adds	r3, #20
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7ff ffdc 	bl	8006364 <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3320      	adds	r3, #32
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7ff ffd7 	bl	8006364 <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	332c      	adds	r3, #44	; 0x2c
 80063ba:	4618      	mov	r0, r3
 80063bc:	f000 f8bd 	bl	800653a <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1Ev>
{
	printf("Creating thread %d\n", this->frequency);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	4619      	mov	r1, r3
 80063c6:	4804      	ldr	r0, [pc, #16]	; (80063d8 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem+0x58>)
 80063c8:	f00d fac2 	bl	8013950 <iprintf>
}
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	08014de8 	.word	0x08014de8

080063dc <_ZN9pruThread11startThreadEv>:

void pruThread::startThread(void)
{
 80063dc:	b590      	push	{r4, r7, lr}
 80063de:	b085      	sub	sp, #20
 80063e0:	af02      	add	r7, sp, #8
 80063e2:	6078      	str	r0, [r7, #4]
	TimerPtr = new pruTimer(this->timer, this->irq, this->frequency, this);
 80063e4:	2014      	movs	r0, #20
 80063e6:	f00c ffb2 	bl	801334e <_Znwj>
 80063ea:	4603      	mov	r3, r0
 80063ec:	461c      	mov	r4, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6859      	ldr	r1, [r3, #4]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68d8      	ldr	r0, [r3, #12]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	4603      	mov	r3, r0
 8006402:	4620      	mov	r0, r4
 8006404:	f000 fd6c 	bl	8006ee0 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	601c      	str	r4, [r3, #0]
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	bd90      	pop	{r4, r7, pc}

08006414 <_ZN9pruThread14registerModuleEP6Module>:
    this->TimerPtr->stopTimer();
}


void pruThread::registerModule(Module* module)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
	this->vThread.push_back(module);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3314      	adds	r3, #20
 8006422:	463a      	mov	r2, r7
 8006424:	4611      	mov	r1, r2
 8006426:	4618      	mov	r0, r3
 8006428:	f000 f894 	bl	8006554 <_ZNSt6vectorIP6ModuleSaIS1_EE9push_backERKS1_>
}
 800642c:	bf00      	nop
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <_ZN9pruThread18registerModulePostEP6Module>:


void pruThread::registerModulePost(Module* module)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
	this->vThreadPost.push_back(module);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	3320      	adds	r3, #32
 8006442:	463a      	mov	r2, r7
 8006444:	4611      	mov	r1, r2
 8006446:	4618      	mov	r0, r3
 8006448:	f000 f884 	bl	8006554 <_ZNSt6vectorIP6ModuleSaIS1_EE9push_backERKS1_>
	this->hasThreadPost = true;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	741a      	strb	r2, [r3, #16]
}
 8006452:	bf00      	nop
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <_ZN9pruThread3runEv>:


void pruThread::run(void)
{
 800645a:	b590      	push	{r4, r7, lr}
 800645c:	b085      	sub	sp, #20
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
	// iterate over the Thread pointer vector to run all instances of Module::runModule()
	for (iter = vThread.begin(); iter != vThread.end(); ++iter) (*iter)->runModule();
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	3314      	adds	r3, #20
 8006466:	687c      	ldr	r4, [r7, #4]
 8006468:	4618      	mov	r0, r3
 800646a:	f000 f898 	bl	800659e <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>
 800646e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	3314      	adds	r3, #20
 800647a:	4618      	mov	r0, r3
 800647c:	f000 f89f 	bl	80065be <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>
 8006480:	4603      	mov	r3, r0
 8006482:	60bb      	str	r3, [r7, #8]
 8006484:	f107 0308 	add.w	r3, r7, #8
 8006488:	4619      	mov	r1, r3
 800648a:	4620      	mov	r0, r4
 800648c:	f000 f8a8 	bl	80065e0 <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00f      	beq.n	80064b6 <_ZN9pruThread3runEv+0x5c>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	332c      	adds	r3, #44	; 0x2c
 800649a:	4618      	mov	r0, r3
 800649c:	f000 f8c7 	bl	800662e <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>
 80064a0:	4603      	mov	r3, r0
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7ff fa1b 	bl	80058e0 <_ZN6Module9runModuleEv>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	332c      	adds	r3, #44	; 0x2c
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 f8ae 	bl	8006610 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>
 80064b4:	e7dc      	b.n	8006470 <_ZN9pruThread3runEv+0x16>

	// iterate over the second vector that contains module pointers to run after (post) the main vector
	if (hasThreadPost)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	7c1b      	ldrb	r3, [r3, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d029      	beq.n	8006512 <_ZN9pruThread3runEv+0xb8>
	{
		for (iter = vThreadPost.begin(); iter != vThreadPost.end(); ++iter) (*iter)->runModulePost();
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	3320      	adds	r3, #32
 80064c2:	687c      	ldr	r4, [r7, #4]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 f86a 	bl	800659e <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>
 80064ca:	62e0      	str	r0, [r4, #44]	; 0x2c
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	3320      	adds	r3, #32
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 f871 	bl	80065be <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>
 80064dc:	4603      	mov	r3, r0
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	f107 030c 	add.w	r3, r7, #12
 80064e4:	4619      	mov	r1, r3
 80064e6:	4620      	mov	r0, r4
 80064e8:	f000 f87a 	bl	80065e0 <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00f      	beq.n	8006512 <_ZN9pruThread3runEv+0xb8>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	332c      	adds	r3, #44	; 0x2c
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 f899 	bl	800662e <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>
 80064fc:	4603      	mov	r3, r0
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4618      	mov	r0, r3
 8006502:	f7ff fa0f 	bl	8005924 <_ZN6Module13runModulePostEv>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	332c      	adds	r3, #44	; 0x2c
 800650a:	4618      	mov	r0, r3
 800650c:	f000 f880 	bl	8006610 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>
 8006510:	e7dc      	b.n	80064cc <_ZN9pruThread3runEv+0x72>
	}
}
 8006512:	bf00      	nop
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	bd90      	pop	{r4, r7, pc}

0800651a <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800651a:	b580      	push	{r7, lr}
 800651c:	b082      	sub	sp, #8
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f88e 	bl	8006644 <_ZNSaIP6ModuleEC1Ev>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4618      	mov	r0, r3
 800652c:	f000 f896 	bl	800665c <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1Ev>:
      typedef typename __traits_type::value_type  	value_type;
      typedef typename __traits_type::difference_type 	difference_type;
      typedef typename __traits_type::reference 	reference;
      typedef typename __traits_type::pointer   	pointer;

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 800653a:	b480      	push	{r7}
 800653c:	b083      	sub	sp, #12
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
      : _M_current(_Iterator()) { }
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	601a      	str	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4618      	mov	r0, r3
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	bc80      	pop	{r7}
 8006552:	4770      	bx	lr

08006554 <_ZNSt6vectorIP6ModuleSaIS1_EE9push_backERKS1_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	429a      	cmp	r2, r3
 8006568:	d00c      	beq.n	8006584 <_ZNSt6vectorIP6ModuleSaIS1_EE9push_backERKS1_+0x30>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	4619      	mov	r1, r3
 8006574:	f000 f8b0 	bl	80066d8 <_ZNSt16allocator_traitsISaIP6ModuleEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	1d1a      	adds	r2, r3, #4
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8006582:	e008      	b.n	8006596 <_ZNSt6vectorIP6ModuleSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f81a 	bl	80065be <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>
 800658a:	4603      	mov	r3, r0
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f8c9 	bl	8006728 <_ZNSt6vectorIP6ModuleSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8006596:	bf00      	nop
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800659e:	b580      	push	{r7, lr}
 80065a0:	b084      	sub	sp, #16
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	f107 030c 	add.w	r3, r7, #12
 80065ac:	4611      	mov	r1, r2
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 f976 	bl	80068a0 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80065be:	b580      	push	{r7, lr}
 80065c0:	b084      	sub	sp, #16
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	1d1a      	adds	r2, r3, #4
 80065ca:	f107 030c 	add.w	r3, r7, #12
 80065ce:	4611      	mov	r1, r2
 80065d0:	4618      	mov	r0, r3
 80065d2:	f000 f965 	bl	80068a0 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80065e0:	b590      	push	{r4, r7, lr}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f967 	bl	80068be <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 80065f0:	4603      	mov	r3, r0
 80065f2:	681c      	ldr	r4, [r3, #0]
 80065f4:	6838      	ldr	r0, [r7, #0]
 80065f6:	f000 f962 	bl	80068be <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 80065fa:	4603      	mov	r3, r0
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	429c      	cmp	r4, r3
 8006600:	bf14      	ite	ne
 8006602:	2301      	movne	r3, #1
 8006604:	2300      	moveq	r3, #0
 8006606:	b2db      	uxtb	r3, r3
 8006608:	4618      	mov	r0, r3
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	bd90      	pop	{r4, r7, pc}

08006610 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
	++_M_current;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	1d1a      	adds	r2, r3, #4
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	601a      	str	r2, [r3, #0]
	return *this;
 8006622:	687b      	ldr	r3, [r7, #4]
      }
 8006624:	4618      	mov	r0, r3
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	bc80      	pop	{r7}
 800662c:	4770      	bx	lr

0800662e <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800662e:	b480      	push	{r7}
 8006630:	b083      	sub	sp, #12
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4618      	mov	r0, r3
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	bc80      	pop	{r7}
 8006642:	4770      	bx	lr

08006644 <_ZNSaIP6ModuleEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f940 	bl	80068d2 <_ZN9__gnu_cxx13new_allocatorIP6ModuleEC1Ev>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4618      	mov	r0, r3
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	605a      	str	r2, [r3, #4]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	609a      	str	r2, [r3, #8]
	{ }
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4618      	mov	r0, r3
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	bc80      	pop	{r7}
 8006680:	4770      	bx	lr

08006682 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8006682:	b580      	push	{r7, lr}
 8006684:	b084      	sub	sp, #16
 8006686:	af00      	add	r7, sp, #0
 8006688:	60f8      	str	r0, [r7, #12]
 800668a:	60b9      	str	r1, [r7, #8]
 800668c:	607a      	str	r2, [r7, #4]
	if (__p)
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d005      	beq.n	80066a0 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	68b9      	ldr	r1, [r7, #8]
 800669a:	4618      	mov	r0, r3
 800669c:	f000 f923 	bl	80068e6 <_ZNSt16allocator_traitsISaIP6ModuleEE10deallocateERS2_PS1_j>
      }
 80066a0:	bf00      	nop
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4618      	mov	r0, r3
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bc80      	pop	{r7}
 80066ba:	4770      	bx	lr

080066bc <_ZSt8_DestroyIPP6ModuleS1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80066c8:	68b9      	ldr	r1, [r7, #8]
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f000 f91a 	bl	8006904 <_ZSt8_DestroyIPP6ModuleEvT_S3_>
    }
 80066d0:	bf00      	nop
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <_ZNSt16allocator_traitsISaIP6ModuleEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f91a 	bl	800691e <_ZSt7forwardIRKP6ModuleEOT_RNSt16remove_referenceIS4_E4typeE>
 80066ea:	4603      	mov	r3, r0
 80066ec:	461a      	mov	r2, r3
 80066ee:	68b9      	ldr	r1, [r7, #8]
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 f91e 	bl	8006932 <_ZN9__gnu_cxx13new_allocatorIP6ModuleE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 80066f6:	bf00      	nop
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <_ZNSt6vectorIP6ModuleSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 80066fe:	b580      	push	{r7, lr}
 8006700:	b082      	sub	sp, #8
 8006702:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8006704:	4618      	mov	r0, r3
 8006706:	f000 f805 	bl	8006714 <_ZNSt6vectorIP6ModuleSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800670a:	4603      	mov	r3, r0
      }
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <_ZNSt6vectorIP6ModuleSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800671c:	2301      	movs	r3, #1
      }
 800671e:	4618      	mov	r0, r3
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	bc80      	pop	{r7}
 8006726:	4770      	bx	lr

08006728 <_ZNSt6vectorIP6ModuleSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8006728:	b5b0      	push	{r4, r5, r7, lr}
 800672a:	b08c      	sub	sp, #48	; 0x30
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8006734:	4a59      	ldr	r2, [pc, #356]	; (800689c <_ZNSt6vectorIP6ModuleSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 8006736:	2101      	movs	r1, #1
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 f910 	bl	800695e <_ZNKSt6vectorIP6ModuleSaIS1_EE12_M_check_lenEjPKc>
 800673e:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f7ff ff26 	bl	800659e <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>
 8006752:	4603      	mov	r3, r0
 8006754:	617b      	str	r3, [r7, #20]
 8006756:	f107 0214 	add.w	r2, r7, #20
 800675a:	f107 0308 	add.w	r3, r7, #8
 800675e:	4611      	mov	r1, r2
 8006760:	4618      	mov	r0, r3
 8006762:	f000 f943 	bl	80069ec <_ZN9__gnu_cxxmiIPP6ModuleSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8006766:	4603      	mov	r3, r0
 8006768:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800676e:	4618      	mov	r0, r3
 8006770:	f000 f951 	bl	8006a16 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE11_M_allocateEj>
 8006774:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800677a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	18d5      	adds	r5, r2, r3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f8ca 	bl	800691e <_ZSt7forwardIRKP6ModuleEOT_RNSt16remove_referenceIS4_E4typeE>
 800678a:	4603      	mov	r3, r0
 800678c:	461a      	mov	r2, r3
 800678e:	4629      	mov	r1, r5
 8006790:	4620      	mov	r0, r4
 8006792:	f7ff ffa1 	bl	80066d8 <_ZNSt16allocator_traitsISaIP6ModuleEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8006796:	2300      	movs	r3, #0
 8006798:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800679a:	f7ff ffb0 	bl	80066fe <_ZNSt6vectorIP6ModuleSaIS1_EE15_S_use_relocateEv>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d027      	beq.n	80067f4 <_ZNSt6vectorIP6ModuleSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80067a4:	f107 0308 	add.w	r3, r7, #8
 80067a8:	4618      	mov	r0, r3
 80067aa:	f000 f888 	bl	80068be <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 80067ae:	4603      	mov	r3, r0
 80067b0:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7ff ff77 	bl	80066a8 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE19_M_get_Tp_allocatorEv>
 80067ba:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	4621      	mov	r1, r4
 80067c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067c2:	f000 f93c 	bl	8006a3e <_ZNSt6vectorIP6ModuleSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80067c6:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80067c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ca:	3304      	adds	r3, #4
 80067cc:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80067ce:	f107 0308 	add.w	r3, r7, #8
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 f873 	bl	80068be <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 80067d8:	4603      	mov	r3, r0
 80067da:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4618      	mov	r0, r3
 80067e0:	f7ff ff62 	bl	80066a8 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE19_M_get_Tp_allocatorEv>
 80067e4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80067e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067e8:	6a39      	ldr	r1, [r7, #32]
 80067ea:	4620      	mov	r0, r4
 80067ec:	f000 f927 	bl	8006a3e <_ZNSt6vectorIP6ModuleSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80067f0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80067f2:	e026      	b.n	8006842 <_ZNSt6vectorIP6ModuleSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 80067f4:	f107 0308 	add.w	r3, r7, #8
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 f860 	bl	80068be <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 80067fe:	4603      	mov	r3, r0
 8006800:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	4618      	mov	r0, r3
 8006806:	f7ff ff4f 	bl	80066a8 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE19_M_get_Tp_allocatorEv>
 800680a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	4621      	mov	r1, r4
 8006810:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006812:	f000 f928 	bl	8006a66 <_ZSt34__uninitialized_move_if_noexcept_aIPP6ModuleS2_SaIS1_EET0_T_S5_S4_RT1_>
 8006816:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8006818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681a:	3304      	adds	r3, #4
 800681c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 800681e:	f107 0308 	add.w	r3, r7, #8
 8006822:	4618      	mov	r0, r3
 8006824:	f000 f84b 	bl	80068be <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 8006828:	4603      	mov	r3, r0
 800682a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4618      	mov	r0, r3
 8006830:	f7ff ff3a 	bl	80066a8 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE19_M_get_Tp_allocatorEv>
 8006834:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8006836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006838:	6a39      	ldr	r1, [r7, #32]
 800683a:	4620      	mov	r0, r4
 800683c:	f000 f913 	bl	8006a66 <_ZSt34__uninitialized_move_if_noexcept_aIPP6ModuleS2_SaIS1_EET0_T_S5_S4_RT1_>
 8006840:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8006842:	f7ff ff5c 	bl	80066fe <_ZNSt6vectorIP6ModuleSaIS1_EE15_S_use_relocateEv>
 8006846:	4603      	mov	r3, r0
 8006848:	f083 0301 	eor.w	r3, r3, #1
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d009      	beq.n	8006866 <_ZNSt6vectorIP6ModuleSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4618      	mov	r0, r3
 8006856:	f7ff ff27 	bl	80066a8 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE19_M_get_Tp_allocatorEv>
 800685a:	4603      	mov	r3, r0
 800685c:	461a      	mov	r2, r3
 800685e:	6a39      	ldr	r1, [r7, #32]
 8006860:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006862:	f7ff ff2b 	bl	80066bc <_ZSt8_DestroyIPP6ModuleS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8006866:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8006872:	461a      	mov	r2, r3
 8006874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006876:	f7ff ff04 	bl	8006682 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	69ba      	ldr	r2, [r7, #24]
 800687e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006884:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	441a      	add	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	609a      	str	r2, [r3, #8]
    }
 8006892:	bf00      	nop
 8006894:	3730      	adds	r7, #48	; 0x30
 8006896:	46bd      	mov	sp, r7
 8006898:	bdb0      	pop	{r4, r5, r7, pc}
 800689a:	bf00      	nop
 800689c:	08014dfc 	.word	0x08014dfc

080068a0 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	601a      	str	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4618      	mov	r0, r3
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bc80      	pop	{r7}
 80068bc:	4770      	bx	lr

080068be <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80068be:	b480      	push	{r7}
 80068c0:	b083      	sub	sp, #12
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4618      	mov	r0, r3
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bc80      	pop	{r7}
 80068d0:	4770      	bx	lr

080068d2 <_ZN9__gnu_cxx13new_allocatorIP6ModuleEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4618      	mov	r0, r3
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bc80      	pop	{r7}
 80068e4:	4770      	bx	lr

080068e6 <_ZNSt16allocator_traitsISaIP6ModuleEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b084      	sub	sp, #16
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	60f8      	str	r0, [r7, #12]
 80068ee:	60b9      	str	r1, [r7, #8]
 80068f0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	68b9      	ldr	r1, [r7, #8]
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f000 f8ce 	bl	8006a98 <_ZN9__gnu_cxx13new_allocatorIP6ModuleE10deallocateEPS2_j>
 80068fc:	bf00      	nop
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <_ZSt8_DestroyIPP6ModuleEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800690e:	6839      	ldr	r1, [r7, #0]
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f8ce 	bl	8006ab2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6ModuleEEvT_S5_>
    }
 8006916:	bf00      	nop
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <_ZSt7forwardIRKP6ModuleEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800691e:	b480      	push	{r7}
 8006920:	b083      	sub	sp, #12
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4618      	mov	r0, r3
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	bc80      	pop	{r7}
 8006930:	4770      	bx	lr

08006932 <_ZN9__gnu_cxx13new_allocatorIP6ModuleE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8006932:	b590      	push	{r4, r7, lr}
 8006934:	b085      	sub	sp, #20
 8006936:	af00      	add	r7, sp, #0
 8006938:	60f8      	str	r0, [r7, #12]
 800693a:	60b9      	str	r1, [r7, #8]
 800693c:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7ff ffed 	bl	800691e <_ZSt7forwardIRKP6ModuleEOT_RNSt16remove_referenceIS4_E4typeE>
 8006944:	4603      	mov	r3, r0
 8006946:	681c      	ldr	r4, [r3, #0]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	4619      	mov	r1, r3
 800694c:	2004      	movs	r0, #4
 800694e:	f7ff fcf1 	bl	8006334 <_ZnwjPv>
 8006952:	4603      	mov	r3, r0
 8006954:	601c      	str	r4, [r3, #0]
 8006956:	bf00      	nop
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	bd90      	pop	{r4, r7, pc}

0800695e <_ZNKSt6vectorIP6ModuleSaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 800695e:	b590      	push	{r4, r7, lr}
 8006960:	b087      	sub	sp, #28
 8006962:	af00      	add	r7, sp, #0
 8006964:	60f8      	str	r0, [r7, #12]
 8006966:	60b9      	str	r1, [r7, #8]
 8006968:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 f8ab 	bl	8006ac6 <_ZNKSt6vectorIP6ModuleSaIS1_EE8max_sizeEv>
 8006970:	4604      	mov	r4, r0
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 f8b8 	bl	8006ae8 <_ZNKSt6vectorIP6ModuleSaIS1_EE4sizeEv>
 8006978:	4603      	mov	r3, r0
 800697a:	1ae2      	subs	r2, r4, r3
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	429a      	cmp	r2, r3
 8006980:	bf34      	ite	cc
 8006982:	2301      	movcc	r3, #1
 8006984:	2300      	movcs	r3, #0
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d002      	beq.n	8006992 <_ZNKSt6vectorIP6ModuleSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f00c fcfa 	bl	8013386 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f000 f8a8 	bl	8006ae8 <_ZNKSt6vectorIP6ModuleSaIS1_EE4sizeEv>
 8006998:	4604      	mov	r4, r0
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f000 f8a4 	bl	8006ae8 <_ZNKSt6vectorIP6ModuleSaIS1_EE4sizeEv>
 80069a0:	4603      	mov	r3, r0
 80069a2:	613b      	str	r3, [r7, #16]
 80069a4:	f107 0208 	add.w	r2, r7, #8
 80069a8:	f107 0310 	add.w	r3, r7, #16
 80069ac:	4611      	mov	r1, r2
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 f8a9 	bl	8006b06 <_ZSt3maxIjERKT_S2_S2_>
 80069b4:	4603      	mov	r3, r0
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4423      	add	r3, r4
 80069ba:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 f893 	bl	8006ae8 <_ZNKSt6vectorIP6ModuleSaIS1_EE4sizeEv>
 80069c2:	4602      	mov	r2, r0
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d306      	bcc.n	80069d8 <_ZNKSt6vectorIP6ModuleSaIS1_EE12_M_check_lenEjPKc+0x7a>
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f000 f87b 	bl	8006ac6 <_ZNKSt6vectorIP6ModuleSaIS1_EE8max_sizeEv>
 80069d0:	4602      	mov	r2, r0
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d904      	bls.n	80069e2 <_ZNKSt6vectorIP6ModuleSaIS1_EE12_M_check_lenEjPKc+0x84>
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 f874 	bl	8006ac6 <_ZNKSt6vectorIP6ModuleSaIS1_EE8max_sizeEv>
 80069de:	4603      	mov	r3, r0
 80069e0:	e000      	b.n	80069e4 <_ZNKSt6vectorIP6ModuleSaIS1_EE12_M_check_lenEjPKc+0x86>
 80069e2:	697b      	ldr	r3, [r7, #20]
      }
 80069e4:	4618      	mov	r0, r3
 80069e6:	371c      	adds	r7, #28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd90      	pop	{r4, r7, pc}

080069ec <_ZN9__gnu_cxxmiIPP6ModuleSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80069ec:	b590      	push	{r4, r7, lr}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7ff ff61 	bl	80068be <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 80069fc:	4603      	mov	r3, r0
 80069fe:	681c      	ldr	r4, [r3, #0]
 8006a00:	6838      	ldr	r0, [r7, #0]
 8006a02:	f7ff ff5c 	bl	80068be <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 8006a06:	4603      	mov	r3, r0
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	1ae3      	subs	r3, r4, r3
 8006a0c:	109b      	asrs	r3, r3, #2
 8006a0e:	4618      	mov	r0, r3
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd90      	pop	{r4, r7, pc}

08006a16 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b082      	sub	sp, #8
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
 8006a1e:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d006      	beq.n	8006a34 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE11_M_allocateEj+0x1e>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 f87e 	bl	8006b2c <_ZNSt16allocator_traitsISaIP6ModuleEE8allocateERS2_j>
 8006a30:	4603      	mov	r3, r0
 8006a32:	e000      	b.n	8006a36 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE11_M_allocateEj+0x20>
 8006a34:	2300      	movs	r3, #0
      }
 8006a36:	4618      	mov	r0, r3
 8006a38:	3708      	adds	r7, #8
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <_ZNSt6vectorIP6ModuleSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8006a3e:	b590      	push	{r4, r7, lr}
 8006a40:	b089      	sub	sp, #36	; 0x24
 8006a42:	af02      	add	r7, sp, #8
 8006a44:	60f8      	str	r0, [r7, #12]
 8006a46:	60b9      	str	r1, [r7, #8]
 8006a48:	607a      	str	r2, [r7, #4]
 8006a4a:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8006a4c:	f88d 4000 	strb.w	r4, [sp]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	68b9      	ldr	r1, [r7, #8]
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 f877 	bl	8006b4a <_ZNSt6vectorIP6ModuleSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8006a5c:	4603      	mov	r3, r0
      }
 8006a5e:	4618      	mov	r0, r3
 8006a60:	371c      	adds	r7, #28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd90      	pop	{r4, r7, pc}

08006a66 <_ZSt34__uninitialized_move_if_noexcept_aIPP6ModuleS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8006a66:	b590      	push	{r4, r7, lr}
 8006a68:	b085      	sub	sp, #20
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	60f8      	str	r0, [r7, #12]
 8006a6e:	60b9      	str	r1, [r7, #8]
 8006a70:	607a      	str	r2, [r7, #4]
 8006a72:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 f87a 	bl	8006b6e <_ZSt32__make_move_if_noexcept_iteratorIP6ModuleSt13move_iteratorIPS1_EET0_PT_>
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	68b8      	ldr	r0, [r7, #8]
 8006a7e:	f000 f876 	bl	8006b6e <_ZSt32__make_move_if_noexcept_iteratorIP6ModuleSt13move_iteratorIPS1_EET0_PT_>
 8006a82:	4601      	mov	r1, r0
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	4620      	mov	r0, r4
 8006a8a:	f000 f87f 	bl	8006b8c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP6ModuleES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8006a8e:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8006a90:	4618      	mov	r0, r3
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd90      	pop	{r4, r7, pc}

08006a98 <_ZN9__gnu_cxx13new_allocatorIP6ModuleE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8006aa4:	68b8      	ldr	r0, [r7, #8]
 8006aa6:	f00c fc3f 	bl	8013328 <_ZdlPv>
      }
 8006aaa:	bf00      	nop
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6ModuleEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8006ab2:	b480      	push	{r7}
 8006ab4:	b083      	sub	sp, #12
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	6039      	str	r1, [r7, #0]
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bc80      	pop	{r7}
 8006ac4:	4770      	bx	lr

08006ac6 <_ZNKSt6vectorIP6ModuleSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b082      	sub	sp, #8
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f000 f886 	bl	8006be2 <_ZNKSt12_Vector_baseIP6ModuleSaIS1_EE19_M_get_Tp_allocatorEv>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 f868 	bl	8006bae <_ZNSt6vectorIP6ModuleSaIS1_EE11_S_max_sizeERKS2_>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <_ZNKSt6vectorIP6ModuleSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	109b      	asrs	r3, r3, #2
 8006afc:	4618      	mov	r0, r3
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bc80      	pop	{r7}
 8006b04:	4770      	bx	lr

08006b06 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8006b06:	b480      	push	{r7}
 8006b08:	b083      	sub	sp, #12
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d201      	bcs.n	8006b20 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	e000      	b.n	8006b22 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8006b20:	687b      	ldr	r3, [r7, #4]
    }
 8006b22:	4618      	mov	r0, r3
 8006b24:	370c      	adds	r7, #12
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bc80      	pop	{r7}
 8006b2a:	4770      	bx	lr

08006b2c <_ZNSt16allocator_traitsISaIP6ModuleEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006b36:	2200      	movs	r2, #0
 8006b38:	6839      	ldr	r1, [r7, #0]
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f85b 	bl	8006bf6 <_ZN9__gnu_cxx13new_allocatorIP6ModuleE8allocateEjPKv>
 8006b40:	4603      	mov	r3, r0
 8006b42:	4618      	mov	r0, r3
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <_ZNSt6vectorIP6ModuleSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	60f8      	str	r0, [r7, #12]
 8006b52:	60b9      	str	r1, [r7, #8]
 8006b54:	607a      	str	r2, [r7, #4]
 8006b56:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	68b9      	ldr	r1, [r7, #8]
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f000 f867 	bl	8006c32 <_ZSt12__relocate_aIPP6ModuleS2_SaIS1_EET0_T_S5_S4_RT1_>
 8006b64:	4603      	mov	r3, r0
      }
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <_ZSt32__make_move_if_noexcept_iteratorIP6ModuleSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b084      	sub	sp, #16
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8006b76:	f107 030c 	add.w	r3, r7, #12
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f000 f875 	bl	8006c6c <_ZNSt13move_iteratorIPP6ModuleEC1ES2_>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	4618      	mov	r0, r3
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP6ModuleES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
 8006b98:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	68b9      	ldr	r1, [r7, #8]
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f000 f872 	bl	8006c88 <_ZSt18uninitialized_copyISt13move_iteratorIPP6ModuleES3_ET0_T_S6_S5_>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <_ZNSt6vectorIP6ModuleSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b084      	sub	sp, #16
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8006bb6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8006bba:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 f875 	bl	8006cac <_ZNSt16allocator_traitsISaIP6ModuleEE8max_sizeERKS2_>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8006bc6:	f107 0208 	add.w	r2, r7, #8
 8006bca:	f107 030c 	add.w	r3, r7, #12
 8006bce:	4611      	mov	r1, r2
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 f877 	bl	8006cc4 <_ZSt3minIjERKT_S2_S2_>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	681b      	ldr	r3, [r3, #0]
      }
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <_ZNKSt12_Vector_baseIP6ModuleSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006be2:	b480      	push	{r7}
 8006be4:	b083      	sub	sp, #12
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4618      	mov	r0, r3
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bc80      	pop	{r7}
 8006bf4:	4770      	bx	lr

08006bf6 <_ZN9__gnu_cxx13new_allocatorIP6ModuleE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b084      	sub	sp, #16
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	60f8      	str	r0, [r7, #12]
 8006bfe:	60b9      	str	r1, [r7, #8]
 8006c00:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 f871 	bl	8006cea <_ZNK9__gnu_cxx13new_allocatorIP6ModuleE8max_sizeEv>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	bf8c      	ite	hi
 8006c10:	2301      	movhi	r3, #1
 8006c12:	2300      	movls	r3, #0
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <_ZN9__gnu_cxx13new_allocatorIP6ModuleE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006c1a:	f00c fbae 	bl	801337a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	4618      	mov	r0, r3
 8006c24:	f00c fb93 	bl	801334e <_Znwj>
 8006c28:	4603      	mov	r3, r0
      }
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <_ZSt12__relocate_aIPP6ModuleS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8006c32:	b5b0      	push	{r4, r5, r7, lr}
 8006c34:	b084      	sub	sp, #16
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	60f8      	str	r0, [r7, #12]
 8006c3a:	60b9      	str	r1, [r7, #8]
 8006c3c:	607a      	str	r2, [r7, #4]
 8006c3e:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 f85d 	bl	8006d00 <_ZSt12__niter_baseIPP6ModuleET_S3_>
 8006c46:	4604      	mov	r4, r0
 8006c48:	68b8      	ldr	r0, [r7, #8]
 8006c4a:	f000 f859 	bl	8006d00 <_ZSt12__niter_baseIPP6ModuleET_S3_>
 8006c4e:	4605      	mov	r5, r0
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f855 	bl	8006d00 <_ZSt12__niter_baseIPP6ModuleET_S3_>
 8006c56:	4602      	mov	r2, r0
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	4629      	mov	r1, r5
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	f000 f859 	bl	8006d14 <_ZSt14__relocate_a_1IP6ModuleS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8006c62:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8006c64:	4618      	mov	r0, r3
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bdb0      	pop	{r4, r5, r7, pc}

08006c6c <_ZNSt13move_iteratorIPP6ModuleEC1ES2_>:
      move_iterator(iterator_type __i)
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	683a      	ldr	r2, [r7, #0]
 8006c7a:	601a      	str	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bc80      	pop	{r7}
 8006c86:	4770      	bx	lr

08006c88 <_ZSt18uninitialized_copyISt13move_iteratorIPP6ModuleES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8006c94:	2301      	movs	r3, #1
 8006c96:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	68b9      	ldr	r1, [r7, #8]
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 f857 	bl	8006d50 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP6ModuleES5_EET0_T_S8_S7_>
 8006ca2:	4603      	mov	r3, r0
    }
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3718      	adds	r7, #24
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <_ZNSt16allocator_traitsISaIP6ModuleEE8max_sizeERKS2_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f818 	bl	8006cea <_ZNK9__gnu_cxx13new_allocatorIP6ModuleE8max_sizeEv>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d201      	bcs.n	8006cde <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	e000      	b.n	8006ce0 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8006cde:	687b      	ldr	r3, [r7, #4]
    }
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bc80      	pop	{r7}
 8006ce8:	4770      	bx	lr

08006cea <_ZNK9__gnu_cxx13new_allocatorIP6ModuleE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8006cea:	b480      	push	{r7}
 8006cec:	b083      	sub	sp, #12
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006cf2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bc80      	pop	{r7}
 8006cfe:	4770      	bx	lr

08006d00 <_ZSt12__niter_baseIPP6ModuleET_S3_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    inline _Iterator
    __niter_base(_Iterator __it)
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bc80      	pop	{r7}
 8006d12:	4770      	bx	lr

08006d14 <_ZSt14__relocate_a_1IP6ModuleS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
 8006d20:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	109b      	asrs	r3, r3, #2
 8006d2a:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	dd06      	ble.n	8006d40 <_ZSt14__relocate_a_1IP6ModuleS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	461a      	mov	r2, r3
 8006d38:	68f9      	ldr	r1, [r7, #12]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f00c fd40 	bl	80137c0 <memmove>
      return __result + __count;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	4413      	add	r3, r2
    }
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3718      	adds	r7, #24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP6ModuleES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	68b9      	ldr	r1, [r7, #8]
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f000 f805 	bl	8006d70 <_ZSt4copyISt13move_iteratorIPP6ModuleES3_ET0_T_S6_S5_>
 8006d66:	4603      	mov	r3, r0
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <_ZSt4copyISt13move_iteratorIPP6ModuleES3_ET0_T_S6_S5_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8006d70:	b590      	push	{r4, r7, lr}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 f80f 	bl	8006da0 <_ZSt12__miter_baseIPP6ModuleEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8006d82:	4604      	mov	r4, r0
 8006d84:	68b8      	ldr	r0, [r7, #8]
 8006d86:	f000 f80b 	bl	8006da0 <_ZSt12__miter_baseIPP6ModuleEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	4619      	mov	r1, r3
 8006d90:	4620      	mov	r0, r4
 8006d92:	f000 f816 	bl	8006dc2 <_ZSt14__copy_move_a2ILb1EPP6ModuleS2_ET1_T0_S4_S3_>
 8006d96:	4603      	mov	r3, r0
    }
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd90      	pop	{r4, r7, pc}

08006da0 <_ZSt12__miter_baseIPP6ModuleEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8006da8:	1d3b      	adds	r3, r7, #4
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 f82c 	bl	8006e08 <_ZNKSt13move_iteratorIPP6ModuleE4baseEv>
 8006db0:	4603      	mov	r3, r0
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 f833 	bl	8006e1e <_ZSt12__miter_baseIPP6ModuleET_S3_>
 8006db8:	4603      	mov	r3, r0
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <_ZSt14__copy_move_a2ILb1EPP6ModuleS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006dc2:	b5b0      	push	{r4, r5, r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	60f8      	str	r0, [r7, #12]
 8006dca:	60b9      	str	r1, [r7, #8]
 8006dcc:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f7ff ff96 	bl	8006d00 <_ZSt12__niter_baseIPP6ModuleET_S3_>
 8006dd4:	4604      	mov	r4, r0
 8006dd6:	68b8      	ldr	r0, [r7, #8]
 8006dd8:	f7ff ff92 	bl	8006d00 <_ZSt12__niter_baseIPP6ModuleET_S3_>
 8006ddc:	4605      	mov	r5, r0
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7ff ff8d 	bl	8006d00 <_ZSt12__niter_baseIPP6ModuleET_S3_>
 8006de6:	4603      	mov	r3, r0
 8006de8:	461a      	mov	r2, r3
 8006dea:	4629      	mov	r1, r5
 8006dec:	4620      	mov	r0, r4
 8006dee:	f000 f820 	bl	8006e32 <_ZSt13__copy_move_aILb1EPP6ModuleS2_ET1_T0_S4_S3_>
 8006df2:	4602      	mov	r2, r0
 8006df4:	1d3b      	adds	r3, r7, #4
 8006df6:	4611      	mov	r1, r2
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 f82c 	bl	8006e56 <_ZSt12__niter_wrapIPP6ModuleET_RKS3_S3_>
 8006dfe:	4603      	mov	r3, r0
    }
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bdb0      	pop	{r4, r5, r7, pc}

08006e08 <_ZNKSt13move_iteratorIPP6ModuleE4baseEv>:
      base() const
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4618      	mov	r0, r3
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bc80      	pop	{r7}
 8006e1c:	4770      	bx	lr

08006e1e <_ZSt12__miter_baseIPP6ModuleET_S3_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bc80      	pop	{r7}
 8006e30:	4770      	bx	lr

08006e32 <_ZSt13__copy_move_aILb1EPP6ModuleS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b086      	sub	sp, #24
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	60f8      	str	r0, [r7, #12]
 8006e3a:	60b9      	str	r1, [r7, #8]
 8006e3c:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8006e3e:	2301      	movs	r3, #1
 8006e40:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	68b9      	ldr	r1, [r7, #8]
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f000 f810 	bl	8006e6c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP6ModuleEEPT_PKS5_S8_S6_>
 8006e4c:	4603      	mov	r3, r0
    }
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3718      	adds	r7, #24
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <_ZSt12__niter_wrapIPP6ModuleET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006e56:	b480      	push	{r7}
 8006e58:	b083      	sub	sp, #12
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	6039      	str	r1, [r7, #0]
    { return __res; }
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	4618      	mov	r0, r3
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bc80      	pop	{r7}
 8006e6a:	4770      	bx	lr

08006e6c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP6ModuleEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	109b      	asrs	r3, r3, #2
 8006e80:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d006      	beq.n	8006e96 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP6ModuleEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	68f9      	ldr	r1, [r7, #12]
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f00c fc95 	bl	80137c0 <memmove>
	  return __result + _Num;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	4413      	add	r3, r2
	}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3718      	adds	r7, #24
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
	...

08006ea8 <__NVIC_EnableIRQ>:
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	4603      	mov	r3, r0
 8006eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	db0b      	blt.n	8006ed2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006eba:	79fb      	ldrb	r3, [r7, #7]
 8006ebc:	f003 021f 	and.w	r2, r3, #31
 8006ec0:	4906      	ldr	r1, [pc, #24]	; (8006edc <__NVIC_EnableIRQ+0x34>)
 8006ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ec6:	095b      	lsrs	r3, r3, #5
 8006ec8:	2001      	movs	r0, #1
 8006eca:	fa00 f202 	lsl.w	r2, r0, r2
 8006ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006ed2:	bf00      	nop
 8006ed4:	370c      	adds	r7, #12
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bc80      	pop	{r7}
 8006eda:	4770      	bx	lr
 8006edc:	e000e100 	.word	0xe000e100

08006ee0 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>:
#include "pruThread.h"



// Timer constructor
pruTimer::pruTimer(TIM_TypeDef* timer, IRQn_Type irq, uint32_t frequency, pruThread* ownerPtr):
 8006ee0:	b590      	push	{r4, r7, lr}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	603b      	str	r3, [r7, #0]
 8006eec:	4613      	mov	r3, r2
 8006eee:	71fb      	strb	r3, [r7, #7]
	timer(timer),
	irq(irq),
	frequency(frequency),
	timerOwnerPtr(ownerPtr)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	605a      	str	r2, [r3, #4]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	79fa      	ldrb	r2, [r7, #7]
 8006efa:	721a      	strb	r2, [r3, #8]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	683a      	ldr	r2, [r7, #0]
 8006f00:	60da      	str	r2, [r3, #12]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6a3a      	ldr	r2, [r7, #32]
 8006f06:	611a      	str	r2, [r3, #16]
{
	interruptPtr = new TimerInterrupt(this->irq, this);	// Instantiate a new Timer Interrupt object and pass "this" pointer
 8006f08:	2008      	movs	r0, #8
 8006f0a:	f00c fa20 	bl	801334e <_Znwj>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	461c      	mov	r4, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f000 f88d 	bl	800703c <_ZN14TimerInterruptC1EiP8pruTimer>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	601c      	str	r4, [r3, #0]

	this->startTimer();
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f000 f812 	bl	8006f50 <_ZN8pruTimer10startTimerEv>
}
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd90      	pop	{r4, r7, pc}

08006f36 <_ZN8pruTimer9timerTickEv>:


void pruTimer::timerTick(void)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b082      	sub	sp, #8
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
	//Do something here
	this->timerOwnerPtr->run();
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7ff fa89 	bl	800645a <_ZN9pruThread3runEv>
}
 8006f48:	bf00      	nop
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <_ZN8pruTimer10startTimerEv>:



void pruTimer::startTimer(void)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
    uint32_t TIM_CLK;

    if (this->timer == TIM1)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	4a31      	ldr	r2, [pc, #196]	; (8007024 <_ZN8pruTimer10startTimerEv+0xd4>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d114      	bne.n	8006f8c <_ZN8pruTimer10startTimerEv+0x3c>
    {
        printf("	power on Timer 1\n\r");
 8006f62:	4831      	ldr	r0, [pc, #196]	; (8007028 <_ZN8pruTimer10startTimerEv+0xd8>)
 8006f64:	f00c fcf4 	bl	8013950 <iprintf>
        __HAL_RCC_TIM1_CLK_ENABLE();
 8006f68:	2300      	movs	r3, #0
 8006f6a:	613b      	str	r3, [r7, #16]
 8006f6c:	4b2f      	ldr	r3, [pc, #188]	; (800702c <_ZN8pruTimer10startTimerEv+0xdc>)
 8006f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f70:	4a2e      	ldr	r2, [pc, #184]	; (800702c <_ZN8pruTimer10startTimerEv+0xdc>)
 8006f72:	f043 0301 	orr.w	r3, r3, #1
 8006f76:	6453      	str	r3, [r2, #68]	; 0x44
 8006f78:	4b2c      	ldr	r3, [pc, #176]	; (800702c <_ZN8pruTimer10startTimerEv+0xdc>)
 8006f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	613b      	str	r3, [r7, #16]
 8006f82:	693b      	ldr	r3, [r7, #16]
        TIM_CLK = APB2CLK;
 8006f84:	4b2a      	ldr	r3, [pc, #168]	; (8007030 <_ZN8pruTimer10startTimerEv+0xe0>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	617b      	str	r3, [r7, #20]
 8006f8a:	e019      	b.n	8006fc0 <_ZN8pruTimer10startTimerEv+0x70>
    }
    else if (this->timer == TIM2)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f94:	d114      	bne.n	8006fc0 <_ZN8pruTimer10startTimerEv+0x70>
    {
        printf("	power on Timer 2\n\r");
 8006f96:	4827      	ldr	r0, [pc, #156]	; (8007034 <_ZN8pruTimer10startTimerEv+0xe4>)
 8006f98:	f00c fcda 	bl	8013950 <iprintf>
        __HAL_RCC_TIM2_CLK_ENABLE();
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	60fb      	str	r3, [r7, #12]
 8006fa0:	4b22      	ldr	r3, [pc, #136]	; (800702c <_ZN8pruTimer10startTimerEv+0xdc>)
 8006fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa4:	4a21      	ldr	r2, [pc, #132]	; (800702c <_ZN8pruTimer10startTimerEv+0xdc>)
 8006fa6:	f043 0301 	orr.w	r3, r3, #1
 8006faa:	6413      	str	r3, [r2, #64]	; 0x40
 8006fac:	4b1f      	ldr	r3, [pc, #124]	; (800702c <_ZN8pruTimer10startTimerEv+0xdc>)
 8006fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	60fb      	str	r3, [r7, #12]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
        TIM_CLK = APB1CLK;
 8006fb8:	4b1d      	ldr	r3, [pc, #116]	; (8007030 <_ZN8pruTimer10startTimerEv+0xe0>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	085b      	lsrs	r3, r3, #1
 8006fbe:	617b      	str	r3, [r7, #20]
    }

    //timer update frequency = TIM_CLK/(TIM_PSC+1)/(TIM_ARR + 1)

    this->timer->CR2 &= 0;                                            // UG used as trigg output
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	605a      	str	r2, [r3, #4]
    this->timer->PSC = TIM_PSC-1;                                     // prescaler
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	629a      	str	r2, [r3, #40]	; 0x28
    this->timer->ARR = ((TIM_CLK / TIM_PSC / this->frequency) - 1);   // period           
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	3a01      	subs	r2, #1
 8006fe6:	62da      	str	r2, [r3, #44]	; 0x2c
    this->timer->EGR = TIM_EGR_UG;                                    // reinit the counter
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	2201      	movs	r2, #1
 8006fee:	615a      	str	r2, [r3, #20]
    this->timer->DIER = TIM_DIER_UIE;                                 // enable update interrupts
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	60da      	str	r2, [r3, #12]

    this->timer->CR1 |= TIM_CR1_CEN;                                  // enable timer
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f042 0201 	orr.w	r2, r2, #1
 8007006:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(this->irq);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800700e:	4618      	mov	r0, r3
 8007010:	f7ff ff4a 	bl	8006ea8 <__NVIC_EnableIRQ>

    printf("	timer started\n");
 8007014:	4808      	ldr	r0, [pc, #32]	; (8007038 <_ZN8pruTimer10startTimerEv+0xe8>)
 8007016:	f00c fd21 	bl	8013a5c <puts>
}
 800701a:	bf00      	nop
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	40010000 	.word	0x40010000
 8007028:	08014e18 	.word	0x08014e18
 800702c:	40023800 	.word	0x40023800
 8007030:	20000050 	.word	0x20000050
 8007034:	08014e2c 	.word	0x08014e2c
 8007038:	08014e40 	.word	0x08014e40

0800703c <_ZN14TimerInterruptC1EiP8pruTimer>:
#include "../interrupt/interrupt.h"
#include "timerInterrupt.h"
#include "timer.h"


TimerInterrupt::TimerInterrupt(int interruptNumber, pruTimer* owner)
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	4618      	mov	r0, r3
 800704c:	f7fe fb26 	bl	800569c <_ZN9InterruptC1Ev>
 8007050:	4a07      	ldr	r2, [pc, #28]	; (8007070 <_ZN14TimerInterruptC1EiP8pruTimer+0x34>)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	4619      	mov	r1, r3
 8007060:	68b8      	ldr	r0, [r7, #8]
 8007062:	f7fe fb2b 	bl	80056bc <_ZN9Interrupt8RegisterEiPS_>
}
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	4618      	mov	r0, r3
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	08016bb0 	.word	0x08016bb0

08007074 <_ZN14TimerInterrupt11ISR_HandlerEv>:


void TimerInterrupt::ISR_Handler(void)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->timerTick();
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	4618      	mov	r0, r3
 8007082:	f7ff ff58 	bl	8006f36 <_ZN8pruTimer9timerTickEv>
}
 8007086:	bf00      	nop
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
	...

08007090 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80070c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007094:	480d      	ldr	r0, [pc, #52]	; (80070cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007096:	490e      	ldr	r1, [pc, #56]	; (80070d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007098:	4a0e      	ldr	r2, [pc, #56]	; (80070d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800709a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800709c:	e002      	b.n	80070a4 <LoopCopyDataInit>

0800709e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800709e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80070a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80070a2:	3304      	adds	r3, #4

080070a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80070a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80070a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80070a8:	d3f9      	bcc.n	800709e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80070aa:	4a0b      	ldr	r2, [pc, #44]	; (80070d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80070ac:	4c0b      	ldr	r4, [pc, #44]	; (80070dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80070ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80070b0:	e001      	b.n	80070b6 <LoopFillZerobss>

080070b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80070b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80070b4:	3204      	adds	r2, #4

080070b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80070b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80070b8:	d3fb      	bcc.n	80070b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80070ba:	f7fe f8bf 	bl	800523c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80070be:	f00c fb21 	bl	8013704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80070c2:	f7fb fe0f 	bl	8002ce4 <main>
  bx  lr
 80070c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80070c8:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80070cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80070d0:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 80070d4:	08016da8 	.word	0x08016da8
  ldr r2, =_sbss
 80070d8:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80070dc:	20006cc8 	.word	0x20006cc8

080070e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80070e0:	e7fe      	b.n	80070e0 <ADC_IRQHandler>
	...

080070e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80070e8:	4b0e      	ldr	r3, [pc, #56]	; (8007124 <HAL_Init+0x40>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a0d      	ldr	r2, [pc, #52]	; (8007124 <HAL_Init+0x40>)
 80070ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80070f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80070f4:	4b0b      	ldr	r3, [pc, #44]	; (8007124 <HAL_Init+0x40>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a0a      	ldr	r2, [pc, #40]	; (8007124 <HAL_Init+0x40>)
 80070fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80070fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007100:	4b08      	ldr	r3, [pc, #32]	; (8007124 <HAL_Init+0x40>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a07      	ldr	r2, [pc, #28]	; (8007124 <HAL_Init+0x40>)
 8007106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800710a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800710c:	2003      	movs	r0, #3
 800710e:	f000 f92b 	bl	8007368 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007112:	200f      	movs	r0, #15
 8007114:	f000 f808 	bl	8007128 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8007118:	f7fd ff00 	bl	8004f1c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	40023c00 	.word	0x40023c00

08007128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007130:	4b12      	ldr	r3, [pc, #72]	; (800717c <HAL_InitTick+0x54>)
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	4b12      	ldr	r3, [pc, #72]	; (8007180 <HAL_InitTick+0x58>)
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	4619      	mov	r1, r3
 800713a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800713e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007142:	fbb2 f3f3 	udiv	r3, r2, r3
 8007146:	4618      	mov	r0, r3
 8007148:	f000 f935 	bl	80073b6 <HAL_SYSTICK_Config>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d001      	beq.n	8007156 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e00e      	b.n	8007174 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b0f      	cmp	r3, #15
 800715a:	d80a      	bhi.n	8007172 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800715c:	2200      	movs	r2, #0
 800715e:	6879      	ldr	r1, [r7, #4]
 8007160:	f04f 30ff 	mov.w	r0, #4294967295
 8007164:	f000 f90b 	bl	800737e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007168:	4a06      	ldr	r2, [pc, #24]	; (8007184 <HAL_InitTick+0x5c>)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	e000      	b.n	8007174 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
}
 8007174:	4618      	mov	r0, r3
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	20000050 	.word	0x20000050
 8007180:	20000058 	.word	0x20000058
 8007184:	20000054 	.word	0x20000054

08007188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007188:	b480      	push	{r7}
 800718a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800718c:	4b05      	ldr	r3, [pc, #20]	; (80071a4 <HAL_IncTick+0x1c>)
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	461a      	mov	r2, r3
 8007192:	4b05      	ldr	r3, [pc, #20]	; (80071a8 <HAL_IncTick+0x20>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4413      	add	r3, r2
 8007198:	4a03      	ldr	r2, [pc, #12]	; (80071a8 <HAL_IncTick+0x20>)
 800719a:	6013      	str	r3, [r2, #0]
}
 800719c:	bf00      	nop
 800719e:	46bd      	mov	sp, r7
 80071a0:	bc80      	pop	{r7}
 80071a2:	4770      	bx	lr
 80071a4:	20000058 	.word	0x20000058
 80071a8:	20000648 	.word	0x20000648

080071ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80071ac:	b480      	push	{r7}
 80071ae:	af00      	add	r7, sp, #0
  return uwTick;
 80071b0:	4b02      	ldr	r3, [pc, #8]	; (80071bc <HAL_GetTick+0x10>)
 80071b2:	681b      	ldr	r3, [r3, #0]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bc80      	pop	{r7}
 80071ba:	4770      	bx	lr
 80071bc:	20000648 	.word	0x20000648

080071c0 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80071c8:	f7ff fff0 	bl	80071ac <HAL_GetTick>
 80071cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d8:	d005      	beq.n	80071e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80071da:	4b0a      	ldr	r3, [pc, #40]	; (8007204 <HAL_Delay+0x44>)
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	461a      	mov	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	4413      	add	r3, r2
 80071e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80071e6:	bf00      	nop
 80071e8:	f7ff ffe0 	bl	80071ac <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d8f7      	bhi.n	80071e8 <HAL_Delay+0x28>
  {
  }
}
 80071f8:	bf00      	nop
 80071fa:	bf00      	nop
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	20000058 	.word	0x20000058

08007208 <__NVIC_SetPriorityGrouping>:
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f003 0307 	and.w	r3, r3, #7
 8007216:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007218:	4b0c      	ldr	r3, [pc, #48]	; (800724c <__NVIC_SetPriorityGrouping+0x44>)
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007224:	4013      	ands	r3, r2
 8007226:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007230:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800723a:	4a04      	ldr	r2, [pc, #16]	; (800724c <__NVIC_SetPriorityGrouping+0x44>)
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	60d3      	str	r3, [r2, #12]
}
 8007240:	bf00      	nop
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	bc80      	pop	{r7}
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	e000ed00 	.word	0xe000ed00

08007250 <__NVIC_GetPriorityGrouping>:
{
 8007250:	b480      	push	{r7}
 8007252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007254:	4b04      	ldr	r3, [pc, #16]	; (8007268 <__NVIC_GetPriorityGrouping+0x18>)
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	0a1b      	lsrs	r3, r3, #8
 800725a:	f003 0307 	and.w	r3, r3, #7
}
 800725e:	4618      	mov	r0, r3
 8007260:	46bd      	mov	sp, r7
 8007262:	bc80      	pop	{r7}
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	e000ed00 	.word	0xe000ed00

0800726c <__NVIC_SetPriority>:
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	4603      	mov	r3, r0
 8007274:	6039      	str	r1, [r7, #0]
 8007276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800727c:	2b00      	cmp	r3, #0
 800727e:	db0a      	blt.n	8007296 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	b2da      	uxtb	r2, r3
 8007284:	490c      	ldr	r1, [pc, #48]	; (80072b8 <__NVIC_SetPriority+0x4c>)
 8007286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800728a:	0112      	lsls	r2, r2, #4
 800728c:	b2d2      	uxtb	r2, r2
 800728e:	440b      	add	r3, r1
 8007290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007294:	e00a      	b.n	80072ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	b2da      	uxtb	r2, r3
 800729a:	4908      	ldr	r1, [pc, #32]	; (80072bc <__NVIC_SetPriority+0x50>)
 800729c:	79fb      	ldrb	r3, [r7, #7]
 800729e:	f003 030f 	and.w	r3, r3, #15
 80072a2:	3b04      	subs	r3, #4
 80072a4:	0112      	lsls	r2, r2, #4
 80072a6:	b2d2      	uxtb	r2, r2
 80072a8:	440b      	add	r3, r1
 80072aa:	761a      	strb	r2, [r3, #24]
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bc80      	pop	{r7}
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	e000e100 	.word	0xe000e100
 80072bc:	e000ed00 	.word	0xe000ed00

080072c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b089      	sub	sp, #36	; 0x24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f003 0307 	and.w	r3, r3, #7
 80072d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	f1c3 0307 	rsb	r3, r3, #7
 80072da:	2b04      	cmp	r3, #4
 80072dc:	bf28      	it	cs
 80072de:	2304      	movcs	r3, #4
 80072e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	3304      	adds	r3, #4
 80072e6:	2b06      	cmp	r3, #6
 80072e8:	d902      	bls.n	80072f0 <NVIC_EncodePriority+0x30>
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	3b03      	subs	r3, #3
 80072ee:	e000      	b.n	80072f2 <NVIC_EncodePriority+0x32>
 80072f0:	2300      	movs	r3, #0
 80072f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072f4:	f04f 32ff 	mov.w	r2, #4294967295
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	fa02 f303 	lsl.w	r3, r2, r3
 80072fe:	43da      	mvns	r2, r3
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	401a      	ands	r2, r3
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007308:	f04f 31ff 	mov.w	r1, #4294967295
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	fa01 f303 	lsl.w	r3, r1, r3
 8007312:	43d9      	mvns	r1, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007318:	4313      	orrs	r3, r2
         );
}
 800731a:	4618      	mov	r0, r3
 800731c:	3724      	adds	r7, #36	; 0x24
 800731e:	46bd      	mov	sp, r7
 8007320:	bc80      	pop	{r7}
 8007322:	4770      	bx	lr

08007324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	3b01      	subs	r3, #1
 8007330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007334:	d301      	bcc.n	800733a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007336:	2301      	movs	r3, #1
 8007338:	e00f      	b.n	800735a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800733a:	4a0a      	ldr	r2, [pc, #40]	; (8007364 <SysTick_Config+0x40>)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	3b01      	subs	r3, #1
 8007340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007342:	210f      	movs	r1, #15
 8007344:	f04f 30ff 	mov.w	r0, #4294967295
 8007348:	f7ff ff90 	bl	800726c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800734c:	4b05      	ldr	r3, [pc, #20]	; (8007364 <SysTick_Config+0x40>)
 800734e:	2200      	movs	r2, #0
 8007350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007352:	4b04      	ldr	r3, [pc, #16]	; (8007364 <SysTick_Config+0x40>)
 8007354:	2207      	movs	r2, #7
 8007356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	e000e010 	.word	0xe000e010

08007368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f7ff ff49 	bl	8007208 <__NVIC_SetPriorityGrouping>
}
 8007376:	bf00      	nop
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800737e:	b580      	push	{r7, lr}
 8007380:	b086      	sub	sp, #24
 8007382:	af00      	add	r7, sp, #0
 8007384:	4603      	mov	r3, r0
 8007386:	60b9      	str	r1, [r7, #8]
 8007388:	607a      	str	r2, [r7, #4]
 800738a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800738c:	2300      	movs	r3, #0
 800738e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007390:	f7ff ff5e 	bl	8007250 <__NVIC_GetPriorityGrouping>
 8007394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	68b9      	ldr	r1, [r7, #8]
 800739a:	6978      	ldr	r0, [r7, #20]
 800739c:	f7ff ff90 	bl	80072c0 <NVIC_EncodePriority>
 80073a0:	4602      	mov	r2, r0
 80073a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073a6:	4611      	mov	r1, r2
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7ff ff5f 	bl	800726c <__NVIC_SetPriority>
}
 80073ae:	bf00      	nop
 80073b0:	3718      	adds	r7, #24
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b082      	sub	sp, #8
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7ff ffb0 	bl	8007324 <SysTick_Config>
 80073c4:	4603      	mov	r3, r0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
	...

080073d0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b088      	sub	sp, #32
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80073d8:	2300      	movs	r3, #0
 80073da:	61fb      	str	r3, [r7, #28]
 80073dc:	2300      	movs	r3, #0
 80073de:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80073e0:	4ba3      	ldr	r3, [pc, #652]	; (8007670 <HAL_ETH_Init+0x2a0>)
 80073e2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80073e8:	2300      	movs	r3, #0
 80073ea:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e173      	b.n	80076de <HAL_ETH_Init+0x30e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d106      	bne.n	8007410 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f002 fd44 	bl	8009e98 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007410:	2300      	movs	r3, #0
 8007412:	60bb      	str	r3, [r7, #8]
 8007414:	4b97      	ldr	r3, [pc, #604]	; (8007674 <HAL_ETH_Init+0x2a4>)
 8007416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007418:	4a96      	ldr	r2, [pc, #600]	; (8007674 <HAL_ETH_Init+0x2a4>)
 800741a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800741e:	6453      	str	r3, [r2, #68]	; 0x44
 8007420:	4b94      	ldr	r3, [pc, #592]	; (8007674 <HAL_ETH_Init+0x2a4>)
 8007422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007428:	60bb      	str	r3, [r7, #8]
 800742a:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800742c:	4b92      	ldr	r3, [pc, #584]	; (8007678 <HAL_ETH_Init+0x2a8>)
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	4a91      	ldr	r2, [pc, #580]	; (8007678 <HAL_ETH_Init+0x2a8>)
 8007432:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007436:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8007438:	4b8f      	ldr	r3, [pc, #572]	; (8007678 <HAL_ETH_Init+0x2a8>)
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a1b      	ldr	r3, [r3, #32]
 8007440:	498d      	ldr	r1, [pc, #564]	; (8007678 <HAL_ETH_Init+0x2a8>)
 8007442:	4313      	orrs	r3, r2
 8007444:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f042 0201 	orr.w	r2, r2, #1
 8007458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800745c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800745e:	f7ff fea5 	bl	80071ac <HAL_GetTick>
 8007462:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8007464:	e011      	b.n	800748a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8007466:	f7ff fea1 	bl	80071ac <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007474:	d909      	bls.n	800748a <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2203      	movs	r2, #3
 800747a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e129      	b.n	80076de <HAL_ETH_Init+0x30e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1e4      	bne.n	8007466 <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	f023 031c 	bic.w	r3, r3, #28
 80074aa:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80074ac:	f002 f960 	bl	8009770 <HAL_RCC_GetHCLKFreq>
 80074b0:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	4a71      	ldr	r2, [pc, #452]	; (800767c <HAL_ETH_Init+0x2ac>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d908      	bls.n	80074cc <HAL_ETH_Init+0xfc>
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	4a70      	ldr	r2, [pc, #448]	; (8007680 <HAL_ETH_Init+0x2b0>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d804      	bhi.n	80074cc <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	f043 0308 	orr.w	r3, r3, #8
 80074c8:	61fb      	str	r3, [r7, #28]
 80074ca:	e01a      	b.n	8007502 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	4a6c      	ldr	r2, [pc, #432]	; (8007680 <HAL_ETH_Init+0x2b0>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d908      	bls.n	80074e6 <HAL_ETH_Init+0x116>
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	4a66      	ldr	r2, [pc, #408]	; (8007670 <HAL_ETH_Init+0x2a0>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d204      	bcs.n	80074e6 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	f043 030c 	orr.w	r3, r3, #12
 80074e2:	61fb      	str	r3, [r7, #28]
 80074e4:	e00d      	b.n	8007502 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	4a61      	ldr	r2, [pc, #388]	; (8007670 <HAL_ETH_Init+0x2a0>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d303      	bcc.n	80074f6 <HAL_ETH_Init+0x126>
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	4a64      	ldr	r2, [pc, #400]	; (8007684 <HAL_ETH_Init+0x2b4>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d904      	bls.n	8007500 <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	f043 0304 	orr.w	r3, r3, #4
 80074fc:	61fb      	str	r3, [r7, #28]
 80074fe:	e000      	b.n	8007502 <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8007500:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	69fa      	ldr	r2, [r7, #28]
 8007508:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800750a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800750e:	2100      	movs	r1, #0
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 fb92 	bl	8007c3a <HAL_ETH_WritePHYRegister>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00b      	beq.n	8007534 <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8007520:	6939      	ldr	r1, [r7, #16]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fd48 	bl	8007fb8 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	e0d4      	b.n	80076de <HAL_ETH_Init+0x30e>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8007534:	20ff      	movs	r0, #255	; 0xff
 8007536:	f7ff fe43 	bl	80071c0 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	f000 80a2 	beq.w	8007688 <HAL_ETH_Init+0x2b8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007544:	f7ff fe32 	bl	80071ac <HAL_GetTick>
 8007548:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800754a:	f107 030c 	add.w	r3, r7, #12
 800754e:	461a      	mov	r2, r3
 8007550:	2101      	movs	r1, #1
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fb09 	bl	8007b6a <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8007558:	f7ff fe28 	bl	80071ac <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	f241 3288 	movw	r2, #5000	; 0x1388
 8007566:	4293      	cmp	r3, r2
 8007568:	d90f      	bls.n	800758a <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800756e:	6939      	ldr	r1, [r7, #16]
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 fd21 	bl	8007fb8 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e0a9      	b.n	80076de <HAL_ETH_Init+0x30e>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f003 0304 	and.w	r3, r3, #4
 8007590:	2b00      	cmp	r3, #0
 8007592:	d0da      	beq.n	800754a <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8007594:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007598:	2100      	movs	r1, #0
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fb4d 	bl	8007c3a <HAL_ETH_WritePHYRegister>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00b      	beq.n	80075be <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80075aa:	6939      	ldr	r1, [r7, #16]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fd03 	bl	8007fb8 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e08f      	b.n	80076de <HAL_ETH_Init+0x30e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 80075be:	f7ff fdf5 	bl	80071ac <HAL_GetTick>
 80075c2:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80075c4:	f107 030c 	add.w	r3, r7, #12
 80075c8:	461a      	mov	r2, r3
 80075ca:	2101      	movs	r1, #1
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 facc 	bl	8007b6a <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80075d2:	f7ff fdeb 	bl	80071ac <HAL_GetTick>
 80075d6:	4602      	mov	r2, r0
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d90f      	bls.n	8007604 <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80075e8:	6939      	ldr	r1, [r7, #16]
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fce4 	bl	8007fb8 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	e06c      	b.n	80076de <HAL_ETH_Init+0x30e>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f003 0320 	and.w	r3, r3, #32
 800760a:	2b00      	cmp	r3, #0
 800760c:	d0da      	beq.n	80075c4 <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800760e:	f107 030c 	add.w	r3, r7, #12
 8007612:	461a      	mov	r2, r3
 8007614:	2110      	movs	r1, #16
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 faa7 	bl	8007b6a <HAL_ETH_ReadPHYRegister>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00b      	beq.n	800763a <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8007626:	6939      	ldr	r1, [r7, #16]
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fcc5 	bl	8007fb8 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e051      	b.n	80076de <HAL_ETH_Init+0x30e>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f003 0304 	and.w	r3, r3, #4
 8007640:	2b00      	cmp	r3, #0
 8007642:	d004      	beq.n	800764e <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800764a:	60da      	str	r2, [r3, #12]
 800764c:	e002      	b.n	8007654 <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f003 0302 	and.w	r3, r3, #2
 800765a:	2b00      	cmp	r3, #0
 800765c:	d003      	beq.n	8007666 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	609a      	str	r2, [r3, #8]
 8007664:	e032      	b.n	80076cc <HAL_ETH_Init+0x2fc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800766c:	609a      	str	r2, [r3, #8]
 800766e:	e02d      	b.n	80076cc <HAL_ETH_Init+0x2fc>
 8007670:	03938700 	.word	0x03938700
 8007674:	40023800 	.word	0x40023800
 8007678:	40013800 	.word	0x40013800
 800767c:	01312cff 	.word	0x01312cff
 8007680:	02160ebf 	.word	0x02160ebf
 8007684:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	08db      	lsrs	r3, r3, #3
 800768e:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	085b      	lsrs	r3, r3, #1
 8007696:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8007698:	4313      	orrs	r3, r2
 800769a:	b29b      	uxth	r3, r3
 800769c:	461a      	mov	r2, r3
 800769e:	2100      	movs	r1, #0
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 faca 	bl	8007c3a <HAL_ETH_WritePHYRegister>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00b      	beq.n	80076c4 <HAL_ETH_Init+0x2f4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80076b0:	6939      	ldr	r1, [r7, #16]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fc80 	bl	8007fb8 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e00c      	b.n	80076de <HAL_ETH_Init+0x30e>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80076c4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80076c8:	f7ff fd7a 	bl	80071c0 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80076cc:	6939      	ldr	r1, [r7, #16]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fc72 	bl	8007fb8 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3720      	adds	r7, #32
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop

080076e8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b087      	sub	sp, #28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
 80076f4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80076f6:	2300      	movs	r3, #0
 80076f8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007700:	2b01      	cmp	r3, #1
 8007702:	d101      	bne.n	8007708 <HAL_ETH_DMATxDescListInit+0x20>
 8007704:	2302      	movs	r3, #2
 8007706:	e052      	b.n	80077ae <HAL_ETH_DMATxDescListInit+0xc6>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 800771e:	2300      	movs	r3, #0
 8007720:	617b      	str	r3, [r7, #20]
 8007722:	e030      	b.n	8007786 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	015b      	lsls	r3, r3, #5
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	4413      	add	r3, r2
 800772c:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007734:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800773c:	fb02 f303 	mul.w	r3, r2, r3
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	4413      	add	r3, r2
 8007744:	461a      	mov	r2, r3
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d105      	bne.n	800775e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	3b01      	subs	r3, #1
 8007762:	697a      	ldr	r2, [r7, #20]
 8007764:	429a      	cmp	r2, r3
 8007766:	d208      	bcs.n	800777a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	3301      	adds	r3, #1
 800776c:	015b      	lsls	r3, r3, #5
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	4413      	add	r3, r2
 8007772:	461a      	mov	r2, r3
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	60da      	str	r2, [r3, #12]
 8007778:	e002      	b.n	8007780 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	3301      	adds	r3, #1
 8007784:	617b      	str	r3, [r7, #20]
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	429a      	cmp	r2, r3
 800778c:	d3ca      	bcc.n	8007724 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007798:	3310      	adds	r3, #16
 800779a:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	371c      	adds	r7, #28
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bc80      	pop	{r7}
 80077b6:	4770      	bx	lr

080077b8 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b087      	sub	sp, #28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
 80077c4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d101      	bne.n	80077d8 <HAL_ETH_DMARxDescListInit+0x20>
 80077d4:	2302      	movs	r3, #2
 80077d6:	e056      	b.n	8007886 <HAL_ETH_DMARxDescListInit+0xce>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2202      	movs	r2, #2
 80077e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 80077ee:	2300      	movs	r3, #0
 80077f0:	617b      	str	r3, [r7, #20]
 80077f2:	e034      	b.n	800785e <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	015b      	lsls	r3, r3, #5
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	4413      	add	r3, r2
 80077fc:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007804:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800780c:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007814:	fb02 f303 	mul.w	r3, r2, r3
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	4413      	add	r3, r2
 800781c:	461a      	mov	r2, r3
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d105      	bne.n	8007836 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	3b01      	subs	r3, #1
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	429a      	cmp	r2, r3
 800783e:	d208      	bcs.n	8007852 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	3301      	adds	r3, #1
 8007844:	015b      	lsls	r3, r3, #5
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	4413      	add	r3, r2
 800784a:	461a      	mov	r2, r3
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	60da      	str	r2, [r3, #12]
 8007850:	e002      	b.n	8007858 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	3301      	adds	r3, #1
 800785c:	617b      	str	r3, [r7, #20]
 800785e:	697a      	ldr	r2, [r7, #20]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	429a      	cmp	r2, r3
 8007864:	d3c6      	bcc.n	80077f4 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007870:	330c      	adds	r3, #12
 8007872:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	371c      	adds	r7, #28
 800788a:	46bd      	mov	sp, r7
 800788c:	bc80      	pop	{r7}
 800788e:	4770      	bx	lr

08007890 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8007890:	b480      	push	{r7}
 8007892:	b087      	sub	sp, #28
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800789a:	2300      	movs	r3, #0
 800789c:	617b      	str	r3, [r7, #20]
 800789e:	2300      	movs	r3, #0
 80078a0:	60fb      	str	r3, [r7, #12]
 80078a2:	2300      	movs	r3, #0
 80078a4:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d101      	bne.n	80078b4 <HAL_ETH_TransmitFrame+0x24>
 80078b0:	2302      	movs	r3, #2
 80078b2:	e0cd      	b.n	8007a50 <HAL_ETH_TransmitFrame+0x1c0>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d109      	bne.n	80078de <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e0b8      	b.n	8007a50 <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	da09      	bge.n	80078fc <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2212      	movs	r2, #18
 80078ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e0a9      	b.n	8007a50 <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007902:	4293      	cmp	r3, r2
 8007904:	d915      	bls.n	8007932 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	4a54      	ldr	r2, [pc, #336]	; (8007a5c <HAL_ETH_TransmitFrame+0x1cc>)
 800790a:	fba2 2303 	umull	r2, r3, r2, r3
 800790e:	0a9b      	lsrs	r3, r3, #10
 8007910:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 8007912:	683a      	ldr	r2, [r7, #0]
 8007914:	4b51      	ldr	r3, [pc, #324]	; (8007a5c <HAL_ETH_TransmitFrame+0x1cc>)
 8007916:	fba3 1302 	umull	r1, r3, r3, r2
 800791a:	0a9b      	lsrs	r3, r3, #10
 800791c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8007920:	fb01 f303 	mul.w	r3, r1, r3
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d005      	beq.n	8007936 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	3301      	adds	r3, #1
 800792e:	617b      	str	r3, [r7, #20]
 8007930:	e001      	b.n	8007936 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 8007932:	2301      	movs	r3, #1
 8007934:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d11c      	bne.n	8007976 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007946:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800794a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007950:	683a      	ldr	r2, [r7, #0]
 8007952:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8007956:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007962:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007966:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	461a      	mov	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	62da      	str	r2, [r3, #44]	; 0x2c
 8007974:	e04b      	b.n	8007a0e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 8007976:	2300      	movs	r3, #0
 8007978:	613b      	str	r3, [r7, #16]
 800797a:	e044      	b.n	8007a06 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007986:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800798a:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d107      	bne.n	80079a2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80079a0:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80079aa:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	3b01      	subs	r3, #1
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d116      	bne.n	80079e4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80079c4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	4a25      	ldr	r2, [pc, #148]	; (8007a60 <HAL_ETH_TransmitFrame+0x1d0>)
 80079ca:	fb02 f203 	mul.w	r2, r2, r3
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	4413      	add	r3, r2
 80079d2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80079d6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80079e2:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80079f2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	461a      	mov	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	3301      	adds	r3, #1
 8007a04:	613b      	str	r3, [r7, #16]
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d3b6      	bcc.n	800797c <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a16:	3314      	adds	r3, #20
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0304 	and.w	r3, r3, #4
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00d      	beq.n	8007a3e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a2a:	3314      	adds	r3, #20
 8007a2c:	2204      	movs	r2, #4
 8007a2e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a38:	3304      	adds	r3, #4
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	601a      	str	r2, [r3, #0]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	371c      	adds	r7, #28
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bc80      	pop	{r7}
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	ac02b00b 	.word	0xac02b00b
 8007a60:	fffffa0c 	.word	0xfffffa0c

08007a64 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d101      	bne.n	8007a7e <HAL_ETH_GetReceivedFrame+0x1a>
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	e070      	b.n	8007b60 <HAL_ETH_GetReceivedFrame+0xfc>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2202      	movs	r2, #2
 8007a8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	db5a      	blt.n	8007b4e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d030      	beq.n	8007b08 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aaa:	1c5a      	adds	r2, r3, #1
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	639a      	str	r2, [r3, #56]	; 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d103      	bne.n	8007ac0 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	631a      	str	r2, [r3, #48]	; 0x30
      }

      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	0c1b      	lsrs	r3, r3, #16
 8007ad0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007ad4:	3b04      	subs	r3, #4
 8007ad6:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae2:	689a      	ldr	r2, [r3, #8]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	461a      	mov	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Return function status */
      return HAL_OK;
 8007b04:	2300      	movs	r3, #0
 8007b06:	e02b      	b.n	8007b60 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d010      	beq.n	8007b38 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	461a      	mov	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	629a      	str	r2, [r3, #40]	; 0x28
 8007b36:	e00a      	b.n	8007b4e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3c:	1c5a      	adds	r2, r3, #1
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	461a      	mov	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bc80      	pop	{r7}
 8007b68:	4770      	bx	lr

08007b6a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b086      	sub	sp, #24
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	60f8      	str	r0, [r7, #12]
 8007b72:	460b      	mov	r3, r1
 8007b74:	607a      	str	r2, [r7, #4]
 8007b76:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b82      	cmp	r3, #130	; 0x82
 8007b8a:	d101      	bne.n	8007b90 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	e050      	b.n	8007c32 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2282      	movs	r2, #130	; 0x82
 8007b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	f003 031c 	and.w	r3, r3, #28
 8007ba6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	8a1b      	ldrh	r3, [r3, #16]
 8007bac:	02db      	lsls	r3, r3, #11
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	697a      	ldr	r2, [r7, #20]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8007bb6:	897b      	ldrh	r3, [r7, #10]
 8007bb8:	019b      	lsls	r3, r3, #6
 8007bba:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	f023 0302 	bic.w	r3, r3, #2
 8007bca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	f043 0301 	orr.w	r3, r3, #1
 8007bd2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007bdc:	f7ff fae6 	bl	80071ac <HAL_GetTick>
 8007be0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007be2:	e015      	b.n	8007c10 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8007be4:	f7ff fae2 	bl	80071ac <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bf2:	d309      	bcc.n	8007c08 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e014      	b.n	8007c32 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1e4      	bne.n	8007be4 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	461a      	mov	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3718      	adds	r7, #24
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b086      	sub	sp, #24
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	60f8      	str	r0, [r7, #12]
 8007c42:	460b      	mov	r3, r1
 8007c44:	607a      	str	r2, [r7, #4]
 8007c46:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	2b42      	cmp	r3, #66	; 0x42
 8007c5a:	d101      	bne.n	8007c60 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	e04e      	b.n	8007cfe <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2242      	movs	r2, #66	; 0x42
 8007c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	f003 031c 	and.w	r3, r3, #28
 8007c76:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	8a1b      	ldrh	r3, [r3, #16]
 8007c7c:	02db      	lsls	r3, r3, #11
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	697a      	ldr	r2, [r7, #20]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8007c86:	897b      	ldrh	r3, [r7, #10]
 8007c88:	019b      	lsls	r3, r3, #6
 8007c8a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	f043 0302 	orr.w	r3, r3, #2
 8007c9a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	f043 0301 	orr.w	r3, r3, #1
 8007ca2:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007cb6:	f7ff fa79 	bl	80071ac <HAL_GetTick>
 8007cba:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007cbc:	e015      	b.n	8007cea <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8007cbe:	f7ff fa75 	bl	80071ac <HAL_GetTick>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ccc:	d309      	bcc.n	8007ce2 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e00d      	b.n	8007cfe <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	f003 0301 	and.w	r3, r3, #1
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1e4      	bne.n	8007cbe <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3718      	adds	r7, #24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b082      	sub	sp, #8
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d101      	bne.n	8007d1c <HAL_ETH_Start+0x16>
 8007d18:	2302      	movs	r3, #2
 8007d1a:	e01f      	b.n	8007d5c <HAL_ETH_Start+0x56>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2202      	movs	r2, #2
 8007d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fb43 	bl	80083b8 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fb7a 	bl	800842c <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fc0d 	bl	8008558 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fbae 	bl	80084a0 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fbd9 	bl	80084fc <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d101      	bne.n	8007d7a <HAL_ETH_Stop+0x16>
 8007d76:	2302      	movs	r3, #2
 8007d78:	e01f      	b.n	8007dba <HAL_ETH_Stop+0x56>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2202      	movs	r2, #2
 8007d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fb9f 	bl	80084ce <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fbca 	bl	800852a <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fb65 	bl	8008466 <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fbdb 	bl	8008558 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fb25 	bl	80083f2 <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
	...

08007dc4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d101      	bne.n	8007de0 <HAL_ETH_ConfigMAC+0x1c>
 8007ddc:	2302      	movs	r3, #2
 8007dde:	e0e4      	b.n	8007faa <HAL_ETH_ConfigMAC+0x1e6>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2202      	movs	r2, #2
 8007dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 80b1 	beq.w	8007f5a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	4b6c      	ldr	r3, [pc, #432]	; (8007fb4 <HAL_ETH_ConfigMAC+0x1f0>)
 8007e04:	4013      	ands	r3, r2
 8007e06:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8007e10:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8007e16:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8007e1c:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8007e22:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 8007e28:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 8007e2e:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8007e34:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 8007e3a:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8007e40:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8007e46:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          macconf->AutomaticPadCRCStrip |
 8007e4c:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          macconf->BackOffLimit |
 8007e52:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007e6a:	2001      	movs	r0, #1
 8007e6c:	f7ff f9a8 	bl	80071c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8007e80:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8007e86:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8007e8c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception |
 8007e92:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8007e98:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8007e9e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8007eaa:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8007eac:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007eb6:	2001      	movs	r0, #1
 8007eb8:	f7ff f982 	bl	80071c0 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	683a      	ldr	r2, [r7, #0]
 8007eca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007ecc:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007ed6:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eee:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007ef4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8007efa:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8007f00:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect |
 8007f06:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8007f0c:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007f24:	2001      	movs	r0, #1
 8007f26:	f7ff f94b 	bl	80071c0 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                             macconf->VLANTagIdentifier);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	69db      	ldr	r3, [r3, #28]
 8007f48:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007f4a:	2001      	movs	r0, #1
 8007f4c:	f7ff f938 	bl	80071c0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	61da      	str	r2, [r3, #28]
 8007f58:	e01e      	b.n	8007f98 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007f68:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	689a      	ldr	r2, [r3, #8]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007f8a:	2001      	movs	r0, #1
 8007f8c:	f7ff f918 	bl	80071c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	ff20810f 	.word	0xff20810f

08007fb8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b0b0      	sub	sp, #192	; 0xc0
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d007      	beq.n	8007fde <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fd4:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007fdc:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8007fea:	2300      	movs	r3, #0
 8007fec:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	69db      	ldr	r3, [r3, #28]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d103      	bne.n	8008006 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8007ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008002:	663b      	str	r3, [r7, #96]	; 0x60
 8008004:	e001      	b.n	800800a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8008006:	2300      	movs	r3, #0
 8008008:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800800a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800800e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8008010:	2300      	movs	r3, #0
 8008012:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8008014:	2300      	movs	r3, #0
 8008016:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8008018:	2300      	movs	r3, #0
 800801a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800801c:	2300      	movs	r3, #0
 800801e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8008020:	2300      	movs	r3, #0
 8008022:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8008024:	2340      	movs	r3, #64	; 0x40
 8008026:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8008028:	2300      	movs	r3, #0
 800802a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800802e:	2300      	movs	r3, #0
 8008030:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8008034:	2300      	movs	r3, #0
 8008036:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800803a:	2300      	movs	r3, #0
 800803c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8008040:	2300      	movs	r3, #0
 8008042:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8008046:	2300      	movs	r3, #0
 8008048:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800804c:	2300      	movs	r3, #0
 800804e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8008052:	2300      	movs	r3, #0
 8008054:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8008058:	2380      	movs	r3, #128	; 0x80
 800805a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800805e:	2300      	movs	r3, #0
 8008060:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8008064:	2300      	movs	r3, #0
 8008066:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800806a:	2300      	movs	r3, #0
 800806c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8008070:	2300      	movs	r3, #0
 8008072:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8008076:	2300      	movs	r3, #0
 8008078:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800807c:	2300      	movs	r3, #0
 800807e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800808c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008090:	4bac      	ldr	r3, [pc, #688]	; (8008344 <ETH_MACDMAConfig+0x38c>)
 8008092:	4013      	ands	r3, r2
 8008094:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8008098:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 800809a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 800809c:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 800809e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 80080a0:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 80080a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 80080a4:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 80080aa:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 80080ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 80080ae:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 80080b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 80080b2:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 80080b8:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 80080ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 80080bc:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 80080be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 80080c0:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 80080c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 80080c4:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 80080c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 80080c8:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 80080ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 80080cc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 80080ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80080d2:	4313      	orrs	r3, r2
 80080d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80080e0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80080ec:	2001      	movs	r0, #1
 80080ee:	f7ff f867 	bl	80071c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80080fa:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80080fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80080fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8008100:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8008102:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8008104:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 8008106:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800810a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800810c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 8008110:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8008112:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8008116:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8008118:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800811c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8008120:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8008128:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 800812a:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008136:	2001      	movs	r0, #1
 8008138:	f7ff f842 	bl	80071c0 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008144:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800814e:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008158:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8008164:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008168:	f64f 7341 	movw	r3, #65345	; 0xff41
 800816c:	4013      	ands	r3, r2
 800816e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8008172:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008176:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8008178:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 800817c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800817e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8008182:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8008184:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8008188:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800818a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 800818e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8008190:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8008194:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8008196:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800819a:	4313      	orrs	r3, r2
 800819c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80081a8:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80081b4:	2001      	movs	r0, #1
 80081b6:	f7ff f803 	bl	80071c0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80081c2:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80081c4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 80081c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	430a      	orrs	r2, r1
 80081d2:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	69db      	ldr	r3, [r3, #28]
 80081da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80081de:	2001      	movs	r0, #1
 80081e0:	f7fe ffee 	bl	80071c0 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80081ec:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80081ee:	2300      	movs	r3, #0
 80081f0:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80081f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081f6:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80081f8:	2300      	movs	r3, #0
 80081fa:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 80081fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008200:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8008202:	2300      	movs	r3, #0
 8008204:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8008206:	2300      	movs	r3, #0
 8008208:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800820a:	2300      	movs	r3, #0
 800820c:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800820e:	2300      	movs	r3, #0
 8008210:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8008212:	2304      	movs	r3, #4
 8008214:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8008216:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800821a:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800821c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008220:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8008222:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008226:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800822c:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800822e:	2380      	movs	r3, #128	; 0x80
 8008230:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8008232:	2300      	movs	r3, #0
 8008234:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8008236:	2300      	movs	r3, #0
 8008238:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008242:	3318      	adds	r3, #24
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800824a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800824e:	4b3e      	ldr	r3, [pc, #248]	; (8008348 <ETH_MACDMAConfig+0x390>)
 8008250:	4013      	ands	r3, r2
 8008252:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8008256:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 8008258:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800825a:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 800825c:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 800825e:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8008260:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 8008262:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8008264:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 8008266:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 8008268:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 800826a:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 800826c:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 800826e:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 8008272:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8008274:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ReceiveThresholdControl |
 8008276:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8008278:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800827c:	4313      	orrs	r3, r2
 800827e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800828a:	3318      	adds	r3, #24
 800828c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008290:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800829a:	3318      	adds	r3, #24
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80082a2:	2001      	movs	r0, #1
 80082a4:	f7fe ff8c 	bl	80071c0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082b0:	3318      	adds	r3, #24
 80082b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80082b6:	601a      	str	r2, [r3, #0]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80082b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                        dmainit.FixedBurst |
 80082ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80082bc:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80082be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                        dmainit.FixedBurst |
 80082c0:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 80082c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80082c4:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 80082c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.TxDMABurstLength |
 80082c8:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 80082ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082cc:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 80082ce:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 80082d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 80082d2:	431a      	orrs	r2, r3
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80082dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082e0:	601a      	str	r2, [r3, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80082f0:	2001      	movs	r0, #1
 80082f2:	f7fe ff65 	bl	80071c0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008302:	601a      	str	r2, [r3, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d10f      	bne.n	800832c <ETH_MACDMAConfig+0x374>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008314:	331c      	adds	r3, #28
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008328:	331c      	adds	r3, #28
 800832a:	601a      	str	r2, [r3, #0]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	695b      	ldr	r3, [r3, #20]
 8008330:	461a      	mov	r2, r3
 8008332:	2100      	movs	r1, #0
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 f809 	bl	800834c <ETH_MACAddressConfig>
}
 800833a:	bf00      	nop
 800833c:	37c0      	adds	r7, #192	; 0xc0
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	ff20810f 	.word	0xff20810f
 8008348:	f8de3f23 	.word	0xf8de3f23

0800834c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800834c:	b480      	push	{r7}
 800834e:	b087      	sub	sp, #28
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	3305      	adds	r3, #5
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	021b      	lsls	r3, r3, #8
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	3204      	adds	r2, #4
 8008364:	7812      	ldrb	r2, [r2, #0]
 8008366:	4313      	orrs	r3, r2
 8008368:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	4b10      	ldr	r3, [pc, #64]	; (80083b0 <ETH_MACAddressConfig+0x64>)
 800836e:	4413      	add	r3, r2
 8008370:	461a      	mov	r2, r3
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	3303      	adds	r3, #3
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	061a      	lsls	r2, r3, #24
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	3302      	adds	r3, #2
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	041b      	lsls	r3, r3, #16
 8008386:	431a      	orrs	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	3301      	adds	r3, #1
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	021b      	lsls	r3, r3, #8
 8008390:	4313      	orrs	r3, r2
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	7812      	ldrb	r2, [r2, #0]
 8008396:	4313      	orrs	r3, r2
 8008398:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800839a:	68ba      	ldr	r2, [r7, #8]
 800839c:	4b05      	ldr	r3, [pc, #20]	; (80083b4 <ETH_MACAddressConfig+0x68>)
 800839e:	4413      	add	r3, r2
 80083a0:	461a      	mov	r2, r3
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	6013      	str	r3, [r2, #0]
}
 80083a6:	bf00      	nop
 80083a8:	371c      	adds	r7, #28
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bc80      	pop	{r7}
 80083ae:	4770      	bx	lr
 80083b0:	40028040 	.word	0x40028040
 80083b4:	40028044 	.word	0x40028044

080083b8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80083c0:	2300      	movs	r3, #0
 80083c2:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f042 0208 	orr.w	r2, r2, #8
 80083d2:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80083dc:	2001      	movs	r0, #1
 80083de:	f000 f8e5 	bl	80085ac <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	601a      	str	r2, [r3, #0]
}
 80083ea:	bf00      	nop
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b084      	sub	sp, #16
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80083fa:	2300      	movs	r3, #0
 80083fc:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f022 0208 	bic.w	r2, r2, #8
 800840c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8008416:	2001      	movs	r0, #1
 8008418:	f000 f8c8 	bl	80085ac <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	601a      	str	r2, [r3, #0]
}
 8008424:	bf00      	nop
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8008434:	2300      	movs	r3, #0
 8008436:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f042 0204 	orr.w	r2, r2, #4
 8008446:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8008450:	2001      	movs	r0, #1
 8008452:	f000 f8ab 	bl	80085ac <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	601a      	str	r2, [r3, #0]
}
 800845e:	bf00      	nop
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b084      	sub	sp, #16
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800846e:	2300      	movs	r3, #0
 8008470:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f022 0204 	bic.w	r2, r2, #4
 8008480:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800848a:	2001      	movs	r0, #1
 800848c:	f000 f88e 	bl	80085ac <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68fa      	ldr	r2, [r7, #12]
 8008496:	601a      	str	r2, [r3, #0]
}
 8008498:	bf00      	nop
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084b0:	3318      	adds	r3, #24
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084c0:	3318      	adds	r3, #24
 80084c2:	601a      	str	r2, [r3, #0]
}
 80084c4:	bf00      	nop
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bc80      	pop	{r7}
 80084cc:	4770      	bx	lr

080084ce <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b083      	sub	sp, #12
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084de:	3318      	adds	r3, #24
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084ee:	3318      	adds	r3, #24
 80084f0:	601a      	str	r2, [r3, #0]
}
 80084f2:	bf00      	nop
 80084f4:	370c      	adds	r7, #12
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bc80      	pop	{r7}
 80084fa:	4770      	bx	lr

080084fc <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800850c:	3318      	adds	r3, #24
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f042 0202 	orr.w	r2, r2, #2
 8008518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800851c:	3318      	adds	r3, #24
 800851e:	601a      	str	r2, [r3, #0]
}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	bc80      	pop	{r7}
 8008528:	4770      	bx	lr

0800852a <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 800852a:	b480      	push	{r7}
 800852c:	b083      	sub	sp, #12
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800853a:	3318      	adds	r3, #24
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f022 0202 	bic.w	r2, r2, #2
 8008546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800854a:	3318      	adds	r3, #24
 800854c:	601a      	str	r2, [r3, #0]
}
 800854e:	bf00      	nop
 8008550:	370c      	adds	r7, #12
 8008552:	46bd      	mov	sp, r7
 8008554:	bc80      	pop	{r7}
 8008556:	4770      	bx	lr

08008558 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8008560:	2300      	movs	r3, #0
 8008562:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800856c:	3318      	adds	r3, #24
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800857c:	3318      	adds	r3, #24
 800857e:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008588:	3318      	adds	r3, #24
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800858e:	2001      	movs	r0, #1
 8008590:	f000 f80c 	bl	80085ac <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800859e:	3318      	adds	r3, #24
 80085a0:	601a      	str	r2, [r3, #0]
}
 80085a2:	bf00      	nop
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
	...

080085ac <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80085b4:	4b0a      	ldr	r3, [pc, #40]	; (80085e0 <ETH_Delay+0x34>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a0a      	ldr	r2, [pc, #40]	; (80085e4 <ETH_Delay+0x38>)
 80085ba:	fba2 2303 	umull	r2, r3, r2, r3
 80085be:	0a5b      	lsrs	r3, r3, #9
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	fb02 f303 	mul.w	r3, r2, r3
 80085c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80085c8:	bf00      	nop
  }
  while (Delay --);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	1e5a      	subs	r2, r3, #1
 80085ce:	60fa      	str	r2, [r7, #12]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1f9      	bne.n	80085c8 <ETH_Delay+0x1c>
}
 80085d4:	bf00      	nop
 80085d6:	bf00      	nop
 80085d8:	3714      	adds	r7, #20
 80085da:	46bd      	mov	sp, r7
 80085dc:	bc80      	pop	{r7}
 80085de:	4770      	bx	lr
 80085e0:	20000050 	.word	0x20000050
 80085e4:	10624dd3 	.word	0x10624dd3

080085e8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b086      	sub	sp, #24
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80085fa:	4b23      	ldr	r3, [pc, #140]	; (8008688 <HAL_FLASH_Program+0xa0>)
 80085fc:	7e1b      	ldrb	r3, [r3, #24]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d101      	bne.n	8008606 <HAL_FLASH_Program+0x1e>
 8008602:	2302      	movs	r3, #2
 8008604:	e03b      	b.n	800867e <HAL_FLASH_Program+0x96>
 8008606:	4b20      	ldr	r3, [pc, #128]	; (8008688 <HAL_FLASH_Program+0xa0>)
 8008608:	2201      	movs	r2, #1
 800860a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800860c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008610:	f000 f860 	bl	80086d4 <FLASH_WaitForLastOperation>
 8008614:	4603      	mov	r3, r0
 8008616:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8008618:	7dfb      	ldrb	r3, [r7, #23]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d12b      	bne.n	8008676 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d105      	bne.n	8008630 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8008624:	783b      	ldrb	r3, [r7, #0]
 8008626:	4619      	mov	r1, r3
 8008628:	68b8      	ldr	r0, [r7, #8]
 800862a:	f000 f909 	bl	8008840 <FLASH_Program_Byte>
 800862e:	e016      	b.n	800865e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2b01      	cmp	r3, #1
 8008634:	d105      	bne.n	8008642 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8008636:	883b      	ldrh	r3, [r7, #0]
 8008638:	4619      	mov	r1, r3
 800863a:	68b8      	ldr	r0, [r7, #8]
 800863c:	f000 f8de 	bl	80087fc <FLASH_Program_HalfWord>
 8008640:	e00d      	b.n	800865e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2b02      	cmp	r3, #2
 8008646:	d105      	bne.n	8008654 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	4619      	mov	r1, r3
 800864c:	68b8      	ldr	r0, [r7, #8]
 800864e:	f000 f8b3 	bl	80087b8 <FLASH_Program_Word>
 8008652:	e004      	b.n	800865e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8008654:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008658:	68b8      	ldr	r0, [r7, #8]
 800865a:	f000 f87b 	bl	8008754 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800865e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008662:	f000 f837 	bl	80086d4 <FLASH_WaitForLastOperation>
 8008666:	4603      	mov	r3, r0
 8008668:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800866a:	4b08      	ldr	r3, [pc, #32]	; (800868c <HAL_FLASH_Program+0xa4>)
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	4a07      	ldr	r2, [pc, #28]	; (800868c <HAL_FLASH_Program+0xa4>)
 8008670:	f023 0301 	bic.w	r3, r3, #1
 8008674:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008676:	4b04      	ldr	r3, [pc, #16]	; (8008688 <HAL_FLASH_Program+0xa0>)
 8008678:	2200      	movs	r2, #0
 800867a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800867c:	7dfb      	ldrb	r3, [r7, #23]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3718      	adds	r7, #24
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	2000064c 	.word	0x2000064c
 800868c:	40023c00 	.word	0x40023c00

08008690 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008696:	2300      	movs	r3, #0
 8008698:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800869a:	4b0b      	ldr	r3, [pc, #44]	; (80086c8 <HAL_FLASH_Unlock+0x38>)
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	da0b      	bge.n	80086ba <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80086a2:	4b09      	ldr	r3, [pc, #36]	; (80086c8 <HAL_FLASH_Unlock+0x38>)
 80086a4:	4a09      	ldr	r2, [pc, #36]	; (80086cc <HAL_FLASH_Unlock+0x3c>)
 80086a6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80086a8:	4b07      	ldr	r3, [pc, #28]	; (80086c8 <HAL_FLASH_Unlock+0x38>)
 80086aa:	4a09      	ldr	r2, [pc, #36]	; (80086d0 <HAL_FLASH_Unlock+0x40>)
 80086ac:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80086ae:	4b06      	ldr	r3, [pc, #24]	; (80086c8 <HAL_FLASH_Unlock+0x38>)
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	da01      	bge.n	80086ba <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80086ba:	79fb      	ldrb	r3, [r7, #7]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bc80      	pop	{r7}
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	40023c00 	.word	0x40023c00
 80086cc:	45670123 	.word	0x45670123
 80086d0:	cdef89ab 	.word	0xcdef89ab

080086d4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80086dc:	2300      	movs	r3, #0
 80086de:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80086e0:	4b1a      	ldr	r3, [pc, #104]	; (800874c <FLASH_WaitForLastOperation+0x78>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80086e6:	f7fe fd61 	bl	80071ac <HAL_GetTick>
 80086ea:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80086ec:	e010      	b.n	8008710 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f4:	d00c      	beq.n	8008710 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d007      	beq.n	800870c <FLASH_WaitForLastOperation+0x38>
 80086fc:	f7fe fd56 	bl	80071ac <HAL_GetTick>
 8008700:	4602      	mov	r2, r0
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	429a      	cmp	r2, r3
 800870a:	d201      	bcs.n	8008710 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800870c:	2303      	movs	r3, #3
 800870e:	e019      	b.n	8008744 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8008710:	4b0f      	ldr	r3, [pc, #60]	; (8008750 <FLASH_WaitForLastOperation+0x7c>)
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1e8      	bne.n	80086ee <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800871c:	4b0c      	ldr	r3, [pc, #48]	; (8008750 <FLASH_WaitForLastOperation+0x7c>)
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	f003 0301 	and.w	r3, r3, #1
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008728:	4b09      	ldr	r3, [pc, #36]	; (8008750 <FLASH_WaitForLastOperation+0x7c>)
 800872a:	2201      	movs	r2, #1
 800872c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800872e:	4b08      	ldr	r3, [pc, #32]	; (8008750 <FLASH_WaitForLastOperation+0x7c>)
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8008736:	2b00      	cmp	r3, #0
 8008738:	d003      	beq.n	8008742 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800873a:	f000 f8a1 	bl	8008880 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	e000      	b.n	8008744 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8008742:	2300      	movs	r3, #0
  
}  
 8008744:	4618      	mov	r0, r3
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	2000064c 	.word	0x2000064c
 8008750:	40023c00 	.word	0x40023c00

08008754 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008760:	4b14      	ldr	r3, [pc, #80]	; (80087b4 <FLASH_Program_DoubleWord+0x60>)
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	4a13      	ldr	r2, [pc, #76]	; (80087b4 <FLASH_Program_DoubleWord+0x60>)
 8008766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800876a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800876c:	4b11      	ldr	r3, [pc, #68]	; (80087b4 <FLASH_Program_DoubleWord+0x60>)
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	4a10      	ldr	r2, [pc, #64]	; (80087b4 <FLASH_Program_DoubleWord+0x60>)
 8008772:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008776:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008778:	4b0e      	ldr	r3, [pc, #56]	; (80087b4 <FLASH_Program_DoubleWord+0x60>)
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	4a0d      	ldr	r2, [pc, #52]	; (80087b4 <FLASH_Program_DoubleWord+0x60>)
 800877e:	f043 0301 	orr.w	r3, r3, #1
 8008782:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	683a      	ldr	r2, [r7, #0]
 8008788:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800878a:	f3bf 8f6f 	isb	sy
}
 800878e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8008790:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008794:	f04f 0200 	mov.w	r2, #0
 8008798:	f04f 0300 	mov.w	r3, #0
 800879c:	000a      	movs	r2, r1
 800879e:	2300      	movs	r3, #0
 80087a0:	68f9      	ldr	r1, [r7, #12]
 80087a2:	3104      	adds	r1, #4
 80087a4:	4613      	mov	r3, r2
 80087a6:	600b      	str	r3, [r1, #0]
}
 80087a8:	bf00      	nop
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bc80      	pop	{r7}
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	40023c00 	.word	0x40023c00

080087b8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80087c2:	4b0d      	ldr	r3, [pc, #52]	; (80087f8 <FLASH_Program_Word+0x40>)
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	4a0c      	ldr	r2, [pc, #48]	; (80087f8 <FLASH_Program_Word+0x40>)
 80087c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80087ce:	4b0a      	ldr	r3, [pc, #40]	; (80087f8 <FLASH_Program_Word+0x40>)
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	4a09      	ldr	r2, [pc, #36]	; (80087f8 <FLASH_Program_Word+0x40>)
 80087d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80087d8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80087da:	4b07      	ldr	r3, [pc, #28]	; (80087f8 <FLASH_Program_Word+0x40>)
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	4a06      	ldr	r2, [pc, #24]	; (80087f8 <FLASH_Program_Word+0x40>)
 80087e0:	f043 0301 	orr.w	r3, r3, #1
 80087e4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	683a      	ldr	r2, [r7, #0]
 80087ea:	601a      	str	r2, [r3, #0]
}
 80087ec:	bf00      	nop
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bc80      	pop	{r7}
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	40023c00 	.word	0x40023c00

080087fc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	460b      	mov	r3, r1
 8008806:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008808:	4b0c      	ldr	r3, [pc, #48]	; (800883c <FLASH_Program_HalfWord+0x40>)
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	4a0b      	ldr	r2, [pc, #44]	; (800883c <FLASH_Program_HalfWord+0x40>)
 800880e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008812:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8008814:	4b09      	ldr	r3, [pc, #36]	; (800883c <FLASH_Program_HalfWord+0x40>)
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	4a08      	ldr	r2, [pc, #32]	; (800883c <FLASH_Program_HalfWord+0x40>)
 800881a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800881e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008820:	4b06      	ldr	r3, [pc, #24]	; (800883c <FLASH_Program_HalfWord+0x40>)
 8008822:	691b      	ldr	r3, [r3, #16]
 8008824:	4a05      	ldr	r2, [pc, #20]	; (800883c <FLASH_Program_HalfWord+0x40>)
 8008826:	f043 0301 	orr.w	r3, r3, #1
 800882a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	887a      	ldrh	r2, [r7, #2]
 8008830:	801a      	strh	r2, [r3, #0]
}
 8008832:	bf00      	nop
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	bc80      	pop	{r7}
 800883a:	4770      	bx	lr
 800883c:	40023c00 	.word	0x40023c00

08008840 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	460b      	mov	r3, r1
 800884a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800884c:	4b0b      	ldr	r3, [pc, #44]	; (800887c <FLASH_Program_Byte+0x3c>)
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	4a0a      	ldr	r2, [pc, #40]	; (800887c <FLASH_Program_Byte+0x3c>)
 8008852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008856:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8008858:	4b08      	ldr	r3, [pc, #32]	; (800887c <FLASH_Program_Byte+0x3c>)
 800885a:	4a08      	ldr	r2, [pc, #32]	; (800887c <FLASH_Program_Byte+0x3c>)
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008860:	4b06      	ldr	r3, [pc, #24]	; (800887c <FLASH_Program_Byte+0x3c>)
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	4a05      	ldr	r2, [pc, #20]	; (800887c <FLASH_Program_Byte+0x3c>)
 8008866:	f043 0301 	orr.w	r3, r3, #1
 800886a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	78fa      	ldrb	r2, [r7, #3]
 8008870:	701a      	strb	r2, [r3, #0]
}
 8008872:	bf00      	nop
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	bc80      	pop	{r7}
 800887a:	4770      	bx	lr
 800887c:	40023c00 	.word	0x40023c00

08008880 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8008880:	b480      	push	{r7}
 8008882:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8008884:	4b27      	ldr	r3, [pc, #156]	; (8008924 <FLASH_SetErrorCode+0xa4>)
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	f003 0310 	and.w	r3, r3, #16
 800888c:	2b00      	cmp	r3, #0
 800888e:	d008      	beq.n	80088a2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8008890:	4b25      	ldr	r3, [pc, #148]	; (8008928 <FLASH_SetErrorCode+0xa8>)
 8008892:	69db      	ldr	r3, [r3, #28]
 8008894:	f043 0308 	orr.w	r3, r3, #8
 8008898:	4a23      	ldr	r2, [pc, #140]	; (8008928 <FLASH_SetErrorCode+0xa8>)
 800889a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800889c:	4b21      	ldr	r3, [pc, #132]	; (8008924 <FLASH_SetErrorCode+0xa4>)
 800889e:	2210      	movs	r2, #16
 80088a0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80088a2:	4b20      	ldr	r3, [pc, #128]	; (8008924 <FLASH_SetErrorCode+0xa4>)
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	f003 0320 	and.w	r3, r3, #32
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d008      	beq.n	80088c0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80088ae:	4b1e      	ldr	r3, [pc, #120]	; (8008928 <FLASH_SetErrorCode+0xa8>)
 80088b0:	69db      	ldr	r3, [r3, #28]
 80088b2:	f043 0304 	orr.w	r3, r3, #4
 80088b6:	4a1c      	ldr	r2, [pc, #112]	; (8008928 <FLASH_SetErrorCode+0xa8>)
 80088b8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80088ba:	4b1a      	ldr	r3, [pc, #104]	; (8008924 <FLASH_SetErrorCode+0xa4>)
 80088bc:	2220      	movs	r2, #32
 80088be:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80088c0:	4b18      	ldr	r3, [pc, #96]	; (8008924 <FLASH_SetErrorCode+0xa4>)
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d008      	beq.n	80088de <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80088cc:	4b16      	ldr	r3, [pc, #88]	; (8008928 <FLASH_SetErrorCode+0xa8>)
 80088ce:	69db      	ldr	r3, [r3, #28]
 80088d0:	f043 0302 	orr.w	r3, r3, #2
 80088d4:	4a14      	ldr	r2, [pc, #80]	; (8008928 <FLASH_SetErrorCode+0xa8>)
 80088d6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80088d8:	4b12      	ldr	r3, [pc, #72]	; (8008924 <FLASH_SetErrorCode+0xa4>)
 80088da:	2240      	movs	r2, #64	; 0x40
 80088dc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80088de:	4b11      	ldr	r3, [pc, #68]	; (8008924 <FLASH_SetErrorCode+0xa4>)
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d008      	beq.n	80088fc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80088ea:	4b0f      	ldr	r3, [pc, #60]	; (8008928 <FLASH_SetErrorCode+0xa8>)
 80088ec:	69db      	ldr	r3, [r3, #28]
 80088ee:	f043 0301 	orr.w	r3, r3, #1
 80088f2:	4a0d      	ldr	r2, [pc, #52]	; (8008928 <FLASH_SetErrorCode+0xa8>)
 80088f4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80088f6:	4b0b      	ldr	r3, [pc, #44]	; (8008924 <FLASH_SetErrorCode+0xa4>)
 80088f8:	2280      	movs	r2, #128	; 0x80
 80088fa:	60da      	str	r2, [r3, #12]
  }
    
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80088fc:	4b09      	ldr	r3, [pc, #36]	; (8008924 <FLASH_SetErrorCode+0xa4>)
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	f003 0302 	and.w	r3, r3, #2
 8008904:	2b00      	cmp	r3, #0
 8008906:	d008      	beq.n	800891a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8008908:	4b07      	ldr	r3, [pc, #28]	; (8008928 <FLASH_SetErrorCode+0xa8>)
 800890a:	69db      	ldr	r3, [r3, #28]
 800890c:	f043 0310 	orr.w	r3, r3, #16
 8008910:	4a05      	ldr	r2, [pc, #20]	; (8008928 <FLASH_SetErrorCode+0xa8>)
 8008912:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8008914:	4b03      	ldr	r3, [pc, #12]	; (8008924 <FLASH_SetErrorCode+0xa4>)
 8008916:	2202      	movs	r2, #2
 8008918:	60da      	str	r2, [r3, #12]
  }
}
 800891a:	bf00      	nop
 800891c:	46bd      	mov	sp, r7
 800891e:	bc80      	pop	{r7}
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	40023c00 	.word	0x40023c00
 8008928:	2000064c 	.word	0x2000064c

0800892c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800893a:	2300      	movs	r3, #0
 800893c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800893e:	4b31      	ldr	r3, [pc, #196]	; (8008a04 <HAL_FLASHEx_Erase+0xd8>)
 8008940:	7e1b      	ldrb	r3, [r3, #24]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d101      	bne.n	800894a <HAL_FLASHEx_Erase+0x1e>
 8008946:	2302      	movs	r3, #2
 8008948:	e058      	b.n	80089fc <HAL_FLASHEx_Erase+0xd0>
 800894a:	4b2e      	ldr	r3, [pc, #184]	; (8008a04 <HAL_FLASHEx_Erase+0xd8>)
 800894c:	2201      	movs	r2, #1
 800894e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008950:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008954:	f7ff febe 	bl	80086d4 <FLASH_WaitForLastOperation>
 8008958:	4603      	mov	r3, r0
 800895a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800895c:	7bfb      	ldrb	r3, [r7, #15]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d148      	bne.n	80089f4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	f04f 32ff 	mov.w	r2, #4294967295
 8008968:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d115      	bne.n	800899e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	b2da      	uxtb	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	4619      	mov	r1, r3
 800897e:	4610      	mov	r0, r2
 8008980:	f000 f8da 	bl	8008b38 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008984:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008988:	f7ff fea4 	bl	80086d4 <FLASH_WaitForLastOperation>
 800898c:	4603      	mov	r3, r0
 800898e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8008990:	4b1d      	ldr	r3, [pc, #116]	; (8008a08 <HAL_FLASHEx_Erase+0xdc>)
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	4a1c      	ldr	r2, [pc, #112]	; (8008a08 <HAL_FLASHEx_Erase+0xdc>)
 8008996:	f023 0304 	bic.w	r3, r3, #4
 800899a:	6113      	str	r3, [r2, #16]
 800899c:	e028      	b.n	80089f0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	60bb      	str	r3, [r7, #8]
 80089a4:	e01c      	b.n	80089e0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	4619      	mov	r1, r3
 80089ae:	68b8      	ldr	r0, [r7, #8]
 80089b0:	f000 f82c 	bl	8008a0c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80089b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80089b8:	f7ff fe8c 	bl	80086d4 <FLASH_WaitForLastOperation>
 80089bc:	4603      	mov	r3, r0
 80089be:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80089c0:	4b11      	ldr	r3, [pc, #68]	; (8008a08 <HAL_FLASHEx_Erase+0xdc>)
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	4a10      	ldr	r2, [pc, #64]	; (8008a08 <HAL_FLASHEx_Erase+0xdc>)
 80089c6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80089ca:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80089cc:	7bfb      	ldrb	r3, [r7, #15]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d003      	beq.n	80089da <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	601a      	str	r2, [r3, #0]
          break;
 80089d8:	e00a      	b.n	80089f0 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	3301      	adds	r3, #1
 80089de:	60bb      	str	r3, [r7, #8]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	68da      	ldr	r2, [r3, #12]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	4413      	add	r3, r2
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d3da      	bcc.n	80089a6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80089f0:	f000 f85e 	bl	8008ab0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80089f4:	4b03      	ldr	r3, [pc, #12]	; (8008a04 <HAL_FLASHEx_Erase+0xd8>)
 80089f6:	2200      	movs	r2, #0
 80089f8:	761a      	strb	r2, [r3, #24]

  return status;
 80089fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	2000064c 	.word	0x2000064c
 8008a08:	40023c00 	.word	0x40023c00

08008a0c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b087      	sub	sp, #28
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	460b      	mov	r3, r1
 8008a16:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8008a1c:	78fb      	ldrb	r3, [r7, #3]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d102      	bne.n	8008a28 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8008a22:	2300      	movs	r3, #0
 8008a24:	617b      	str	r3, [r7, #20]
 8008a26:	e010      	b.n	8008a4a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8008a28:	78fb      	ldrb	r3, [r7, #3]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d103      	bne.n	8008a36 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8008a2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a32:	617b      	str	r3, [r7, #20]
 8008a34:	e009      	b.n	8008a4a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8008a36:	78fb      	ldrb	r3, [r7, #3]
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d103      	bne.n	8008a44 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8008a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a40:	617b      	str	r3, [r7, #20]
 8008a42:	e002      	b.n	8008a4a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8008a44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008a48:	617b      	str	r3, [r7, #20]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008a4a:	4b18      	ldr	r3, [pc, #96]	; (8008aac <FLASH_Erase_Sector+0xa0>)
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	4a17      	ldr	r2, [pc, #92]	; (8008aac <FLASH_Erase_Sector+0xa0>)
 8008a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a54:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8008a56:	4b15      	ldr	r3, [pc, #84]	; (8008aac <FLASH_Erase_Sector+0xa0>)
 8008a58:	691a      	ldr	r2, [r3, #16]
 8008a5a:	4914      	ldr	r1, [pc, #80]	; (8008aac <FLASH_Erase_Sector+0xa0>)
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8008a62:	4b12      	ldr	r3, [pc, #72]	; (8008aac <FLASH_Erase_Sector+0xa0>)
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	4a11      	ldr	r2, [pc, #68]	; (8008aac <FLASH_Erase_Sector+0xa0>)
 8008a68:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008a6c:	6113      	str	r3, [r2, #16]
 8008a6e:	23f8      	movs	r3, #248	; 0xf8
 8008a70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	fa93 f3a3 	rbit	r3, r3
 8008a78:	60fb      	str	r3, [r7, #12]
  return result;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
  FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 8008a7c:	fab3 f383 	clz	r3, r3
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	461a      	mov	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4093      	lsls	r3, r2
 8008a88:	f043 0202 	orr.w	r2, r3, #2
 8008a8c:	4b07      	ldr	r3, [pc, #28]	; (8008aac <FLASH_Erase_Sector+0xa0>)
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	4906      	ldr	r1, [pc, #24]	; (8008aac <FLASH_Erase_Sector+0xa0>)
 8008a92:	4313      	orrs	r3, r2
 8008a94:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8008a96:	4b05      	ldr	r3, [pc, #20]	; (8008aac <FLASH_Erase_Sector+0xa0>)
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	4a04      	ldr	r2, [pc, #16]	; (8008aac <FLASH_Erase_Sector+0xa0>)
 8008a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008aa0:	6113      	str	r3, [r2, #16]
}
 8008aa2:	bf00      	nop
 8008aa4:	371c      	adds	r7, #28
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bc80      	pop	{r7}
 8008aaa:	4770      	bx	lr
 8008aac:	40023c00 	.word	0x40023c00

08008ab0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8008ab4:	4b1f      	ldr	r3, [pc, #124]	; (8008b34 <FLASH_FlushCaches+0x84>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d017      	beq.n	8008af0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008ac0:	4b1c      	ldr	r3, [pc, #112]	; (8008b34 <FLASH_FlushCaches+0x84>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a1b      	ldr	r2, [pc, #108]	; (8008b34 <FLASH_FlushCaches+0x84>)
 8008ac6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008aca:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8008acc:	4b19      	ldr	r3, [pc, #100]	; (8008b34 <FLASH_FlushCaches+0x84>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a18      	ldr	r2, [pc, #96]	; (8008b34 <FLASH_FlushCaches+0x84>)
 8008ad2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008ad6:	6013      	str	r3, [r2, #0]
 8008ad8:	4b16      	ldr	r3, [pc, #88]	; (8008b34 <FLASH_FlushCaches+0x84>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a15      	ldr	r2, [pc, #84]	; (8008b34 <FLASH_FlushCaches+0x84>)
 8008ade:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ae2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008ae4:	4b13      	ldr	r3, [pc, #76]	; (8008b34 <FLASH_FlushCaches+0x84>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a12      	ldr	r2, [pc, #72]	; (8008b34 <FLASH_FlushCaches+0x84>)
 8008aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008aee:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8008af0:	4b10      	ldr	r3, [pc, #64]	; (8008b34 <FLASH_FlushCaches+0x84>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d017      	beq.n	8008b2c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8008afc:	4b0d      	ldr	r3, [pc, #52]	; (8008b34 <FLASH_FlushCaches+0x84>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a0c      	ldr	r2, [pc, #48]	; (8008b34 <FLASH_FlushCaches+0x84>)
 8008b02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b06:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8008b08:	4b0a      	ldr	r3, [pc, #40]	; (8008b34 <FLASH_FlushCaches+0x84>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a09      	ldr	r2, [pc, #36]	; (8008b34 <FLASH_FlushCaches+0x84>)
 8008b0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b12:	6013      	str	r3, [r2, #0]
 8008b14:	4b07      	ldr	r3, [pc, #28]	; (8008b34 <FLASH_FlushCaches+0x84>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a06      	ldr	r2, [pc, #24]	; (8008b34 <FLASH_FlushCaches+0x84>)
 8008b1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b1e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8008b20:	4b04      	ldr	r3, [pc, #16]	; (8008b34 <FLASH_FlushCaches+0x84>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a03      	ldr	r2, [pc, #12]	; (8008b34 <FLASH_FlushCaches+0x84>)
 8008b26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b2a:	6013      	str	r3, [r2, #0]
  }
}
 8008b2c:	bf00      	nop
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bc80      	pop	{r7}
 8008b32:	4770      	bx	lr
 8008b34:	40023c00 	.word	0x40023c00

08008b38 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{ 
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	4603      	mov	r3, r0
 8008b40:	6039      	str	r1, [r7, #0]
 8008b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008b44:	4b0c      	ldr	r3, [pc, #48]	; (8008b78 <FLASH_MassErase+0x40>)
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	4a0b      	ldr	r2, [pc, #44]	; (8008b78 <FLASH_MassErase+0x40>)
 8008b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8008b50:	4b09      	ldr	r3, [pc, #36]	; (8008b78 <FLASH_MassErase+0x40>)
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	4a08      	ldr	r2, [pc, #32]	; (8008b78 <FLASH_MassErase+0x40>)
 8008b56:	f043 0304 	orr.w	r3, r3, #4
 8008b5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8008b5c:	4b06      	ldr	r3, [pc, #24]	; (8008b78 <FLASH_MassErase+0x40>)
 8008b5e:	691a      	ldr	r2, [r3, #16]
 8008b60:	79fb      	ldrb	r3, [r7, #7]
 8008b62:	021b      	lsls	r3, r3, #8
 8008b64:	4313      	orrs	r3, r2
 8008b66:	4a04      	ldr	r2, [pc, #16]	; (8008b78 <FLASH_MassErase+0x40>)
 8008b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b6c:	6113      	str	r3, [r2, #16]
}
 8008b6e:	bf00      	nop
 8008b70:	370c      	adds	r7, #12
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bc80      	pop	{r7}
 8008b76:	4770      	bx	lr
 8008b78:	40023c00 	.word	0x40023c00

08008b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b087      	sub	sp, #28
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008b86:	2300      	movs	r3, #0
 8008b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b8a:	e16f      	b.n	8008e6c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	2101      	movs	r1, #1
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	fa01 f303 	lsl.w	r3, r1, r3
 8008b98:	4013      	ands	r3, r2
 8008b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	f000 8161 	beq.w	8008e66 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	f003 0303 	and.w	r3, r3, #3
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d005      	beq.n	8008bbc <HAL_GPIO_Init+0x40>
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	f003 0303 	and.w	r3, r3, #3
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d130      	bne.n	8008c1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	005b      	lsls	r3, r3, #1
 8008bc6:	2203      	movs	r2, #3
 8008bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bcc:	43db      	mvns	r3, r3
 8008bce:	693a      	ldr	r2, [r7, #16]
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	68da      	ldr	r2, [r3, #12]
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	005b      	lsls	r3, r3, #1
 8008bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8008be0:	693a      	ldr	r2, [r7, #16]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	693a      	ldr	r2, [r7, #16]
 8008bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bfa:	43db      	mvns	r3, r3
 8008bfc:	693a      	ldr	r2, [r7, #16]
 8008bfe:	4013      	ands	r3, r2
 8008c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	091b      	lsrs	r3, r3, #4
 8008c08:	f003 0201 	and.w	r2, r3, #1
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	f003 0303 	and.w	r3, r3, #3
 8008c26:	2b03      	cmp	r3, #3
 8008c28:	d017      	beq.n	8008c5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	005b      	lsls	r3, r3, #1
 8008c34:	2203      	movs	r2, #3
 8008c36:	fa02 f303 	lsl.w	r3, r2, r3
 8008c3a:	43db      	mvns	r3, r3
 8008c3c:	693a      	ldr	r2, [r7, #16]
 8008c3e:	4013      	ands	r3, r2
 8008c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	689a      	ldr	r2, [r3, #8]
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	005b      	lsls	r3, r3, #1
 8008c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c4e:	693a      	ldr	r2, [r7, #16]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	f003 0303 	and.w	r3, r3, #3
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d123      	bne.n	8008cae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	08da      	lsrs	r2, r3, #3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	3208      	adds	r2, #8
 8008c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	f003 0307 	and.w	r3, r3, #7
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	220f      	movs	r2, #15
 8008c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c82:	43db      	mvns	r3, r3
 8008c84:	693a      	ldr	r2, [r7, #16]
 8008c86:	4013      	ands	r3, r2
 8008c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	691a      	ldr	r2, [r3, #16]
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	f003 0307 	and.w	r3, r3, #7
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	fa02 f303 	lsl.w	r3, r2, r3
 8008c9a:	693a      	ldr	r2, [r7, #16]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	08da      	lsrs	r2, r3, #3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	3208      	adds	r2, #8
 8008ca8:	6939      	ldr	r1, [r7, #16]
 8008caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	005b      	lsls	r3, r3, #1
 8008cb8:	2203      	movs	r2, #3
 8008cba:	fa02 f303 	lsl.w	r3, r2, r3
 8008cbe:	43db      	mvns	r3, r3
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	f003 0203 	and.w	r2, r3, #3
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	005b      	lsls	r3, r3, #1
 8008cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f000 80bb 	beq.w	8008e66 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	60bb      	str	r3, [r7, #8]
 8008cf4:	4b64      	ldr	r3, [pc, #400]	; (8008e88 <HAL_GPIO_Init+0x30c>)
 8008cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cf8:	4a63      	ldr	r2, [pc, #396]	; (8008e88 <HAL_GPIO_Init+0x30c>)
 8008cfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008cfe:	6453      	str	r3, [r2, #68]	; 0x44
 8008d00:	4b61      	ldr	r3, [pc, #388]	; (8008e88 <HAL_GPIO_Init+0x30c>)
 8008d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d08:	60bb      	str	r3, [r7, #8]
 8008d0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008d0c:	4a5f      	ldr	r2, [pc, #380]	; (8008e8c <HAL_GPIO_Init+0x310>)
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	089b      	lsrs	r3, r3, #2
 8008d12:	3302      	adds	r3, #2
 8008d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	f003 0303 	and.w	r3, r3, #3
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	220f      	movs	r2, #15
 8008d24:	fa02 f303 	lsl.w	r3, r2, r3
 8008d28:	43db      	mvns	r3, r3
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a57      	ldr	r2, [pc, #348]	; (8008e90 <HAL_GPIO_Init+0x314>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d031      	beq.n	8008d9c <HAL_GPIO_Init+0x220>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a56      	ldr	r2, [pc, #344]	; (8008e94 <HAL_GPIO_Init+0x318>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d02b      	beq.n	8008d98 <HAL_GPIO_Init+0x21c>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a55      	ldr	r2, [pc, #340]	; (8008e98 <HAL_GPIO_Init+0x31c>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d025      	beq.n	8008d94 <HAL_GPIO_Init+0x218>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a54      	ldr	r2, [pc, #336]	; (8008e9c <HAL_GPIO_Init+0x320>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d01f      	beq.n	8008d90 <HAL_GPIO_Init+0x214>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4a53      	ldr	r2, [pc, #332]	; (8008ea0 <HAL_GPIO_Init+0x324>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d019      	beq.n	8008d8c <HAL_GPIO_Init+0x210>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4a52      	ldr	r2, [pc, #328]	; (8008ea4 <HAL_GPIO_Init+0x328>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d013      	beq.n	8008d88 <HAL_GPIO_Init+0x20c>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a51      	ldr	r2, [pc, #324]	; (8008ea8 <HAL_GPIO_Init+0x32c>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d00d      	beq.n	8008d84 <HAL_GPIO_Init+0x208>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a50      	ldr	r2, [pc, #320]	; (8008eac <HAL_GPIO_Init+0x330>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d007      	beq.n	8008d80 <HAL_GPIO_Init+0x204>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a4f      	ldr	r2, [pc, #316]	; (8008eb0 <HAL_GPIO_Init+0x334>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d101      	bne.n	8008d7c <HAL_GPIO_Init+0x200>
 8008d78:	2308      	movs	r3, #8
 8008d7a:	e010      	b.n	8008d9e <HAL_GPIO_Init+0x222>
 8008d7c:	2309      	movs	r3, #9
 8008d7e:	e00e      	b.n	8008d9e <HAL_GPIO_Init+0x222>
 8008d80:	2307      	movs	r3, #7
 8008d82:	e00c      	b.n	8008d9e <HAL_GPIO_Init+0x222>
 8008d84:	2306      	movs	r3, #6
 8008d86:	e00a      	b.n	8008d9e <HAL_GPIO_Init+0x222>
 8008d88:	2305      	movs	r3, #5
 8008d8a:	e008      	b.n	8008d9e <HAL_GPIO_Init+0x222>
 8008d8c:	2304      	movs	r3, #4
 8008d8e:	e006      	b.n	8008d9e <HAL_GPIO_Init+0x222>
 8008d90:	2303      	movs	r3, #3
 8008d92:	e004      	b.n	8008d9e <HAL_GPIO_Init+0x222>
 8008d94:	2302      	movs	r3, #2
 8008d96:	e002      	b.n	8008d9e <HAL_GPIO_Init+0x222>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e000      	b.n	8008d9e <HAL_GPIO_Init+0x222>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	f002 0203 	and.w	r2, r2, #3
 8008da4:	0092      	lsls	r2, r2, #2
 8008da6:	4093      	lsls	r3, r2
 8008da8:	461a      	mov	r2, r3
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	4313      	orrs	r3, r2
 8008dae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008db0:	4936      	ldr	r1, [pc, #216]	; (8008e8c <HAL_GPIO_Init+0x310>)
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	089b      	lsrs	r3, r3, #2
 8008db6:	3302      	adds	r3, #2
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008dbe:	4b3d      	ldr	r3, [pc, #244]	; (8008eb4 <HAL_GPIO_Init+0x338>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	43db      	mvns	r3, r3
 8008dc8:	693a      	ldr	r2, [r7, #16]
 8008dca:	4013      	ands	r3, r2
 8008dcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d003      	beq.n	8008de2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008dda:	693a      	ldr	r2, [r7, #16]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8008de2:	4a34      	ldr	r2, [pc, #208]	; (8008eb4 <HAL_GPIO_Init+0x338>)
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008de8:	4b32      	ldr	r3, [pc, #200]	; (8008eb4 <HAL_GPIO_Init+0x338>)
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	43db      	mvns	r3, r3
 8008df2:	693a      	ldr	r2, [r7, #16]
 8008df4:	4013      	ands	r3, r2
 8008df6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d003      	beq.n	8008e0c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008e04:	693a      	ldr	r2, [r7, #16]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8008e0c:	4a29      	ldr	r2, [pc, #164]	; (8008eb4 <HAL_GPIO_Init+0x338>)
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008e12:	4b28      	ldr	r3, [pc, #160]	; (8008eb4 <HAL_GPIO_Init+0x338>)
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	43db      	mvns	r3, r3
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	4013      	ands	r3, r2
 8008e20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d003      	beq.n	8008e36 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008e2e:	693a      	ldr	r2, [r7, #16]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8008e36:	4a1f      	ldr	r2, [pc, #124]	; (8008eb4 <HAL_GPIO_Init+0x338>)
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008e3c:	4b1d      	ldr	r3, [pc, #116]	; (8008eb4 <HAL_GPIO_Init+0x338>)
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	43db      	mvns	r3, r3
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	4013      	ands	r3, r2
 8008e4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d003      	beq.n	8008e60 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8008e58:	693a      	ldr	r2, [r7, #16]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8008e60:	4a14      	ldr	r2, [pc, #80]	; (8008eb4 <HAL_GPIO_Init+0x338>)
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	fa22 f303 	lsr.w	r3, r2, r3
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f47f ae88 	bne.w	8008b8c <HAL_GPIO_Init+0x10>
  }
}
 8008e7c:	bf00      	nop
 8008e7e:	bf00      	nop
 8008e80:	371c      	adds	r7, #28
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bc80      	pop	{r7}
 8008e86:	4770      	bx	lr
 8008e88:	40023800 	.word	0x40023800
 8008e8c:	40013800 	.word	0x40013800
 8008e90:	40020000 	.word	0x40020000
 8008e94:	40020400 	.word	0x40020400
 8008e98:	40020800 	.word	0x40020800
 8008e9c:	40020c00 	.word	0x40020c00
 8008ea0:	40021000 	.word	0x40021000
 8008ea4:	40021400 	.word	0x40021400
 8008ea8:	40021800 	.word	0x40021800
 8008eac:	40021c00 	.word	0x40021c00
 8008eb0:	40022000 	.word	0x40022000
 8008eb4:	40013c00 	.word	0x40013c00

08008eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	807b      	strh	r3, [r7, #2]
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008ec8:	787b      	ldrb	r3, [r7, #1]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d003      	beq.n	8008ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008ece:	887a      	ldrh	r2, [r7, #2]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008ed4:	e003      	b.n	8008ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008ed6:	887b      	ldrh	r3, [r7, #2]
 8008ed8:	041a      	lsls	r2, r3, #16
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	619a      	str	r2, [r3, #24]
}
 8008ede:	bf00      	nop
 8008ee0:	370c      	adds	r7, #12
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bc80      	pop	{r7}
 8008ee6:	4770      	bx	lr

08008ee8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d101      	bne.n	8008efa <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e034      	b.n	8008f64 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8008f02:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f245 5255 	movw	r2, #21845	; 0x5555
 8008f0c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	6852      	ldr	r2, [r2, #4]
 8008f16:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	6892      	ldr	r2, [r2, #8]
 8008f20:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8008f22:	f7fe f943 	bl	80071ac <HAL_GetTick>
 8008f26:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008f28:	e00f      	b.n	8008f4a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8008f2a:	f7fe f93f 	bl	80071ac <HAL_GetTick>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	2b31      	cmp	r3, #49	; 0x31
 8008f36:	d908      	bls.n	8008f4a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	f003 0303 	and.w	r3, r3, #3
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d001      	beq.n	8008f4a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8008f46:	2303      	movs	r3, #3
 8008f48:	e00c      	b.n	8008f64 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	f003 0303 	and.w	r3, r3, #3
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1e8      	bne.n	8008f2a <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8008f60:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008f62:	2300      	movs	r3, #0
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3710      	adds	r7, #16
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8008f7c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bc80      	pop	{r7}
 8008f88:	4770      	bx	lr
	...

08008f8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b08a      	sub	sp, #40	; 0x28
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d101      	bne.n	8008f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e237      	b.n	800940e <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 0301 	and.w	r3, r3, #1
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d050      	beq.n	800904c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008faa:	4ba3      	ldr	r3, [pc, #652]	; (8009238 <HAL_RCC_OscConfig+0x2ac>)
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	f003 030c 	and.w	r3, r3, #12
 8008fb2:	2b04      	cmp	r3, #4
 8008fb4:	d00c      	beq.n	8008fd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008fb6:	4ba0      	ldr	r3, [pc, #640]	; (8009238 <HAL_RCC_OscConfig+0x2ac>)
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008fbe:	2b08      	cmp	r3, #8
 8008fc0:	d112      	bne.n	8008fe8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008fc2:	4b9d      	ldr	r3, [pc, #628]	; (8009238 <HAL_RCC_OscConfig+0x2ac>)
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fce:	d10b      	bne.n	8008fe8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fd0:	4b99      	ldr	r3, [pc, #612]	; (8009238 <HAL_RCC_OscConfig+0x2ac>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d036      	beq.n	800904a <HAL_RCC_OscConfig+0xbe>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d132      	bne.n	800904a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e212      	b.n	800940e <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685a      	ldr	r2, [r3, #4]
 8008fec:	4b93      	ldr	r3, [pc, #588]	; (800923c <HAL_RCC_OscConfig+0x2b0>)
 8008fee:	b2d2      	uxtb	r2, r2
 8008ff0:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d013      	beq.n	8009022 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ffa:	f7fe f8d7 	bl	80071ac <HAL_GetTick>
 8008ffe:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009000:	e008      	b.n	8009014 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009002:	f7fe f8d3 	bl	80071ac <HAL_GetTick>
 8009006:	4602      	mov	r2, r0
 8009008:	6a3b      	ldr	r3, [r7, #32]
 800900a:	1ad3      	subs	r3, r2, r3
 800900c:	2b64      	cmp	r3, #100	; 0x64
 800900e:	d901      	bls.n	8009014 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8009010:	2303      	movs	r3, #3
 8009012:	e1fc      	b.n	800940e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009014:	4b88      	ldr	r3, [pc, #544]	; (8009238 <HAL_RCC_OscConfig+0x2ac>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800901c:	2b00      	cmp	r3, #0
 800901e:	d0f0      	beq.n	8009002 <HAL_RCC_OscConfig+0x76>
 8009020:	e014      	b.n	800904c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009022:	f7fe f8c3 	bl	80071ac <HAL_GetTick>
 8009026:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009028:	e008      	b.n	800903c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800902a:	f7fe f8bf 	bl	80071ac <HAL_GetTick>
 800902e:	4602      	mov	r2, r0
 8009030:	6a3b      	ldr	r3, [r7, #32]
 8009032:	1ad3      	subs	r3, r2, r3
 8009034:	2b64      	cmp	r3, #100	; 0x64
 8009036:	d901      	bls.n	800903c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8009038:	2303      	movs	r3, #3
 800903a:	e1e8      	b.n	800940e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800903c:	4b7e      	ldr	r3, [pc, #504]	; (8009238 <HAL_RCC_OscConfig+0x2ac>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1f0      	bne.n	800902a <HAL_RCC_OscConfig+0x9e>
 8009048:	e000      	b.n	800904c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800904a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0302 	and.w	r3, r3, #2
 8009054:	2b00      	cmp	r3, #0
 8009056:	d077      	beq.n	8009148 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009058:	4b77      	ldr	r3, [pc, #476]	; (8009238 <HAL_RCC_OscConfig+0x2ac>)
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	f003 030c 	and.w	r3, r3, #12
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00b      	beq.n	800907c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009064:	4b74      	ldr	r3, [pc, #464]	; (8009238 <HAL_RCC_OscConfig+0x2ac>)
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800906c:	2b08      	cmp	r3, #8
 800906e:	d126      	bne.n	80090be <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009070:	4b71      	ldr	r3, [pc, #452]	; (8009238 <HAL_RCC_OscConfig+0x2ac>)
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009078:	2b00      	cmp	r3, #0
 800907a:	d120      	bne.n	80090be <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800907c:	4b6e      	ldr	r3, [pc, #440]	; (8009238 <HAL_RCC_OscConfig+0x2ac>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 0302 	and.w	r3, r3, #2
 8009084:	2b00      	cmp	r3, #0
 8009086:	d005      	beq.n	8009094 <HAL_RCC_OscConfig+0x108>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d001      	beq.n	8009094 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	e1bc      	b.n	800940e <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009094:	4b68      	ldr	r3, [pc, #416]	; (8009238 <HAL_RCC_OscConfig+0x2ac>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	21f8      	movs	r1, #248	; 0xf8
 80090a2:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090a4:	69b9      	ldr	r1, [r7, #24]
 80090a6:	fa91 f1a1 	rbit	r1, r1
 80090aa:	6179      	str	r1, [r7, #20]
  return result;
 80090ac:	6979      	ldr	r1, [r7, #20]
 80090ae:	fab1 f181 	clz	r1, r1
 80090b2:	b2c9      	uxtb	r1, r1
 80090b4:	408b      	lsls	r3, r1
 80090b6:	4960      	ldr	r1, [pc, #384]	; (8009238 <HAL_RCC_OscConfig+0x2ac>)
 80090b8:	4313      	orrs	r3, r2
 80090ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090bc:	e044      	b.n	8009148 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d02a      	beq.n	800911c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80090c6:	4b5e      	ldr	r3, [pc, #376]	; (8009240 <HAL_RCC_OscConfig+0x2b4>)
 80090c8:	2201      	movs	r2, #1
 80090ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090cc:	f7fe f86e 	bl	80071ac <HAL_GetTick>
 80090d0:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090d2:	e008      	b.n	80090e6 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80090d4:	f7fe f86a 	bl	80071ac <HAL_GetTick>
 80090d8:	4602      	mov	r2, r0
 80090da:	6a3b      	ldr	r3, [r7, #32]
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d901      	bls.n	80090e6 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80090e2:	2303      	movs	r3, #3
 80090e4:	e193      	b.n	800940e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090e6:	4b54      	ldr	r3, [pc, #336]	; (8009238 <HAL_RCC_OscConfig+0x2ac>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 0302 	and.w	r3, r3, #2
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d0f0      	beq.n	80090d4 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090f2:	4b51      	ldr	r3, [pc, #324]	; (8009238 <HAL_RCC_OscConfig+0x2ac>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	21f8      	movs	r1, #248	; 0xf8
 8009100:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009102:	6939      	ldr	r1, [r7, #16]
 8009104:	fa91 f1a1 	rbit	r1, r1
 8009108:	60f9      	str	r1, [r7, #12]
  return result;
 800910a:	68f9      	ldr	r1, [r7, #12]
 800910c:	fab1 f181 	clz	r1, r1
 8009110:	b2c9      	uxtb	r1, r1
 8009112:	408b      	lsls	r3, r1
 8009114:	4948      	ldr	r1, [pc, #288]	; (8009238 <HAL_RCC_OscConfig+0x2ac>)
 8009116:	4313      	orrs	r3, r2
 8009118:	600b      	str	r3, [r1, #0]
 800911a:	e015      	b.n	8009148 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800911c:	4b48      	ldr	r3, [pc, #288]	; (8009240 <HAL_RCC_OscConfig+0x2b4>)
 800911e:	2200      	movs	r2, #0
 8009120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009122:	f7fe f843 	bl	80071ac <HAL_GetTick>
 8009126:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009128:	e008      	b.n	800913c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800912a:	f7fe f83f 	bl	80071ac <HAL_GetTick>
 800912e:	4602      	mov	r2, r0
 8009130:	6a3b      	ldr	r3, [r7, #32]
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	2b02      	cmp	r3, #2
 8009136:	d901      	bls.n	800913c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8009138:	2303      	movs	r3, #3
 800913a:	e168      	b.n	800940e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800913c:	4b3e      	ldr	r3, [pc, #248]	; (8009238 <HAL_RCC_OscConfig+0x2ac>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0302 	and.w	r3, r3, #2
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1f0      	bne.n	800912a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 0308 	and.w	r3, r3, #8
 8009150:	2b00      	cmp	r3, #0
 8009152:	d030      	beq.n	80091b6 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	695b      	ldr	r3, [r3, #20]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d016      	beq.n	800918a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800915c:	4b39      	ldr	r3, [pc, #228]	; (8009244 <HAL_RCC_OscConfig+0x2b8>)
 800915e:	2201      	movs	r2, #1
 8009160:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009162:	f7fe f823 	bl	80071ac <HAL_GetTick>
 8009166:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009168:	e008      	b.n	800917c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800916a:	f7fe f81f 	bl	80071ac <HAL_GetTick>
 800916e:	4602      	mov	r2, r0
 8009170:	6a3b      	ldr	r3, [r7, #32]
 8009172:	1ad3      	subs	r3, r2, r3
 8009174:	2b02      	cmp	r3, #2
 8009176:	d901      	bls.n	800917c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8009178:	2303      	movs	r3, #3
 800917a:	e148      	b.n	800940e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800917c:	4b2e      	ldr	r3, [pc, #184]	; (8009238 <HAL_RCC_OscConfig+0x2ac>)
 800917e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009180:	f003 0302 	and.w	r3, r3, #2
 8009184:	2b00      	cmp	r3, #0
 8009186:	d0f0      	beq.n	800916a <HAL_RCC_OscConfig+0x1de>
 8009188:	e015      	b.n	80091b6 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800918a:	4b2e      	ldr	r3, [pc, #184]	; (8009244 <HAL_RCC_OscConfig+0x2b8>)
 800918c:	2200      	movs	r2, #0
 800918e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009190:	f7fe f80c 	bl	80071ac <HAL_GetTick>
 8009194:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009196:	e008      	b.n	80091aa <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009198:	f7fe f808 	bl	80071ac <HAL_GetTick>
 800919c:	4602      	mov	r2, r0
 800919e:	6a3b      	ldr	r3, [r7, #32]
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d901      	bls.n	80091aa <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80091a6:	2303      	movs	r3, #3
 80091a8:	e131      	b.n	800940e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091aa:	4b23      	ldr	r3, [pc, #140]	; (8009238 <HAL_RCC_OscConfig+0x2ac>)
 80091ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091ae:	f003 0302 	and.w	r3, r3, #2
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1f0      	bne.n	8009198 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 0304 	and.w	r3, r3, #4
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f000 8088 	beq.w	80092d4 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091c4:	2300      	movs	r3, #0
 80091c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091ca:	4b1b      	ldr	r3, [pc, #108]	; (8009238 <HAL_RCC_OscConfig+0x2ac>)
 80091cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d110      	bne.n	80091f8 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091d6:	2300      	movs	r3, #0
 80091d8:	60bb      	str	r3, [r7, #8]
 80091da:	4b17      	ldr	r3, [pc, #92]	; (8009238 <HAL_RCC_OscConfig+0x2ac>)
 80091dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091de:	4a16      	ldr	r2, [pc, #88]	; (8009238 <HAL_RCC_OscConfig+0x2ac>)
 80091e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091e4:	6413      	str	r3, [r2, #64]	; 0x40
 80091e6:	4b14      	ldr	r3, [pc, #80]	; (8009238 <HAL_RCC_OscConfig+0x2ac>)
 80091e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091ee:	60bb      	str	r3, [r7, #8]
 80091f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80091f2:	2301      	movs	r3, #1
 80091f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80091f8:	4b13      	ldr	r3, [pc, #76]	; (8009248 <HAL_RCC_OscConfig+0x2bc>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a12      	ldr	r2, [pc, #72]	; (8009248 <HAL_RCC_OscConfig+0x2bc>)
 80091fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009202:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009204:	4b10      	ldr	r3, [pc, #64]	; (8009248 <HAL_RCC_OscConfig+0x2bc>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800920c:	2b00      	cmp	r3, #0
 800920e:	d123      	bne.n	8009258 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009210:	4b0d      	ldr	r3, [pc, #52]	; (8009248 <HAL_RCC_OscConfig+0x2bc>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a0c      	ldr	r2, [pc, #48]	; (8009248 <HAL_RCC_OscConfig+0x2bc>)
 8009216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800921a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800921c:	f7fd ffc6 	bl	80071ac <HAL_GetTick>
 8009220:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009222:	e013      	b.n	800924c <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009224:	f7fd ffc2 	bl	80071ac <HAL_GetTick>
 8009228:	4602      	mov	r2, r0
 800922a:	6a3b      	ldr	r3, [r7, #32]
 800922c:	1ad3      	subs	r3, r2, r3
 800922e:	2b02      	cmp	r3, #2
 8009230:	d90c      	bls.n	800924c <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8009232:	2303      	movs	r3, #3
 8009234:	e0eb      	b.n	800940e <HAL_RCC_OscConfig+0x482>
 8009236:	bf00      	nop
 8009238:	40023800 	.word	0x40023800
 800923c:	40023802 	.word	0x40023802
 8009240:	42470000 	.word	0x42470000
 8009244:	42470e80 	.word	0x42470e80
 8009248:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800924c:	4b72      	ldr	r3, [pc, #456]	; (8009418 <HAL_RCC_OscConfig+0x48c>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009254:	2b00      	cmp	r3, #0
 8009256:	d0e5      	beq.n	8009224 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	689a      	ldr	r2, [r3, #8]
 800925c:	4b6f      	ldr	r3, [pc, #444]	; (800941c <HAL_RCC_OscConfig+0x490>)
 800925e:	b2d2      	uxtb	r2, r2
 8009260:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d015      	beq.n	8009296 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800926a:	f7fd ff9f 	bl	80071ac <HAL_GetTick>
 800926e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009270:	e00a      	b.n	8009288 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009272:	f7fd ff9b 	bl	80071ac <HAL_GetTick>
 8009276:	4602      	mov	r2, r0
 8009278:	6a3b      	ldr	r3, [r7, #32]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009280:	4293      	cmp	r3, r2
 8009282:	d901      	bls.n	8009288 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009284:	2303      	movs	r3, #3
 8009286:	e0c2      	b.n	800940e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009288:	4b65      	ldr	r3, [pc, #404]	; (8009420 <HAL_RCC_OscConfig+0x494>)
 800928a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800928c:	f003 0302 	and.w	r3, r3, #2
 8009290:	2b00      	cmp	r3, #0
 8009292:	d0ee      	beq.n	8009272 <HAL_RCC_OscConfig+0x2e6>
 8009294:	e014      	b.n	80092c0 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009296:	f7fd ff89 	bl	80071ac <HAL_GetTick>
 800929a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800929c:	e00a      	b.n	80092b4 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800929e:	f7fd ff85 	bl	80071ac <HAL_GetTick>
 80092a2:	4602      	mov	r2, r0
 80092a4:	6a3b      	ldr	r3, [r7, #32]
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d901      	bls.n	80092b4 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80092b0:	2303      	movs	r3, #3
 80092b2:	e0ac      	b.n	800940e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092b4:	4b5a      	ldr	r3, [pc, #360]	; (8009420 <HAL_RCC_OscConfig+0x494>)
 80092b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092b8:	f003 0302 	and.w	r3, r3, #2
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1ee      	bne.n	800929e <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80092c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d105      	bne.n	80092d4 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80092c8:	4b55      	ldr	r3, [pc, #340]	; (8009420 <HAL_RCC_OscConfig+0x494>)
 80092ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092cc:	4a54      	ldr	r2, [pc, #336]	; (8009420 <HAL_RCC_OscConfig+0x494>)
 80092ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f000 8097 	beq.w	800940c <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80092de:	4b50      	ldr	r3, [pc, #320]	; (8009420 <HAL_RCC_OscConfig+0x494>)
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	f003 030c 	and.w	r3, r3, #12
 80092e6:	2b08      	cmp	r3, #8
 80092e8:	d061      	beq.n	80093ae <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	699b      	ldr	r3, [r3, #24]
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d146      	bne.n	8009380 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092f2:	4b4c      	ldr	r3, [pc, #304]	; (8009424 <HAL_RCC_OscConfig+0x498>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092f8:	f7fd ff58 	bl	80071ac <HAL_GetTick>
 80092fc:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092fe:	e008      	b.n	8009312 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009300:	f7fd ff54 	bl	80071ac <HAL_GetTick>
 8009304:	4602      	mov	r2, r0
 8009306:	6a3b      	ldr	r3, [r7, #32]
 8009308:	1ad3      	subs	r3, r2, r3
 800930a:	2b64      	cmp	r3, #100	; 0x64
 800930c:	d901      	bls.n	8009312 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 800930e:	2303      	movs	r3, #3
 8009310:	e07d      	b.n	800940e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009312:	4b43      	ldr	r3, [pc, #268]	; (8009420 <HAL_RCC_OscConfig+0x494>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1f0      	bne.n	8009300 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800931e:	4b40      	ldr	r3, [pc, #256]	; (8009420 <HAL_RCC_OscConfig+0x494>)
 8009320:	685a      	ldr	r2, [r3, #4]
 8009322:	4b41      	ldr	r3, [pc, #260]	; (8009428 <HAL_RCC_OscConfig+0x49c>)
 8009324:	4013      	ands	r3, r2
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	69d1      	ldr	r1, [r2, #28]
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	6a12      	ldr	r2, [r2, #32]
 800932e:	4311      	orrs	r1, r2
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009334:	0192      	lsls	r2, r2, #6
 8009336:	4311      	orrs	r1, r2
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800933c:	0612      	lsls	r2, r2, #24
 800933e:	4311      	orrs	r1, r2
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009344:	0852      	lsrs	r2, r2, #1
 8009346:	3a01      	subs	r2, #1
 8009348:	0412      	lsls	r2, r2, #16
 800934a:	430a      	orrs	r2, r1
 800934c:	4934      	ldr	r1, [pc, #208]	; (8009420 <HAL_RCC_OscConfig+0x494>)
 800934e:	4313      	orrs	r3, r2
 8009350:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009352:	4b34      	ldr	r3, [pc, #208]	; (8009424 <HAL_RCC_OscConfig+0x498>)
 8009354:	2201      	movs	r2, #1
 8009356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009358:	f7fd ff28 	bl	80071ac <HAL_GetTick>
 800935c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800935e:	e008      	b.n	8009372 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009360:	f7fd ff24 	bl	80071ac <HAL_GetTick>
 8009364:	4602      	mov	r2, r0
 8009366:	6a3b      	ldr	r3, [r7, #32]
 8009368:	1ad3      	subs	r3, r2, r3
 800936a:	2b64      	cmp	r3, #100	; 0x64
 800936c:	d901      	bls.n	8009372 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 800936e:	2303      	movs	r3, #3
 8009370:	e04d      	b.n	800940e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009372:	4b2b      	ldr	r3, [pc, #172]	; (8009420 <HAL_RCC_OscConfig+0x494>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800937a:	2b00      	cmp	r3, #0
 800937c:	d0f0      	beq.n	8009360 <HAL_RCC_OscConfig+0x3d4>
 800937e:	e045      	b.n	800940c <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009380:	4b28      	ldr	r3, [pc, #160]	; (8009424 <HAL_RCC_OscConfig+0x498>)
 8009382:	2200      	movs	r2, #0
 8009384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009386:	f7fd ff11 	bl	80071ac <HAL_GetTick>
 800938a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800938c:	e008      	b.n	80093a0 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800938e:	f7fd ff0d 	bl	80071ac <HAL_GetTick>
 8009392:	4602      	mov	r2, r0
 8009394:	6a3b      	ldr	r3, [r7, #32]
 8009396:	1ad3      	subs	r3, r2, r3
 8009398:	2b64      	cmp	r3, #100	; 0x64
 800939a:	d901      	bls.n	80093a0 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 800939c:	2303      	movs	r3, #3
 800939e:	e036      	b.n	800940e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093a0:	4b1f      	ldr	r3, [pc, #124]	; (8009420 <HAL_RCC_OscConfig+0x494>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1f0      	bne.n	800938e <HAL_RCC_OscConfig+0x402>
 80093ac:	e02e      	b.n	800940c <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	699b      	ldr	r3, [r3, #24]
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d101      	bne.n	80093ba <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 80093b6:	2301      	movs	r3, #1
 80093b8:	e029      	b.n	800940e <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80093ba:	4b19      	ldr	r3, [pc, #100]	; (8009420 <HAL_RCC_OscConfig+0x494>)
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	69db      	ldr	r3, [r3, #28]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d11c      	bne.n	8009408 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093d8:	429a      	cmp	r2, r3
 80093da:	d115      	bne.n	8009408 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	099b      	lsrs	r3, r3, #6
 80093e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d10d      	bne.n	8009408 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d106      	bne.n	8009408 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009404:	429a      	cmp	r2, r3
 8009406:	d001      	beq.n	800940c <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	e000      	b.n	800940e <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	3728      	adds	r7, #40	; 0x28
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	40007000 	.word	0x40007000
 800941c:	40023870 	.word	0x40023870
 8009420:	40023800 	.word	0x40023800
 8009424:	42470060 	.word	0x42470060
 8009428:	f0bc8000 	.word	0xf0bc8000

0800942c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b086      	sub	sp, #24
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d101      	bne.n	8009440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	e0d2      	b.n	80095e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009440:	4b6b      	ldr	r3, [pc, #428]	; (80095f0 <HAL_RCC_ClockConfig+0x1c4>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 030f 	and.w	r3, r3, #15
 8009448:	683a      	ldr	r2, [r7, #0]
 800944a:	429a      	cmp	r2, r3
 800944c:	d90c      	bls.n	8009468 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800944e:	4b68      	ldr	r3, [pc, #416]	; (80095f0 <HAL_RCC_ClockConfig+0x1c4>)
 8009450:	683a      	ldr	r2, [r7, #0]
 8009452:	b2d2      	uxtb	r2, r2
 8009454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009456:	4b66      	ldr	r3, [pc, #408]	; (80095f0 <HAL_RCC_ClockConfig+0x1c4>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 030f 	and.w	r3, r3, #15
 800945e:	683a      	ldr	r2, [r7, #0]
 8009460:	429a      	cmp	r2, r3
 8009462:	d001      	beq.n	8009468 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	e0be      	b.n	80095e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f003 0302 	and.w	r3, r3, #2
 8009470:	2b00      	cmp	r3, #0
 8009472:	d020      	beq.n	80094b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 0304 	and.w	r3, r3, #4
 800947c:	2b00      	cmp	r3, #0
 800947e:	d005      	beq.n	800948c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009480:	4b5c      	ldr	r3, [pc, #368]	; (80095f4 <HAL_RCC_ClockConfig+0x1c8>)
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	4a5b      	ldr	r2, [pc, #364]	; (80095f4 <HAL_RCC_ClockConfig+0x1c8>)
 8009486:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800948a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 0308 	and.w	r3, r3, #8
 8009494:	2b00      	cmp	r3, #0
 8009496:	d005      	beq.n	80094a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8009498:	4b56      	ldr	r3, [pc, #344]	; (80095f4 <HAL_RCC_ClockConfig+0x1c8>)
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	4a55      	ldr	r2, [pc, #340]	; (80095f4 <HAL_RCC_ClockConfig+0x1c8>)
 800949e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80094a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80094a4:	4b53      	ldr	r3, [pc, #332]	; (80095f4 <HAL_RCC_ClockConfig+0x1c8>)
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	4950      	ldr	r1, [pc, #320]	; (80095f4 <HAL_RCC_ClockConfig+0x1c8>)
 80094b2:	4313      	orrs	r3, r2
 80094b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 0301 	and.w	r3, r3, #1
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d040      	beq.n	8009544 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d107      	bne.n	80094da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094ca:	4b4a      	ldr	r3, [pc, #296]	; (80095f4 <HAL_RCC_ClockConfig+0x1c8>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d115      	bne.n	8009502 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e085      	b.n	80095e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	2b02      	cmp	r3, #2
 80094e0:	d107      	bne.n	80094f2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80094e2:	4b44      	ldr	r3, [pc, #272]	; (80095f4 <HAL_RCC_ClockConfig+0x1c8>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d109      	bne.n	8009502 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80094ee:	2301      	movs	r3, #1
 80094f0:	e079      	b.n	80095e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094f2:	4b40      	ldr	r3, [pc, #256]	; (80095f4 <HAL_RCC_ClockConfig+0x1c8>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f003 0302 	and.w	r3, r3, #2
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d101      	bne.n	8009502 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	e071      	b.n	80095e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009502:	4b3c      	ldr	r3, [pc, #240]	; (80095f4 <HAL_RCC_ClockConfig+0x1c8>)
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	f023 0203 	bic.w	r2, r3, #3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	4939      	ldr	r1, [pc, #228]	; (80095f4 <HAL_RCC_ClockConfig+0x1c8>)
 8009510:	4313      	orrs	r3, r2
 8009512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009514:	f7fd fe4a 	bl	80071ac <HAL_GetTick>
 8009518:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800951a:	e00a      	b.n	8009532 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800951c:	f7fd fe46 	bl	80071ac <HAL_GetTick>
 8009520:	4602      	mov	r2, r0
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	1ad3      	subs	r3, r2, r3
 8009526:	f241 3288 	movw	r2, #5000	; 0x1388
 800952a:	4293      	cmp	r3, r2
 800952c:	d901      	bls.n	8009532 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800952e:	2303      	movs	r3, #3
 8009530:	e059      	b.n	80095e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009532:	4b30      	ldr	r3, [pc, #192]	; (80095f4 <HAL_RCC_ClockConfig+0x1c8>)
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	f003 020c 	and.w	r2, r3, #12
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	429a      	cmp	r2, r3
 8009542:	d1eb      	bne.n	800951c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009544:	4b2a      	ldr	r3, [pc, #168]	; (80095f0 <HAL_RCC_ClockConfig+0x1c4>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 030f 	and.w	r3, r3, #15
 800954c:	683a      	ldr	r2, [r7, #0]
 800954e:	429a      	cmp	r2, r3
 8009550:	d20c      	bcs.n	800956c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009552:	4b27      	ldr	r3, [pc, #156]	; (80095f0 <HAL_RCC_ClockConfig+0x1c4>)
 8009554:	683a      	ldr	r2, [r7, #0]
 8009556:	b2d2      	uxtb	r2, r2
 8009558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800955a:	4b25      	ldr	r3, [pc, #148]	; (80095f0 <HAL_RCC_ClockConfig+0x1c4>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 030f 	and.w	r3, r3, #15
 8009562:	683a      	ldr	r2, [r7, #0]
 8009564:	429a      	cmp	r2, r3
 8009566:	d001      	beq.n	800956c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	e03c      	b.n	80095e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f003 0304 	and.w	r3, r3, #4
 8009574:	2b00      	cmp	r3, #0
 8009576:	d008      	beq.n	800958a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009578:	4b1e      	ldr	r3, [pc, #120]	; (80095f4 <HAL_RCC_ClockConfig+0x1c8>)
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	491b      	ldr	r1, [pc, #108]	; (80095f4 <HAL_RCC_ClockConfig+0x1c8>)
 8009586:	4313      	orrs	r3, r2
 8009588:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f003 0308 	and.w	r3, r3, #8
 8009592:	2b00      	cmp	r3, #0
 8009594:	d009      	beq.n	80095aa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009596:	4b17      	ldr	r3, [pc, #92]	; (80095f4 <HAL_RCC_ClockConfig+0x1c8>)
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	00db      	lsls	r3, r3, #3
 80095a4:	4913      	ldr	r1, [pc, #76]	; (80095f4 <HAL_RCC_ClockConfig+0x1c8>)
 80095a6:	4313      	orrs	r3, r2
 80095a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80095aa:	f000 f82b 	bl	8009604 <HAL_RCC_GetSysClockFreq>
 80095ae:	4601      	mov	r1, r0
 80095b0:	4b10      	ldr	r3, [pc, #64]	; (80095f4 <HAL_RCC_ClockConfig+0x1c8>)
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095b8:	22f0      	movs	r2, #240	; 0xf0
 80095ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095bc:	693a      	ldr	r2, [r7, #16]
 80095be:	fa92 f2a2 	rbit	r2, r2
 80095c2:	60fa      	str	r2, [r7, #12]
  return result;
 80095c4:	68fa      	ldr	r2, [r7, #12]
 80095c6:	fab2 f282 	clz	r2, r2
 80095ca:	b2d2      	uxtb	r2, r2
 80095cc:	40d3      	lsrs	r3, r2
 80095ce:	4a0a      	ldr	r2, [pc, #40]	; (80095f8 <HAL_RCC_ClockConfig+0x1cc>)
 80095d0:	5cd3      	ldrb	r3, [r2, r3]
 80095d2:	fa21 f303 	lsr.w	r3, r1, r3
 80095d6:	4a09      	ldr	r2, [pc, #36]	; (80095fc <HAL_RCC_ClockConfig+0x1d0>)
 80095d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80095da:	4b09      	ldr	r3, [pc, #36]	; (8009600 <HAL_RCC_ClockConfig+0x1d4>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4618      	mov	r0, r3
 80095e0:	f7fd fda2 	bl	8007128 <HAL_InitTick>

  return HAL_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3718      	adds	r7, #24
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	40023c00 	.word	0x40023c00
 80095f4:	40023800 	.word	0x40023800
 80095f8:	08016b18 	.word	0x08016b18
 80095fc:	20000050 	.word	0x20000050
 8009600:	20000054 	.word	0x20000054

08009604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009604:	b5b0      	push	{r4, r5, r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800960a:	2100      	movs	r1, #0
 800960c:	6079      	str	r1, [r7, #4]
 800960e:	2100      	movs	r1, #0
 8009610:	60f9      	str	r1, [r7, #12]
 8009612:	2100      	movs	r1, #0
 8009614:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009616:	2100      	movs	r1, #0
 8009618:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800961a:	4952      	ldr	r1, [pc, #328]	; (8009764 <HAL_RCC_GetSysClockFreq+0x160>)
 800961c:	6889      	ldr	r1, [r1, #8]
 800961e:	f001 010c 	and.w	r1, r1, #12
 8009622:	2908      	cmp	r1, #8
 8009624:	d00d      	beq.n	8009642 <HAL_RCC_GetSysClockFreq+0x3e>
 8009626:	2908      	cmp	r1, #8
 8009628:	f200 8094 	bhi.w	8009754 <HAL_RCC_GetSysClockFreq+0x150>
 800962c:	2900      	cmp	r1, #0
 800962e:	d002      	beq.n	8009636 <HAL_RCC_GetSysClockFreq+0x32>
 8009630:	2904      	cmp	r1, #4
 8009632:	d003      	beq.n	800963c <HAL_RCC_GetSysClockFreq+0x38>
 8009634:	e08e      	b.n	8009754 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009636:	4b4c      	ldr	r3, [pc, #304]	; (8009768 <HAL_RCC_GetSysClockFreq+0x164>)
 8009638:	60bb      	str	r3, [r7, #8]
       break;
 800963a:	e08e      	b.n	800975a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800963c:	4b4b      	ldr	r3, [pc, #300]	; (800976c <HAL_RCC_GetSysClockFreq+0x168>)
 800963e:	60bb      	str	r3, [r7, #8]
      break;
 8009640:	e08b      	b.n	800975a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009642:	4948      	ldr	r1, [pc, #288]	; (8009764 <HAL_RCC_GetSysClockFreq+0x160>)
 8009644:	6849      	ldr	r1, [r1, #4]
 8009646:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800964a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800964c:	4945      	ldr	r1, [pc, #276]	; (8009764 <HAL_RCC_GetSysClockFreq+0x160>)
 800964e:	6849      	ldr	r1, [r1, #4]
 8009650:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8009654:	2900      	cmp	r1, #0
 8009656:	d024      	beq.n	80096a2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009658:	4942      	ldr	r1, [pc, #264]	; (8009764 <HAL_RCC_GetSysClockFreq+0x160>)
 800965a:	6849      	ldr	r1, [r1, #4]
 800965c:	0989      	lsrs	r1, r1, #6
 800965e:	4608      	mov	r0, r1
 8009660:	f04f 0100 	mov.w	r1, #0
 8009664:	f240 14ff 	movw	r4, #511	; 0x1ff
 8009668:	f04f 0500 	mov.w	r5, #0
 800966c:	ea00 0204 	and.w	r2, r0, r4
 8009670:	ea01 0305 	and.w	r3, r1, r5
 8009674:	493d      	ldr	r1, [pc, #244]	; (800976c <HAL_RCC_GetSysClockFreq+0x168>)
 8009676:	fb01 f003 	mul.w	r0, r1, r3
 800967a:	2100      	movs	r1, #0
 800967c:	fb01 f102 	mul.w	r1, r1, r2
 8009680:	1844      	adds	r4, r0, r1
 8009682:	493a      	ldr	r1, [pc, #232]	; (800976c <HAL_RCC_GetSysClockFreq+0x168>)
 8009684:	fba2 0101 	umull	r0, r1, r2, r1
 8009688:	1863      	adds	r3, r4, r1
 800968a:	4619      	mov	r1, r3
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	461a      	mov	r2, r3
 8009690:	f04f 0300 	mov.w	r3, #0
 8009694:	f7f7 fcca 	bl	800102c <__aeabi_uldivmod>
 8009698:	4602      	mov	r2, r0
 800969a:	460b      	mov	r3, r1
 800969c:	4613      	mov	r3, r2
 800969e:	60fb      	str	r3, [r7, #12]
 80096a0:	e04a      	b.n	8009738 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80096a2:	4b30      	ldr	r3, [pc, #192]	; (8009764 <HAL_RCC_GetSysClockFreq+0x160>)
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	099b      	lsrs	r3, r3, #6
 80096a8:	461a      	mov	r2, r3
 80096aa:	f04f 0300 	mov.w	r3, #0
 80096ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80096b2:	f04f 0100 	mov.w	r1, #0
 80096b6:	ea02 0400 	and.w	r4, r2, r0
 80096ba:	ea03 0501 	and.w	r5, r3, r1
 80096be:	4620      	mov	r0, r4
 80096c0:	4629      	mov	r1, r5
 80096c2:	f04f 0200 	mov.w	r2, #0
 80096c6:	f04f 0300 	mov.w	r3, #0
 80096ca:	014b      	lsls	r3, r1, #5
 80096cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80096d0:	0142      	lsls	r2, r0, #5
 80096d2:	4610      	mov	r0, r2
 80096d4:	4619      	mov	r1, r3
 80096d6:	1b00      	subs	r0, r0, r4
 80096d8:	eb61 0105 	sbc.w	r1, r1, r5
 80096dc:	f04f 0200 	mov.w	r2, #0
 80096e0:	f04f 0300 	mov.w	r3, #0
 80096e4:	018b      	lsls	r3, r1, #6
 80096e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80096ea:	0182      	lsls	r2, r0, #6
 80096ec:	1a12      	subs	r2, r2, r0
 80096ee:	eb63 0301 	sbc.w	r3, r3, r1
 80096f2:	f04f 0000 	mov.w	r0, #0
 80096f6:	f04f 0100 	mov.w	r1, #0
 80096fa:	00d9      	lsls	r1, r3, #3
 80096fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009700:	00d0      	lsls	r0, r2, #3
 8009702:	4602      	mov	r2, r0
 8009704:	460b      	mov	r3, r1
 8009706:	1912      	adds	r2, r2, r4
 8009708:	eb45 0303 	adc.w	r3, r5, r3
 800970c:	f04f 0000 	mov.w	r0, #0
 8009710:	f04f 0100 	mov.w	r1, #0
 8009714:	0299      	lsls	r1, r3, #10
 8009716:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800971a:	0290      	lsls	r0, r2, #10
 800971c:	4602      	mov	r2, r0
 800971e:	460b      	mov	r3, r1
 8009720:	4610      	mov	r0, r2
 8009722:	4619      	mov	r1, r3
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	461a      	mov	r2, r3
 8009728:	f04f 0300 	mov.w	r3, #0
 800972c:	f7f7 fc7e 	bl	800102c <__aeabi_uldivmod>
 8009730:	4602      	mov	r2, r0
 8009732:	460b      	mov	r3, r1
 8009734:	4613      	mov	r3, r2
 8009736:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009738:	4b0a      	ldr	r3, [pc, #40]	; (8009764 <HAL_RCC_GetSysClockFreq+0x160>)
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	0c1b      	lsrs	r3, r3, #16
 800973e:	f003 0303 	and.w	r3, r3, #3
 8009742:	3301      	adds	r3, #1
 8009744:	005b      	lsls	r3, r3, #1
 8009746:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009750:	60bb      	str	r3, [r7, #8]
      break;
 8009752:	e002      	b.n	800975a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009754:	4b04      	ldr	r3, [pc, #16]	; (8009768 <HAL_RCC_GetSysClockFreq+0x164>)
 8009756:	60bb      	str	r3, [r7, #8]
      break;
 8009758:	bf00      	nop
    }
  }
  return sysclockfreq;
 800975a:	68bb      	ldr	r3, [r7, #8]
}
 800975c:	4618      	mov	r0, r3
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bdb0      	pop	{r4, r5, r7, pc}
 8009764:	40023800 	.word	0x40023800
 8009768:	00f42400 	.word	0x00f42400
 800976c:	017d7840 	.word	0x017d7840

08009770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009770:	b480      	push	{r7}
 8009772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009774:	4b02      	ldr	r3, [pc, #8]	; (8009780 <HAL_RCC_GetHCLKFreq+0x10>)
 8009776:	681b      	ldr	r3, [r3, #0]
}
 8009778:	4618      	mov	r0, r3
 800977a:	46bd      	mov	sp, r7
 800977c:	bc80      	pop	{r7}
 800977e:	4770      	bx	lr
 8009780:	20000050 	.word	0x20000050

08009784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800978a:	f7ff fff1 	bl	8009770 <HAL_RCC_GetHCLKFreq>
 800978e:	4601      	mov	r1, r0
 8009790:	4b0b      	ldr	r3, [pc, #44]	; (80097c0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8009798:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800979c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	fa92 f2a2 	rbit	r2, r2
 80097a4:	603a      	str	r2, [r7, #0]
  return result;
 80097a6:	683a      	ldr	r2, [r7, #0]
 80097a8:	fab2 f282 	clz	r2, r2
 80097ac:	b2d2      	uxtb	r2, r2
 80097ae:	40d3      	lsrs	r3, r2
 80097b0:	4a04      	ldr	r2, [pc, #16]	; (80097c4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80097b2:	5cd3      	ldrb	r3, [r2, r3]
 80097b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3708      	adds	r7, #8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	40023800 	.word	0x40023800
 80097c4:	08016b28 	.word	0x08016b28

080097c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80097ce:	f7ff ffcf 	bl	8009770 <HAL_RCC_GetHCLKFreq>
 80097d2:	4601      	mov	r1, r0
 80097d4:	4b0b      	ldr	r3, [pc, #44]	; (8009804 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80097dc:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80097e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	fa92 f2a2 	rbit	r2, r2
 80097e8:	603a      	str	r2, [r7, #0]
  return result;
 80097ea:	683a      	ldr	r2, [r7, #0]
 80097ec:	fab2 f282 	clz	r2, r2
 80097f0:	b2d2      	uxtb	r2, r2
 80097f2:	40d3      	lsrs	r3, r2
 80097f4:	4a04      	ldr	r2, [pc, #16]	; (8009808 <HAL_RCC_GetPCLK2Freq+0x40>)
 80097f6:	5cd3      	ldrb	r3, [r2, r3]
 80097f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3708      	adds	r7, #8
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	40023800 	.word	0x40023800
 8009808:	08016b28 	.word	0x08016b28

0800980c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d101      	bne.n	800981e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	e03f      	b.n	800989e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009824:	b2db      	uxtb	r3, r3
 8009826:	2b00      	cmp	r3, #0
 8009828:	d106      	bne.n	8009838 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f7fb fb98 	bl	8004f68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2224      	movs	r2, #36	; 0x24
 800983c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	68da      	ldr	r2, [r3, #12]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800984e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 f905 	bl	8009a60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	691a      	ldr	r2, [r3, #16]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009864:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	695a      	ldr	r2, [r3, #20]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009874:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68da      	ldr	r2, [r3, #12]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009884:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2220      	movs	r2, #32
 8009890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2220      	movs	r2, #32
 8009898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3708      	adds	r7, #8
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b08a      	sub	sp, #40	; 0x28
 80098aa:	af02      	add	r7, sp, #8
 80098ac:	60f8      	str	r0, [r7, #12]
 80098ae:	60b9      	str	r1, [r7, #8]
 80098b0:	603b      	str	r3, [r7, #0]
 80098b2:	4613      	mov	r3, r2
 80098b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80098b6:	2300      	movs	r3, #0
 80098b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	2b20      	cmp	r3, #32
 80098c4:	d17c      	bne.n	80099c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d002      	beq.n	80098d2 <HAL_UART_Transmit+0x2c>
 80098cc:	88fb      	ldrh	r3, [r7, #6]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d101      	bne.n	80098d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	e075      	b.n	80099c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d101      	bne.n	80098e4 <HAL_UART_Transmit+0x3e>
 80098e0:	2302      	movs	r3, #2
 80098e2:	e06e      	b.n	80099c2 <HAL_UART_Transmit+0x11c>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2200      	movs	r2, #0
 80098f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2221      	movs	r2, #33	; 0x21
 80098f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80098fa:	f7fd fc57 	bl	80071ac <HAL_GetTick>
 80098fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	88fa      	ldrh	r2, [r7, #6]
 8009904:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	88fa      	ldrh	r2, [r7, #6]
 800990a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009914:	d108      	bne.n	8009928 <HAL_UART_Transmit+0x82>
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	691b      	ldr	r3, [r3, #16]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d104      	bne.n	8009928 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800991e:	2300      	movs	r3, #0
 8009920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	61bb      	str	r3, [r7, #24]
 8009926:	e003      	b.n	8009930 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800992c:	2300      	movs	r3, #0
 800992e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009938:	e02a      	b.n	8009990 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	2200      	movs	r2, #0
 8009942:	2180      	movs	r1, #128	; 0x80
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f000 f840 	bl	80099ca <UART_WaitOnFlagUntilTimeout>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d001      	beq.n	8009954 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009950:	2303      	movs	r3, #3
 8009952:	e036      	b.n	80099c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10b      	bne.n	8009972 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	881b      	ldrh	r3, [r3, #0]
 800995e:	461a      	mov	r2, r3
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009968:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	3302      	adds	r3, #2
 800996e:	61bb      	str	r3, [r7, #24]
 8009970:	e007      	b.n	8009982 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	781a      	ldrb	r2, [r3, #0]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	3301      	adds	r3, #1
 8009980:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009986:	b29b      	uxth	r3, r3
 8009988:	3b01      	subs	r3, #1
 800998a:	b29a      	uxth	r2, r3
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009994:	b29b      	uxth	r3, r3
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1cf      	bne.n	800993a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	9300      	str	r3, [sp, #0]
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	2200      	movs	r2, #0
 80099a2:	2140      	movs	r1, #64	; 0x40
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f000 f810 	bl	80099ca <UART_WaitOnFlagUntilTimeout>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d001      	beq.n	80099b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80099b0:	2303      	movs	r3, #3
 80099b2:	e006      	b.n	80099c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2220      	movs	r2, #32
 80099b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80099bc:	2300      	movs	r3, #0
 80099be:	e000      	b.n	80099c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80099c0:	2302      	movs	r3, #2
  }
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3720      	adds	r7, #32
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}

080099ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b084      	sub	sp, #16
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	60f8      	str	r0, [r7, #12]
 80099d2:	60b9      	str	r1, [r7, #8]
 80099d4:	603b      	str	r3, [r7, #0]
 80099d6:	4613      	mov	r3, r2
 80099d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099da:	e02c      	b.n	8009a36 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099dc:	69bb      	ldr	r3, [r7, #24]
 80099de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e2:	d028      	beq.n	8009a36 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d007      	beq.n	80099fa <UART_WaitOnFlagUntilTimeout+0x30>
 80099ea:	f7fd fbdf 	bl	80071ac <HAL_GetTick>
 80099ee:	4602      	mov	r2, r0
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	1ad3      	subs	r3, r2, r3
 80099f4:	69ba      	ldr	r2, [r7, #24]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d21d      	bcs.n	8009a36 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	68da      	ldr	r2, [r3, #12]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009a08:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	695a      	ldr	r2, [r3, #20]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f022 0201 	bic.w	r2, r2, #1
 8009a18:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2220      	movs	r2, #32
 8009a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2220      	movs	r2, #32
 8009a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009a32:	2303      	movs	r3, #3
 8009a34:	e00f      	b.n	8009a56 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	4013      	ands	r3, r2
 8009a40:	68ba      	ldr	r2, [r7, #8]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	bf0c      	ite	eq
 8009a46:	2301      	moveq	r3, #1
 8009a48:	2300      	movne	r3, #0
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	79fb      	ldrb	r3, [r7, #7]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d0c3      	beq.n	80099dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
	...

08009a60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	68da      	ldr	r2, [r3, #12]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	430a      	orrs	r2, r1
 8009a7c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	689a      	ldr	r2, [r3, #8]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	691b      	ldr	r3, [r3, #16]
 8009a86:	431a      	orrs	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	695b      	ldr	r3, [r3, #20]
 8009a8c:	431a      	orrs	r2, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	69db      	ldr	r3, [r3, #28]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009aa0:	f023 030c 	bic.w	r3, r3, #12
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	6812      	ldr	r2, [r2, #0]
 8009aa8:	68b9      	ldr	r1, [r7, #8]
 8009aaa:	430b      	orrs	r3, r1
 8009aac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	695b      	ldr	r3, [r3, #20]
 8009ab4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	699a      	ldr	r2, [r3, #24]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	430a      	orrs	r2, r1
 8009ac2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a57      	ldr	r2, [pc, #348]	; (8009c28 <UART_SetConfig+0x1c8>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d004      	beq.n	8009ad8 <UART_SetConfig+0x78>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a56      	ldr	r2, [pc, #344]	; (8009c2c <UART_SetConfig+0x1cc>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d103      	bne.n	8009ae0 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009ad8:	f7ff fe76 	bl	80097c8 <HAL_RCC_GetPCLK2Freq>
 8009adc:	60f8      	str	r0, [r7, #12]
 8009ade:	e002      	b.n	8009ae6 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009ae0:	f7ff fe50 	bl	8009784 <HAL_RCC_GetPCLK1Freq>
 8009ae4:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	69db      	ldr	r3, [r3, #28]
 8009aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009aee:	d14c      	bne.n	8009b8a <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	4613      	mov	r3, r2
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	4413      	add	r3, r2
 8009af8:	009a      	lsls	r2, r3, #2
 8009afa:	441a      	add	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	005b      	lsls	r3, r3, #1
 8009b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b06:	4a4a      	ldr	r2, [pc, #296]	; (8009c30 <UART_SetConfig+0x1d0>)
 8009b08:	fba2 2303 	umull	r2, r3, r2, r3
 8009b0c:	095b      	lsrs	r3, r3, #5
 8009b0e:	0119      	lsls	r1, r3, #4
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	4613      	mov	r3, r2
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	4413      	add	r3, r2
 8009b18:	009a      	lsls	r2, r3, #2
 8009b1a:	441a      	add	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	005b      	lsls	r3, r3, #1
 8009b22:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b26:	4b42      	ldr	r3, [pc, #264]	; (8009c30 <UART_SetConfig+0x1d0>)
 8009b28:	fba3 0302 	umull	r0, r3, r3, r2
 8009b2c:	095b      	lsrs	r3, r3, #5
 8009b2e:	2064      	movs	r0, #100	; 0x64
 8009b30:	fb00 f303 	mul.w	r3, r0, r3
 8009b34:	1ad3      	subs	r3, r2, r3
 8009b36:	00db      	lsls	r3, r3, #3
 8009b38:	3332      	adds	r3, #50	; 0x32
 8009b3a:	4a3d      	ldr	r2, [pc, #244]	; (8009c30 <UART_SetConfig+0x1d0>)
 8009b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8009b40:	095b      	lsrs	r3, r3, #5
 8009b42:	005b      	lsls	r3, r3, #1
 8009b44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009b48:	4419      	add	r1, r3
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	4413      	add	r3, r2
 8009b52:	009a      	lsls	r2, r3, #2
 8009b54:	441a      	add	r2, r3
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	005b      	lsls	r3, r3, #1
 8009b5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b60:	4b33      	ldr	r3, [pc, #204]	; (8009c30 <UART_SetConfig+0x1d0>)
 8009b62:	fba3 0302 	umull	r0, r3, r3, r2
 8009b66:	095b      	lsrs	r3, r3, #5
 8009b68:	2064      	movs	r0, #100	; 0x64
 8009b6a:	fb00 f303 	mul.w	r3, r0, r3
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	00db      	lsls	r3, r3, #3
 8009b72:	3332      	adds	r3, #50	; 0x32
 8009b74:	4a2e      	ldr	r2, [pc, #184]	; (8009c30 <UART_SetConfig+0x1d0>)
 8009b76:	fba2 2303 	umull	r2, r3, r2, r3
 8009b7a:	095b      	lsrs	r3, r3, #5
 8009b7c:	f003 0207 	and.w	r2, r3, #7
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	440a      	add	r2, r1
 8009b86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009b88:	e04a      	b.n	8009c20 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	009b      	lsls	r3, r3, #2
 8009b90:	4413      	add	r3, r2
 8009b92:	009a      	lsls	r2, r3, #2
 8009b94:	441a      	add	r2, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ba0:	4a23      	ldr	r2, [pc, #140]	; (8009c30 <UART_SetConfig+0x1d0>)
 8009ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ba6:	095b      	lsrs	r3, r3, #5
 8009ba8:	0119      	lsls	r1, r3, #4
 8009baa:	68fa      	ldr	r2, [r7, #12]
 8009bac:	4613      	mov	r3, r2
 8009bae:	009b      	lsls	r3, r3, #2
 8009bb0:	4413      	add	r3, r2
 8009bb2:	009a      	lsls	r2, r3, #2
 8009bb4:	441a      	add	r2, r3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8009bc0:	4b1b      	ldr	r3, [pc, #108]	; (8009c30 <UART_SetConfig+0x1d0>)
 8009bc2:	fba3 0302 	umull	r0, r3, r3, r2
 8009bc6:	095b      	lsrs	r3, r3, #5
 8009bc8:	2064      	movs	r0, #100	; 0x64
 8009bca:	fb00 f303 	mul.w	r3, r0, r3
 8009bce:	1ad3      	subs	r3, r2, r3
 8009bd0:	011b      	lsls	r3, r3, #4
 8009bd2:	3332      	adds	r3, #50	; 0x32
 8009bd4:	4a16      	ldr	r2, [pc, #88]	; (8009c30 <UART_SetConfig+0x1d0>)
 8009bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bda:	095b      	lsrs	r3, r3, #5
 8009bdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009be0:	4419      	add	r1, r3
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	4613      	mov	r3, r2
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	4413      	add	r3, r2
 8009bea:	009a      	lsls	r2, r3, #2
 8009bec:	441a      	add	r2, r3
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8009bf8:	4b0d      	ldr	r3, [pc, #52]	; (8009c30 <UART_SetConfig+0x1d0>)
 8009bfa:	fba3 0302 	umull	r0, r3, r3, r2
 8009bfe:	095b      	lsrs	r3, r3, #5
 8009c00:	2064      	movs	r0, #100	; 0x64
 8009c02:	fb00 f303 	mul.w	r3, r0, r3
 8009c06:	1ad3      	subs	r3, r2, r3
 8009c08:	011b      	lsls	r3, r3, #4
 8009c0a:	3332      	adds	r3, #50	; 0x32
 8009c0c:	4a08      	ldr	r2, [pc, #32]	; (8009c30 <UART_SetConfig+0x1d0>)
 8009c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c12:	095b      	lsrs	r3, r3, #5
 8009c14:	f003 020f 	and.w	r2, r3, #15
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	440a      	add	r2, r1
 8009c1e:	609a      	str	r2, [r3, #8]
}
 8009c20:	bf00      	nop
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	40011000 	.word	0x40011000
 8009c2c:	40011400 	.word	0x40011400
 8009c30:	51eb851f 	.word	0x51eb851f

08009c34 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8009c3a:	4b8d      	ldr	r3, [pc, #564]	; (8009e70 <MX_LWIP_Init+0x23c>)
 8009c3c:	220a      	movs	r2, #10
 8009c3e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 10;
 8009c40:	4b8b      	ldr	r3, [pc, #556]	; (8009e70 <MX_LWIP_Init+0x23c>)
 8009c42:	220a      	movs	r2, #10
 8009c44:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 10;
 8009c46:	4b8a      	ldr	r3, [pc, #552]	; (8009e70 <MX_LWIP_Init+0x23c>)
 8009c48:	220a      	movs	r2, #10
 8009c4a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8009c4c:	4b88      	ldr	r3, [pc, #544]	; (8009e70 <MX_LWIP_Init+0x23c>)
 8009c4e:	220a      	movs	r2, #10
 8009c50:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8009c52:	4b88      	ldr	r3, [pc, #544]	; (8009e74 <MX_LWIP_Init+0x240>)
 8009c54:	22ff      	movs	r2, #255	; 0xff
 8009c56:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009c58:	4b86      	ldr	r3, [pc, #536]	; (8009e74 <MX_LWIP_Init+0x240>)
 8009c5a:	22ff      	movs	r2, #255	; 0xff
 8009c5c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8009c5e:	4b85      	ldr	r3, [pc, #532]	; (8009e74 <MX_LWIP_Init+0x240>)
 8009c60:	22ff      	movs	r2, #255	; 0xff
 8009c62:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009c64:	4b83      	ldr	r3, [pc, #524]	; (8009e74 <MX_LWIP_Init+0x240>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8009c6a:	4b83      	ldr	r3, [pc, #524]	; (8009e78 <MX_LWIP_Init+0x244>)
 8009c6c:	220a      	movs	r2, #10
 8009c6e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 10;
 8009c70:	4b81      	ldr	r3, [pc, #516]	; (8009e78 <MX_LWIP_Init+0x244>)
 8009c72:	220a      	movs	r2, #10
 8009c74:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8009c76:	4b80      	ldr	r3, [pc, #512]	; (8009e78 <MX_LWIP_Init+0x244>)
 8009c78:	2200      	movs	r2, #0
 8009c7a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8009c7c:	4b7e      	ldr	r3, [pc, #504]	; (8009e78 <MX_LWIP_Init+0x244>)
 8009c7e:	2201      	movs	r2, #1
 8009c80:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8009c82:	f000 fcad 	bl	800a5e0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009c86:	4b7a      	ldr	r3, [pc, #488]	; (8009e70 <MX_LWIP_Init+0x23c>)
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	061a      	lsls	r2, r3, #24
 8009c8c:	4b78      	ldr	r3, [pc, #480]	; (8009e70 <MX_LWIP_Init+0x23c>)
 8009c8e:	785b      	ldrb	r3, [r3, #1]
 8009c90:	041b      	lsls	r3, r3, #16
 8009c92:	431a      	orrs	r2, r3
 8009c94:	4b76      	ldr	r3, [pc, #472]	; (8009e70 <MX_LWIP_Init+0x23c>)
 8009c96:	789b      	ldrb	r3, [r3, #2]
 8009c98:	021b      	lsls	r3, r3, #8
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	4a74      	ldr	r2, [pc, #464]	; (8009e70 <MX_LWIP_Init+0x23c>)
 8009c9e:	78d2      	ldrb	r2, [r2, #3]
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	061a      	lsls	r2, r3, #24
 8009ca4:	4b72      	ldr	r3, [pc, #456]	; (8009e70 <MX_LWIP_Init+0x23c>)
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	0619      	lsls	r1, r3, #24
 8009caa:	4b71      	ldr	r3, [pc, #452]	; (8009e70 <MX_LWIP_Init+0x23c>)
 8009cac:	785b      	ldrb	r3, [r3, #1]
 8009cae:	041b      	lsls	r3, r3, #16
 8009cb0:	4319      	orrs	r1, r3
 8009cb2:	4b6f      	ldr	r3, [pc, #444]	; (8009e70 <MX_LWIP_Init+0x23c>)
 8009cb4:	789b      	ldrb	r3, [r3, #2]
 8009cb6:	021b      	lsls	r3, r3, #8
 8009cb8:	430b      	orrs	r3, r1
 8009cba:	496d      	ldr	r1, [pc, #436]	; (8009e70 <MX_LWIP_Init+0x23c>)
 8009cbc:	78c9      	ldrb	r1, [r1, #3]
 8009cbe:	430b      	orrs	r3, r1
 8009cc0:	021b      	lsls	r3, r3, #8
 8009cc2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009cc6:	431a      	orrs	r2, r3
 8009cc8:	4b69      	ldr	r3, [pc, #420]	; (8009e70 <MX_LWIP_Init+0x23c>)
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	0619      	lsls	r1, r3, #24
 8009cce:	4b68      	ldr	r3, [pc, #416]	; (8009e70 <MX_LWIP_Init+0x23c>)
 8009cd0:	785b      	ldrb	r3, [r3, #1]
 8009cd2:	041b      	lsls	r3, r3, #16
 8009cd4:	4319      	orrs	r1, r3
 8009cd6:	4b66      	ldr	r3, [pc, #408]	; (8009e70 <MX_LWIP_Init+0x23c>)
 8009cd8:	789b      	ldrb	r3, [r3, #2]
 8009cda:	021b      	lsls	r3, r3, #8
 8009cdc:	430b      	orrs	r3, r1
 8009cde:	4964      	ldr	r1, [pc, #400]	; (8009e70 <MX_LWIP_Init+0x23c>)
 8009ce0:	78c9      	ldrb	r1, [r1, #3]
 8009ce2:	430b      	orrs	r3, r1
 8009ce4:	0a1b      	lsrs	r3, r3, #8
 8009ce6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009cea:	431a      	orrs	r2, r3
 8009cec:	4b60      	ldr	r3, [pc, #384]	; (8009e70 <MX_LWIP_Init+0x23c>)
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	0619      	lsls	r1, r3, #24
 8009cf2:	4b5f      	ldr	r3, [pc, #380]	; (8009e70 <MX_LWIP_Init+0x23c>)
 8009cf4:	785b      	ldrb	r3, [r3, #1]
 8009cf6:	041b      	lsls	r3, r3, #16
 8009cf8:	4319      	orrs	r1, r3
 8009cfa:	4b5d      	ldr	r3, [pc, #372]	; (8009e70 <MX_LWIP_Init+0x23c>)
 8009cfc:	789b      	ldrb	r3, [r3, #2]
 8009cfe:	021b      	lsls	r3, r3, #8
 8009d00:	430b      	orrs	r3, r1
 8009d02:	495b      	ldr	r1, [pc, #364]	; (8009e70 <MX_LWIP_Init+0x23c>)
 8009d04:	78c9      	ldrb	r1, [r1, #3]
 8009d06:	430b      	orrs	r3, r1
 8009d08:	0e1b      	lsrs	r3, r3, #24
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	4a5b      	ldr	r2, [pc, #364]	; (8009e7c <MX_LWIP_Init+0x248>)
 8009d0e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009d10:	4b58      	ldr	r3, [pc, #352]	; (8009e74 <MX_LWIP_Init+0x240>)
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	061a      	lsls	r2, r3, #24
 8009d16:	4b57      	ldr	r3, [pc, #348]	; (8009e74 <MX_LWIP_Init+0x240>)
 8009d18:	785b      	ldrb	r3, [r3, #1]
 8009d1a:	041b      	lsls	r3, r3, #16
 8009d1c:	431a      	orrs	r2, r3
 8009d1e:	4b55      	ldr	r3, [pc, #340]	; (8009e74 <MX_LWIP_Init+0x240>)
 8009d20:	789b      	ldrb	r3, [r3, #2]
 8009d22:	021b      	lsls	r3, r3, #8
 8009d24:	4313      	orrs	r3, r2
 8009d26:	4a53      	ldr	r2, [pc, #332]	; (8009e74 <MX_LWIP_Init+0x240>)
 8009d28:	78d2      	ldrb	r2, [r2, #3]
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	061a      	lsls	r2, r3, #24
 8009d2e:	4b51      	ldr	r3, [pc, #324]	; (8009e74 <MX_LWIP_Init+0x240>)
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	0619      	lsls	r1, r3, #24
 8009d34:	4b4f      	ldr	r3, [pc, #316]	; (8009e74 <MX_LWIP_Init+0x240>)
 8009d36:	785b      	ldrb	r3, [r3, #1]
 8009d38:	041b      	lsls	r3, r3, #16
 8009d3a:	4319      	orrs	r1, r3
 8009d3c:	4b4d      	ldr	r3, [pc, #308]	; (8009e74 <MX_LWIP_Init+0x240>)
 8009d3e:	789b      	ldrb	r3, [r3, #2]
 8009d40:	021b      	lsls	r3, r3, #8
 8009d42:	430b      	orrs	r3, r1
 8009d44:	494b      	ldr	r1, [pc, #300]	; (8009e74 <MX_LWIP_Init+0x240>)
 8009d46:	78c9      	ldrb	r1, [r1, #3]
 8009d48:	430b      	orrs	r3, r1
 8009d4a:	021b      	lsls	r3, r3, #8
 8009d4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d50:	431a      	orrs	r2, r3
 8009d52:	4b48      	ldr	r3, [pc, #288]	; (8009e74 <MX_LWIP_Init+0x240>)
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	0619      	lsls	r1, r3, #24
 8009d58:	4b46      	ldr	r3, [pc, #280]	; (8009e74 <MX_LWIP_Init+0x240>)
 8009d5a:	785b      	ldrb	r3, [r3, #1]
 8009d5c:	041b      	lsls	r3, r3, #16
 8009d5e:	4319      	orrs	r1, r3
 8009d60:	4b44      	ldr	r3, [pc, #272]	; (8009e74 <MX_LWIP_Init+0x240>)
 8009d62:	789b      	ldrb	r3, [r3, #2]
 8009d64:	021b      	lsls	r3, r3, #8
 8009d66:	430b      	orrs	r3, r1
 8009d68:	4942      	ldr	r1, [pc, #264]	; (8009e74 <MX_LWIP_Init+0x240>)
 8009d6a:	78c9      	ldrb	r1, [r1, #3]
 8009d6c:	430b      	orrs	r3, r1
 8009d6e:	0a1b      	lsrs	r3, r3, #8
 8009d70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009d74:	431a      	orrs	r2, r3
 8009d76:	4b3f      	ldr	r3, [pc, #252]	; (8009e74 <MX_LWIP_Init+0x240>)
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	0619      	lsls	r1, r3, #24
 8009d7c:	4b3d      	ldr	r3, [pc, #244]	; (8009e74 <MX_LWIP_Init+0x240>)
 8009d7e:	785b      	ldrb	r3, [r3, #1]
 8009d80:	041b      	lsls	r3, r3, #16
 8009d82:	4319      	orrs	r1, r3
 8009d84:	4b3b      	ldr	r3, [pc, #236]	; (8009e74 <MX_LWIP_Init+0x240>)
 8009d86:	789b      	ldrb	r3, [r3, #2]
 8009d88:	021b      	lsls	r3, r3, #8
 8009d8a:	430b      	orrs	r3, r1
 8009d8c:	4939      	ldr	r1, [pc, #228]	; (8009e74 <MX_LWIP_Init+0x240>)
 8009d8e:	78c9      	ldrb	r1, [r1, #3]
 8009d90:	430b      	orrs	r3, r1
 8009d92:	0e1b      	lsrs	r3, r3, #24
 8009d94:	4313      	orrs	r3, r2
 8009d96:	4a3a      	ldr	r2, [pc, #232]	; (8009e80 <MX_LWIP_Init+0x24c>)
 8009d98:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009d9a:	4b37      	ldr	r3, [pc, #220]	; (8009e78 <MX_LWIP_Init+0x244>)
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	061a      	lsls	r2, r3, #24
 8009da0:	4b35      	ldr	r3, [pc, #212]	; (8009e78 <MX_LWIP_Init+0x244>)
 8009da2:	785b      	ldrb	r3, [r3, #1]
 8009da4:	041b      	lsls	r3, r3, #16
 8009da6:	431a      	orrs	r2, r3
 8009da8:	4b33      	ldr	r3, [pc, #204]	; (8009e78 <MX_LWIP_Init+0x244>)
 8009daa:	789b      	ldrb	r3, [r3, #2]
 8009dac:	021b      	lsls	r3, r3, #8
 8009dae:	4313      	orrs	r3, r2
 8009db0:	4a31      	ldr	r2, [pc, #196]	; (8009e78 <MX_LWIP_Init+0x244>)
 8009db2:	78d2      	ldrb	r2, [r2, #3]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	061a      	lsls	r2, r3, #24
 8009db8:	4b2f      	ldr	r3, [pc, #188]	; (8009e78 <MX_LWIP_Init+0x244>)
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	0619      	lsls	r1, r3, #24
 8009dbe:	4b2e      	ldr	r3, [pc, #184]	; (8009e78 <MX_LWIP_Init+0x244>)
 8009dc0:	785b      	ldrb	r3, [r3, #1]
 8009dc2:	041b      	lsls	r3, r3, #16
 8009dc4:	4319      	orrs	r1, r3
 8009dc6:	4b2c      	ldr	r3, [pc, #176]	; (8009e78 <MX_LWIP_Init+0x244>)
 8009dc8:	789b      	ldrb	r3, [r3, #2]
 8009dca:	021b      	lsls	r3, r3, #8
 8009dcc:	430b      	orrs	r3, r1
 8009dce:	492a      	ldr	r1, [pc, #168]	; (8009e78 <MX_LWIP_Init+0x244>)
 8009dd0:	78c9      	ldrb	r1, [r1, #3]
 8009dd2:	430b      	orrs	r3, r1
 8009dd4:	021b      	lsls	r3, r3, #8
 8009dd6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009dda:	431a      	orrs	r2, r3
 8009ddc:	4b26      	ldr	r3, [pc, #152]	; (8009e78 <MX_LWIP_Init+0x244>)
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	0619      	lsls	r1, r3, #24
 8009de2:	4b25      	ldr	r3, [pc, #148]	; (8009e78 <MX_LWIP_Init+0x244>)
 8009de4:	785b      	ldrb	r3, [r3, #1]
 8009de6:	041b      	lsls	r3, r3, #16
 8009de8:	4319      	orrs	r1, r3
 8009dea:	4b23      	ldr	r3, [pc, #140]	; (8009e78 <MX_LWIP_Init+0x244>)
 8009dec:	789b      	ldrb	r3, [r3, #2]
 8009dee:	021b      	lsls	r3, r3, #8
 8009df0:	430b      	orrs	r3, r1
 8009df2:	4921      	ldr	r1, [pc, #132]	; (8009e78 <MX_LWIP_Init+0x244>)
 8009df4:	78c9      	ldrb	r1, [r1, #3]
 8009df6:	430b      	orrs	r3, r1
 8009df8:	0a1b      	lsrs	r3, r3, #8
 8009dfa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009dfe:	431a      	orrs	r2, r3
 8009e00:	4b1d      	ldr	r3, [pc, #116]	; (8009e78 <MX_LWIP_Init+0x244>)
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	0619      	lsls	r1, r3, #24
 8009e06:	4b1c      	ldr	r3, [pc, #112]	; (8009e78 <MX_LWIP_Init+0x244>)
 8009e08:	785b      	ldrb	r3, [r3, #1]
 8009e0a:	041b      	lsls	r3, r3, #16
 8009e0c:	4319      	orrs	r1, r3
 8009e0e:	4b1a      	ldr	r3, [pc, #104]	; (8009e78 <MX_LWIP_Init+0x244>)
 8009e10:	789b      	ldrb	r3, [r3, #2]
 8009e12:	021b      	lsls	r3, r3, #8
 8009e14:	430b      	orrs	r3, r1
 8009e16:	4918      	ldr	r1, [pc, #96]	; (8009e78 <MX_LWIP_Init+0x244>)
 8009e18:	78c9      	ldrb	r1, [r1, #3]
 8009e1a:	430b      	orrs	r3, r1
 8009e1c:	0e1b      	lsrs	r3, r3, #24
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	4a18      	ldr	r2, [pc, #96]	; (8009e84 <MX_LWIP_Init+0x250>)
 8009e22:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8009e24:	4b18      	ldr	r3, [pc, #96]	; (8009e88 <MX_LWIP_Init+0x254>)
 8009e26:	9302      	str	r3, [sp, #8]
 8009e28:	4b18      	ldr	r3, [pc, #96]	; (8009e8c <MX_LWIP_Init+0x258>)
 8009e2a:	9301      	str	r3, [sp, #4]
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	9300      	str	r3, [sp, #0]
 8009e30:	4b14      	ldr	r3, [pc, #80]	; (8009e84 <MX_LWIP_Init+0x250>)
 8009e32:	4a13      	ldr	r2, [pc, #76]	; (8009e80 <MX_LWIP_Init+0x24c>)
 8009e34:	4911      	ldr	r1, [pc, #68]	; (8009e7c <MX_LWIP_Init+0x248>)
 8009e36:	4816      	ldr	r0, [pc, #88]	; (8009e90 <MX_LWIP_Init+0x25c>)
 8009e38:	f000 ffd2 	bl	800ade0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009e3c:	4814      	ldr	r0, [pc, #80]	; (8009e90 <MX_LWIP_Init+0x25c>)
 8009e3e:	f001 f8b1 	bl	800afa4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009e42:	4b13      	ldr	r3, [pc, #76]	; (8009e90 <MX_LWIP_Init+0x25c>)
 8009e44:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009e48:	089b      	lsrs	r3, r3, #2
 8009e4a:	f003 0301 	and.w	r3, r3, #1
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d003      	beq.n	8009e5c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009e54:	480e      	ldr	r0, [pc, #56]	; (8009e90 <MX_LWIP_Init+0x25c>)
 8009e56:	f001 f8b3 	bl	800afc0 <netif_set_up>
 8009e5a:	e002      	b.n	8009e62 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8009e5c:	480c      	ldr	r0, [pc, #48]	; (8009e90 <MX_LWIP_Init+0x25c>)
 8009e5e:	f001 f8f3 	bl	800b048 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8009e62:	490c      	ldr	r1, [pc, #48]	; (8009e94 <MX_LWIP_Init+0x260>)
 8009e64:	480a      	ldr	r0, [pc, #40]	; (8009e90 <MX_LWIP_Init+0x25c>)
 8009e66:	f001 f911 	bl	800b08c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009e6a:	bf00      	nop
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	20000678 	.word	0x20000678
 8009e74:	20000674 	.word	0x20000674
 8009e78:	2000066c 	.word	0x2000066c
 8009e7c:	20000670 	.word	0x20000670
 8009e80:	2000067c 	.word	0x2000067c
 8009e84:	20000680 	.word	0x20000680
 8009e88:	0801316d 	.word	0x0801316d
 8009e8c:	0800a421 	.word	0x0800a421
 8009e90:	2000013c 	.word	0x2000013c
 8009e94:	0800a48d 	.word	0x0800a48d

08009e98 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b08e      	sub	sp, #56	; 0x38
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	601a      	str	r2, [r3, #0]
 8009ea8:	605a      	str	r2, [r3, #4]
 8009eaa:	609a      	str	r2, [r3, #8]
 8009eac:	60da      	str	r2, [r3, #12]
 8009eae:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a46      	ldr	r2, [pc, #280]	; (8009fd0 <HAL_ETH_MspInit+0x138>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	f040 8085 	bne.w	8009fc6 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	623b      	str	r3, [r7, #32]
 8009ec0:	4b44      	ldr	r3, [pc, #272]	; (8009fd4 <HAL_ETH_MspInit+0x13c>)
 8009ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec4:	4a43      	ldr	r2, [pc, #268]	; (8009fd4 <HAL_ETH_MspInit+0x13c>)
 8009ec6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009eca:	6313      	str	r3, [r2, #48]	; 0x30
 8009ecc:	4b41      	ldr	r3, [pc, #260]	; (8009fd4 <HAL_ETH_MspInit+0x13c>)
 8009ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ed4:	623b      	str	r3, [r7, #32]
 8009ed6:	6a3b      	ldr	r3, [r7, #32]
 8009ed8:	2300      	movs	r3, #0
 8009eda:	61fb      	str	r3, [r7, #28]
 8009edc:	4b3d      	ldr	r3, [pc, #244]	; (8009fd4 <HAL_ETH_MspInit+0x13c>)
 8009ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee0:	4a3c      	ldr	r2, [pc, #240]	; (8009fd4 <HAL_ETH_MspInit+0x13c>)
 8009ee2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8009ee8:	4b3a      	ldr	r3, [pc, #232]	; (8009fd4 <HAL_ETH_MspInit+0x13c>)
 8009eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ef0:	61fb      	str	r3, [r7, #28]
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	61bb      	str	r3, [r7, #24]
 8009ef8:	4b36      	ldr	r3, [pc, #216]	; (8009fd4 <HAL_ETH_MspInit+0x13c>)
 8009efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009efc:	4a35      	ldr	r2, [pc, #212]	; (8009fd4 <HAL_ETH_MspInit+0x13c>)
 8009efe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f02:	6313      	str	r3, [r2, #48]	; 0x30
 8009f04:	4b33      	ldr	r3, [pc, #204]	; (8009fd4 <HAL_ETH_MspInit+0x13c>)
 8009f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f0c:	61bb      	str	r3, [r7, #24]
 8009f0e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009f10:	2300      	movs	r3, #0
 8009f12:	617b      	str	r3, [r7, #20]
 8009f14:	4b2f      	ldr	r3, [pc, #188]	; (8009fd4 <HAL_ETH_MspInit+0x13c>)
 8009f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f18:	4a2e      	ldr	r2, [pc, #184]	; (8009fd4 <HAL_ETH_MspInit+0x13c>)
 8009f1a:	f043 0304 	orr.w	r3, r3, #4
 8009f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8009f20:	4b2c      	ldr	r3, [pc, #176]	; (8009fd4 <HAL_ETH_MspInit+0x13c>)
 8009f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f24:	f003 0304 	and.w	r3, r3, #4
 8009f28:	617b      	str	r3, [r7, #20]
 8009f2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	613b      	str	r3, [r7, #16]
 8009f30:	4b28      	ldr	r3, [pc, #160]	; (8009fd4 <HAL_ETH_MspInit+0x13c>)
 8009f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f34:	4a27      	ldr	r2, [pc, #156]	; (8009fd4 <HAL_ETH_MspInit+0x13c>)
 8009f36:	f043 0301 	orr.w	r3, r3, #1
 8009f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8009f3c:	4b25      	ldr	r3, [pc, #148]	; (8009fd4 <HAL_ETH_MspInit+0x13c>)
 8009f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f40:	f003 0301 	and.w	r3, r3, #1
 8009f44:	613b      	str	r3, [r7, #16]
 8009f46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009f48:	2300      	movs	r3, #0
 8009f4a:	60fb      	str	r3, [r7, #12]
 8009f4c:	4b21      	ldr	r3, [pc, #132]	; (8009fd4 <HAL_ETH_MspInit+0x13c>)
 8009f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f50:	4a20      	ldr	r2, [pc, #128]	; (8009fd4 <HAL_ETH_MspInit+0x13c>)
 8009f52:	f043 0302 	orr.w	r3, r3, #2
 8009f56:	6313      	str	r3, [r2, #48]	; 0x30
 8009f58:	4b1e      	ldr	r3, [pc, #120]	; (8009fd4 <HAL_ETH_MspInit+0x13c>)
 8009f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f5c:	f003 0302 	and.w	r3, r3, #2
 8009f60:	60fb      	str	r3, [r7, #12]
 8009f62:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009f64:	2332      	movs	r3, #50	; 0x32
 8009f66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f68:	2302      	movs	r3, #2
 8009f6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f70:	2303      	movs	r3, #3
 8009f72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009f74:	230b      	movs	r3, #11
 8009f76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	4816      	ldr	r0, [pc, #88]	; (8009fd8 <HAL_ETH_MspInit+0x140>)
 8009f80:	f7fe fdfc 	bl	8008b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009f84:	2386      	movs	r3, #134	; 0x86
 8009f86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f88:	2302      	movs	r3, #2
 8009f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f90:	2303      	movs	r3, #3
 8009f92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009f94:	230b      	movs	r3, #11
 8009f96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	480f      	ldr	r0, [pc, #60]	; (8009fdc <HAL_ETH_MspInit+0x144>)
 8009fa0:	f7fe fdec 	bl	8008b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8009fa4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009fa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009faa:	2302      	movs	r3, #2
 8009fac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009fb2:	2303      	movs	r3, #3
 8009fb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009fb6:	230b      	movs	r3, #11
 8009fb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	4807      	ldr	r0, [pc, #28]	; (8009fe0 <HAL_ETH_MspInit+0x148>)
 8009fc2:	f7fe fddb 	bl	8008b7c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009fc6:	bf00      	nop
 8009fc8:	3738      	adds	r7, #56	; 0x38
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	40028000 	.word	0x40028000
 8009fd4:	40023800 	.word	0x40023800
 8009fd8:	40020800 	.word	0x40020800
 8009fdc:	40020000 	.word	0x40020000
 8009fe0:	40020400 	.word	0x40020400

08009fe4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b086      	sub	sp, #24
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8009fec:	2300      	movs	r3, #0
 8009fee:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009ff0:	4b4d      	ldr	r3, [pc, #308]	; (800a128 <low_level_init+0x144>)
 8009ff2:	4a4e      	ldr	r2, [pc, #312]	; (800a12c <low_level_init+0x148>)
 8009ff4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8009ff6:	4b4c      	ldr	r3, [pc, #304]	; (800a128 <low_level_init+0x144>)
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8009ffc:	4b4a      	ldr	r3, [pc, #296]	; (800a128 <low_level_init+0x144>)
 8009ffe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a002:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800a004:	4b48      	ldr	r3, [pc, #288]	; (800a128 <low_level_init+0x144>)
 800a006:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a00a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800a00c:	4b46      	ldr	r3, [pc, #280]	; (800a128 <low_level_init+0x144>)
 800a00e:	2201      	movs	r2, #1
 800a010:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800a012:	2300      	movs	r3, #0
 800a014:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800a016:	2380      	movs	r3, #128	; 0x80
 800a018:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800a01a:	23e1      	movs	r3, #225	; 0xe1
 800a01c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800a01e:	2300      	movs	r3, #0
 800a020:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800a022:	2300      	movs	r3, #0
 800a024:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800a026:	2300      	movs	r3, #0
 800a028:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800a02a:	4a3f      	ldr	r2, [pc, #252]	; (800a128 <low_level_init+0x144>)
 800a02c:	f107 0308 	add.w	r3, r7, #8
 800a030:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800a032:	4b3d      	ldr	r3, [pc, #244]	; (800a128 <low_level_init+0x144>)
 800a034:	2200      	movs	r2, #0
 800a036:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800a038:	4b3b      	ldr	r3, [pc, #236]	; (800a128 <low_level_init+0x144>)
 800a03a:	2200      	movs	r2, #0
 800a03c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800a03e:	4b3a      	ldr	r3, [pc, #232]	; (800a128 <low_level_init+0x144>)
 800a040:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a044:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a046:	4838      	ldr	r0, [pc, #224]	; (800a128 <low_level_init+0x144>)
 800a048:	f7fd f9c2 	bl	80073d0 <HAL_ETH_Init>
 800a04c:	4603      	mov	r3, r0
 800a04e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800a050:	7dfb      	ldrb	r3, [r7, #23]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d108      	bne.n	800a068 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a05c:	f043 0304 	orr.w	r3, r3, #4
 800a060:	b2da      	uxtb	r2, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800a068:	2304      	movs	r3, #4
 800a06a:	4a31      	ldr	r2, [pc, #196]	; (800a130 <low_level_init+0x14c>)
 800a06c:	4931      	ldr	r1, [pc, #196]	; (800a134 <low_level_init+0x150>)
 800a06e:	482e      	ldr	r0, [pc, #184]	; (800a128 <low_level_init+0x144>)
 800a070:	f7fd fb3a 	bl	80076e8 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800a074:	2304      	movs	r3, #4
 800a076:	4a30      	ldr	r2, [pc, #192]	; (800a138 <low_level_init+0x154>)
 800a078:	4930      	ldr	r1, [pc, #192]	; (800a13c <low_level_init+0x158>)
 800a07a:	482b      	ldr	r0, [pc, #172]	; (800a128 <low_level_init+0x144>)
 800a07c:	f7fd fb9c 	bl	80077b8 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2206      	movs	r2, #6
 800a084:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a088:	4b27      	ldr	r3, [pc, #156]	; (800a128 <low_level_init+0x144>)
 800a08a:	695b      	ldr	r3, [r3, #20]
 800a08c:	781a      	ldrb	r2, [r3, #0]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a094:	4b24      	ldr	r3, [pc, #144]	; (800a128 <low_level_init+0x144>)
 800a096:	695b      	ldr	r3, [r3, #20]
 800a098:	785a      	ldrb	r2, [r3, #1]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a0a0:	4b21      	ldr	r3, [pc, #132]	; (800a128 <low_level_init+0x144>)
 800a0a2:	695b      	ldr	r3, [r3, #20]
 800a0a4:	789a      	ldrb	r2, [r3, #2]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a0ac:	4b1e      	ldr	r3, [pc, #120]	; (800a128 <low_level_init+0x144>)
 800a0ae:	695b      	ldr	r3, [r3, #20]
 800a0b0:	78da      	ldrb	r2, [r3, #3]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a0b8:	4b1b      	ldr	r3, [pc, #108]	; (800a128 <low_level_init+0x144>)
 800a0ba:	695b      	ldr	r3, [r3, #20]
 800a0bc:	791a      	ldrb	r2, [r3, #4]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a0c4:	4b18      	ldr	r3, [pc, #96]	; (800a128 <low_level_init+0x144>)
 800a0c6:	695b      	ldr	r3, [r3, #20]
 800a0c8:	795a      	ldrb	r2, [r3, #5]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a0d6:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a0de:	f043 030a 	orr.w	r3, r3, #10
 800a0e2:	b2da      	uxtb	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800a0ea:	480f      	ldr	r0, [pc, #60]	; (800a128 <low_level_init+0x144>)
 800a0ec:	f7fd fe0b 	bl	8007d06 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800a0f0:	f107 0310 	add.w	r3, r7, #16
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	211d      	movs	r1, #29
 800a0f8:	480b      	ldr	r0, [pc, #44]	; (800a128 <low_level_init+0x144>)
 800a0fa:	f7fd fd36 	bl	8007b6a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	f043 030b 	orr.w	r3, r3, #11
 800a104:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	461a      	mov	r2, r3
 800a10a:	211d      	movs	r1, #29
 800a10c:	4806      	ldr	r0, [pc, #24]	; (800a128 <low_level_init+0x144>)
 800a10e:	f7fd fd94 	bl	8007c3a <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800a112:	f107 0310 	add.w	r3, r7, #16
 800a116:	461a      	mov	r2, r3
 800a118:	211d      	movs	r1, #29
 800a11a:	4803      	ldr	r0, [pc, #12]	; (800a128 <low_level_init+0x144>)
 800a11c:	f7fd fd25 	bl	8007b6a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a120:	bf00      	nop
 800a122:	3718      	adds	r7, #24
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}
 800a128:	20001f54 	.word	0x20001f54
 800a12c:	40028000 	.word	0x40028000
 800a130:	20001f9c 	.word	0x20001f9c
 800a134:	20000684 	.word	0x20000684
 800a138:	20000704 	.word	0x20000704
 800a13c:	20001ed4 	.word	0x20001ed4

0800a140 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b08a      	sub	sp, #40	; 0x28
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800a14a:	4b4b      	ldr	r3, [pc, #300]	; (800a278 <low_level_output+0x138>)
 800a14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800a152:	2300      	movs	r3, #0
 800a154:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800a156:	2300      	movs	r3, #0
 800a158:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800a15a:	2300      	movs	r3, #0
 800a15c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800a15e:	2300      	movs	r3, #0
 800a160:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800a162:	4b45      	ldr	r3, [pc, #276]	; (800a278 <low_level_output+0x138>)
 800a164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a166:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800a168:	2300      	movs	r3, #0
 800a16a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	623b      	str	r3, [r7, #32]
 800a170:	e05a      	b.n	800a228 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	da03      	bge.n	800a182 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800a17a:	23f8      	movs	r3, #248	; 0xf8
 800a17c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800a180:	e05c      	b.n	800a23c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800a182:	6a3b      	ldr	r3, [r7, #32]
 800a184:	895b      	ldrh	r3, [r3, #10]
 800a186:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800a188:	2300      	movs	r3, #0
 800a18a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a18c:	e02f      	b.n	800a1ee <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800a18e:	69fa      	ldr	r2, [r7, #28]
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	18d0      	adds	r0, r2, r3
 800a194:	6a3b      	ldr	r3, [r7, #32]
 800a196:	685a      	ldr	r2, [r3, #4]
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	18d1      	adds	r1, r2, r3
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800a1a2:	3304      	adds	r3, #4
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	f009 fafd 	bl	80137a4 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	68db      	ldr	r3, [r3, #12]
 800a1ae:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	da03      	bge.n	800a1c0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800a1b8:	23f8      	movs	r3, #248	; 0xf8
 800a1ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800a1be:	e03d      	b.n	800a23c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800a1c6:	693a      	ldr	r2, [r7, #16]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800a1d0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	1ad3      	subs	r3, r2, r3
 800a1d8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a1dc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800a1de:	697a      	ldr	r2, [r7, #20]
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	1ad3      	subs	r3, r2, r3
 800a1e4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a1e8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d8c8      	bhi.n	800a18e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800a1fc:	69fa      	ldr	r2, [r7, #28]
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	18d0      	adds	r0, r2, r3
 800a202:	6a3b      	ldr	r3, [r7, #32]
 800a204:	685a      	ldr	r2, [r3, #4]
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	4413      	add	r3, r2
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	4619      	mov	r1, r3
 800a20e:	f009 fac9 	bl	80137a4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800a212:	693a      	ldr	r2, [r7, #16]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	4413      	add	r3, r2
 800a218:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800a21a:	697a      	ldr	r2, [r7, #20]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	4413      	add	r3, r2
 800a220:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800a222:	6a3b      	ldr	r3, [r7, #32]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	623b      	str	r3, [r7, #32]
 800a228:	6a3b      	ldr	r3, [r7, #32]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1a1      	bne.n	800a172 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800a22e:	6979      	ldr	r1, [r7, #20]
 800a230:	4811      	ldr	r0, [pc, #68]	; (800a278 <low_level_output+0x138>)
 800a232:	f7fd fb2d 	bl	8007890 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800a236:	2300      	movs	r3, #0
 800a238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800a23c:	4b0e      	ldr	r3, [pc, #56]	; (800a278 <low_level_output+0x138>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a244:	3314      	adds	r3, #20
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f003 0320 	and.w	r3, r3, #32
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d00d      	beq.n	800a26c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800a250:	4b09      	ldr	r3, [pc, #36]	; (800a278 <low_level_output+0x138>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a258:	3314      	adds	r3, #20
 800a25a:	2220      	movs	r2, #32
 800a25c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800a25e:	4b06      	ldr	r3, [pc, #24]	; (800a278 <low_level_output+0x138>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a266:	3304      	adds	r3, #4
 800a268:	2200      	movs	r2, #0
 800a26a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800a26c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a270:	4618      	mov	r0, r3
 800a272:	3728      	adds	r7, #40	; 0x28
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}
 800a278:	20001f54 	.word	0x20001f54

0800a27c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b08c      	sub	sp, #48	; 0x30
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a284:	2300      	movs	r3, #0
 800a286:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800a288:	2300      	movs	r3, #0
 800a28a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800a28c:	2300      	movs	r3, #0
 800a28e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800a290:	2300      	movs	r3, #0
 800a292:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800a294:	2300      	movs	r3, #0
 800a296:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800a298:	2300      	movs	r3, #0
 800a29a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800a29c:	2300      	movs	r3, #0
 800a29e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800a2a0:	484e      	ldr	r0, [pc, #312]	; (800a3dc <low_level_input+0x160>)
 800a2a2:	f7fd fbdf 	bl	8007a64 <HAL_ETH_GetReceivedFrame>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d001      	beq.n	800a2b0 <low_level_input+0x34>

    return NULL;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	e091      	b.n	800a3d4 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800a2b0:	4b4a      	ldr	r3, [pc, #296]	; (800a3dc <low_level_input+0x160>)
 800a2b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2b4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800a2b6:	4b49      	ldr	r3, [pc, #292]	; (800a3dc <low_level_input+0x160>)
 800a2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800a2bc:	89fb      	ldrh	r3, [r7, #14]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d006      	beq.n	800a2d0 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800a2c2:	89fb      	ldrh	r3, [r7, #14]
 800a2c4:	2203      	movs	r2, #3
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	2004      	movs	r0, #4
 800a2ca:	f000 ff1f 	bl	800b10c <pbuf_alloc>
 800a2ce:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800a2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d04b      	beq.n	800a36e <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800a2d6:	4b41      	ldr	r3, [pc, #260]	; (800a3dc <low_level_input+0x160>)
 800a2d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2da:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800a2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2e4:	e040      	b.n	800a368 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 800a2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e8:	895b      	ldrh	r3, [r3, #10]
 800a2ea:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800a2f0:	e021      	b.n	800a336 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800a2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f4:	685a      	ldr	r2, [r3, #4]
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	18d0      	adds	r0, r2, r3
 800a2fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	18d1      	adds	r1, r2, r3
 800a300:	69fb      	ldr	r3, [r7, #28]
 800a302:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800a306:	3304      	adds	r3, #4
 800a308:	461a      	mov	r2, r3
 800a30a:	f009 fa4b 	bl	80137a4 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800a30e:	6a3b      	ldr	r3, [r7, #32]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800a314:	6a3b      	ldr	r3, [r7, #32]
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800a31a:	69fa      	ldr	r2, [r7, #28]
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	4413      	add	r3, r2
 800a320:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800a324:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800a326:	69ba      	ldr	r2, [r7, #24]
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	1ad3      	subs	r3, r2, r3
 800a32c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a330:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800a332:	2300      	movs	r3, #0
 800a334:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800a336:	697a      	ldr	r2, [r7, #20]
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	4413      	add	r3, r2
 800a33c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a340:	4293      	cmp	r3, r2
 800a342:	d8d6      	bhi.n	800a2f2 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800a344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a346:	685a      	ldr	r2, [r3, #4]
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	18d0      	adds	r0, r2, r3
 800a34c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	4413      	add	r3, r2
 800a352:	697a      	ldr	r2, [r7, #20]
 800a354:	4619      	mov	r1, r3
 800a356:	f009 fa25 	bl	80137a4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800a35a:	69fa      	ldr	r2, [r7, #28]
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	4413      	add	r3, r2
 800a360:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800a362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	62bb      	str	r3, [r7, #40]	; 0x28
 800a368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1bb      	bne.n	800a2e6 <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800a36e:	4b1b      	ldr	r3, [pc, #108]	; (800a3dc <low_level_input+0x160>)
 800a370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a372:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800a374:	2300      	movs	r3, #0
 800a376:	613b      	str	r3, [r7, #16]
 800a378:	e00b      	b.n	800a392 <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800a37a:	6a3b      	ldr	r3, [r7, #32]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a382:	6a3b      	ldr	r3, [r7, #32]
 800a384:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800a386:	6a3b      	ldr	r3, [r7, #32]
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	3301      	adds	r3, #1
 800a390:	613b      	str	r3, [r7, #16]
 800a392:	4b12      	ldr	r3, [pc, #72]	; (800a3dc <low_level_input+0x160>)
 800a394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a396:	693a      	ldr	r2, [r7, #16]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d3ee      	bcc.n	800a37a <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800a39c:	4b0f      	ldr	r3, [pc, #60]	; (800a3dc <low_level_input+0x160>)
 800a39e:	2200      	movs	r2, #0
 800a3a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800a3a2:	4b0e      	ldr	r3, [pc, #56]	; (800a3dc <low_level_input+0x160>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3aa:	3314      	adds	r3, #20
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d00d      	beq.n	800a3d2 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800a3b6:	4b09      	ldr	r3, [pc, #36]	; (800a3dc <low_level_input+0x160>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3be:	3314      	adds	r3, #20
 800a3c0:	2280      	movs	r2, #128	; 0x80
 800a3c2:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800a3c4:	4b05      	ldr	r3, [pc, #20]	; (800a3dc <low_level_input+0x160>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3cc:	3308      	adds	r3, #8
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	601a      	str	r2, [r3, #0]
  }
  return p;
 800a3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3730      	adds	r7, #48	; 0x30
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	20001f54 	.word	0x20001f54

0800a3e0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7ff ff47 	bl	800a27c <low_level_input>
 800a3ee:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d010      	beq.n	800a418 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	691b      	ldr	r3, [r3, #16]
 800a3fa:	6879      	ldr	r1, [r7, #4]
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	4798      	blx	r3
 800a400:	4603      	mov	r3, r0
 800a402:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800a404:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d006      	beq.n	800a41a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800a40c:	68f8      	ldr	r0, [r7, #12]
 800a40e:	f001 f9ef 	bl	800b7f0 <pbuf_free>
    p = NULL;
 800a412:	2300      	movs	r3, #0
 800a414:	60fb      	str	r3, [r7, #12]
 800a416:	e000      	b.n	800a41a <ethernetif_input+0x3a>
  if (p == NULL) return;
 800a418:	bf00      	nop
  }
}
 800a41a:	3710      	adds	r7, #16
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d106      	bne.n	800a43c <ethernetif_init+0x1c>
 800a42e:	4b0e      	ldr	r3, [pc, #56]	; (800a468 <ethernetif_init+0x48>)
 800a430:	f44f 7202 	mov.w	r2, #520	; 0x208
 800a434:	490d      	ldr	r1, [pc, #52]	; (800a46c <ethernetif_init+0x4c>)
 800a436:	480e      	ldr	r0, [pc, #56]	; (800a470 <ethernetif_init+0x50>)
 800a438:	f009 fa8a 	bl	8013950 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2273      	movs	r2, #115	; 0x73
 800a440:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2274      	movs	r2, #116	; 0x74
 800a448:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4a09      	ldr	r2, [pc, #36]	; (800a474 <ethernetif_init+0x54>)
 800a450:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4a08      	ldr	r2, [pc, #32]	; (800a478 <ethernetif_init+0x58>)
 800a456:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f7ff fdc3 	bl	8009fe4 <low_level_init>

  return ERR_OK;
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	3708      	adds	r7, #8
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	08014e60 	.word	0x08014e60
 800a46c:	08014e7c 	.word	0x08014e7c
 800a470:	08014e8c 	.word	0x08014e8c
 800a474:	0801174d 	.word	0x0801174d
 800a478:	0800a141 	.word	0x0800a141

0800a47c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a480:	f7fc fe94 	bl	80071ac <HAL_GetTick>
 800a484:	4603      	mov	r3, r0
}
 800a486:	4618      	mov	r0, r3
 800a488:	bd80      	pop	{r7, pc}
	...

0800a48c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800a494:	2300      	movs	r3, #0
 800a496:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800a498:	2300      	movs	r3, #0
 800a49a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a4a2:	089b      	lsrs	r3, r3, #2
 800a4a4:	f003 0301 	and.w	r3, r3, #1
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d05d      	beq.n	800a56a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800a4ae:	4b34      	ldr	r3, [pc, #208]	; (800a580 <ethernetif_update_config+0xf4>)
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d03f      	beq.n	800a536 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800a4b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	4830      	ldr	r0, [pc, #192]	; (800a580 <ethernetif_update_config+0xf4>)
 800a4be:	f7fd fbbc 	bl	8007c3a <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800a4c2:	f7fc fe73 	bl	80071ac <HAL_GetTick>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800a4ca:	f107 0308 	add.w	r3, r7, #8
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	2101      	movs	r1, #1
 800a4d2:	482b      	ldr	r0, [pc, #172]	; (800a580 <ethernetif_update_config+0xf4>)
 800a4d4:	f7fd fb49 	bl	8007b6a <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800a4d8:	f7fc fe68 	bl	80071ac <HAL_GetTick>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	1ad3      	subs	r3, r2, r3
 800a4e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4e6:	d828      	bhi.n	800a53a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	f003 0320 	and.w	r3, r3, #32
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d0eb      	beq.n	800a4ca <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800a4f2:	f107 0308 	add.w	r3, r7, #8
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	2110      	movs	r1, #16
 800a4fa:	4821      	ldr	r0, [pc, #132]	; (800a580 <ethernetif_update_config+0xf4>)
 800a4fc:	f7fd fb35 	bl	8007b6a <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	f003 0304 	and.w	r3, r3, #4
 800a506:	2b00      	cmp	r3, #0
 800a508:	d004      	beq.n	800a514 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800a50a:	4b1d      	ldr	r3, [pc, #116]	; (800a580 <ethernetif_update_config+0xf4>)
 800a50c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a510:	60da      	str	r2, [r3, #12]
 800a512:	e002      	b.n	800a51a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800a514:	4b1a      	ldr	r3, [pc, #104]	; (800a580 <ethernetif_update_config+0xf4>)
 800a516:	2200      	movs	r2, #0
 800a518:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	f003 0302 	and.w	r3, r3, #2
 800a520:	2b00      	cmp	r3, #0
 800a522:	d003      	beq.n	800a52c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800a524:	4b16      	ldr	r3, [pc, #88]	; (800a580 <ethernetif_update_config+0xf4>)
 800a526:	2200      	movs	r2, #0
 800a528:	609a      	str	r2, [r3, #8]
 800a52a:	e016      	b.n	800a55a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800a52c:	4b14      	ldr	r3, [pc, #80]	; (800a580 <ethernetif_update_config+0xf4>)
 800a52e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a532:	609a      	str	r2, [r3, #8]
 800a534:	e011      	b.n	800a55a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800a536:	bf00      	nop
 800a538:	e000      	b.n	800a53c <ethernetif_update_config+0xb0>
          goto error;
 800a53a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800a53c:	4b10      	ldr	r3, [pc, #64]	; (800a580 <ethernetif_update_config+0xf4>)
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	08db      	lsrs	r3, r3, #3
 800a542:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800a544:	4b0e      	ldr	r3, [pc, #56]	; (800a580 <ethernetif_update_config+0xf4>)
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	085b      	lsrs	r3, r3, #1
 800a54a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800a54c:	4313      	orrs	r3, r2
 800a54e:	b29b      	uxth	r3, r3
 800a550:	461a      	mov	r2, r3
 800a552:	2100      	movs	r1, #0
 800a554:	480a      	ldr	r0, [pc, #40]	; (800a580 <ethernetif_update_config+0xf4>)
 800a556:	f7fd fb70 	bl	8007c3a <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800a55a:	2100      	movs	r1, #0
 800a55c:	4808      	ldr	r0, [pc, #32]	; (800a580 <ethernetif_update_config+0xf4>)
 800a55e:	f7fd fc31 	bl	8007dc4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800a562:	4807      	ldr	r0, [pc, #28]	; (800a580 <ethernetif_update_config+0xf4>)
 800a564:	f7fd fbcf 	bl	8007d06 <HAL_ETH_Start>
 800a568:	e002      	b.n	800a570 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800a56a:	4805      	ldr	r0, [pc, #20]	; (800a580 <ethernetif_update_config+0xf4>)
 800a56c:	f7fd fbfa 	bl	8007d64 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 f807 	bl	800a584 <ethernetif_notify_conn_changed>
}
 800a576:	bf00      	nop
 800a578:	3710      	adds	r7, #16
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	20001f54 	.word	0x20001f54

0800a584 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800a58c:	bf00      	nop
 800a58e:	370c      	adds	r7, #12
 800a590:	46bd      	mov	sp, r7
 800a592:	bc80      	pop	{r7}
 800a594:	4770      	bx	lr

0800a596 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a596:	b480      	push	{r7}
 800a598:	b083      	sub	sp, #12
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	4603      	mov	r3, r0
 800a59e:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800a5a0:	88fb      	ldrh	r3, [r7, #6]
 800a5a2:	ba5b      	rev16	r3, r3
 800a5a4:	b29b      	uxth	r3, r3
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	370c      	adds	r7, #12
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bc80      	pop	{r7}
 800a5ae:	4770      	bx	lr

0800a5b0 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	061a      	lsls	r2, r3, #24
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	021b      	lsls	r3, r3, #8
 800a5c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a5c4:	431a      	orrs	r2, r3
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	0a1b      	lsrs	r3, r3, #8
 800a5ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a5ce:	431a      	orrs	r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	0e1b      	lsrs	r3, r3, #24
 800a5d4:	4313      	orrs	r3, r2
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	370c      	adds	r7, #12
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bc80      	pop	{r7}
 800a5de:	4770      	bx	lr

0800a5e0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800a5ea:	f000 f8a7 	bl	800a73c <mem_init>
  memp_init();
 800a5ee:	f000 fb37 	bl	800ac60 <memp_init>
  pbuf_init();
  netif_init();
 800a5f2:	f000 fbef 	bl	800add4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a5f6:	f006 f8ab 	bl	8010750 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a5fa:	f001 fc03 	bl	800be04 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800a5fe:	f005 ff89 	bl	8010514 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a602:	bf00      	nop
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
	...

0800a60c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a614:	4b40      	ldr	r3, [pc, #256]	; (800a718 <plug_holes+0x10c>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d206      	bcs.n	800a62c <plug_holes+0x20>
 800a61e:	4b3f      	ldr	r3, [pc, #252]	; (800a71c <plug_holes+0x110>)
 800a620:	f240 125d 	movw	r2, #349	; 0x15d
 800a624:	493e      	ldr	r1, [pc, #248]	; (800a720 <plug_holes+0x114>)
 800a626:	483f      	ldr	r0, [pc, #252]	; (800a724 <plug_holes+0x118>)
 800a628:	f009 f992 	bl	8013950 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a62c:	4b3e      	ldr	r3, [pc, #248]	; (800a728 <plug_holes+0x11c>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	429a      	cmp	r2, r3
 800a634:	d306      	bcc.n	800a644 <plug_holes+0x38>
 800a636:	4b39      	ldr	r3, [pc, #228]	; (800a71c <plug_holes+0x110>)
 800a638:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a63c:	493b      	ldr	r1, [pc, #236]	; (800a72c <plug_holes+0x120>)
 800a63e:	4839      	ldr	r0, [pc, #228]	; (800a724 <plug_holes+0x118>)
 800a640:	f009 f986 	bl	8013950 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	791b      	ldrb	r3, [r3, #4]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d006      	beq.n	800a65a <plug_holes+0x4e>
 800a64c:	4b33      	ldr	r3, [pc, #204]	; (800a71c <plug_holes+0x110>)
 800a64e:	f240 125f 	movw	r2, #351	; 0x15f
 800a652:	4937      	ldr	r1, [pc, #220]	; (800a730 <plug_holes+0x124>)
 800a654:	4833      	ldr	r0, [pc, #204]	; (800a724 <plug_holes+0x118>)
 800a656:	f009 f97b 	bl	8013950 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	881b      	ldrh	r3, [r3, #0]
 800a65e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a662:	d906      	bls.n	800a672 <plug_holes+0x66>
 800a664:	4b2d      	ldr	r3, [pc, #180]	; (800a71c <plug_holes+0x110>)
 800a666:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800a66a:	4932      	ldr	r1, [pc, #200]	; (800a734 <plug_holes+0x128>)
 800a66c:	482d      	ldr	r0, [pc, #180]	; (800a724 <plug_holes+0x118>)
 800a66e:	f009 f96f 	bl	8013950 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800a672:	4b29      	ldr	r3, [pc, #164]	; (800a718 <plug_holes+0x10c>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	8812      	ldrh	r2, [r2, #0]
 800a67a:	4413      	add	r3, r2
 800a67c:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	429a      	cmp	r2, r3
 800a684:	d01f      	beq.n	800a6c6 <plug_holes+0xba>
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	791b      	ldrb	r3, [r3, #4]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d11b      	bne.n	800a6c6 <plug_holes+0xba>
 800a68e:	4b26      	ldr	r3, [pc, #152]	; (800a728 <plug_holes+0x11c>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68fa      	ldr	r2, [r7, #12]
 800a694:	429a      	cmp	r2, r3
 800a696:	d016      	beq.n	800a6c6 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a698:	4b27      	ldr	r3, [pc, #156]	; (800a738 <plug_holes+0x12c>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d102      	bne.n	800a6a8 <plug_holes+0x9c>
      lfree = mem;
 800a6a2:	4a25      	ldr	r2, [pc, #148]	; (800a738 <plug_holes+0x12c>)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	881a      	ldrh	r2, [r3, #0]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800a6b0:	4b19      	ldr	r3, [pc, #100]	; (800a718 <plug_holes+0x10c>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	1ad1      	subs	r1, r2, r3
 800a6b8:	4b17      	ldr	r3, [pc, #92]	; (800a718 <plug_holes+0x10c>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	68fa      	ldr	r2, [r7, #12]
 800a6be:	8812      	ldrh	r2, [r2, #0]
 800a6c0:	4413      	add	r3, r2
 800a6c2:	b28a      	uxth	r2, r1
 800a6c4:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800a6c6:	4b14      	ldr	r3, [pc, #80]	; (800a718 <plug_holes+0x10c>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	8852      	ldrh	r2, [r2, #2]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a6d2:	68ba      	ldr	r2, [r7, #8]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d01a      	beq.n	800a710 <plug_holes+0x104>
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	791b      	ldrb	r3, [r3, #4]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d116      	bne.n	800a710 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a6e2:	4b15      	ldr	r3, [pc, #84]	; (800a738 <plug_holes+0x12c>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d102      	bne.n	800a6f2 <plug_holes+0xe6>
      lfree = pmem;
 800a6ec:	4a12      	ldr	r2, [pc, #72]	; (800a738 <plug_holes+0x12c>)
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	881a      	ldrh	r2, [r3, #0]
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800a6fa:	4b07      	ldr	r3, [pc, #28]	; (800a718 <plug_holes+0x10c>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	68ba      	ldr	r2, [r7, #8]
 800a700:	1ad1      	subs	r1, r2, r3
 800a702:	4b05      	ldr	r3, [pc, #20]	; (800a718 <plug_holes+0x10c>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	8812      	ldrh	r2, [r2, #0]
 800a70a:	4413      	add	r3, r2
 800a70c:	b28a      	uxth	r2, r1
 800a70e:	805a      	strh	r2, [r3, #2]
  }
}
 800a710:	bf00      	nop
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	200004cc 	.word	0x200004cc
 800a71c:	08014eb4 	.word	0x08014eb4
 800a720:	08014ee4 	.word	0x08014ee4
 800a724:	08014efc 	.word	0x08014efc
 800a728:	200004d0 	.word	0x200004d0
 800a72c:	08014f24 	.word	0x08014f24
 800a730:	08014f40 	.word	0x08014f40
 800a734:	08014f5c 	.word	0x08014f5c
 800a738:	200004d4 	.word	0x200004d4

0800a73c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a742:	4b18      	ldr	r3, [pc, #96]	; (800a7a4 <mem_init+0x68>)
 800a744:	3303      	adds	r3, #3
 800a746:	f023 0303 	bic.w	r3, r3, #3
 800a74a:	461a      	mov	r2, r3
 800a74c:	4b16      	ldr	r3, [pc, #88]	; (800a7a8 <mem_init+0x6c>)
 800a74e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a750:	4b15      	ldr	r3, [pc, #84]	; (800a7a8 <mem_init+0x6c>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a75c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2200      	movs	r2, #0
 800a762:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2200      	movs	r2, #0
 800a768:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800a76a:	4b0f      	ldr	r3, [pc, #60]	; (800a7a8 <mem_init+0x6c>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800a772:	4a0e      	ldr	r2, [pc, #56]	; (800a7ac <mem_init+0x70>)
 800a774:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a776:	4b0d      	ldr	r3, [pc, #52]	; (800a7ac <mem_init+0x70>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2201      	movs	r2, #1
 800a77c:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a77e:	4b0b      	ldr	r3, [pc, #44]	; (800a7ac <mem_init+0x70>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a786:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a788:	4b08      	ldr	r3, [pc, #32]	; (800a7ac <mem_init+0x70>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a790:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a792:	4b05      	ldr	r3, [pc, #20]	; (800a7a8 <mem_init+0x6c>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a06      	ldr	r2, [pc, #24]	; (800a7b0 <mem_init+0x74>)
 800a798:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800a79a:	bf00      	nop
 800a79c:	370c      	adds	r7, #12
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bc80      	pop	{r7}
 800a7a2:	4770      	bx	lr
 800a7a4:	20003784 	.word	0x20003784
 800a7a8:	200004cc 	.word	0x200004cc
 800a7ac:	200004d0 	.word	0x200004d0
 800a7b0:	200004d4 	.word	0x200004d4

0800a7b4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d043      	beq.n	800a84a <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f003 0303 	and.w	r3, r3, #3
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d006      	beq.n	800a7da <mem_free+0x26>
 800a7cc:	4b22      	ldr	r3, [pc, #136]	; (800a858 <mem_free+0xa4>)
 800a7ce:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800a7d2:	4922      	ldr	r1, [pc, #136]	; (800a85c <mem_free+0xa8>)
 800a7d4:	4822      	ldr	r0, [pc, #136]	; (800a860 <mem_free+0xac>)
 800a7d6:	f009 f8bb 	bl	8013950 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a7da:	4b22      	ldr	r3, [pc, #136]	; (800a864 <mem_free+0xb0>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d304      	bcc.n	800a7ee <mem_free+0x3a>
 800a7e4:	4b20      	ldr	r3, [pc, #128]	; (800a868 <mem_free+0xb4>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d306      	bcc.n	800a7fc <mem_free+0x48>
 800a7ee:	4b1a      	ldr	r3, [pc, #104]	; (800a858 <mem_free+0xa4>)
 800a7f0:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800a7f4:	491d      	ldr	r1, [pc, #116]	; (800a86c <mem_free+0xb8>)
 800a7f6:	481a      	ldr	r0, [pc, #104]	; (800a860 <mem_free+0xac>)
 800a7f8:	f009 f8aa 	bl	8013950 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a7fc:	4b19      	ldr	r3, [pc, #100]	; (800a864 <mem_free+0xb0>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	429a      	cmp	r2, r3
 800a804:	d323      	bcc.n	800a84e <mem_free+0x9a>
 800a806:	4b18      	ldr	r3, [pc, #96]	; (800a868 <mem_free+0xb4>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d21e      	bcs.n	800a84e <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	3b08      	subs	r3, #8
 800a814:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	791b      	ldrb	r3, [r3, #4]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d106      	bne.n	800a82c <mem_free+0x78>
 800a81e:	4b0e      	ldr	r3, [pc, #56]	; (800a858 <mem_free+0xa4>)
 800a820:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800a824:	4912      	ldr	r1, [pc, #72]	; (800a870 <mem_free+0xbc>)
 800a826:	480e      	ldr	r0, [pc, #56]	; (800a860 <mem_free+0xac>)
 800a828:	f009 f892 	bl	8013950 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2200      	movs	r2, #0
 800a830:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a832:	4b10      	ldr	r3, [pc, #64]	; (800a874 <mem_free+0xc0>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	429a      	cmp	r2, r3
 800a83a:	d202      	bcs.n	800a842 <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a83c:	4a0d      	ldr	r2, [pc, #52]	; (800a874 <mem_free+0xc0>)
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f7ff fee2 	bl	800a60c <plug_holes>
 800a848:	e002      	b.n	800a850 <mem_free+0x9c>
    return;
 800a84a:	bf00      	nop
 800a84c:	e000      	b.n	800a850 <mem_free+0x9c>
    return;
 800a84e:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a850:	3710      	adds	r7, #16
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	08014eb4 	.word	0x08014eb4
 800a85c:	08014f88 	.word	0x08014f88
 800a860:	08014efc 	.word	0x08014efc
 800a864:	200004cc 	.word	0x200004cc
 800a868:	200004d0 	.word	0x200004d0
 800a86c:	08014fac 	.word	0x08014fac
 800a870:	08014fc4 	.word	0x08014fc4
 800a874:	200004d4 	.word	0x200004d4

0800a878 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b086      	sub	sp, #24
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	460b      	mov	r3, r1
 800a882:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800a884:	887b      	ldrh	r3, [r7, #2]
 800a886:	3303      	adds	r3, #3
 800a888:	b29b      	uxth	r3, r3
 800a88a:	f023 0303 	bic.w	r3, r3, #3
 800a88e:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800a890:	887b      	ldrh	r3, [r7, #2]
 800a892:	2b0b      	cmp	r3, #11
 800a894:	d801      	bhi.n	800a89a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a896:	230c      	movs	r3, #12
 800a898:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800a89a:	887b      	ldrh	r3, [r7, #2]
 800a89c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a8a0:	d901      	bls.n	800a8a6 <mem_trim+0x2e>
    return NULL;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	e0b1      	b.n	800aa0a <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a8a6:	4b5b      	ldr	r3, [pc, #364]	; (800aa14 <mem_trim+0x19c>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d304      	bcc.n	800a8ba <mem_trim+0x42>
 800a8b0:	4b59      	ldr	r3, [pc, #356]	; (800aa18 <mem_trim+0x1a0>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d306      	bcc.n	800a8c8 <mem_trim+0x50>
 800a8ba:	4b58      	ldr	r3, [pc, #352]	; (800aa1c <mem_trim+0x1a4>)
 800a8bc:	f240 12f3 	movw	r2, #499	; 0x1f3
 800a8c0:	4957      	ldr	r1, [pc, #348]	; (800aa20 <mem_trim+0x1a8>)
 800a8c2:	4858      	ldr	r0, [pc, #352]	; (800aa24 <mem_trim+0x1ac>)
 800a8c4:	f009 f844 	bl	8013950 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a8c8:	4b52      	ldr	r3, [pc, #328]	; (800aa14 <mem_trim+0x19c>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d304      	bcc.n	800a8dc <mem_trim+0x64>
 800a8d2:	4b51      	ldr	r3, [pc, #324]	; (800aa18 <mem_trim+0x1a0>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d301      	bcc.n	800a8e0 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	e094      	b.n	800aa0a <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	3b08      	subs	r3, #8
 800a8e4:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800a8e6:	4b4b      	ldr	r3, [pc, #300]	; (800aa14 <mem_trim+0x19c>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	697a      	ldr	r2, [r7, #20]
 800a8ec:	1ad3      	subs	r3, r2, r3
 800a8ee:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	881a      	ldrh	r2, [r3, #0]
 800a8f4:	8a7b      	ldrh	r3, [r7, #18]
 800a8f6:	1ad3      	subs	r3, r2, r3
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	3b08      	subs	r3, #8
 800a8fc:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a8fe:	887a      	ldrh	r2, [r7, #2]
 800a900:	8a3b      	ldrh	r3, [r7, #16]
 800a902:	429a      	cmp	r2, r3
 800a904:	d906      	bls.n	800a914 <mem_trim+0x9c>
 800a906:	4b45      	ldr	r3, [pc, #276]	; (800aa1c <mem_trim+0x1a4>)
 800a908:	f240 2206 	movw	r2, #518	; 0x206
 800a90c:	4946      	ldr	r1, [pc, #280]	; (800aa28 <mem_trim+0x1b0>)
 800a90e:	4845      	ldr	r0, [pc, #276]	; (800aa24 <mem_trim+0x1ac>)
 800a910:	f009 f81e 	bl	8013950 <iprintf>
  if (newsize > size) {
 800a914:	887a      	ldrh	r2, [r7, #2]
 800a916:	8a3b      	ldrh	r3, [r7, #16]
 800a918:	429a      	cmp	r2, r3
 800a91a:	d901      	bls.n	800a920 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 800a91c:	2300      	movs	r3, #0
 800a91e:	e074      	b.n	800aa0a <mem_trim+0x192>
  }
  if (newsize == size) {
 800a920:	887a      	ldrh	r2, [r7, #2]
 800a922:	8a3b      	ldrh	r3, [r7, #16]
 800a924:	429a      	cmp	r2, r3
 800a926:	d101      	bne.n	800a92c <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	e06e      	b.n	800aa0a <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800a92c:	4b39      	ldr	r3, [pc, #228]	; (800aa14 <mem_trim+0x19c>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	697a      	ldr	r2, [r7, #20]
 800a932:	8812      	ldrh	r2, [r2, #0]
 800a934:	4413      	add	r3, r2
 800a936:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	791b      	ldrb	r3, [r3, #4]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d131      	bne.n	800a9a4 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	881b      	ldrh	r3, [r3, #0]
 800a944:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800a946:	8a7a      	ldrh	r2, [r7, #18]
 800a948:	887b      	ldrh	r3, [r7, #2]
 800a94a:	4413      	add	r3, r2
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	3308      	adds	r3, #8
 800a950:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 800a952:	4b36      	ldr	r3, [pc, #216]	; (800aa2c <mem_trim+0x1b4>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	68fa      	ldr	r2, [r7, #12]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d105      	bne.n	800a968 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800a95c:	4b2d      	ldr	r3, [pc, #180]	; (800aa14 <mem_trim+0x19c>)
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	897b      	ldrh	r3, [r7, #10]
 800a962:	4413      	add	r3, r2
 800a964:	4a31      	ldr	r2, [pc, #196]	; (800aa2c <mem_trim+0x1b4>)
 800a966:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800a968:	4b2a      	ldr	r3, [pc, #168]	; (800aa14 <mem_trim+0x19c>)
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	897b      	ldrh	r3, [r7, #10]
 800a96e:	4413      	add	r3, r2
 800a970:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2200      	movs	r2, #0
 800a976:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	893a      	ldrh	r2, [r7, #8]
 800a97c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	8a7a      	ldrh	r2, [r7, #18]
 800a982:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	897a      	ldrh	r2, [r7, #10]
 800a988:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	881b      	ldrh	r3, [r3, #0]
 800a98e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a992:	d039      	beq.n	800aa08 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800a994:	4b1f      	ldr	r3, [pc, #124]	; (800aa14 <mem_trim+0x19c>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	68fa      	ldr	r2, [r7, #12]
 800a99a:	8812      	ldrh	r2, [r2, #0]
 800a99c:	4413      	add	r3, r2
 800a99e:	897a      	ldrh	r2, [r7, #10]
 800a9a0:	805a      	strh	r2, [r3, #2]
 800a9a2:	e031      	b.n	800aa08 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a9a4:	887b      	ldrh	r3, [r7, #2]
 800a9a6:	f103 0214 	add.w	r2, r3, #20
 800a9aa:	8a3b      	ldrh	r3, [r7, #16]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d82b      	bhi.n	800aa08 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800a9b0:	8a7a      	ldrh	r2, [r7, #18]
 800a9b2:	887b      	ldrh	r3, [r7, #2]
 800a9b4:	4413      	add	r3, r2
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	3308      	adds	r3, #8
 800a9ba:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800a9bc:	4b15      	ldr	r3, [pc, #84]	; (800aa14 <mem_trim+0x19c>)
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	897b      	ldrh	r3, [r7, #10]
 800a9c2:	4413      	add	r3, r2
 800a9c4:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 800a9c6:	4b19      	ldr	r3, [pc, #100]	; (800aa2c <mem_trim+0x1b4>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d202      	bcs.n	800a9d6 <mem_trim+0x15e>
      lfree = mem2;
 800a9d0:	4a16      	ldr	r2, [pc, #88]	; (800aa2c <mem_trim+0x1b4>)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	881a      	ldrh	r2, [r3, #0]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	8a7a      	ldrh	r2, [r7, #18]
 800a9e8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	897a      	ldrh	r2, [r7, #10]
 800a9ee:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	881b      	ldrh	r3, [r3, #0]
 800a9f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a9f8:	d006      	beq.n	800aa08 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800a9fa:	4b06      	ldr	r3, [pc, #24]	; (800aa14 <mem_trim+0x19c>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	8812      	ldrh	r2, [r2, #0]
 800aa02:	4413      	add	r3, r2
 800aa04:	897a      	ldrh	r2, [r7, #10]
 800aa06:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800aa08:	687b      	ldr	r3, [r7, #4]
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3718      	adds	r7, #24
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	200004cc 	.word	0x200004cc
 800aa18:	200004d0 	.word	0x200004d0
 800aa1c:	08014eb4 	.word	0x08014eb4
 800aa20:	08014fd8 	.word	0x08014fd8
 800aa24:	08014efc 	.word	0x08014efc
 800aa28:	08014ff0 	.word	0x08014ff0
 800aa2c:	200004d4 	.word	0x200004d4

0800aa30 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b088      	sub	sp, #32
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	4603      	mov	r3, r0
 800aa38:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800aa3a:	88fb      	ldrh	r3, [r7, #6]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d101      	bne.n	800aa44 <mem_malloc+0x14>
    return NULL;
 800aa40:	2300      	movs	r3, #0
 800aa42:	e0c7      	b.n	800abd4 <mem_malloc+0x1a4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800aa44:	88fb      	ldrh	r3, [r7, #6]
 800aa46:	3303      	adds	r3, #3
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	f023 0303 	bic.w	r3, r3, #3
 800aa4e:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800aa50:	88fb      	ldrh	r3, [r7, #6]
 800aa52:	2b0b      	cmp	r3, #11
 800aa54:	d801      	bhi.n	800aa5a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800aa56:	230c      	movs	r3, #12
 800aa58:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800aa5a:	88fb      	ldrh	r3, [r7, #6]
 800aa5c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aa60:	d901      	bls.n	800aa66 <mem_malloc+0x36>
    return NULL;
 800aa62:	2300      	movs	r3, #0
 800aa64:	e0b6      	b.n	800abd4 <mem_malloc+0x1a4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800aa66:	4b5d      	ldr	r3, [pc, #372]	; (800abdc <mem_malloc+0x1ac>)
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	4b5d      	ldr	r3, [pc, #372]	; (800abe0 <mem_malloc+0x1b0>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	1ad3      	subs	r3, r2, r3
 800aa70:	83fb      	strh	r3, [r7, #30]
 800aa72:	e0a7      	b.n	800abc4 <mem_malloc+0x194>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800aa74:	4b5a      	ldr	r3, [pc, #360]	; (800abe0 <mem_malloc+0x1b0>)
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	8bfb      	ldrh	r3, [r7, #30]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	791b      	ldrb	r3, [r3, #4]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	f040 8098 	bne.w	800abb8 <mem_malloc+0x188>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	881b      	ldrh	r3, [r3, #0]
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	8bfb      	ldrh	r3, [r7, #30]
 800aa90:	1ad3      	subs	r3, r2, r3
 800aa92:	f1a3 0208 	sub.w	r2, r3, #8
 800aa96:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	f0c0 808d 	bcc.w	800abb8 <mem_malloc+0x188>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	881b      	ldrh	r3, [r3, #0]
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	8bfb      	ldrh	r3, [r7, #30]
 800aaa6:	1ad3      	subs	r3, r2, r3
 800aaa8:	f1a3 0208 	sub.w	r2, r3, #8
 800aaac:	88fb      	ldrh	r3, [r7, #6]
 800aaae:	3314      	adds	r3, #20
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d327      	bcc.n	800ab04 <mem_malloc+0xd4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800aab4:	8bfa      	ldrh	r2, [r7, #30]
 800aab6:	88fb      	ldrh	r3, [r7, #6]
 800aab8:	4413      	add	r3, r2
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	3308      	adds	r3, #8
 800aabe:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800aac0:	4b47      	ldr	r3, [pc, #284]	; (800abe0 <mem_malloc+0x1b0>)
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	8a7b      	ldrh	r3, [r7, #18]
 800aac6:	4413      	add	r3, r2
 800aac8:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2200      	movs	r2, #0
 800aace:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	881a      	ldrh	r2, [r3, #0]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	8bfa      	ldrh	r2, [r7, #30]
 800aadc:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	8a7a      	ldrh	r2, [r7, #18]
 800aae2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	2201      	movs	r2, #1
 800aae8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	881b      	ldrh	r3, [r3, #0]
 800aaee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aaf2:	d00a      	beq.n	800ab0a <mem_malloc+0xda>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800aaf4:	4b3a      	ldr	r3, [pc, #232]	; (800abe0 <mem_malloc+0x1b0>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	68fa      	ldr	r2, [r7, #12]
 800aafa:	8812      	ldrh	r2, [r2, #0]
 800aafc:	4413      	add	r3, r2
 800aafe:	8a7a      	ldrh	r2, [r7, #18]
 800ab00:	805a      	strh	r2, [r3, #2]
 800ab02:	e002      	b.n	800ab0a <mem_malloc+0xda>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	2201      	movs	r2, #1
 800ab08:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ab0a:	4b34      	ldr	r3, [pc, #208]	; (800abdc <mem_malloc+0x1ac>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	697a      	ldr	r2, [r7, #20]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d127      	bne.n	800ab64 <mem_malloc+0x134>
          struct mem *cur = lfree;
 800ab14:	4b31      	ldr	r3, [pc, #196]	; (800abdc <mem_malloc+0x1ac>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ab1a:	e005      	b.n	800ab28 <mem_malloc+0xf8>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800ab1c:	4b30      	ldr	r3, [pc, #192]	; (800abe0 <mem_malloc+0x1b0>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	69ba      	ldr	r2, [r7, #24]
 800ab22:	8812      	ldrh	r2, [r2, #0]
 800ab24:	4413      	add	r3, r2
 800ab26:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ab28:	69bb      	ldr	r3, [r7, #24]
 800ab2a:	791b      	ldrb	r3, [r3, #4]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d004      	beq.n	800ab3a <mem_malloc+0x10a>
 800ab30:	4b2c      	ldr	r3, [pc, #176]	; (800abe4 <mem_malloc+0x1b4>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	69ba      	ldr	r2, [r7, #24]
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d1f0      	bne.n	800ab1c <mem_malloc+0xec>
          }
          lfree = cur;
 800ab3a:	4a28      	ldr	r2, [pc, #160]	; (800abdc <mem_malloc+0x1ac>)
 800ab3c:	69bb      	ldr	r3, [r7, #24]
 800ab3e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ab40:	4b26      	ldr	r3, [pc, #152]	; (800abdc <mem_malloc+0x1ac>)
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	4b27      	ldr	r3, [pc, #156]	; (800abe4 <mem_malloc+0x1b4>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d00b      	beq.n	800ab64 <mem_malloc+0x134>
 800ab4c:	4b23      	ldr	r3, [pc, #140]	; (800abdc <mem_malloc+0x1ac>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	791b      	ldrb	r3, [r3, #4]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d006      	beq.n	800ab64 <mem_malloc+0x134>
 800ab56:	4b24      	ldr	r3, [pc, #144]	; (800abe8 <mem_malloc+0x1b8>)
 800ab58:	f240 22cf 	movw	r2, #719	; 0x2cf
 800ab5c:	4923      	ldr	r1, [pc, #140]	; (800abec <mem_malloc+0x1bc>)
 800ab5e:	4824      	ldr	r0, [pc, #144]	; (800abf0 <mem_malloc+0x1c0>)
 800ab60:	f008 fef6 	bl	8013950 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ab64:	88fa      	ldrh	r2, [r7, #6]
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	4413      	add	r3, r2
 800ab6a:	3308      	adds	r3, #8
 800ab6c:	4a1d      	ldr	r2, [pc, #116]	; (800abe4 <mem_malloc+0x1b4>)
 800ab6e:	6812      	ldr	r2, [r2, #0]
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d906      	bls.n	800ab82 <mem_malloc+0x152>
 800ab74:	4b1c      	ldr	r3, [pc, #112]	; (800abe8 <mem_malloc+0x1b8>)
 800ab76:	f240 22d3 	movw	r2, #723	; 0x2d3
 800ab7a:	491e      	ldr	r1, [pc, #120]	; (800abf4 <mem_malloc+0x1c4>)
 800ab7c:	481c      	ldr	r0, [pc, #112]	; (800abf0 <mem_malloc+0x1c0>)
 800ab7e:	f008 fee7 	bl	8013950 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	f003 0303 	and.w	r3, r3, #3
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d006      	beq.n	800ab9a <mem_malloc+0x16a>
 800ab8c:	4b16      	ldr	r3, [pc, #88]	; (800abe8 <mem_malloc+0x1b8>)
 800ab8e:	f240 22d5 	movw	r2, #725	; 0x2d5
 800ab92:	4919      	ldr	r1, [pc, #100]	; (800abf8 <mem_malloc+0x1c8>)
 800ab94:	4816      	ldr	r0, [pc, #88]	; (800abf0 <mem_malloc+0x1c0>)
 800ab96:	f008 fedb 	bl	8013950 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	f003 0303 	and.w	r3, r3, #3
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d006      	beq.n	800abb2 <mem_malloc+0x182>
 800aba4:	4b10      	ldr	r3, [pc, #64]	; (800abe8 <mem_malloc+0x1b8>)
 800aba6:	f240 22d7 	movw	r2, #727	; 0x2d7
 800abaa:	4914      	ldr	r1, [pc, #80]	; (800abfc <mem_malloc+0x1cc>)
 800abac:	4810      	ldr	r0, [pc, #64]	; (800abf0 <mem_malloc+0x1c0>)
 800abae:	f008 fecf 	bl	8013950 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	3308      	adds	r3, #8
 800abb6:	e00d      	b.n	800abd4 <mem_malloc+0x1a4>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800abb8:	4b09      	ldr	r3, [pc, #36]	; (800abe0 <mem_malloc+0x1b0>)
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	8bfb      	ldrh	r3, [r7, #30]
 800abbe:	4413      	add	r3, r2
 800abc0:	881b      	ldrh	r3, [r3, #0]
 800abc2:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800abc4:	8bfa      	ldrh	r2, [r7, #30]
 800abc6:	88fb      	ldrh	r3, [r7, #6]
 800abc8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800abcc:	429a      	cmp	r2, r3
 800abce:	f4ff af51 	bcc.w	800aa74 <mem_malloc+0x44>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 800abd2:	2300      	movs	r3, #0
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3720      	adds	r7, #32
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	200004d4 	.word	0x200004d4
 800abe0:	200004cc 	.word	0x200004cc
 800abe4:	200004d0 	.word	0x200004d0
 800abe8:	08014eb4 	.word	0x08014eb4
 800abec:	08015010 	.word	0x08015010
 800abf0:	08014efc 	.word	0x08014efc
 800abf4:	0801502c 	.word	0x0801502c
 800abf8:	0801505c 	.word	0x0801505c
 800abfc:	0801508c 	.word	0x0801508c

0800ac00 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b085      	sub	sp, #20
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	3303      	adds	r3, #3
 800ac16:	f023 0303 	bic.w	r3, r3, #3
 800ac1a:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	60fb      	str	r3, [r7, #12]
 800ac20:	e011      	b.n	800ac46 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	681a      	ldr	r2, [r3, #0]
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	881b      	ldrh	r3, [r3, #0]
 800ac38:	461a      	mov	r2, r3
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	3301      	adds	r3, #1
 800ac44:	60fb      	str	r3, [r7, #12]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	885b      	ldrh	r3, [r3, #2]
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	dbe7      	blt.n	800ac22 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ac52:	bf00      	nop
 800ac54:	bf00      	nop
 800ac56:	3714      	adds	r7, #20
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bc80      	pop	{r7}
 800ac5c:	4770      	bx	lr
	...

0800ac60 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ac66:	2300      	movs	r3, #0
 800ac68:	80fb      	strh	r3, [r7, #6]
 800ac6a:	e009      	b.n	800ac80 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ac6c:	88fb      	ldrh	r3, [r7, #6]
 800ac6e:	4a08      	ldr	r2, [pc, #32]	; (800ac90 <memp_init+0x30>)
 800ac70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7ff ffc3 	bl	800ac00 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ac7a:	88fb      	ldrh	r3, [r7, #6]
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	80fb      	strh	r3, [r7, #6]
 800ac80:	88fb      	ldrh	r3, [r7, #6]
 800ac82:	2b08      	cmp	r3, #8
 800ac84:	d9f2      	bls.n	800ac6c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ac86:	bf00      	nop
 800ac88:	bf00      	nop
 800ac8a:	3708      	adds	r7, #8
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	08016c20 	.word	0x08016c20

0800ac94 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d012      	beq.n	800acd0 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	68fa      	ldr	r2, [r7, #12]
 800acb0:	6812      	ldr	r2, [r2, #0]
 800acb2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f003 0303 	and.w	r3, r3, #3
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d006      	beq.n	800accc <do_memp_malloc_pool+0x38>
 800acbe:	4b07      	ldr	r3, [pc, #28]	; (800acdc <do_memp_malloc_pool+0x48>)
 800acc0:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800acc4:	4906      	ldr	r1, [pc, #24]	; (800ace0 <do_memp_malloc_pool+0x4c>)
 800acc6:	4807      	ldr	r0, [pc, #28]	; (800ace4 <do_memp_malloc_pool+0x50>)
 800acc8:	f008 fe42 	bl	8013950 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	e000      	b.n	800acd2 <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 800acd0:	2300      	movs	r3, #0
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	080150b0 	.word	0x080150b0
 800ace0:	080150e0 	.word	0x080150e0
 800ace4:	08015104 	.word	0x08015104

0800ace8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	4603      	mov	r3, r0
 800acf0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800acf2:	79fb      	ldrb	r3, [r7, #7]
 800acf4:	2b08      	cmp	r3, #8
 800acf6:	d908      	bls.n	800ad0a <memp_malloc+0x22>
 800acf8:	4b0a      	ldr	r3, [pc, #40]	; (800ad24 <memp_malloc+0x3c>)
 800acfa:	f240 1287 	movw	r2, #391	; 0x187
 800acfe:	490a      	ldr	r1, [pc, #40]	; (800ad28 <memp_malloc+0x40>)
 800ad00:	480a      	ldr	r0, [pc, #40]	; (800ad2c <memp_malloc+0x44>)
 800ad02:	f008 fe25 	bl	8013950 <iprintf>
 800ad06:	2300      	movs	r3, #0
 800ad08:	e008      	b.n	800ad1c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ad0a:	79fb      	ldrb	r3, [r7, #7]
 800ad0c:	4a08      	ldr	r2, [pc, #32]	; (800ad30 <memp_malloc+0x48>)
 800ad0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7ff ffbe 	bl	800ac94 <do_memp_malloc_pool>
 800ad18:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3710      	adds	r7, #16
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	080150b0 	.word	0x080150b0
 800ad28:	08015140 	.word	0x08015140
 800ad2c:	08015104 	.word	0x08015104
 800ad30:	08016c20 	.word	0x08016c20

0800ad34 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	f003 0303 	and.w	r3, r3, #3
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d006      	beq.n	800ad56 <do_memp_free_pool+0x22>
 800ad48:	4b0a      	ldr	r3, [pc, #40]	; (800ad74 <do_memp_free_pool+0x40>)
 800ad4a:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ad4e:	490a      	ldr	r1, [pc, #40]	; (800ad78 <do_memp_free_pool+0x44>)
 800ad50:	480a      	ldr	r0, [pc, #40]	; (800ad7c <do_memp_free_pool+0x48>)
 800ad52:	f008 fdfd 	bl	8013950 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	689b      	ldr	r3, [r3, #8]
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	68fa      	ldr	r2, [r7, #12]
 800ad6a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800ad6c:	bf00      	nop
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	080150b0 	.word	0x080150b0
 800ad78:	08015160 	.word	0x08015160
 800ad7c:	08015104 	.word	0x08015104

0800ad80 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b082      	sub	sp, #8
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	4603      	mov	r3, r0
 800ad88:	6039      	str	r1, [r7, #0]
 800ad8a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ad8c:	79fb      	ldrb	r3, [r7, #7]
 800ad8e:	2b08      	cmp	r3, #8
 800ad90:	d907      	bls.n	800ada2 <memp_free+0x22>
 800ad92:	4b0c      	ldr	r3, [pc, #48]	; (800adc4 <memp_free+0x44>)
 800ad94:	f240 12db 	movw	r2, #475	; 0x1db
 800ad98:	490b      	ldr	r1, [pc, #44]	; (800adc8 <memp_free+0x48>)
 800ad9a:	480c      	ldr	r0, [pc, #48]	; (800adcc <memp_free+0x4c>)
 800ad9c:	f008 fdd8 	bl	8013950 <iprintf>
 800ada0:	e00c      	b.n	800adbc <memp_free+0x3c>

  if (mem == NULL) {
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d008      	beq.n	800adba <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ada8:	79fb      	ldrb	r3, [r7, #7]
 800adaa:	4a09      	ldr	r2, [pc, #36]	; (800add0 <memp_free+0x50>)
 800adac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adb0:	6839      	ldr	r1, [r7, #0]
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7ff ffbe 	bl	800ad34 <do_memp_free_pool>
 800adb8:	e000      	b.n	800adbc <memp_free+0x3c>
    return;
 800adba:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	080150b0 	.word	0x080150b0
 800adc8:	08015180 	.word	0x08015180
 800adcc:	08015104 	.word	0x08015104
 800add0:	08016c20 	.word	0x08016c20

0800add4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800add4:	b480      	push	{r7}
 800add6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800add8:	bf00      	nop
 800adda:	46bd      	mov	sp, r7
 800addc:	bc80      	pop	{r7}
 800adde:	4770      	bx	lr

0800ade0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	607a      	str	r2, [r7, #4]
 800adec:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800adee:	69fb      	ldr	r3, [r7, #28]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d105      	bne.n	800ae00 <netif_add+0x20>
 800adf4:	4b21      	ldr	r3, [pc, #132]	; (800ae7c <netif_add+0x9c>)
 800adf6:	22fb      	movs	r2, #251	; 0xfb
 800adf8:	4921      	ldr	r1, [pc, #132]	; (800ae80 <netif_add+0xa0>)
 800adfa:	4822      	ldr	r0, [pc, #136]	; (800ae84 <netif_add+0xa4>)
 800adfc:	f008 fda8 	bl	8013950 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2200      	movs	r2, #0
 800ae04:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2200      	movs	r2, #0
 800ae16:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2203      	movs	r2, #3
 800ae1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2200      	movs	r2, #0
 800ae26:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	69ba      	ldr	r2, [r7, #24]
 800ae2c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 800ae2e:	4b16      	ldr	r3, [pc, #88]	; (800ae88 <netif_add+0xa8>)
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	1c5a      	adds	r2, r3, #1
 800ae34:	b2d1      	uxtb	r1, r2
 800ae36:	4a14      	ldr	r2, [pc, #80]	; (800ae88 <netif_add+0xa8>)
 800ae38:	7011      	strb	r1, [r2, #0]
 800ae3a:	68fa      	ldr	r2, [r7, #12]
 800ae3c:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6a3a      	ldr	r2, [r7, #32]
 800ae44:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	68b9      	ldr	r1, [r7, #8]
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	f000 f81f 	bl	800ae90 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	4798      	blx	r3
 800ae58:	4603      	mov	r3, r0
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d001      	beq.n	800ae62 <netif_add+0x82>
    return NULL;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	e007      	b.n	800ae72 <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ae62:	4b0a      	ldr	r3, [pc, #40]	; (800ae8c <netif_add+0xac>)
 800ae64:	681a      	ldr	r2, [r3, #0]
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ae6a:	4a08      	ldr	r2, [pc, #32]	; (800ae8c <netif_add+0xac>)
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800ae70:	68fb      	ldr	r3, [r7, #12]
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3710      	adds	r7, #16
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	0801519c 	.word	0x0801519c
 800ae80:	080151d0 	.word	0x080151d0
 800ae84:	080151e8 	.word	0x080151e8
 800ae88:	200004fc 	.word	0x200004fc
 800ae8c:	20006c8c 	.word	0x20006c8c

0800ae90 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	60f8      	str	r0, [r7, #12]
 800ae98:	60b9      	str	r1, [r7, #8]
 800ae9a:	607a      	str	r2, [r7, #4]
 800ae9c:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d003      	beq.n	800aeac <netif_set_addr+0x1c>
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d10c      	bne.n	800aec6 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800aeac:	68b9      	ldr	r1, [r7, #8]
 800aeae:	68f8      	ldr	r0, [r7, #12]
 800aeb0:	f000 f81a 	bl	800aee8 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800aeb4:	6879      	ldr	r1, [r7, #4]
 800aeb6:	68f8      	ldr	r0, [r7, #12]
 800aeb8:	f000 f861 	bl	800af7e <netif_set_netmask>
    netif_set_gw(netif, gw);
 800aebc:	6839      	ldr	r1, [r7, #0]
 800aebe:	68f8      	ldr	r0, [r7, #12]
 800aec0:	f000 f84a 	bl	800af58 <netif_set_gw>
 800aec4:	e00c      	b.n	800aee0 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 800aec6:	6879      	ldr	r1, [r7, #4]
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f000 f858 	bl	800af7e <netif_set_netmask>
    netif_set_gw(netif, gw);
 800aece:	6839      	ldr	r1, [r7, #0]
 800aed0:	68f8      	ldr	r0, [r7, #12]
 800aed2:	f000 f841 	bl	800af58 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800aed6:	68b9      	ldr	r1, [r7, #8]
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	f000 f805 	bl	800aee8 <netif_set_ipaddr>
  }
}
 800aede:	bf00      	nop
 800aee0:	bf00      	nop
 800aee2:	3710      	adds	r7, #16
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d003      	beq.n	800af00 <netif_set_ipaddr+0x18>
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	60fb      	str	r3, [r7, #12]
 800aefe:	e002      	b.n	800af06 <netif_set_ipaddr+0x1e>
 800af00:	4b14      	ldr	r3, [pc, #80]	; (800af54 <netif_set_ipaddr+0x6c>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800af06:	68fa      	ldr	r2, [r7, #12]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	3304      	adds	r3, #4
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	429a      	cmp	r2, r3
 800af10:	d01c      	beq.n	800af4c <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	3304      	adds	r3, #4
 800af16:	f107 020c 	add.w	r2, r7, #12
 800af1a:	4611      	mov	r1, r2
 800af1c:	4618      	mov	r0, r3
 800af1e:	f002 f905 	bl	800d12c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	3304      	adds	r3, #4
 800af26:	f107 020c 	add.w	r2, r7, #12
 800af2a:	4611      	mov	r1, r2
 800af2c:	4618      	mov	r0, r3
 800af2e:	f005 ffbf 	bl	8010eb0 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d002      	beq.n	800af3e <netif_set_ipaddr+0x56>
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	e000      	b.n	800af40 <netif_set_ipaddr+0x58>
 800af3e:	2300      	movs	r3, #0
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800af44:	2101      	movs	r1, #1
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 f85d 	bl	800b006 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800af4c:	bf00      	nop
 800af4e:	3710      	adds	r7, #16
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}
 800af54:	08016c84 	.word	0x08016c84

0800af58 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d002      	beq.n	800af6e <netif_set_gw+0x16>
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	e000      	b.n	800af70 <netif_set_gw+0x18>
 800af6e:	2300      	movs	r3, #0
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800af74:	bf00      	nop
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	bc80      	pop	{r7}
 800af7c:	4770      	bx	lr

0800af7e <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800af7e:	b480      	push	{r7}
 800af80:	b083      	sub	sp, #12
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
 800af86:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d002      	beq.n	800af94 <netif_set_netmask+0x16>
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	e000      	b.n	800af96 <netif_set_netmask+0x18>
 800af94:	2300      	movs	r3, #0
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800af9a:	bf00      	nop
 800af9c:	370c      	adds	r7, #12
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bc80      	pop	{r7}
 800afa2:	4770      	bx	lr

0800afa4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800afac:	4a03      	ldr	r2, [pc, #12]	; (800afbc <netif_set_default+0x18>)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800afb2:	bf00      	nop
 800afb4:	370c      	adds	r7, #12
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bc80      	pop	{r7}
 800afba:	4770      	bx	lr
 800afbc:	20006c90 	.word	0x20006c90

0800afc0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800afce:	f003 0301 	and.w	r3, r3, #1
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d113      	bne.n	800affe <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800afdc:	f043 0301 	orr.w	r3, r3, #1
 800afe0:	b2da      	uxtb	r2, r3
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800afee:	f003 0304 	and.w	r3, r3, #4
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d003      	beq.n	800affe <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800aff6:	2103      	movs	r1, #3
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 f804 	bl	800b006 <netif_issue_reports>
    }
  }
}
 800affe:	bf00      	nop
 800b000:	3708      	adds	r7, #8
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}

0800b006 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800b006:	b580      	push	{r7, lr}
 800b008:	b082      	sub	sp, #8
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
 800b00e:	460b      	mov	r3, r1
 800b010:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b012:	78fb      	ldrb	r3, [r7, #3]
 800b014:	f003 0301 	and.w	r3, r3, #1
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d011      	beq.n	800b040 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	3304      	adds	r3, #4
 800b020:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b022:	2b00      	cmp	r3, #0
 800b024:	d00c      	beq.n	800b040 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b02c:	f003 0308 	and.w	r3, r3, #8
 800b030:	2b00      	cmp	r3, #0
 800b032:	d005      	beq.n	800b040 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	3304      	adds	r3, #4
 800b038:	4619      	mov	r1, r3
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f006 fe6a 	bl	8011d14 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800b040:	bf00      	nop
 800b042:	3708      	adds	r7, #8
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b056:	f003 0301 	and.w	r3, r3, #1
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d012      	beq.n	800b084 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b064:	f023 0301 	bic.w	r3, r3, #1
 800b068:	b2da      	uxtb	r2, r3
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b076:	f003 0308 	and.w	r3, r3, #8
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d002      	beq.n	800b084 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f006 fa0e 	bl	80114a0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b084:	bf00      	nop
 800b086:	3708      	adds	r7, #8
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  if (netif) {
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d002      	beq.n	800b0a2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	683a      	ldr	r2, [r7, #0]
 800b0a0:	61da      	str	r2, [r3, #28]
  }
}
 800b0a2:	bf00      	nop
 800b0a4:	370c      	adds	r7, #12
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bc80      	pop	{r7}
 800b0aa:	4770      	bx	lr

0800b0ac <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b082      	sub	sp, #8
 800b0b0:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b0b2:	4b0e      	ldr	r3, [pc, #56]	; (800b0ec <pbuf_free_ooseq+0x40>)
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b0b8:	4b0d      	ldr	r3, [pc, #52]	; (800b0f0 <pbuf_free_ooseq+0x44>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	607b      	str	r3, [r7, #4]
 800b0be:	e00f      	b.n	800b0e0 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d008      	beq.n	800b0da <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f001 fd6a 	bl	800cba6 <tcp_segs_free>
      pcb->ooseq = NULL;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800b0d8:	e005      	b.n	800b0e6 <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	68db      	ldr	r3, [r3, #12]
 800b0de:	607b      	str	r3, [r7, #4]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d1ec      	bne.n	800b0c0 <pbuf_free_ooseq+0x14>
    }
  }
}
 800b0e6:	3708      	adds	r7, #8
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	20006c94 	.word	0x20006c94
 800b0f0:	20006c9c 	.word	0x20006c9c

0800b0f4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800b0f8:	4b03      	ldr	r3, [pc, #12]	; (800b108 <pbuf_pool_is_empty+0x14>)
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b0fe:	bf00      	nop
 800b100:	46bd      	mov	sp, r7
 800b102:	bc80      	pop	{r7}
 800b104:	4770      	bx	lr
 800b106:	bf00      	nop
 800b108:	20006c94 	.word	0x20006c94

0800b10c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b088      	sub	sp, #32
 800b110:	af00      	add	r7, sp, #0
 800b112:	4603      	mov	r3, r0
 800b114:	71fb      	strb	r3, [r7, #7]
 800b116:	460b      	mov	r3, r1
 800b118:	80bb      	strh	r3, [r7, #4]
 800b11a:	4613      	mov	r3, r2
 800b11c:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800b11e:	79fb      	ldrb	r3, [r7, #7]
 800b120:	2b04      	cmp	r3, #4
 800b122:	d81c      	bhi.n	800b15e <pbuf_alloc+0x52>
 800b124:	a201      	add	r2, pc, #4	; (adr r2, 800b12c <pbuf_alloc+0x20>)
 800b126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b12a:	bf00      	nop
 800b12c:	0800b141 	.word	0x0800b141
 800b130:	0800b147 	.word	0x0800b147
 800b134:	0800b14d 	.word	0x0800b14d
 800b138:	0800b153 	.word	0x0800b153
 800b13c:	0800b159 	.word	0x0800b159
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800b140:	2336      	movs	r3, #54	; 0x36
 800b142:	82fb      	strh	r3, [r7, #22]
    break;
 800b144:	e014      	b.n	800b170 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800b146:	2322      	movs	r3, #34	; 0x22
 800b148:	82fb      	strh	r3, [r7, #22]
    break;
 800b14a:	e011      	b.n	800b170 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800b14c:	230e      	movs	r3, #14
 800b14e:	82fb      	strh	r3, [r7, #22]
    break;
 800b150:	e00e      	b.n	800b170 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800b152:	2300      	movs	r3, #0
 800b154:	82fb      	strh	r3, [r7, #22]
    break;
 800b156:	e00b      	b.n	800b170 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800b158:	2300      	movs	r3, #0
 800b15a:	82fb      	strh	r3, [r7, #22]
    break;
 800b15c:	e008      	b.n	800b170 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800b15e:	4ba5      	ldr	r3, [pc, #660]	; (800b3f4 <pbuf_alloc+0x2e8>)
 800b160:	f44f 728b 	mov.w	r2, #278	; 0x116
 800b164:	49a4      	ldr	r1, [pc, #656]	; (800b3f8 <pbuf_alloc+0x2ec>)
 800b166:	48a5      	ldr	r0, [pc, #660]	; (800b3fc <pbuf_alloc+0x2f0>)
 800b168:	f008 fbf2 	bl	8013950 <iprintf>
    return NULL;
 800b16c:	2300      	movs	r3, #0
 800b16e:	e15d      	b.n	800b42c <pbuf_alloc+0x320>
  }

  switch (type) {
 800b170:	79bb      	ldrb	r3, [r7, #6]
 800b172:	2b03      	cmp	r3, #3
 800b174:	d00d      	beq.n	800b192 <pbuf_alloc+0x86>
 800b176:	2b03      	cmp	r3, #3
 800b178:	f300 8133 	bgt.w	800b3e2 <pbuf_alloc+0x2d6>
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	f000 80d0 	beq.w	800b322 <pbuf_alloc+0x216>
 800b182:	2b00      	cmp	r3, #0
 800b184:	f2c0 812d 	blt.w	800b3e2 <pbuf_alloc+0x2d6>
 800b188:	3b01      	subs	r3, #1
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	f200 8129 	bhi.w	800b3e2 <pbuf_alloc+0x2d6>
 800b190:	e10d      	b.n	800b3ae <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b192:	2008      	movs	r0, #8
 800b194:	f7ff fda8 	bl	800ace8 <memp_malloc>
 800b198:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800b19a:	69fb      	ldr	r3, [r7, #28]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d103      	bne.n	800b1a8 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 800b1a0:	f7ff ffa8 	bl	800b0f4 <pbuf_pool_is_empty>
      return NULL;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	e141      	b.n	800b42c <pbuf_alloc+0x320>
    }
    p->type = type;
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	79ba      	ldrb	r2, [r7, #6]
 800b1ac:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800b1ae:	69fb      	ldr	r3, [r7, #28]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800b1b4:	8afb      	ldrh	r3, [r7, #22]
 800b1b6:	3310      	adds	r3, #16
 800b1b8:	69fa      	ldr	r2, [r7, #28]
 800b1ba:	4413      	add	r3, r2
 800b1bc:	3303      	adds	r3, #3
 800b1be:	f023 0303 	bic.w	r3, r3, #3
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	69fb      	ldr	r3, [r7, #28]
 800b1c6:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800b1c8:	69fb      	ldr	r3, [r7, #28]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	f003 0303 	and.w	r3, r3, #3
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d006      	beq.n	800b1e2 <pbuf_alloc+0xd6>
 800b1d4:	4b87      	ldr	r3, [pc, #540]	; (800b3f4 <pbuf_alloc+0x2e8>)
 800b1d6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b1da:	4989      	ldr	r1, [pc, #548]	; (800b400 <pbuf_alloc+0x2f4>)
 800b1dc:	4887      	ldr	r0, [pc, #540]	; (800b3fc <pbuf_alloc+0x2f0>)
 800b1de:	f008 fbb7 	bl	8013950 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	88ba      	ldrh	r2, [r7, #4]
 800b1e6:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800b1e8:	8afb      	ldrh	r3, [r7, #22]
 800b1ea:	3303      	adds	r3, #3
 800b1ec:	f023 0303 	bic.w	r3, r3, #3
 800b1f0:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800b1f4:	88bb      	ldrh	r3, [r7, #4]
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	bf28      	it	cs
 800b1fa:	4613      	movcs	r3, r2
 800b1fc:	b29a      	uxth	r2, r3
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	69fa      	ldr	r2, [r7, #28]
 800b208:	8952      	ldrh	r2, [r2, #10]
 800b20a:	441a      	add	r2, r3
 800b20c:	69fb      	ldr	r3, [r7, #28]
 800b20e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800b212:	429a      	cmp	r2, r3
 800b214:	d906      	bls.n	800b224 <pbuf_alloc+0x118>
 800b216:	4b77      	ldr	r3, [pc, #476]	; (800b3f4 <pbuf_alloc+0x2e8>)
 800b218:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800b21c:	4979      	ldr	r1, [pc, #484]	; (800b404 <pbuf_alloc+0x2f8>)
 800b21e:	4877      	ldr	r0, [pc, #476]	; (800b3fc <pbuf_alloc+0x2f0>)
 800b220:	f008 fb96 	bl	8013950 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b224:	8afb      	ldrh	r3, [r7, #22]
 800b226:	3303      	adds	r3, #3
 800b228:	f023 0303 	bic.w	r3, r3, #3
 800b22c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b230:	d106      	bne.n	800b240 <pbuf_alloc+0x134>
 800b232:	4b70      	ldr	r3, [pc, #448]	; (800b3f4 <pbuf_alloc+0x2e8>)
 800b234:	f240 1231 	movw	r2, #305	; 0x131
 800b238:	4973      	ldr	r1, [pc, #460]	; (800b408 <pbuf_alloc+0x2fc>)
 800b23a:	4870      	ldr	r0, [pc, #448]	; (800b3fc <pbuf_alloc+0x2f0>)
 800b23c:	f008 fb88 	bl	8013950 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800b240:	69fb      	ldr	r3, [r7, #28]
 800b242:	2201      	movs	r2, #1
 800b244:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800b246:	69fb      	ldr	r3, [r7, #28]
 800b248:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800b24a:	88bb      	ldrh	r3, [r7, #4]
 800b24c:	69fa      	ldr	r2, [r7, #28]
 800b24e:	8952      	ldrh	r2, [r2, #10]
 800b250:	1a9b      	subs	r3, r3, r2
 800b252:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800b254:	e061      	b.n	800b31a <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b256:	2008      	movs	r0, #8
 800b258:	f7ff fd46 	bl	800ace8 <memp_malloc>
 800b25c:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d106      	bne.n	800b272 <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 800b264:	f7ff ff46 	bl	800b0f4 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800b268:	69f8      	ldr	r0, [r7, #28]
 800b26a:	f000 fac1 	bl	800b7f0 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800b26e:	2300      	movs	r3, #0
 800b270:	e0dc      	b.n	800b42c <pbuf_alloc+0x320>
      }
      q->type = type;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	79ba      	ldrb	r2, [r7, #6]
 800b276:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2200      	movs	r2, #0
 800b27c:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2200      	movs	r2, #0
 800b282:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800b284:	69bb      	ldr	r3, [r7, #24]
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b290:	4293      	cmp	r3, r2
 800b292:	dd06      	ble.n	800b2a2 <pbuf_alloc+0x196>
 800b294:	4b57      	ldr	r3, [pc, #348]	; (800b3f4 <pbuf_alloc+0x2e8>)
 800b296:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800b29a:	495c      	ldr	r1, [pc, #368]	; (800b40c <pbuf_alloc+0x300>)
 800b29c:	4857      	ldr	r0, [pc, #348]	; (800b3fc <pbuf_alloc+0x2f0>)
 800b29e:	f008 fb57 	bl	8013950 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	b29a      	uxth	r2, r3
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b2b2:	bf28      	it	cs
 800b2b4:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800b2b8:	b29a      	uxth	r2, r3
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f103 0210 	add.w	r2, r3, #16
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	f003 0303 	and.w	r3, r3, #3
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d006      	beq.n	800b2e2 <pbuf_alloc+0x1d6>
 800b2d4:	4b47      	ldr	r3, [pc, #284]	; (800b3f4 <pbuf_alloc+0x2e8>)
 800b2d6:	f240 1251 	movw	r2, #337	; 0x151
 800b2da:	494d      	ldr	r1, [pc, #308]	; (800b410 <pbuf_alloc+0x304>)
 800b2dc:	4847      	ldr	r0, [pc, #284]	; (800b3fc <pbuf_alloc+0x2f0>)
 800b2de:	f008 fb37 	bl	8013950 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	69fa      	ldr	r2, [r7, #28]
 800b2e8:	8952      	ldrh	r2, [r2, #10]
 800b2ea:	441a      	add	r2, r3
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d906      	bls.n	800b304 <pbuf_alloc+0x1f8>
 800b2f6:	4b3f      	ldr	r3, [pc, #252]	; (800b3f4 <pbuf_alloc+0x2e8>)
 800b2f8:	f240 1253 	movw	r2, #339	; 0x153
 800b2fc:	4941      	ldr	r1, [pc, #260]	; (800b404 <pbuf_alloc+0x2f8>)
 800b2fe:	483f      	ldr	r0, [pc, #252]	; (800b3fc <pbuf_alloc+0x2f0>)
 800b300:	f008 fb26 	bl	8013950 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2201      	movs	r2, #1
 800b308:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	895b      	ldrh	r3, [r3, #10]
 800b30e:	461a      	mov	r2, r3
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	1a9b      	subs	r3, r3, r2
 800b314:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	dc9a      	bgt.n	800b256 <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800b320:	e07d      	b.n	800b41e <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800b322:	8afb      	ldrh	r3, [r7, #22]
 800b324:	3313      	adds	r3, #19
 800b326:	b29b      	uxth	r3, r3
 800b328:	f023 0303 	bic.w	r3, r3, #3
 800b32c:	b29a      	uxth	r2, r3
 800b32e:	88bb      	ldrh	r3, [r7, #4]
 800b330:	3303      	adds	r3, #3
 800b332:	b29b      	uxth	r3, r3
 800b334:	f023 0303 	bic.w	r3, r3, #3
 800b338:	b29b      	uxth	r3, r3
 800b33a:	4413      	add	r3, r2
 800b33c:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800b33e:	897a      	ldrh	r2, [r7, #10]
 800b340:	88bb      	ldrh	r3, [r7, #4]
 800b342:	3303      	adds	r3, #3
 800b344:	f023 0303 	bic.w	r3, r3, #3
 800b348:	429a      	cmp	r2, r3
 800b34a:	d201      	bcs.n	800b350 <pbuf_alloc+0x244>
        return NULL;
 800b34c:	2300      	movs	r3, #0
 800b34e:	e06d      	b.n	800b42c <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800b350:	897b      	ldrh	r3, [r7, #10]
 800b352:	4618      	mov	r0, r3
 800b354:	f7ff fb6c 	bl	800aa30 <mem_malloc>
 800b358:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d101      	bne.n	800b364 <pbuf_alloc+0x258>
      return NULL;
 800b360:	2300      	movs	r3, #0
 800b362:	e063      	b.n	800b42c <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800b364:	8afb      	ldrh	r3, [r7, #22]
 800b366:	3310      	adds	r3, #16
 800b368:	69fa      	ldr	r2, [r7, #28]
 800b36a:	4413      	add	r3, r2
 800b36c:	3303      	adds	r3, #3
 800b36e:	f023 0303 	bic.w	r3, r3, #3
 800b372:	461a      	mov	r2, r3
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	88ba      	ldrh	r2, [r7, #4]
 800b37c:	811a      	strh	r2, [r3, #8]
 800b37e:	69fb      	ldr	r3, [r7, #28]
 800b380:	891a      	ldrh	r2, [r3, #8]
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	2200      	movs	r2, #0
 800b38a:	601a      	str	r2, [r3, #0]
    p->type = type;
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	79ba      	ldrb	r2, [r7, #6]
 800b390:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	f003 0303 	and.w	r3, r3, #3
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d03e      	beq.n	800b41c <pbuf_alloc+0x310>
 800b39e:	4b15      	ldr	r3, [pc, #84]	; (800b3f4 <pbuf_alloc+0x2e8>)
 800b3a0:	f44f 72bb 	mov.w	r2, #374	; 0x176
 800b3a4:	491b      	ldr	r1, [pc, #108]	; (800b414 <pbuf_alloc+0x308>)
 800b3a6:	4815      	ldr	r0, [pc, #84]	; (800b3fc <pbuf_alloc+0x2f0>)
 800b3a8:	f008 fad2 	bl	8013950 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800b3ac:	e036      	b.n	800b41c <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b3ae:	2007      	movs	r0, #7
 800b3b0:	f7ff fc9a 	bl	800ace8 <memp_malloc>
 800b3b4:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d101      	bne.n	800b3c0 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	e035      	b.n	800b42c <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	88ba      	ldrh	r2, [r7, #4]
 800b3ca:	811a      	strh	r2, [r3, #8]
 800b3cc:	69fb      	ldr	r3, [r7, #28]
 800b3ce:	891a      	ldrh	r2, [r3, #8]
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800b3d4:	69fb      	ldr	r3, [r7, #28]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	601a      	str	r2, [r3, #0]
    p->type = type;
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	79ba      	ldrb	r2, [r7, #6]
 800b3de:	731a      	strb	r2, [r3, #12]
    break;
 800b3e0:	e01d      	b.n	800b41e <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b3e2:	4b04      	ldr	r3, [pc, #16]	; (800b3f4 <pbuf_alloc+0x2e8>)
 800b3e4:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800b3e8:	490b      	ldr	r1, [pc, #44]	; (800b418 <pbuf_alloc+0x30c>)
 800b3ea:	4804      	ldr	r0, [pc, #16]	; (800b3fc <pbuf_alloc+0x2f0>)
 800b3ec:	f008 fab0 	bl	8013950 <iprintf>
    return NULL;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	e01b      	b.n	800b42c <pbuf_alloc+0x320>
 800b3f4:	08015210 	.word	0x08015210
 800b3f8:	08015240 	.word	0x08015240
 800b3fc:	0801525c 	.word	0x0801525c
 800b400:	08015284 	.word	0x08015284
 800b404:	080152b4 	.word	0x080152b4
 800b408:	080152e8 	.word	0x080152e8
 800b40c:	0801531c 	.word	0x0801531c
 800b410:	08015330 	.word	0x08015330
 800b414:	08015360 	.word	0x08015360
 800b418:	0801538c 	.word	0x0801538c
    break;
 800b41c:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	2201      	movs	r2, #1
 800b422:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800b424:	69fb      	ldr	r3, [r7, #28]
 800b426:	2200      	movs	r2, #0
 800b428:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b42a:	69fb      	ldr	r3, [r7, #28]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3720      	adds	r7, #32
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	603b      	str	r3, [r7, #0]
 800b43c:	4603      	mov	r3, r0
 800b43e:	71fb      	strb	r3, [r7, #7]
 800b440:	460b      	mov	r3, r1
 800b442:	80bb      	strh	r3, [r7, #4]
 800b444:	4613      	mov	r3, r2
 800b446:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800b448:	79fb      	ldrb	r3, [r7, #7]
 800b44a:	2b04      	cmp	r3, #4
 800b44c:	d81b      	bhi.n	800b486 <pbuf_alloced_custom+0x52>
 800b44e:	a201      	add	r2, pc, #4	; (adr r2, 800b454 <pbuf_alloced_custom+0x20>)
 800b450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b454:	0800b469 	.word	0x0800b469
 800b458:	0800b46f 	.word	0x0800b46f
 800b45c:	0800b475 	.word	0x0800b475
 800b460:	0800b47b 	.word	0x0800b47b
 800b464:	0800b481 	.word	0x0800b481
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800b468:	2336      	movs	r3, #54	; 0x36
 800b46a:	81fb      	strh	r3, [r7, #14]
    break;
 800b46c:	e014      	b.n	800b498 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800b46e:	2322      	movs	r3, #34	; 0x22
 800b470:	81fb      	strh	r3, [r7, #14]
    break;
 800b472:	e011      	b.n	800b498 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800b474:	230e      	movs	r3, #14
 800b476:	81fb      	strh	r3, [r7, #14]
    break;
 800b478:	e00e      	b.n	800b498 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800b47a:	2300      	movs	r3, #0
 800b47c:	81fb      	strh	r3, [r7, #14]
    break;
 800b47e:	e00b      	b.n	800b498 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800b480:	2300      	movs	r3, #0
 800b482:	81fb      	strh	r3, [r7, #14]
    break;
 800b484:	e008      	b.n	800b498 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800b486:	4b1d      	ldr	r3, [pc, #116]	; (800b4fc <pbuf_alloced_custom+0xc8>)
 800b488:	f240 12c5 	movw	r2, #453	; 0x1c5
 800b48c:	491c      	ldr	r1, [pc, #112]	; (800b500 <pbuf_alloced_custom+0xcc>)
 800b48e:	481d      	ldr	r0, [pc, #116]	; (800b504 <pbuf_alloced_custom+0xd0>)
 800b490:	f008 fa5e 	bl	8013950 <iprintf>
    return NULL;
 800b494:	2300      	movs	r3, #0
 800b496:	e02d      	b.n	800b4f4 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b498:	89fb      	ldrh	r3, [r7, #14]
 800b49a:	3303      	adds	r3, #3
 800b49c:	f023 0203 	bic.w	r2, r3, #3
 800b4a0:	88bb      	ldrh	r3, [r7, #4]
 800b4a2:	441a      	add	r2, r3
 800b4a4:	8bbb      	ldrh	r3, [r7, #28]
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d901      	bls.n	800b4ae <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	e022      	b.n	800b4f4 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800b4b4:	69bb      	ldr	r3, [r7, #24]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d008      	beq.n	800b4cc <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b4ba:	89fb      	ldrh	r3, [r7, #14]
 800b4bc:	3303      	adds	r3, #3
 800b4be:	f023 0303 	bic.w	r3, r3, #3
 800b4c2:	69ba      	ldr	r2, [r7, #24]
 800b4c4:	441a      	add	r2, r3
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	605a      	str	r2, [r3, #4]
 800b4ca:	e002      	b.n	800b4d2 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	2202      	movs	r2, #2
 800b4d6:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	88ba      	ldrh	r2, [r7, #4]
 800b4dc:	811a      	strh	r2, [r3, #8]
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	891a      	ldrh	r2, [r3, #8]
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	79ba      	ldrb	r2, [r7, #6]
 800b4ea:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800b4f2:	683b      	ldr	r3, [r7, #0]
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3710      	adds	r7, #16
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}
 800b4fc:	08015210 	.word	0x08015210
 800b500:	080153a8 	.word	0x080153a8
 800b504:	0801525c 	.word	0x0801525c

0800b508 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b086      	sub	sp, #24
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	460b      	mov	r3, r1
 800b512:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d106      	bne.n	800b528 <pbuf_realloc+0x20>
 800b51a:	4b4b      	ldr	r3, [pc, #300]	; (800b648 <pbuf_realloc+0x140>)
 800b51c:	f240 12f3 	movw	r2, #499	; 0x1f3
 800b520:	494a      	ldr	r1, [pc, #296]	; (800b64c <pbuf_realloc+0x144>)
 800b522:	484b      	ldr	r0, [pc, #300]	; (800b650 <pbuf_realloc+0x148>)
 800b524:	f008 fa14 	bl	8013950 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	7b1b      	ldrb	r3, [r3, #12]
 800b52c:	2b03      	cmp	r3, #3
 800b52e:	d012      	beq.n	800b556 <pbuf_realloc+0x4e>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	7b1b      	ldrb	r3, [r3, #12]
 800b534:	2b01      	cmp	r3, #1
 800b536:	d00e      	beq.n	800b556 <pbuf_realloc+0x4e>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	7b1b      	ldrb	r3, [r3, #12]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d00a      	beq.n	800b556 <pbuf_realloc+0x4e>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	7b1b      	ldrb	r3, [r3, #12]
 800b544:	2b02      	cmp	r3, #2
 800b546:	d006      	beq.n	800b556 <pbuf_realloc+0x4e>
 800b548:	4b3f      	ldr	r3, [pc, #252]	; (800b648 <pbuf_realloc+0x140>)
 800b54a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b54e:	4941      	ldr	r1, [pc, #260]	; (800b654 <pbuf_realloc+0x14c>)
 800b550:	483f      	ldr	r0, [pc, #252]	; (800b650 <pbuf_realloc+0x148>)
 800b552:	f008 f9fd 	bl	8013950 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	891b      	ldrh	r3, [r3, #8]
 800b55a:	887a      	ldrh	r2, [r7, #2]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d26e      	bcs.n	800b63e <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800b560:	887b      	ldrh	r3, [r7, #2]
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	8912      	ldrh	r2, [r2, #8]
 800b566:	1a9b      	subs	r3, r3, r2
 800b568:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b56a:	887b      	ldrh	r3, [r7, #2]
 800b56c:	827b      	strh	r3, [r7, #18]
  q = p;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b572:	e025      	b.n	800b5c0 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	895b      	ldrh	r3, [r3, #10]
 800b578:	8a7a      	ldrh	r2, [r7, #18]
 800b57a:	1ad3      	subs	r3, r2, r3
 800b57c:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b584:	4293      	cmp	r3, r2
 800b586:	dd06      	ble.n	800b596 <pbuf_realloc+0x8e>
 800b588:	4b2f      	ldr	r3, [pc, #188]	; (800b648 <pbuf_realloc+0x140>)
 800b58a:	f240 220b 	movw	r2, #523	; 0x20b
 800b58e:	4932      	ldr	r1, [pc, #200]	; (800b658 <pbuf_realloc+0x150>)
 800b590:	482f      	ldr	r0, [pc, #188]	; (800b650 <pbuf_realloc+0x148>)
 800b592:	f008 f9dd 	bl	8013950 <iprintf>
    q->tot_len += (u16_t)grow;
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	891a      	ldrh	r2, [r3, #8]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	4413      	add	r3, r2
 800b5a0:	b29a      	uxth	r2, r3
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d106      	bne.n	800b5c0 <pbuf_realloc+0xb8>
 800b5b2:	4b25      	ldr	r3, [pc, #148]	; (800b648 <pbuf_realloc+0x140>)
 800b5b4:	f240 220f 	movw	r2, #527	; 0x20f
 800b5b8:	4928      	ldr	r1, [pc, #160]	; (800b65c <pbuf_realloc+0x154>)
 800b5ba:	4825      	ldr	r0, [pc, #148]	; (800b650 <pbuf_realloc+0x148>)
 800b5bc:	f008 f9c8 	bl	8013950 <iprintf>
  while (rem_len > q->len) {
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	895b      	ldrh	r3, [r3, #10]
 800b5c4:	8a7a      	ldrh	r2, [r7, #18]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d8d4      	bhi.n	800b574 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	7b1b      	ldrb	r3, [r3, #12]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d121      	bne.n	800b616 <pbuf_realloc+0x10e>
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	895b      	ldrh	r3, [r3, #10]
 800b5d6:	8a7a      	ldrh	r2, [r7, #18]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d01c      	beq.n	800b616 <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	7b5b      	ldrb	r3, [r3, #13]
 800b5e0:	f003 0302 	and.w	r3, r3, #2
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d116      	bne.n	800b616 <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	685a      	ldr	r2, [r3, #4]
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	1ad3      	subs	r3, r2, r3
 800b5f0:	b29a      	uxth	r2, r3
 800b5f2:	8a7b      	ldrh	r3, [r7, #18]
 800b5f4:	4413      	add	r3, r2
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	6978      	ldr	r0, [r7, #20]
 800b5fc:	f7ff f93c 	bl	800a878 <mem_trim>
 800b600:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d106      	bne.n	800b616 <pbuf_realloc+0x10e>
 800b608:	4b0f      	ldr	r3, [pc, #60]	; (800b648 <pbuf_realloc+0x140>)
 800b60a:	f240 221d 	movw	r2, #541	; 0x21d
 800b60e:	4914      	ldr	r1, [pc, #80]	; (800b660 <pbuf_realloc+0x158>)
 800b610:	480f      	ldr	r0, [pc, #60]	; (800b650 <pbuf_realloc+0x148>)
 800b612:	f008 f99d 	bl	8013950 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	8a7a      	ldrh	r2, [r7, #18]
 800b61a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	895a      	ldrh	r2, [r3, #10]
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d004      	beq.n	800b636 <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4618      	mov	r0, r3
 800b632:	f000 f8dd 	bl	800b7f0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	2200      	movs	r2, #0
 800b63a:	601a      	str	r2, [r3, #0]
 800b63c:	e000      	b.n	800b640 <pbuf_realloc+0x138>
    return;
 800b63e:	bf00      	nop

}
 800b640:	3718      	adds	r7, #24
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
 800b646:	bf00      	nop
 800b648:	08015210 	.word	0x08015210
 800b64c:	080153cc 	.word	0x080153cc
 800b650:	0801525c 	.word	0x0801525c
 800b654:	080153e4 	.word	0x080153e4
 800b658:	08015400 	.word	0x08015400
 800b65c:	08015414 	.word	0x08015414
 800b660:	0801542c 	.word	0x0801542c

0800b664 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b084      	sub	sp, #16
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	460b      	mov	r3, r1
 800b66e:	807b      	strh	r3, [r7, #2]
 800b670:	4613      	mov	r3, r2
 800b672:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d106      	bne.n	800b688 <pbuf_header_impl+0x24>
 800b67a:	4b46      	ldr	r3, [pc, #280]	; (800b794 <pbuf_header_impl+0x130>)
 800b67c:	f240 223f 	movw	r2, #575	; 0x23f
 800b680:	4945      	ldr	r1, [pc, #276]	; (800b798 <pbuf_header_impl+0x134>)
 800b682:	4846      	ldr	r0, [pc, #280]	; (800b79c <pbuf_header_impl+0x138>)
 800b684:	f008 f964 	bl	8013950 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800b688:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d002      	beq.n	800b696 <pbuf_header_impl+0x32>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d101      	bne.n	800b69a <pbuf_header_impl+0x36>
    return 0;
 800b696:	2300      	movs	r3, #0
 800b698:	e078      	b.n	800b78c <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800b69a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	da10      	bge.n	800b6c4 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800b6a2:	887b      	ldrh	r3, [r7, #2]
 800b6a4:	425b      	negs	r3, r3
 800b6a6:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	895b      	ldrh	r3, [r3, #10]
 800b6ac:	89fa      	ldrh	r2, [r7, #14]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d90a      	bls.n	800b6c8 <pbuf_header_impl+0x64>
 800b6b2:	4b38      	ldr	r3, [pc, #224]	; (800b794 <pbuf_header_impl+0x130>)
 800b6b4:	f240 2247 	movw	r2, #583	; 0x247
 800b6b8:	4939      	ldr	r1, [pc, #228]	; (800b7a0 <pbuf_header_impl+0x13c>)
 800b6ba:	4838      	ldr	r0, [pc, #224]	; (800b79c <pbuf_header_impl+0x138>)
 800b6bc:	f008 f948 	bl	8013950 <iprintf>
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	e063      	b.n	800b78c <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800b6c4:	887b      	ldrh	r3, [r7, #2]
 800b6c6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	7b1b      	ldrb	r3, [r3, #12]
 800b6cc:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800b6d4:	89bb      	ldrh	r3, [r7, #12]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d002      	beq.n	800b6e0 <pbuf_header_impl+0x7c>
 800b6da:	89bb      	ldrh	r3, [r7, #12]
 800b6dc:	2b03      	cmp	r3, #3
 800b6de:	d112      	bne.n	800b706 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	685a      	ldr	r2, [r3, #4]
 800b6e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b6e8:	425b      	negs	r3, r3
 800b6ea:	441a      	add	r2, r3
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	685a      	ldr	r2, [r3, #4]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	3310      	adds	r3, #16
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d238      	bcs.n	800b76e <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	68ba      	ldr	r2, [r7, #8]
 800b700:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800b702:	2301      	movs	r3, #1
 800b704:	e042      	b.n	800b78c <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800b706:	89bb      	ldrh	r3, [r7, #12]
 800b708:	2b02      	cmp	r3, #2
 800b70a:	d002      	beq.n	800b712 <pbuf_header_impl+0xae>
 800b70c:	89bb      	ldrh	r3, [r7, #12]
 800b70e:	2b01      	cmp	r3, #1
 800b710:	d124      	bne.n	800b75c <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800b712:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b716:	2b00      	cmp	r3, #0
 800b718:	da0d      	bge.n	800b736 <pbuf_header_impl+0xd2>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	895b      	ldrh	r3, [r3, #10]
 800b71e:	89fa      	ldrh	r2, [r7, #14]
 800b720:	429a      	cmp	r2, r3
 800b722:	d808      	bhi.n	800b736 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	685a      	ldr	r2, [r3, #4]
 800b728:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b72c:	425b      	negs	r3, r3
 800b72e:	441a      	add	r2, r3
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	605a      	str	r2, [r3, #4]
 800b734:	e011      	b.n	800b75a <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800b736:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	dd0b      	ble.n	800b756 <pbuf_header_impl+0xf2>
 800b73e:	787b      	ldrb	r3, [r7, #1]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d008      	beq.n	800b756 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	685a      	ldr	r2, [r3, #4]
 800b748:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b74c:	425b      	negs	r3, r3
 800b74e:	441a      	add	r2, r3
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	605a      	str	r2, [r3, #4]
 800b754:	e001      	b.n	800b75a <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b756:	2301      	movs	r3, #1
 800b758:	e018      	b.n	800b78c <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800b75a:	e008      	b.n	800b76e <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800b75c:	4b0d      	ldr	r3, [pc, #52]	; (800b794 <pbuf_header_impl+0x130>)
 800b75e:	f240 2277 	movw	r2, #631	; 0x277
 800b762:	4910      	ldr	r1, [pc, #64]	; (800b7a4 <pbuf_header_impl+0x140>)
 800b764:	480d      	ldr	r0, [pc, #52]	; (800b79c <pbuf_header_impl+0x138>)
 800b766:	f008 f8f3 	bl	8013950 <iprintf>
    return 1;
 800b76a:	2301      	movs	r3, #1
 800b76c:	e00e      	b.n	800b78c <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	895a      	ldrh	r2, [r3, #10]
 800b772:	887b      	ldrh	r3, [r7, #2]
 800b774:	4413      	add	r3, r2
 800b776:	b29a      	uxth	r2, r3
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	891a      	ldrh	r2, [r3, #8]
 800b780:	887b      	ldrh	r3, [r7, #2]
 800b782:	4413      	add	r3, r2
 800b784:	b29a      	uxth	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800b78a:	2300      	movs	r3, #0
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3710      	adds	r7, #16
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}
 800b794:	08015210 	.word	0x08015210
 800b798:	08015448 	.word	0x08015448
 800b79c:	0801525c 	.word	0x0801525c
 800b7a0:	08015454 	.word	0x08015454
 800b7a4:	08015474 	.word	0x08015474

0800b7a8 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800b7b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f7ff ff51 	bl	800b664 <pbuf_header_impl>
 800b7c2:	4603      	mov	r3, r0
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3708      	adds	r7, #8
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800b7d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b7dc:	2201      	movs	r2, #1
 800b7de:	4619      	mov	r1, r3
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f7ff ff3f 	bl	800b664 <pbuf_header_impl>
 800b7e6:	4603      	mov	r3, r0
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3708      	adds	r7, #8
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d10b      	bne.n	800b816 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d106      	bne.n	800b812 <pbuf_free+0x22>
 800b804:	4b3e      	ldr	r3, [pc, #248]	; (800b900 <pbuf_free+0x110>)
 800b806:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b80a:	493e      	ldr	r1, [pc, #248]	; (800b904 <pbuf_free+0x114>)
 800b80c:	483e      	ldr	r0, [pc, #248]	; (800b908 <pbuf_free+0x118>)
 800b80e:	f008 f89f 	bl	8013950 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b812:	2300      	movs	r3, #0
 800b814:	e070      	b.n	800b8f8 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	7b1b      	ldrb	r3, [r3, #12]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d012      	beq.n	800b844 <pbuf_free+0x54>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	7b1b      	ldrb	r3, [r3, #12]
 800b822:	2b01      	cmp	r3, #1
 800b824:	d00e      	beq.n	800b844 <pbuf_free+0x54>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	7b1b      	ldrb	r3, [r3, #12]
 800b82a:	2b02      	cmp	r3, #2
 800b82c:	d00a      	beq.n	800b844 <pbuf_free+0x54>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	7b1b      	ldrb	r3, [r3, #12]
 800b832:	2b03      	cmp	r3, #3
 800b834:	d006      	beq.n	800b844 <pbuf_free+0x54>
 800b836:	4b32      	ldr	r3, [pc, #200]	; (800b900 <pbuf_free+0x110>)
 800b838:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b83c:	4933      	ldr	r1, [pc, #204]	; (800b90c <pbuf_free+0x11c>)
 800b83e:	4832      	ldr	r0, [pc, #200]	; (800b908 <pbuf_free+0x118>)
 800b840:	f008 f886 	bl	8013950 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800b844:	2300      	movs	r3, #0
 800b846:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b848:	e052      	b.n	800b8f0 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	89db      	ldrh	r3, [r3, #14]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d106      	bne.n	800b860 <pbuf_free+0x70>
 800b852:	4b2b      	ldr	r3, [pc, #172]	; (800b900 <pbuf_free+0x110>)
 800b854:	f240 22eb 	movw	r2, #747	; 0x2eb
 800b858:	492d      	ldr	r1, [pc, #180]	; (800b910 <pbuf_free+0x120>)
 800b85a:	482b      	ldr	r0, [pc, #172]	; (800b908 <pbuf_free+0x118>)
 800b85c:	f008 f878 	bl	8013950 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	89db      	ldrh	r3, [r3, #14]
 800b864:	3b01      	subs	r3, #1
 800b866:	b29a      	uxth	r2, r3
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	81da      	strh	r2, [r3, #14]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	89db      	ldrh	r3, [r3, #14]
 800b870:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b872:	8abb      	ldrh	r3, [r7, #20]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d139      	bne.n	800b8ec <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	7b1b      	ldrb	r3, [r3, #12]
 800b882:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	7b5b      	ldrb	r3, [r3, #13]
 800b888:	f003 0302 	and.w	r3, r3, #2
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d011      	beq.n	800b8b4 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	691b      	ldr	r3, [r3, #16]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d106      	bne.n	800b8aa <pbuf_free+0xba>
 800b89c:	4b18      	ldr	r3, [pc, #96]	; (800b900 <pbuf_free+0x110>)
 800b89e:	f240 22f9 	movw	r2, #761	; 0x2f9
 800b8a2:	491c      	ldr	r1, [pc, #112]	; (800b914 <pbuf_free+0x124>)
 800b8a4:	4818      	ldr	r0, [pc, #96]	; (800b908 <pbuf_free+0x118>)
 800b8a6:	f008 f853 	bl	8013950 <iprintf>
        pc->custom_free_function(p);
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	691b      	ldr	r3, [r3, #16]
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	4798      	blx	r3
 800b8b2:	e015      	b.n	800b8e0 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800b8b4:	89fb      	ldrh	r3, [r7, #14]
 800b8b6:	2b03      	cmp	r3, #3
 800b8b8:	d104      	bne.n	800b8c4 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 800b8ba:	6879      	ldr	r1, [r7, #4]
 800b8bc:	2008      	movs	r0, #8
 800b8be:	f7ff fa5f 	bl	800ad80 <memp_free>
 800b8c2:	e00d      	b.n	800b8e0 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800b8c4:	89fb      	ldrh	r3, [r7, #14]
 800b8c6:	2b01      	cmp	r3, #1
 800b8c8:	d002      	beq.n	800b8d0 <pbuf_free+0xe0>
 800b8ca:	89fb      	ldrh	r3, [r7, #14]
 800b8cc:	2b02      	cmp	r3, #2
 800b8ce:	d104      	bne.n	800b8da <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 800b8d0:	6879      	ldr	r1, [r7, #4]
 800b8d2:	2007      	movs	r0, #7
 800b8d4:	f7ff fa54 	bl	800ad80 <memp_free>
 800b8d8:	e002      	b.n	800b8e0 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f7fe ff6a 	bl	800a7b4 <mem_free>
        }
      }
      count++;
 800b8e0:	7dfb      	ldrb	r3, [r7, #23]
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	607b      	str	r3, [r7, #4]
 800b8ea:	e001      	b.n	800b8f0 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d1a9      	bne.n	800b84a <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b8f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3718      	adds	r7, #24
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	08015210 	.word	0x08015210
 800b904:	08015448 	.word	0x08015448
 800b908:	0801525c 	.word	0x0801525c
 800b90c:	08015484 	.word	0x08015484
 800b910:	0801549c 	.word	0x0801549c
 800b914:	080154b4 	.word	0x080154b4

0800b918 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b918:	b480      	push	{r7}
 800b91a:	b085      	sub	sp, #20
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b920:	2300      	movs	r3, #0
 800b922:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b924:	e005      	b.n	800b932 <pbuf_clen+0x1a>
    ++len;
 800b926:	89fb      	ldrh	r3, [r7, #14]
 800b928:	3301      	adds	r3, #1
 800b92a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d1f6      	bne.n	800b926 <pbuf_clen+0xe>
  }
  return len;
 800b938:	89fb      	ldrh	r3, [r7, #14]
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3714      	adds	r7, #20
 800b93e:	46bd      	mov	sp, r7
 800b940:	bc80      	pop	{r7}
 800b942:	4770      	bx	lr

0800b944 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b082      	sub	sp, #8
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d010      	beq.n	800b974 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	89db      	ldrh	r3, [r3, #14]
 800b956:	3301      	adds	r3, #1
 800b958:	b29a      	uxth	r2, r3
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	89db      	ldrh	r3, [r3, #14]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d106      	bne.n	800b974 <pbuf_ref+0x30>
 800b966:	4b05      	ldr	r3, [pc, #20]	; (800b97c <pbuf_ref+0x38>)
 800b968:	f240 3239 	movw	r2, #825	; 0x339
 800b96c:	4904      	ldr	r1, [pc, #16]	; (800b980 <pbuf_ref+0x3c>)
 800b96e:	4805      	ldr	r0, [pc, #20]	; (800b984 <pbuf_ref+0x40>)
 800b970:	f007 ffee 	bl	8013950 <iprintf>
  }
}
 800b974:	bf00      	nop
 800b976:	3708      	adds	r7, #8
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	08015210 	.word	0x08015210
 800b980:	080154d8 	.word	0x080154d8
 800b984:	0801525c 	.word	0x0801525c

0800b988 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d002      	beq.n	800b99e <pbuf_cat+0x16>
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d107      	bne.n	800b9ae <pbuf_cat+0x26>
 800b99e:	4b20      	ldr	r3, [pc, #128]	; (800ba20 <pbuf_cat+0x98>)
 800b9a0:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800b9a4:	491f      	ldr	r1, [pc, #124]	; (800ba24 <pbuf_cat+0x9c>)
 800b9a6:	4820      	ldr	r0, [pc, #128]	; (800ba28 <pbuf_cat+0xa0>)
 800b9a8:	f007 ffd2 	bl	8013950 <iprintf>
 800b9ac:	e034      	b.n	800ba18 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	60fb      	str	r3, [r7, #12]
 800b9b2:	e00a      	b.n	800b9ca <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	891a      	ldrh	r2, [r3, #8]
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	891b      	ldrh	r3, [r3, #8]
 800b9bc:	4413      	add	r3, r2
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	60fb      	str	r3, [r7, #12]
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d1f0      	bne.n	800b9b4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	891a      	ldrh	r2, [r3, #8]
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	895b      	ldrh	r3, [r3, #10]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d006      	beq.n	800b9ec <pbuf_cat+0x64>
 800b9de:	4b10      	ldr	r3, [pc, #64]	; (800ba20 <pbuf_cat+0x98>)
 800b9e0:	f240 3255 	movw	r2, #853	; 0x355
 800b9e4:	4911      	ldr	r1, [pc, #68]	; (800ba2c <pbuf_cat+0xa4>)
 800b9e6:	4810      	ldr	r0, [pc, #64]	; (800ba28 <pbuf_cat+0xa0>)
 800b9e8:	f007 ffb2 	bl	8013950 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d006      	beq.n	800ba02 <pbuf_cat+0x7a>
 800b9f4:	4b0a      	ldr	r3, [pc, #40]	; (800ba20 <pbuf_cat+0x98>)
 800b9f6:	f240 3256 	movw	r2, #854	; 0x356
 800b9fa:	490d      	ldr	r1, [pc, #52]	; (800ba30 <pbuf_cat+0xa8>)
 800b9fc:	480a      	ldr	r0, [pc, #40]	; (800ba28 <pbuf_cat+0xa0>)
 800b9fe:	f007 ffa7 	bl	8013950 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	891a      	ldrh	r2, [r3, #8]
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	891b      	ldrh	r3, [r3, #8]
 800ba0a:	4413      	add	r3, r2
 800ba0c:	b29a      	uxth	r2, r3
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	683a      	ldr	r2, [r7, #0]
 800ba16:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	08015210 	.word	0x08015210
 800ba24:	080154ec 	.word	0x080154ec
 800ba28:	0801525c 	.word	0x0801525c
 800ba2c:	08015524 	.word	0x08015524
 800ba30:	08015554 	.word	0x08015554

0800ba34 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800ba3e:	6839      	ldr	r1, [r7, #0]
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f7ff ffa1 	bl	800b988 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800ba46:	6838      	ldr	r0, [r7, #0]
 800ba48:	f7ff ff7c 	bl	800b944 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800ba4c:	bf00      	nop
 800ba4e:	3708      	adds	r7, #8
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	81fb      	strh	r3, [r7, #14]
 800ba62:	2300      	movs	r3, #0
 800ba64:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d008      	beq.n	800ba7e <pbuf_copy+0x2a>
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d005      	beq.n	800ba7e <pbuf_copy+0x2a>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	891a      	ldrh	r2, [r3, #8]
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	891b      	ldrh	r3, [r3, #8]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d209      	bcs.n	800ba92 <pbuf_copy+0x3e>
 800ba7e:	4b54      	ldr	r3, [pc, #336]	; (800bbd0 <pbuf_copy+0x17c>)
 800ba80:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800ba84:	4953      	ldr	r1, [pc, #332]	; (800bbd4 <pbuf_copy+0x180>)
 800ba86:	4854      	ldr	r0, [pc, #336]	; (800bbd8 <pbuf_copy+0x184>)
 800ba88:	f007 ff62 	bl	8013950 <iprintf>
 800ba8c:	f06f 030f 	mvn.w	r3, #15
 800ba90:	e099      	b.n	800bbc6 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	895b      	ldrh	r3, [r3, #10]
 800ba96:	461a      	mov	r2, r3
 800ba98:	89fb      	ldrh	r3, [r7, #14]
 800ba9a:	1ad2      	subs	r2, r2, r3
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	895b      	ldrh	r3, [r3, #10]
 800baa0:	4619      	mov	r1, r3
 800baa2:	89bb      	ldrh	r3, [r7, #12]
 800baa4:	1acb      	subs	r3, r1, r3
 800baa6:	429a      	cmp	r2, r3
 800baa8:	db05      	blt.n	800bab6 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	895a      	ldrh	r2, [r3, #10]
 800baae:	89bb      	ldrh	r3, [r7, #12]
 800bab0:	1ad3      	subs	r3, r2, r3
 800bab2:	817b      	strh	r3, [r7, #10]
 800bab4:	e004      	b.n	800bac0 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	895a      	ldrh	r2, [r3, #10]
 800baba:	89fb      	ldrh	r3, [r7, #14]
 800babc:	1ad3      	subs	r3, r2, r3
 800babe:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	685a      	ldr	r2, [r3, #4]
 800bac4:	89fb      	ldrh	r3, [r7, #14]
 800bac6:	18d0      	adds	r0, r2, r3
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	685a      	ldr	r2, [r3, #4]
 800bacc:	89bb      	ldrh	r3, [r7, #12]
 800bace:	4413      	add	r3, r2
 800bad0:	897a      	ldrh	r2, [r7, #10]
 800bad2:	4619      	mov	r1, r3
 800bad4:	f007 fe66 	bl	80137a4 <memcpy>
    offset_to += len;
 800bad8:	89fa      	ldrh	r2, [r7, #14]
 800bada:	897b      	ldrh	r3, [r7, #10]
 800badc:	4413      	add	r3, r2
 800bade:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800bae0:	89ba      	ldrh	r2, [r7, #12]
 800bae2:	897b      	ldrh	r3, [r7, #10]
 800bae4:	4413      	add	r3, r2
 800bae6:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	895b      	ldrh	r3, [r3, #10]
 800baec:	89fa      	ldrh	r2, [r7, #14]
 800baee:	429a      	cmp	r2, r3
 800baf0:	d906      	bls.n	800bb00 <pbuf_copy+0xac>
 800baf2:	4b37      	ldr	r3, [pc, #220]	; (800bbd0 <pbuf_copy+0x17c>)
 800baf4:	f240 32cd 	movw	r2, #973	; 0x3cd
 800baf8:	4938      	ldr	r1, [pc, #224]	; (800bbdc <pbuf_copy+0x188>)
 800bafa:	4837      	ldr	r0, [pc, #220]	; (800bbd8 <pbuf_copy+0x184>)
 800bafc:	f007 ff28 	bl	8013950 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	895b      	ldrh	r3, [r3, #10]
 800bb04:	89ba      	ldrh	r2, [r7, #12]
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d906      	bls.n	800bb18 <pbuf_copy+0xc4>
 800bb0a:	4b31      	ldr	r3, [pc, #196]	; (800bbd0 <pbuf_copy+0x17c>)
 800bb0c:	f240 32ce 	movw	r2, #974	; 0x3ce
 800bb10:	4933      	ldr	r1, [pc, #204]	; (800bbe0 <pbuf_copy+0x18c>)
 800bb12:	4831      	ldr	r0, [pc, #196]	; (800bbd8 <pbuf_copy+0x184>)
 800bb14:	f007 ff1c 	bl	8013950 <iprintf>
    if (offset_from >= p_from->len) {
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	895b      	ldrh	r3, [r3, #10]
 800bb1c:	89ba      	ldrh	r2, [r7, #12]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d304      	bcc.n	800bb2c <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bb22:	2300      	movs	r3, #0
 800bb24:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	895b      	ldrh	r3, [r3, #10]
 800bb30:	89fa      	ldrh	r2, [r7, #14]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d114      	bne.n	800bb60 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bb36:	2300      	movs	r3, #0
 800bb38:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d10c      	bne.n	800bb60 <pbuf_copy+0x10c>
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d009      	beq.n	800bb60 <pbuf_copy+0x10c>
 800bb4c:	4b20      	ldr	r3, [pc, #128]	; (800bbd0 <pbuf_copy+0x17c>)
 800bb4e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800bb52:	4924      	ldr	r1, [pc, #144]	; (800bbe4 <pbuf_copy+0x190>)
 800bb54:	4820      	ldr	r0, [pc, #128]	; (800bbd8 <pbuf_copy+0x184>)
 800bb56:	f007 fefb 	bl	8013950 <iprintf>
 800bb5a:	f06f 030f 	mvn.w	r3, #15
 800bb5e:	e032      	b.n	800bbc6 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d013      	beq.n	800bb8e <pbuf_copy+0x13a>
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	895a      	ldrh	r2, [r3, #10]
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	891b      	ldrh	r3, [r3, #8]
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d10d      	bne.n	800bb8e <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d009      	beq.n	800bb8e <pbuf_copy+0x13a>
 800bb7a:	4b15      	ldr	r3, [pc, #84]	; (800bbd0 <pbuf_copy+0x17c>)
 800bb7c:	f240 32dd 	movw	r2, #989	; 0x3dd
 800bb80:	4919      	ldr	r1, [pc, #100]	; (800bbe8 <pbuf_copy+0x194>)
 800bb82:	4815      	ldr	r0, [pc, #84]	; (800bbd8 <pbuf_copy+0x184>)
 800bb84:	f007 fee4 	bl	8013950 <iprintf>
 800bb88:	f06f 0305 	mvn.w	r3, #5
 800bb8c:	e01b      	b.n	800bbc6 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d013      	beq.n	800bbbc <pbuf_copy+0x168>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	895a      	ldrh	r2, [r3, #10]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	891b      	ldrh	r3, [r3, #8]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d10d      	bne.n	800bbbc <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d009      	beq.n	800bbbc <pbuf_copy+0x168>
 800bba8:	4b09      	ldr	r3, [pc, #36]	; (800bbd0 <pbuf_copy+0x17c>)
 800bbaa:	f240 32e2 	movw	r2, #994	; 0x3e2
 800bbae:	490e      	ldr	r1, [pc, #56]	; (800bbe8 <pbuf_copy+0x194>)
 800bbb0:	4809      	ldr	r0, [pc, #36]	; (800bbd8 <pbuf_copy+0x184>)
 800bbb2:	f007 fecd 	bl	8013950 <iprintf>
 800bbb6:	f06f 0305 	mvn.w	r3, #5
 800bbba:	e004      	b.n	800bbc6 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	f47f af67 	bne.w	800ba92 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	08015210 	.word	0x08015210
 800bbd4:	080155a0 	.word	0x080155a0
 800bbd8:	0801525c 	.word	0x0801525c
 800bbdc:	080155d0 	.word	0x080155d0
 800bbe0:	080155e8 	.word	0x080155e8
 800bbe4:	08015604 	.word	0x08015604
 800bbe8:	08015614 	.word	0x08015614

0800bbec <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b088      	sub	sp, #32
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	60b9      	str	r1, [r7, #8]
 800bbf6:	4611      	mov	r1, r2
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	80fb      	strh	r3, [r7, #6]
 800bbfe:	4613      	mov	r3, r2
 800bc00:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bc02:	2300      	movs	r3, #0
 800bc04:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d108      	bne.n	800bc1e <pbuf_copy_partial+0x32>
 800bc0c:	4b30      	ldr	r3, [pc, #192]	; (800bcd0 <pbuf_copy_partial+0xe4>)
 800bc0e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800bc12:	4930      	ldr	r1, [pc, #192]	; (800bcd4 <pbuf_copy_partial+0xe8>)
 800bc14:	4830      	ldr	r0, [pc, #192]	; (800bcd8 <pbuf_copy_partial+0xec>)
 800bc16:	f007 fe9b 	bl	8013950 <iprintf>
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	e054      	b.n	800bcc8 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d108      	bne.n	800bc36 <pbuf_copy_partial+0x4a>
 800bc24:	4b2a      	ldr	r3, [pc, #168]	; (800bcd0 <pbuf_copy_partial+0xe4>)
 800bc26:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800bc2a:	492c      	ldr	r1, [pc, #176]	; (800bcdc <pbuf_copy_partial+0xf0>)
 800bc2c:	482a      	ldr	r0, [pc, #168]	; (800bcd8 <pbuf_copy_partial+0xec>)
 800bc2e:	f007 fe8f 	bl	8013950 <iprintf>
 800bc32:	2300      	movs	r3, #0
 800bc34:	e048      	b.n	800bcc8 <pbuf_copy_partial+0xdc>

  left = 0;
 800bc36:	2300      	movs	r3, #0
 800bc38:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d002      	beq.n	800bc46 <pbuf_copy_partial+0x5a>
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d101      	bne.n	800bc4a <pbuf_copy_partial+0x5e>
    return 0;
 800bc46:	2300      	movs	r3, #0
 800bc48:	e03e      	b.n	800bcc8 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	61fb      	str	r3, [r7, #28]
 800bc4e:	e034      	b.n	800bcba <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800bc50:	88bb      	ldrh	r3, [r7, #4]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d00a      	beq.n	800bc6c <pbuf_copy_partial+0x80>
 800bc56:	69fb      	ldr	r3, [r7, #28]
 800bc58:	895b      	ldrh	r3, [r3, #10]
 800bc5a:	88ba      	ldrh	r2, [r7, #4]
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d305      	bcc.n	800bc6c <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800bc60:	69fb      	ldr	r3, [r7, #28]
 800bc62:	895b      	ldrh	r3, [r3, #10]
 800bc64:	88ba      	ldrh	r2, [r7, #4]
 800bc66:	1ad3      	subs	r3, r2, r3
 800bc68:	80bb      	strh	r3, [r7, #4]
 800bc6a:	e023      	b.n	800bcb4 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800bc6c:	69fb      	ldr	r3, [r7, #28]
 800bc6e:	895a      	ldrh	r2, [r3, #10]
 800bc70:	88bb      	ldrh	r3, [r7, #4]
 800bc72:	1ad3      	subs	r3, r2, r3
 800bc74:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bc76:	8b3a      	ldrh	r2, [r7, #24]
 800bc78:	88fb      	ldrh	r3, [r7, #6]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d901      	bls.n	800bc82 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800bc7e:	88fb      	ldrh	r3, [r7, #6]
 800bc80:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800bc82:	8b7b      	ldrh	r3, [r7, #26]
 800bc84:	68ba      	ldr	r2, [r7, #8]
 800bc86:	18d0      	adds	r0, r2, r3
 800bc88:	69fb      	ldr	r3, [r7, #28]
 800bc8a:	685a      	ldr	r2, [r3, #4]
 800bc8c:	88bb      	ldrh	r3, [r7, #4]
 800bc8e:	4413      	add	r3, r2
 800bc90:	8b3a      	ldrh	r2, [r7, #24]
 800bc92:	4619      	mov	r1, r3
 800bc94:	f007 fd86 	bl	80137a4 <memcpy>
      copied_total += buf_copy_len;
 800bc98:	8afa      	ldrh	r2, [r7, #22]
 800bc9a:	8b3b      	ldrh	r3, [r7, #24]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800bca0:	8b7a      	ldrh	r2, [r7, #26]
 800bca2:	8b3b      	ldrh	r3, [r7, #24]
 800bca4:	4413      	add	r3, r2
 800bca6:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800bca8:	88fa      	ldrh	r2, [r7, #6]
 800bcaa:	8b3b      	ldrh	r3, [r7, #24]
 800bcac:	1ad3      	subs	r3, r2, r3
 800bcae:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bcb4:	69fb      	ldr	r3, [r7, #28]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	61fb      	str	r3, [r7, #28]
 800bcba:	88fb      	ldrh	r3, [r7, #6]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d002      	beq.n	800bcc6 <pbuf_copy_partial+0xda>
 800bcc0:	69fb      	ldr	r3, [r7, #28]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d1c4      	bne.n	800bc50 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800bcc6:	8afb      	ldrh	r3, [r7, #22]
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3720      	adds	r7, #32
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}
 800bcd0:	08015210 	.word	0x08015210
 800bcd4:	08015640 	.word	0x08015640
 800bcd8:	0801525c 	.word	0x0801525c
 800bcdc:	08015660 	.word	0x08015660

0800bce0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b088      	sub	sp, #32
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	4613      	mov	r3, r2
 800bcec:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
 800bcee:	88fb      	ldrh	r3, [r7, #6]
 800bcf0:	833b      	strh	r3, [r7, #24]
  u16_t copied_total = 0;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d109      	bne.n	800bd10 <pbuf_take+0x30>
 800bcfc:	4b3a      	ldr	r3, [pc, #232]	; (800bde8 <pbuf_take+0x108>)
 800bcfe:	f240 4284 	movw	r2, #1156	; 0x484
 800bd02:	493a      	ldr	r1, [pc, #232]	; (800bdec <pbuf_take+0x10c>)
 800bd04:	483a      	ldr	r0, [pc, #232]	; (800bdf0 <pbuf_take+0x110>)
 800bd06:	f007 fe23 	bl	8013950 <iprintf>
 800bd0a:	f06f 030f 	mvn.w	r3, #15
 800bd0e:	e066      	b.n	800bdde <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d109      	bne.n	800bd2a <pbuf_take+0x4a>
 800bd16:	4b34      	ldr	r3, [pc, #208]	; (800bde8 <pbuf_take+0x108>)
 800bd18:	f240 4285 	movw	r2, #1157	; 0x485
 800bd1c:	4935      	ldr	r1, [pc, #212]	; (800bdf4 <pbuf_take+0x114>)
 800bd1e:	4834      	ldr	r0, [pc, #208]	; (800bdf0 <pbuf_take+0x110>)
 800bd20:	f007 fe16 	bl	8013950 <iprintf>
 800bd24:	f06f 030f 	mvn.w	r3, #15
 800bd28:	e059      	b.n	800bdde <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	891b      	ldrh	r3, [r3, #8]
 800bd2e:	88fa      	ldrh	r2, [r7, #6]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d909      	bls.n	800bd48 <pbuf_take+0x68>
 800bd34:	4b2c      	ldr	r3, [pc, #176]	; (800bde8 <pbuf_take+0x108>)
 800bd36:	f240 4286 	movw	r2, #1158	; 0x486
 800bd3a:	492f      	ldr	r1, [pc, #188]	; (800bdf8 <pbuf_take+0x118>)
 800bd3c:	482c      	ldr	r0, [pc, #176]	; (800bdf0 <pbuf_take+0x110>)
 800bd3e:	f007 fe07 	bl	8013950 <iprintf>
 800bd42:	f04f 33ff 	mov.w	r3, #4294967295
 800bd46:	e04a      	b.n	800bdde <pbuf_take+0xfe>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d007      	beq.n	800bd5e <pbuf_take+0x7e>
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d004      	beq.n	800bd5e <pbuf_take+0x7e>
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	891b      	ldrh	r3, [r3, #8]
 800bd58:	88fa      	ldrh	r2, [r7, #6]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d902      	bls.n	800bd64 <pbuf_take+0x84>
    return ERR_ARG;
 800bd5e:	f06f 030f 	mvn.w	r3, #15
 800bd62:	e03c      	b.n	800bdde <pbuf_take+0xfe>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	61fb      	str	r3, [r7, #28]
 800bd68:	e027      	b.n	800bdba <pbuf_take+0xda>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800bd6a:	69fb      	ldr	r3, [r7, #28]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d106      	bne.n	800bd7e <pbuf_take+0x9e>
 800bd70:	4b1d      	ldr	r3, [pc, #116]	; (800bde8 <pbuf_take+0x108>)
 800bd72:	f240 428e 	movw	r2, #1166	; 0x48e
 800bd76:	4921      	ldr	r1, [pc, #132]	; (800bdfc <pbuf_take+0x11c>)
 800bd78:	481d      	ldr	r0, [pc, #116]	; (800bdf0 <pbuf_take+0x110>)
 800bd7a:	f007 fde9 	bl	8013950 <iprintf>
    buf_copy_len = total_copy_len;
 800bd7e:	8b3b      	ldrh	r3, [r7, #24]
 800bd80:	837b      	strh	r3, [r7, #26]
    if (buf_copy_len > p->len) {
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	895b      	ldrh	r3, [r3, #10]
 800bd86:	8b7a      	ldrh	r2, [r7, #26]
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d902      	bls.n	800bd92 <pbuf_take+0xb2>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800bd8c:	69fb      	ldr	r3, [r7, #28]
 800bd8e:	895b      	ldrh	r3, [r3, #10]
 800bd90:	837b      	strh	r3, [r7, #26]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 800bd92:	69fb      	ldr	r3, [r7, #28]
 800bd94:	6858      	ldr	r0, [r3, #4]
 800bd96:	8afb      	ldrh	r3, [r7, #22]
 800bd98:	68ba      	ldr	r2, [r7, #8]
 800bd9a:	4413      	add	r3, r2
 800bd9c:	8b7a      	ldrh	r2, [r7, #26]
 800bd9e:	4619      	mov	r1, r3
 800bda0:	f007 fd00 	bl	80137a4 <memcpy>
    total_copy_len -= buf_copy_len;
 800bda4:	8b3a      	ldrh	r2, [r7, #24]
 800bda6:	8b7b      	ldrh	r3, [r7, #26]
 800bda8:	1ad3      	subs	r3, r2, r3
 800bdaa:	833b      	strh	r3, [r7, #24]
    copied_total += buf_copy_len;
 800bdac:	8afa      	ldrh	r2, [r7, #22]
 800bdae:	8b7b      	ldrh	r3, [r7, #26]
 800bdb0:	4413      	add	r3, r2
 800bdb2:	82fb      	strh	r3, [r7, #22]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800bdb4:	69fb      	ldr	r3, [r7, #28]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	61fb      	str	r3, [r7, #28]
 800bdba:	8b3b      	ldrh	r3, [r7, #24]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d1d4      	bne.n	800bd6a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800bdc0:	8b3b      	ldrh	r3, [r7, #24]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d103      	bne.n	800bdce <pbuf_take+0xee>
 800bdc6:	8afa      	ldrh	r2, [r7, #22]
 800bdc8:	88fb      	ldrh	r3, [r7, #6]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d006      	beq.n	800bddc <pbuf_take+0xfc>
 800bdce:	4b06      	ldr	r3, [pc, #24]	; (800bde8 <pbuf_take+0x108>)
 800bdd0:	f240 4299 	movw	r2, #1177	; 0x499
 800bdd4:	490a      	ldr	r1, [pc, #40]	; (800be00 <pbuf_take+0x120>)
 800bdd6:	4806      	ldr	r0, [pc, #24]	; (800bdf0 <pbuf_take+0x110>)
 800bdd8:	f007 fdba 	bl	8013950 <iprintf>
  return ERR_OK;
 800bddc:	2300      	movs	r3, #0
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3720      	adds	r7, #32
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
 800bde6:	bf00      	nop
 800bde8:	08015210 	.word	0x08015210
 800bdec:	08015684 	.word	0x08015684
 800bdf0:	0801525c 	.word	0x0801525c
 800bdf4:	0801569c 	.word	0x0801569c
 800bdf8:	080156b8 	.word	0x080156b8
 800bdfc:	080156d8 	.word	0x080156d8
 800be00:	080156f0 	.word	0x080156f0

0800be04 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800be04:	b480      	push	{r7}
 800be06:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800be08:	bf00      	nop
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bc80      	pop	{r7}
 800be0e:	4770      	bx	lr

0800be10 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800be14:	f000 fdfa 	bl	800ca0c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800be18:	4b07      	ldr	r3, [pc, #28]	; (800be38 <tcp_tmr+0x28>)
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	3301      	adds	r3, #1
 800be1e:	b2da      	uxtb	r2, r3
 800be20:	4b05      	ldr	r3, [pc, #20]	; (800be38 <tcp_tmr+0x28>)
 800be22:	701a      	strb	r2, [r3, #0]
 800be24:	4b04      	ldr	r3, [pc, #16]	; (800be38 <tcp_tmr+0x28>)
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	f003 0301 	and.w	r3, r3, #1
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d001      	beq.n	800be34 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800be30:	f000 fb2a 	bl	800c488 <tcp_slowtmr>
  }
}
 800be34:	bf00      	nop
 800be36:	bd80      	pop	{r7, pc}
 800be38:	200004fd 	.word	0x200004fd

0800be3c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b085      	sub	sp, #20
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	60fb      	str	r3, [r7, #12]
 800be4a:	e00a      	b.n	800be62 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be50:	683a      	ldr	r2, [r7, #0]
 800be52:	429a      	cmp	r2, r3
 800be54:	d102      	bne.n	800be5c <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2200      	movs	r2, #0
 800be5a:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	68db      	ldr	r3, [r3, #12]
 800be60:	60fb      	str	r3, [r7, #12]
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d1f1      	bne.n	800be4c <tcp_remove_listener+0x10>
      }
   }
}
 800be68:	bf00      	nop
 800be6a:	bf00      	nop
 800be6c:	3714      	adds	r7, #20
 800be6e:	46bd      	mov	sp, r7
 800be70:	bc80      	pop	{r7}
 800be72:	4770      	bx	lr

0800be74 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b084      	sub	sp, #16
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d105      	bne.n	800be8e <tcp_listen_closed+0x1a>
 800be82:	4b13      	ldr	r3, [pc, #76]	; (800bed0 <tcp_listen_closed+0x5c>)
 800be84:	22c0      	movs	r2, #192	; 0xc0
 800be86:	4913      	ldr	r1, [pc, #76]	; (800bed4 <tcp_listen_closed+0x60>)
 800be88:	4813      	ldr	r0, [pc, #76]	; (800bed8 <tcp_listen_closed+0x64>)
 800be8a:	f007 fd61 	bl	8013950 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	7d1b      	ldrb	r3, [r3, #20]
 800be92:	2b01      	cmp	r3, #1
 800be94:	d005      	beq.n	800bea2 <tcp_listen_closed+0x2e>
 800be96:	4b0e      	ldr	r3, [pc, #56]	; (800bed0 <tcp_listen_closed+0x5c>)
 800be98:	22c1      	movs	r2, #193	; 0xc1
 800be9a:	4910      	ldr	r1, [pc, #64]	; (800bedc <tcp_listen_closed+0x68>)
 800be9c:	480e      	ldr	r0, [pc, #56]	; (800bed8 <tcp_listen_closed+0x64>)
 800be9e:	f007 fd57 	bl	8013950 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bea2:	2301      	movs	r3, #1
 800bea4:	60fb      	str	r3, [r7, #12]
 800bea6:	e00b      	b.n	800bec0 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800bea8:	4a0d      	ldr	r2, [pc, #52]	; (800bee0 <tcp_listen_closed+0x6c>)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	6879      	ldr	r1, [r7, #4]
 800beb4:	4618      	mov	r0, r3
 800beb6:	f7ff ffc1 	bl	800be3c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	3301      	adds	r3, #1
 800bebe:	60fb      	str	r3, [r7, #12]
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2b03      	cmp	r3, #3
 800bec4:	d9f0      	bls.n	800bea8 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bec6:	bf00      	nop
 800bec8:	bf00      	nop
 800beca:	3710      	adds	r7, #16
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}
 800bed0:	08015794 	.word	0x08015794
 800bed4:	080157c4 	.word	0x080157c4
 800bed8:	080157d0 	.word	0x080157d0
 800bedc:	080157f8 	.word	0x080157f8
 800bee0:	08016c5c 	.word	0x08016c5c

0800bee4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bee4:	b5b0      	push	{r4, r5, r7, lr}
 800bee6:	b086      	sub	sp, #24
 800bee8:	af02      	add	r7, sp, #8
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	460b      	mov	r3, r1
 800beee:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bef0:	78fb      	ldrb	r3, [r7, #3]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d075      	beq.n	800bfe2 <tcp_close_shutdown+0xfe>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	7d1b      	ldrb	r3, [r3, #20]
 800befa:	2b04      	cmp	r3, #4
 800befc:	d003      	beq.n	800bf06 <tcp_close_shutdown+0x22>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	7d1b      	ldrb	r3, [r3, #20]
 800bf02:	2b07      	cmp	r3, #7
 800bf04:	d16d      	bne.n	800bfe2 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d104      	bne.n	800bf18 <tcp_close_shutdown+0x34>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf12:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bf16:	d064      	beq.n	800bfe2 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	7e9b      	ldrb	r3, [r3, #26]
 800bf1c:	f003 0310 	and.w	r3, r3, #16
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d106      	bne.n	800bf32 <tcp_close_shutdown+0x4e>
 800bf24:	4b5b      	ldr	r3, [pc, #364]	; (800c094 <tcp_close_shutdown+0x1b0>)
 800bf26:	f240 120f 	movw	r2, #271	; 0x10f
 800bf2a:	495b      	ldr	r1, [pc, #364]	; (800c098 <tcp_close_shutdown+0x1b4>)
 800bf2c:	485b      	ldr	r0, [pc, #364]	; (800c09c <tcp_close_shutdown+0x1b8>)
 800bf2e:	f007 fd0f 	bl	8013950 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800bf3a:	687c      	ldr	r4, [r7, #4]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	1d1d      	adds	r5, r3, #4
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	8adb      	ldrh	r3, [r3, #22]
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	8b12      	ldrh	r2, [r2, #24]
 800bf48:	9201      	str	r2, [sp, #4]
 800bf4a:	9300      	str	r3, [sp, #0]
 800bf4c:	462b      	mov	r3, r5
 800bf4e:	4622      	mov	r2, r4
 800bf50:	f004 f862 	bl	8010018 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f000 ffcf 	bl	800cef8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bf5a:	4b51      	ldr	r3, [pc, #324]	; (800c0a0 <tcp_close_shutdown+0x1bc>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d105      	bne.n	800bf70 <tcp_close_shutdown+0x8c>
 800bf64:	4b4e      	ldr	r3, [pc, #312]	; (800c0a0 <tcp_close_shutdown+0x1bc>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	68db      	ldr	r3, [r3, #12]
 800bf6a:	4a4d      	ldr	r2, [pc, #308]	; (800c0a0 <tcp_close_shutdown+0x1bc>)
 800bf6c:	6013      	str	r3, [r2, #0]
 800bf6e:	e013      	b.n	800bf98 <tcp_close_shutdown+0xb4>
 800bf70:	4b4b      	ldr	r3, [pc, #300]	; (800c0a0 <tcp_close_shutdown+0x1bc>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	60fb      	str	r3, [r7, #12]
 800bf76:	e00c      	b.n	800bf92 <tcp_close_shutdown+0xae>
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	68db      	ldr	r3, [r3, #12]
 800bf7c:	687a      	ldr	r2, [r7, #4]
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d104      	bne.n	800bf8c <tcp_close_shutdown+0xa8>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	68da      	ldr	r2, [r3, #12]
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	60da      	str	r2, [r3, #12]
 800bf8a:	e005      	b.n	800bf98 <tcp_close_shutdown+0xb4>
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	60fb      	str	r3, [r7, #12]
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d1ef      	bne.n	800bf78 <tcp_close_shutdown+0x94>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	60da      	str	r2, [r3, #12]
 800bf9e:	4b41      	ldr	r3, [pc, #260]	; (800c0a4 <tcp_close_shutdown+0x1c0>)
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	7d1b      	ldrb	r3, [r3, #20]
 800bfa8:	2b04      	cmp	r3, #4
 800bfaa:	d10c      	bne.n	800bfc6 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	220a      	movs	r2, #10
 800bfb0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bfb2:	4b3d      	ldr	r3, [pc, #244]	; (800c0a8 <tcp_close_shutdown+0x1c4>)
 800bfb4:	681a      	ldr	r2, [r3, #0]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	60da      	str	r2, [r3, #12]
 800bfba:	4a3b      	ldr	r2, [pc, #236]	; (800c0a8 <tcp_close_shutdown+0x1c4>)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6013      	str	r3, [r2, #0]
 800bfc0:	f004 fa72 	bl	80104a8 <tcp_timer_needed>
 800bfc4:	e00b      	b.n	800bfde <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800bfc6:	4b39      	ldr	r3, [pc, #228]	; (800c0ac <tcp_close_shutdown+0x1c8>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d102      	bne.n	800bfd6 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800bfd0:	f003 faf4 	bl	800f5bc <tcp_trigger_input_pcb_close>
 800bfd4:	e003      	b.n	800bfde <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800bfd6:	6879      	ldr	r1, [r7, #4]
 800bfd8:	2001      	movs	r0, #1
 800bfda:	f7fe fed1 	bl	800ad80 <memp_free>
        }
      }
      return ERR_OK;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	e053      	b.n	800c08a <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	7d1b      	ldrb	r3, [r3, #20]
 800bfe6:	2b02      	cmp	r3, #2
 800bfe8:	d03d      	beq.n	800c066 <tcp_close_shutdown+0x182>
 800bfea:	2b02      	cmp	r3, #2
 800bfec:	dc47      	bgt.n	800c07e <tcp_close_shutdown+0x19a>
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d002      	beq.n	800bff8 <tcp_close_shutdown+0x114>
 800bff2:	2b01      	cmp	r3, #1
 800bff4:	d02b      	beq.n	800c04e <tcp_close_shutdown+0x16a>
 800bff6:	e042      	b.n	800c07e <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	8adb      	ldrh	r3, [r3, #22]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d021      	beq.n	800c044 <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800c000:	4b2b      	ldr	r3, [pc, #172]	; (800c0b0 <tcp_close_shutdown+0x1cc>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	429a      	cmp	r2, r3
 800c008:	d105      	bne.n	800c016 <tcp_close_shutdown+0x132>
 800c00a:	4b29      	ldr	r3, [pc, #164]	; (800c0b0 <tcp_close_shutdown+0x1cc>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	68db      	ldr	r3, [r3, #12]
 800c010:	4a27      	ldr	r2, [pc, #156]	; (800c0b0 <tcp_close_shutdown+0x1cc>)
 800c012:	6013      	str	r3, [r2, #0]
 800c014:	e013      	b.n	800c03e <tcp_close_shutdown+0x15a>
 800c016:	4b26      	ldr	r3, [pc, #152]	; (800c0b0 <tcp_close_shutdown+0x1cc>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	60bb      	str	r3, [r7, #8]
 800c01c:	e00c      	b.n	800c038 <tcp_close_shutdown+0x154>
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	429a      	cmp	r2, r3
 800c026:	d104      	bne.n	800c032 <tcp_close_shutdown+0x14e>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	68da      	ldr	r2, [r3, #12]
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	60da      	str	r2, [r3, #12]
 800c030:	e005      	b.n	800c03e <tcp_close_shutdown+0x15a>
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	68db      	ldr	r3, [r3, #12]
 800c036:	60bb      	str	r3, [r7, #8]
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d1ef      	bne.n	800c01e <tcp_close_shutdown+0x13a>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2200      	movs	r2, #0
 800c042:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800c044:	6879      	ldr	r1, [r7, #4]
 800c046:	2001      	movs	r0, #1
 800c048:	f7fe fe9a 	bl	800ad80 <memp_free>
    break;
 800c04c:	e01c      	b.n	800c088 <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f7ff ff10 	bl	800be74 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c054:	6879      	ldr	r1, [r7, #4]
 800c056:	4817      	ldr	r0, [pc, #92]	; (800c0b4 <tcp_close_shutdown+0x1d0>)
 800c058:	f000 ff90 	bl	800cf7c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c05c:	6879      	ldr	r1, [r7, #4]
 800c05e:	2002      	movs	r0, #2
 800c060:	f7fe fe8e 	bl	800ad80 <memp_free>
    break;
 800c064:	e010      	b.n	800c088 <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800c066:	6879      	ldr	r1, [r7, #4]
 800c068:	480d      	ldr	r0, [pc, #52]	; (800c0a0 <tcp_close_shutdown+0x1bc>)
 800c06a:	f000 ff87 	bl	800cf7c <tcp_pcb_remove>
 800c06e:	4b0d      	ldr	r3, [pc, #52]	; (800c0a4 <tcp_close_shutdown+0x1c0>)
 800c070:	2201      	movs	r2, #1
 800c072:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800c074:	6879      	ldr	r1, [r7, #4]
 800c076:	2001      	movs	r0, #1
 800c078:	f7fe fe82 	bl	800ad80 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800c07c:	e004      	b.n	800c088 <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 f81a 	bl	800c0b8 <tcp_close_shutdown_fin>
 800c084:	4603      	mov	r3, r0
 800c086:	e000      	b.n	800c08a <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 800c088:	2300      	movs	r3, #0
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bdb0      	pop	{r4, r5, r7, pc}
 800c092:	bf00      	nop
 800c094:	08015794 	.word	0x08015794
 800c098:	08015810 	.word	0x08015810
 800c09c:	080157d0 	.word	0x080157d0
 800c0a0:	20006c9c 	.word	0x20006c9c
 800c0a4:	20006c98 	.word	0x20006c98
 800c0a8:	20006cac 	.word	0x20006cac
 800c0ac:	20006cb0 	.word	0x20006cb0
 800c0b0:	20006ca8 	.word	0x20006ca8
 800c0b4:	20006ca4 	.word	0x20006ca4

0800c0b8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d106      	bne.n	800c0d4 <tcp_close_shutdown_fin+0x1c>
 800c0c6:	4b2e      	ldr	r3, [pc, #184]	; (800c180 <tcp_close_shutdown_fin+0xc8>)
 800c0c8:	f240 124d 	movw	r2, #333	; 0x14d
 800c0cc:	492d      	ldr	r1, [pc, #180]	; (800c184 <tcp_close_shutdown_fin+0xcc>)
 800c0ce:	482e      	ldr	r0, [pc, #184]	; (800c188 <tcp_close_shutdown_fin+0xd0>)
 800c0d0:	f007 fc3e 	bl	8013950 <iprintf>

  switch (pcb->state) {
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	7d1b      	ldrb	r3, [r3, #20]
 800c0d8:	2b07      	cmp	r3, #7
 800c0da:	d020      	beq.n	800c11e <tcp_close_shutdown_fin+0x66>
 800c0dc:	2b07      	cmp	r3, #7
 800c0de:	dc2b      	bgt.n	800c138 <tcp_close_shutdown_fin+0x80>
 800c0e0:	2b03      	cmp	r3, #3
 800c0e2:	d002      	beq.n	800c0ea <tcp_close_shutdown_fin+0x32>
 800c0e4:	2b04      	cmp	r3, #4
 800c0e6:	d00d      	beq.n	800c104 <tcp_close_shutdown_fin+0x4c>
 800c0e8:	e026      	b.n	800c138 <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f003 faf0 	bl	800f6d0 <tcp_send_fin>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c0f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d11f      	bne.n	800c13c <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2205      	movs	r2, #5
 800c100:	751a      	strb	r2, [r3, #20]
    }
    break;
 800c102:	e01b      	b.n	800c13c <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f003 fae3 	bl	800f6d0 <tcp_send_fin>
 800c10a:	4603      	mov	r3, r0
 800c10c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c10e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d114      	bne.n	800c140 <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2205      	movs	r2, #5
 800c11a:	751a      	strb	r2, [r3, #20]
    }
    break;
 800c11c:	e010      	b.n	800c140 <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f003 fad6 	bl	800f6d0 <tcp_send_fin>
 800c124:	4603      	mov	r3, r0
 800c126:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d109      	bne.n	800c144 <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2209      	movs	r2, #9
 800c134:	751a      	strb	r2, [r3, #20]
    }
    break;
 800c136:	e005      	b.n	800c144 <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800c138:	2300      	movs	r3, #0
 800c13a:	e01c      	b.n	800c176 <tcp_close_shutdown_fin+0xbe>
    break;
 800c13c:	bf00      	nop
 800c13e:	e002      	b.n	800c146 <tcp_close_shutdown_fin+0x8e>
    break;
 800c140:	bf00      	nop
 800c142:	e000      	b.n	800c146 <tcp_close_shutdown_fin+0x8e>
    break;
 800c144:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d103      	bne.n	800c156 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f003 fcde 	bl	800fb10 <tcp_output>
 800c154:	e00d      	b.n	800c172 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c15e:	d108      	bne.n	800c172 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	7e9b      	ldrb	r3, [r3, #26]
 800c164:	f043 0308 	orr.w	r3, r3, #8
 800c168:	b2da      	uxtb	r2, r3
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c16e:	2300      	movs	r3, #0
 800c170:	e001      	b.n	800c176 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c172:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c176:	4618      	mov	r0, r3
 800c178:	3710      	adds	r7, #16
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	08015794 	.word	0x08015794
 800c184:	080157c4 	.word	0x080157c4
 800c188:	080157d0 	.word	0x080157d0

0800c18c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	7d1b      	ldrb	r3, [r3, #20]
 800c198:	2b01      	cmp	r3, #1
 800c19a:	d006      	beq.n	800c1aa <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	7e9b      	ldrb	r3, [r3, #26]
 800c1a0:	f043 0310 	orr.w	r3, r3, #16
 800c1a4:	b2da      	uxtb	r2, r3
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c1aa:	2101      	movs	r1, #1
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f7ff fe99 	bl	800bee4 <tcp_close_shutdown>
 800c1b2:	4603      	mov	r3, r0
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3708      	adds	r7, #8
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b08c      	sub	sp, #48	; 0x30
 800c1c0:	af02      	add	r7, sp, #8
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	7d1b      	ldrb	r3, [r3, #20]
 800c1ca:	2b01      	cmp	r3, #1
 800c1cc:	d106      	bne.n	800c1dc <tcp_abandon+0x20>
 800c1ce:	4b4d      	ldr	r3, [pc, #308]	; (800c304 <tcp_abandon+0x148>)
 800c1d0:	f240 12df 	movw	r2, #479	; 0x1df
 800c1d4:	494c      	ldr	r1, [pc, #304]	; (800c308 <tcp_abandon+0x14c>)
 800c1d6:	484d      	ldr	r0, [pc, #308]	; (800c30c <tcp_abandon+0x150>)
 800c1d8:	f007 fbba 	bl	8013950 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	7d1b      	ldrb	r3, [r3, #20]
 800c1e0:	2b0a      	cmp	r3, #10
 800c1e2:	d108      	bne.n	800c1f6 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c1e4:	6879      	ldr	r1, [r7, #4]
 800c1e6:	484a      	ldr	r0, [pc, #296]	; (800c310 <tcp_abandon+0x154>)
 800c1e8:	f000 fec8 	bl	800cf7c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800c1ec:	6879      	ldr	r1, [r7, #4]
 800c1ee:	2001      	movs	r0, #1
 800c1f0:	f7fe fdc6 	bl	800ad80 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800c1f4:	e081      	b.n	800c2fa <tcp_abandon+0x13e>
    int send_rst = 0;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c202:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c208:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c210:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	691b      	ldr	r3, [r3, #16]
 800c216:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	7d1b      	ldrb	r3, [r3, #20]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d126      	bne.n	800c26e <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	8adb      	ldrh	r3, [r3, #22]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d02e      	beq.n	800c286 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c228:	4b3a      	ldr	r3, [pc, #232]	; (800c314 <tcp_abandon+0x158>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	429a      	cmp	r2, r3
 800c230:	d105      	bne.n	800c23e <tcp_abandon+0x82>
 800c232:	4b38      	ldr	r3, [pc, #224]	; (800c314 <tcp_abandon+0x158>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	68db      	ldr	r3, [r3, #12]
 800c238:	4a36      	ldr	r2, [pc, #216]	; (800c314 <tcp_abandon+0x158>)
 800c23a:	6013      	str	r3, [r2, #0]
 800c23c:	e013      	b.n	800c266 <tcp_abandon+0xaa>
 800c23e:	4b35      	ldr	r3, [pc, #212]	; (800c314 <tcp_abandon+0x158>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	61fb      	str	r3, [r7, #28]
 800c244:	e00c      	b.n	800c260 <tcp_abandon+0xa4>
 800c246:	69fb      	ldr	r3, [r7, #28]
 800c248:	68db      	ldr	r3, [r3, #12]
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d104      	bne.n	800c25a <tcp_abandon+0x9e>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	68da      	ldr	r2, [r3, #12]
 800c254:	69fb      	ldr	r3, [r7, #28]
 800c256:	60da      	str	r2, [r3, #12]
 800c258:	e005      	b.n	800c266 <tcp_abandon+0xaa>
 800c25a:	69fb      	ldr	r3, [r7, #28]
 800c25c:	68db      	ldr	r3, [r3, #12]
 800c25e:	61fb      	str	r3, [r7, #28]
 800c260:	69fb      	ldr	r3, [r7, #28]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d1ef      	bne.n	800c246 <tcp_abandon+0x8a>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2200      	movs	r2, #0
 800c26a:	60da      	str	r2, [r3, #12]
 800c26c:	e00b      	b.n	800c286 <tcp_abandon+0xca>
      send_rst = reset;
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	8adb      	ldrh	r3, [r3, #22]
 800c276:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c278:	6879      	ldr	r1, [r7, #4]
 800c27a:	4827      	ldr	r0, [pc, #156]	; (800c318 <tcp_abandon+0x15c>)
 800c27c:	f000 fe7e 	bl	800cf7c <tcp_pcb_remove>
 800c280:	4b26      	ldr	r3, [pc, #152]	; (800c31c <tcp_abandon+0x160>)
 800c282:	2201      	movs	r2, #1
 800c284:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d004      	beq.n	800c298 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c292:	4618      	mov	r0, r3
 800c294:	f000 fc87 	bl	800cba6 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d004      	beq.n	800c2aa <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f000 fc7e 	bl	800cba6 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d004      	beq.n	800c2bc <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f000 fc75 	bl	800cba6 <tcp_segs_free>
    if (send_rst) {
 800c2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d00c      	beq.n	800c2dc <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	1d19      	adds	r1, r3, #4
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	8b1b      	ldrh	r3, [r3, #24]
 800c2cc:	9301      	str	r3, [sp, #4]
 800c2ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c2d0:	9300      	str	r3, [sp, #0]
 800c2d2:	460b      	mov	r3, r1
 800c2d4:	6979      	ldr	r1, [r7, #20]
 800c2d6:	69b8      	ldr	r0, [r7, #24]
 800c2d8:	f003 fe9e 	bl	8010018 <tcp_rst>
    last_state = pcb->state;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	7d1b      	ldrb	r3, [r3, #20]
 800c2e0:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800c2e2:	6879      	ldr	r1, [r7, #4]
 800c2e4:	2001      	movs	r0, #1
 800c2e6:	f7fe fd4b 	bl	800ad80 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d004      	beq.n	800c2fa <tcp_abandon+0x13e>
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	f06f 010c 	mvn.w	r1, #12
 800c2f6:	68f8      	ldr	r0, [r7, #12]
 800c2f8:	4798      	blx	r3
}
 800c2fa:	bf00      	nop
 800c2fc:	3728      	adds	r7, #40	; 0x28
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	08015794 	.word	0x08015794
 800c308:	0801582c 	.word	0x0801582c
 800c30c:	080157d0 	.word	0x080157d0
 800c310:	20006cac 	.word	0x20006cac
 800c314:	20006ca8 	.word	0x20006ca8
 800c318:	20006c9c 	.word	0x20006c9c
 800c31c:	20006c98 	.word	0x20006c98

0800c320 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c328:	2101      	movs	r1, #1
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f7ff ff46 	bl	800c1bc <tcp_abandon>
}
 800c330:	bf00      	nop
 800c332:	3708      	adds	r7, #8
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c348:	4413      	add	r3, r2
 800c34a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c354:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c358:	bf28      	it	cs
 800c35a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c35e:	b292      	uxth	r2, r2
 800c360:	4413      	add	r3, r2
 800c362:	68fa      	ldr	r2, [r7, #12]
 800c364:	1ad3      	subs	r3, r2, r3
 800c366:	2b00      	cmp	r3, #0
 800c368:	db08      	blt.n	800c37c <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c376:	68fa      	ldr	r2, [r7, #12]
 800c378:	1ad3      	subs	r3, r2, r3
 800c37a:	e020      	b.n	800c3be <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c384:	1ad3      	subs	r3, r2, r3
 800c386:	2b00      	cmp	r3, #0
 800c388:	dd03      	ble.n	800c392 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2200      	movs	r2, #0
 800c38e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c390:	e014      	b.n	800c3bc <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c39a:	1ad3      	subs	r3, r2, r3
 800c39c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3a4:	d306      	bcc.n	800c3b4 <tcp_update_rcv_ann_wnd+0x7c>
 800c3a6:	4b08      	ldr	r3, [pc, #32]	; (800c3c8 <tcp_update_rcv_ann_wnd+0x90>)
 800c3a8:	f44f 7242 	mov.w	r2, #776	; 0x308
 800c3ac:	4907      	ldr	r1, [pc, #28]	; (800c3cc <tcp_update_rcv_ann_wnd+0x94>)
 800c3ae:	4808      	ldr	r0, [pc, #32]	; (800c3d0 <tcp_update_rcv_ann_wnd+0x98>)
 800c3b0:	f007 face 	bl	8013950 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	b29a      	uxth	r2, r3
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c3bc:	2300      	movs	r3, #0
  }
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3710      	adds	r7, #16
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	08015794 	.word	0x08015794
 800c3cc:	080158ac 	.word	0x080158ac
 800c3d0:	080157d0 	.word	0x080157d0

0800c3d4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	460b      	mov	r3, r1
 800c3de:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	7d1b      	ldrb	r3, [r3, #20]
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d106      	bne.n	800c3f6 <tcp_recved+0x22>
 800c3e8:	4b23      	ldr	r3, [pc, #140]	; (800c478 <tcp_recved+0xa4>)
 800c3ea:	f240 321f 	movw	r2, #799	; 0x31f
 800c3ee:	4923      	ldr	r1, [pc, #140]	; (800c47c <tcp_recved+0xa8>)
 800c3f0:	4823      	ldr	r0, [pc, #140]	; (800c480 <tcp_recved+0xac>)
 800c3f2:	f007 faad 	bl	8013950 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c3fa:	887b      	ldrh	r3, [r7, #2]
 800c3fc:	4413      	add	r3, r2
 800c3fe:	b29a      	uxth	r2, r3
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c408:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c40c:	d904      	bls.n	800c418 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c414:	851a      	strh	r2, [r3, #40]	; 0x28
 800c416:	e017      	b.n	800c448 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d113      	bne.n	800c448 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	7d1b      	ldrb	r3, [r3, #20]
 800c424:	2b07      	cmp	r3, #7
 800c426:	d003      	beq.n	800c430 <tcp_recved+0x5c>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	7d1b      	ldrb	r3, [r3, #20]
 800c42c:	2b09      	cmp	r3, #9
 800c42e:	d104      	bne.n	800c43a <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c436:	851a      	strh	r2, [r3, #40]	; 0x28
 800c438:	e006      	b.n	800c448 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800c43a:	4b0f      	ldr	r3, [pc, #60]	; (800c478 <tcp_recved+0xa4>)
 800c43c:	f240 322d 	movw	r2, #813	; 0x32d
 800c440:	4910      	ldr	r1, [pc, #64]	; (800c484 <tcp_recved+0xb0>)
 800c442:	480f      	ldr	r0, [pc, #60]	; (800c480 <tcp_recved+0xac>)
 800c444:	f007 fa84 	bl	8013950 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f7ff ff75 	bl	800c338 <tcp_update_rcv_ann_wnd>
 800c44e:	4603      	mov	r3, r0
 800c450:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c458:	db09      	blt.n	800c46e <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	7e9b      	ldrb	r3, [r3, #26]
 800c45e:	f043 0302 	orr.w	r3, r3, #2
 800c462:	b2da      	uxtb	r2, r3
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f003 fb51 	bl	800fb10 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c46e:	bf00      	nop
 800c470:	3710      	adds	r7, #16
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop
 800c478:	08015794 	.word	0x08015794
 800c47c:	080158c8 	.word	0x080158c8
 800c480:	080157d0 	.word	0x080157d0
 800c484:	080158f0 	.word	0x080158f0

0800c488 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c488:	b5b0      	push	{r4, r5, r7, lr}
 800c48a:	b08c      	sub	sp, #48	; 0x30
 800c48c:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c48e:	2300      	movs	r3, #0
 800c490:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800c492:	4b97      	ldr	r3, [pc, #604]	; (800c6f0 <tcp_slowtmr+0x268>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	3301      	adds	r3, #1
 800c498:	4a95      	ldr	r2, [pc, #596]	; (800c6f0 <tcp_slowtmr+0x268>)
 800c49a:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c49c:	4b95      	ldr	r3, [pc, #596]	; (800c6f4 <tcp_slowtmr+0x26c>)
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	b2da      	uxtb	r2, r3
 800c4a4:	4b93      	ldr	r3, [pc, #588]	; (800c6f4 <tcp_slowtmr+0x26c>)
 800c4a6:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800c4ac:	4b92      	ldr	r3, [pc, #584]	; (800c6f8 <tcp_slowtmr+0x270>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c4b2:	e227      	b.n	800c904 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b6:	7d1b      	ldrb	r3, [r3, #20]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d106      	bne.n	800c4ca <tcp_slowtmr+0x42>
 800c4bc:	4b8f      	ldr	r3, [pc, #572]	; (800c6fc <tcp_slowtmr+0x274>)
 800c4be:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800c4c2:	498f      	ldr	r1, [pc, #572]	; (800c700 <tcp_slowtmr+0x278>)
 800c4c4:	488f      	ldr	r0, [pc, #572]	; (800c704 <tcp_slowtmr+0x27c>)
 800c4c6:	f007 fa43 	bl	8013950 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4cc:	7d1b      	ldrb	r3, [r3, #20]
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	d106      	bne.n	800c4e0 <tcp_slowtmr+0x58>
 800c4d2:	4b8a      	ldr	r3, [pc, #552]	; (800c6fc <tcp_slowtmr+0x274>)
 800c4d4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800c4d8:	498b      	ldr	r1, [pc, #556]	; (800c708 <tcp_slowtmr+0x280>)
 800c4da:	488a      	ldr	r0, [pc, #552]	; (800c704 <tcp_slowtmr+0x27c>)
 800c4dc:	f007 fa38 	bl	8013950 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e2:	7d1b      	ldrb	r3, [r3, #20]
 800c4e4:	2b0a      	cmp	r3, #10
 800c4e6:	d106      	bne.n	800c4f6 <tcp_slowtmr+0x6e>
 800c4e8:	4b84      	ldr	r3, [pc, #528]	; (800c6fc <tcp_slowtmr+0x274>)
 800c4ea:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800c4ee:	4987      	ldr	r1, [pc, #540]	; (800c70c <tcp_slowtmr+0x284>)
 800c4f0:	4884      	ldr	r0, [pc, #528]	; (800c704 <tcp_slowtmr+0x27c>)
 800c4f2:	f007 fa2d 	bl	8013950 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f8:	7f5a      	ldrb	r2, [r3, #29]
 800c4fa:	4b7e      	ldr	r3, [pc, #504]	; (800c6f4 <tcp_slowtmr+0x26c>)
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d103      	bne.n	800c50a <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800c502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c504:	68db      	ldr	r3, [r3, #12]
 800c506:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800c508:	e1fc      	b.n	800c904 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c50a:	4b7a      	ldr	r3, [pc, #488]	; (800c6f4 <tcp_slowtmr+0x26c>)
 800c50c:	781a      	ldrb	r2, [r3, #0]
 800c50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c510:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800c512:	2300      	movs	r3, #0
 800c514:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800c516:	2300      	movs	r3, #0
 800c518:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51c:	7d1b      	ldrb	r3, [r3, #20]
 800c51e:	2b02      	cmp	r3, #2
 800c520:	d108      	bne.n	800c534 <tcp_slowtmr+0xac>
 800c522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c524:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c528:	2b05      	cmp	r3, #5
 800c52a:	d903      	bls.n	800c534 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800c52c:	7ffb      	ldrb	r3, [r7, #31]
 800c52e:	3301      	adds	r3, #1
 800c530:	77fb      	strb	r3, [r7, #31]
 800c532:	e0a2      	b.n	800c67a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800c534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c536:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c53a:	2b0b      	cmp	r3, #11
 800c53c:	d903      	bls.n	800c546 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800c53e:	7ffb      	ldrb	r3, [r7, #31]
 800c540:	3301      	adds	r3, #1
 800c542:	77fb      	strb	r3, [r7, #31]
 800c544:	e099      	b.n	800c67a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c548:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d032      	beq.n	800c5b6 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800c550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c552:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800c556:	3b01      	subs	r3, #1
 800c558:	4a6d      	ldr	r2, [pc, #436]	; (800c710 <tcp_slowtmr+0x288>)
 800c55a:	5cd3      	ldrb	r3, [r2, r3]
 800c55c:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800c55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c560:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800c564:	7cfa      	ldrb	r2, [r7, #19]
 800c566:	429a      	cmp	r2, r3
 800c568:	d907      	bls.n	800c57a <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800c56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800c570:	3301      	adds	r3, #1
 800c572:	b2da      	uxtb	r2, r3
 800c574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c576:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800c57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c57c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800c580:	7cfa      	ldrb	r2, [r7, #19]
 800c582:	429a      	cmp	r2, r3
 800c584:	d879      	bhi.n	800c67a <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800c586:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c588:	f003 fecd 	bl	8010326 <tcp_zero_window_probe>
 800c58c:	4603      	mov	r3, r0
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d173      	bne.n	800c67a <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800c592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c594:	2200      	movs	r2, #0
 800c596:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800c5a0:	2b06      	cmp	r3, #6
 800c5a2:	d86a      	bhi.n	800c67a <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800c5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a6:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800c5aa:	3301      	adds	r3, #1
 800c5ac:	b2da      	uxtb	r2, r3
 800c5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800c5b4:	e061      	b.n	800c67a <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800c5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	db08      	blt.n	800c5d2 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800c5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	b29b      	uxth	r3, r3
 800c5cc:	b21a      	sxth	r2, r3
 800c5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d0:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800c5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d04f      	beq.n	800c67a <tcp_slowtmr+0x1f2>
 800c5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5dc:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	db47      	blt.n	800c67a <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800c5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ec:	7d1b      	ldrb	r3, [r3, #20]
 800c5ee:	2b02      	cmp	r3, #2
 800c5f0:	d018      	beq.n	800c624 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800c5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c5f8:	2b0c      	cmp	r3, #12
 800c5fa:	bf28      	it	cs
 800c5fc:	230c      	movcs	r3, #12
 800c5fe:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c602:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c606:	10db      	asrs	r3, r3, #3
 800c608:	b21b      	sxth	r3, r3
 800c60a:	461a      	mov	r2, r3
 800c60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c60e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c612:	4413      	add	r3, r2
 800c614:	7dfa      	ldrb	r2, [r7, #23]
 800c616:	493f      	ldr	r1, [pc, #252]	; (800c714 <tcp_slowtmr+0x28c>)
 800c618:	5c8a      	ldrb	r2, [r1, r2]
 800c61a:	4093      	lsls	r3, r2
 800c61c:	b21a      	sxth	r2, r3
 800c61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c620:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800c624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c626:	2200      	movs	r2, #0
 800c628:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c632:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c636:	4293      	cmp	r3, r2
 800c638:	bf28      	it	cs
 800c63a:	4613      	movcs	r3, r2
 800c63c:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800c63e:	8abb      	ldrh	r3, [r7, #20]
 800c640:	085b      	lsrs	r3, r3, #1
 800c642:	b29a      	uxth	r2, r3
 800c644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c646:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c652:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c654:	005b      	lsls	r3, r3, #1
 800c656:	b29b      	uxth	r3, r3
 800c658:	429a      	cmp	r2, r3
 800c65a:	d206      	bcs.n	800c66a <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800c65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c660:	005b      	lsls	r3, r3, #1
 800c662:	b29a      	uxth	r2, r3
 800c664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c666:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800c66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c670:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800c674:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c676:	f003 fd45 	bl	8010104 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67c:	7d1b      	ldrb	r3, [r3, #20]
 800c67e:	2b06      	cmp	r3, #6
 800c680:	d10f      	bne.n	800c6a2 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c684:	7e9b      	ldrb	r3, [r3, #26]
 800c686:	f003 0310 	and.w	r3, r3, #16
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d009      	beq.n	800c6a2 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c68e:	4b18      	ldr	r3, [pc, #96]	; (800c6f0 <tcp_slowtmr+0x268>)
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c694:	6a1b      	ldr	r3, [r3, #32]
 800c696:	1ad3      	subs	r3, r2, r3
 800c698:	2b28      	cmp	r3, #40	; 0x28
 800c69a:	d902      	bls.n	800c6a2 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c69c:	7ffb      	ldrb	r3, [r7, #31]
 800c69e:	3301      	adds	r3, #1
 800c6a0:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a4:	7a1b      	ldrb	r3, [r3, #8]
 800c6a6:	f003 0308 	and.w	r3, r3, #8
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d05d      	beq.n	800c76a <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800c6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b0:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c6b2:	2b04      	cmp	r3, #4
 800c6b4:	d003      	beq.n	800c6be <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800c6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b8:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800c6ba:	2b07      	cmp	r3, #7
 800c6bc:	d155      	bne.n	800c76a <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c6be:	4b0c      	ldr	r3, [pc, #48]	; (800c6f0 <tcp_slowtmr+0x268>)
 800c6c0:	681a      	ldr	r2, [r3, #0]
 800c6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c4:	6a1b      	ldr	r3, [r3, #32]
 800c6c6:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800c6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6ce:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800c6d2:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800c6d6:	4910      	ldr	r1, [pc, #64]	; (800c718 <tcp_slowtmr+0x290>)
 800c6d8:	fba1 1303 	umull	r1, r3, r1, r3
 800c6dc:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d91c      	bls.n	800c71c <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c6e2:	7ffb      	ldrb	r3, [r7, #31]
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800c6e8:	7fbb      	ldrb	r3, [r7, #30]
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	77bb      	strb	r3, [r7, #30]
 800c6ee:	e03c      	b.n	800c76a <tcp_slowtmr+0x2e2>
 800c6f0:	20006ca0 	.word	0x20006ca0
 800c6f4:	200004fe 	.word	0x200004fe
 800c6f8:	20006c9c 	.word	0x20006c9c
 800c6fc:	08015794 	.word	0x08015794
 800c700:	08015944 	.word	0x08015944
 800c704:	080157d0 	.word	0x080157d0
 800c708:	08015970 	.word	0x08015970
 800c70c:	0801599c 	.word	0x0801599c
 800c710:	08016c54 	.word	0x08016c54
 800c714:	08016c44 	.word	0x08016c44
 800c718:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c71c:	4b97      	ldr	r3, [pc, #604]	; (800c97c <tcp_slowtmr+0x4f4>)
 800c71e:	681a      	ldr	r2, [r3, #0]
 800c720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c722:	6a1b      	ldr	r3, [r3, #32]
 800c724:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c728:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800c72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800c732:	4618      	mov	r0, r3
 800c734:	4b92      	ldr	r3, [pc, #584]	; (800c980 <tcp_slowtmr+0x4f8>)
 800c736:	fb03 f300 	mul.w	r3, r3, r0
 800c73a:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800c73c:	4991      	ldr	r1, [pc, #580]	; (800c984 <tcp_slowtmr+0x4fc>)
 800c73e:	fba1 1303 	umull	r1, r3, r1, r3
 800c742:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c744:	429a      	cmp	r2, r3
 800c746:	d910      	bls.n	800c76a <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800c748:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c74a:	f003 fdaf 	bl	80102ac <tcp_keepalive>
 800c74e:	4603      	mov	r3, r0
 800c750:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800c752:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d107      	bne.n	800c76a <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800c75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c75c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800c760:	3301      	adds	r3, #1
 800c762:	b2da      	uxtb	r2, r3
 800c764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c766:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c76c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d016      	beq.n	800c7a0 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800c772:	4b82      	ldr	r3, [pc, #520]	; (800c97c <tcp_slowtmr+0x4f4>)
 800c774:	681a      	ldr	r2, [r3, #0]
 800c776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c778:	6a1b      	ldr	r3, [r3, #32]
 800c77a:	1ad2      	subs	r2, r2, r3
 800c77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c782:	4619      	mov	r1, r3
 800c784:	460b      	mov	r3, r1
 800c786:	005b      	lsls	r3, r3, #1
 800c788:	440b      	add	r3, r1
 800c78a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d307      	bcc.n	800c7a0 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800c790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c794:	4618      	mov	r0, r3
 800c796:	f000 fa06 	bl	800cba6 <tcp_segs_free>
      pcb->ooseq = NULL;
 800c79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79c:	2200      	movs	r2, #0
 800c79e:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a2:	7d1b      	ldrb	r3, [r3, #20]
 800c7a4:	2b03      	cmp	r3, #3
 800c7a6:	d109      	bne.n	800c7bc <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c7a8:	4b74      	ldr	r3, [pc, #464]	; (800c97c <tcp_slowtmr+0x4f4>)
 800c7aa:	681a      	ldr	r2, [r3, #0]
 800c7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ae:	6a1b      	ldr	r3, [r3, #32]
 800c7b0:	1ad3      	subs	r3, r2, r3
 800c7b2:	2b28      	cmp	r3, #40	; 0x28
 800c7b4:	d902      	bls.n	800c7bc <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c7b6:	7ffb      	ldrb	r3, [r7, #31]
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7be:	7d1b      	ldrb	r3, [r3, #20]
 800c7c0:	2b09      	cmp	r3, #9
 800c7c2:	d109      	bne.n	800c7d8 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c7c4:	4b6d      	ldr	r3, [pc, #436]	; (800c97c <tcp_slowtmr+0x4f4>)
 800c7c6:	681a      	ldr	r2, [r3, #0]
 800c7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ca:	6a1b      	ldr	r3, [r3, #32]
 800c7cc:	1ad3      	subs	r3, r2, r3
 800c7ce:	2bf0      	cmp	r3, #240	; 0xf0
 800c7d0:	d902      	bls.n	800c7d8 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800c7d2:	7ffb      	ldrb	r3, [r7, #31]
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c7d8:	7ffb      	ldrb	r3, [r7, #31]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d05d      	beq.n	800c89a <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7e4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c7e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c7e8:	f000 fb86 	bl	800cef8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c7ec:	6a3b      	ldr	r3, [r7, #32]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d010      	beq.n	800c814 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c7f2:	4b65      	ldr	r3, [pc, #404]	; (800c988 <tcp_slowtmr+0x500>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d106      	bne.n	800c80a <tcp_slowtmr+0x382>
 800c7fc:	4b63      	ldr	r3, [pc, #396]	; (800c98c <tcp_slowtmr+0x504>)
 800c7fe:	f240 4289 	movw	r2, #1161	; 0x489
 800c802:	4963      	ldr	r1, [pc, #396]	; (800c990 <tcp_slowtmr+0x508>)
 800c804:	4863      	ldr	r0, [pc, #396]	; (800c994 <tcp_slowtmr+0x50c>)
 800c806:	f007 f8a3 	bl	8013950 <iprintf>
        prev->next = pcb->next;
 800c80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80c:	68da      	ldr	r2, [r3, #12]
 800c80e:	6a3b      	ldr	r3, [r7, #32]
 800c810:	60da      	str	r2, [r3, #12]
 800c812:	e00f      	b.n	800c834 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c814:	4b5c      	ldr	r3, [pc, #368]	; (800c988 <tcp_slowtmr+0x500>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d006      	beq.n	800c82c <tcp_slowtmr+0x3a4>
 800c81e:	4b5b      	ldr	r3, [pc, #364]	; (800c98c <tcp_slowtmr+0x504>)
 800c820:	f240 428d 	movw	r2, #1165	; 0x48d
 800c824:	495c      	ldr	r1, [pc, #368]	; (800c998 <tcp_slowtmr+0x510>)
 800c826:	485b      	ldr	r0, [pc, #364]	; (800c994 <tcp_slowtmr+0x50c>)
 800c828:	f007 f892 	bl	8013950 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82e:	68db      	ldr	r3, [r3, #12]
 800c830:	4a55      	ldr	r2, [pc, #340]	; (800c988 <tcp_slowtmr+0x500>)
 800c832:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c834:	7fbb      	ldrb	r3, [r7, #30]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d010      	beq.n	800c85c <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c840:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c842:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800c844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c846:	1d1d      	adds	r5, r3, #4
 800c848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c84a:	8adb      	ldrh	r3, [r3, #22]
 800c84c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c84e:	8b12      	ldrh	r2, [r2, #24]
 800c850:	9201      	str	r2, [sp, #4]
 800c852:	9300      	str	r3, [sp, #0]
 800c854:	462b      	mov	r3, r5
 800c856:	4622      	mov	r2, r4
 800c858:	f003 fbde 	bl	8010018 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85e:	691b      	ldr	r3, [r3, #16]
 800c860:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c864:	7d1b      	ldrb	r3, [r3, #20]
 800c866:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86e:	68db      	ldr	r3, [r3, #12]
 800c870:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800c872:	6839      	ldr	r1, [r7, #0]
 800c874:	2001      	movs	r0, #1
 800c876:	f7fe fa83 	bl	800ad80 <memp_free>

      tcp_active_pcbs_changed = 0;
 800c87a:	4b48      	ldr	r3, [pc, #288]	; (800c99c <tcp_slowtmr+0x514>)
 800c87c:	2200      	movs	r2, #0
 800c87e:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d004      	beq.n	800c890 <tcp_slowtmr+0x408>
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f06f 010c 	mvn.w	r1, #12
 800c88c:	68b8      	ldr	r0, [r7, #8]
 800c88e:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c890:	4b42      	ldr	r3, [pc, #264]	; (800c99c <tcp_slowtmr+0x514>)
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d035      	beq.n	800c904 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800c898:	e606      	b.n	800c4a8 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c89c:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800c89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a0:	68db      	ldr	r3, [r3, #12]
 800c8a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c8a4:	6a3b      	ldr	r3, [r7, #32]
 800c8a6:	7edb      	ldrb	r3, [r3, #27]
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	b2da      	uxtb	r2, r3
 800c8ac:	6a3b      	ldr	r3, [r7, #32]
 800c8ae:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800c8b0:	6a3b      	ldr	r3, [r7, #32]
 800c8b2:	7eda      	ldrb	r2, [r3, #27]
 800c8b4:	6a3b      	ldr	r3, [r7, #32]
 800c8b6:	7f1b      	ldrb	r3, [r3, #28]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d323      	bcc.n	800c904 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800c8bc:	6a3b      	ldr	r3, [r7, #32]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800c8c2:	4b36      	ldr	r3, [pc, #216]	; (800c99c <tcp_slowtmr+0x514>)
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c8c8:	6a3b      	ldr	r3, [r7, #32]
 800c8ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d00a      	beq.n	800c8e8 <tcp_slowtmr+0x460>
 800c8d2:	6a3b      	ldr	r3, [r7, #32]
 800c8d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8d8:	6a3a      	ldr	r2, [r7, #32]
 800c8da:	6912      	ldr	r2, [r2, #16]
 800c8dc:	6a39      	ldr	r1, [r7, #32]
 800c8de:	4610      	mov	r0, r2
 800c8e0:	4798      	blx	r3
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	777b      	strb	r3, [r7, #29]
 800c8e6:	e001      	b.n	800c8ec <tcp_slowtmr+0x464>
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800c8ec:	4b2b      	ldr	r3, [pc, #172]	; (800c99c <tcp_slowtmr+0x514>)
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d000      	beq.n	800c8f6 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800c8f4:	e5d8      	b.n	800c4a8 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c8f6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d102      	bne.n	800c904 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800c8fe:	6a38      	ldr	r0, [r7, #32]
 800c900:	f003 f906 	bl	800fb10 <tcp_output>
  while (pcb != NULL) {
 800c904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c906:	2b00      	cmp	r3, #0
 800c908:	f47f add4 	bne.w	800c4b4 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c90c:	2300      	movs	r3, #0
 800c90e:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800c910:	4b23      	ldr	r3, [pc, #140]	; (800c9a0 <tcp_slowtmr+0x518>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800c916:	e068      	b.n	800c9ea <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91a:	7d1b      	ldrb	r3, [r3, #20]
 800c91c:	2b0a      	cmp	r3, #10
 800c91e:	d006      	beq.n	800c92e <tcp_slowtmr+0x4a6>
 800c920:	4b1a      	ldr	r3, [pc, #104]	; (800c98c <tcp_slowtmr+0x504>)
 800c922:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800c926:	491f      	ldr	r1, [pc, #124]	; (800c9a4 <tcp_slowtmr+0x51c>)
 800c928:	481a      	ldr	r0, [pc, #104]	; (800c994 <tcp_slowtmr+0x50c>)
 800c92a:	f007 f811 	bl	8013950 <iprintf>
    pcb_remove = 0;
 800c92e:	2300      	movs	r3, #0
 800c930:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c932:	4b12      	ldr	r3, [pc, #72]	; (800c97c <tcp_slowtmr+0x4f4>)
 800c934:	681a      	ldr	r2, [r3, #0]
 800c936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c938:	6a1b      	ldr	r3, [r3, #32]
 800c93a:	1ad3      	subs	r3, r2, r3
 800c93c:	2bf0      	cmp	r3, #240	; 0xf0
 800c93e:	d902      	bls.n	800c946 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800c940:	7ffb      	ldrb	r3, [r7, #31]
 800c942:	3301      	adds	r3, #1
 800c944:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c946:	7ffb      	ldrb	r3, [r7, #31]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d049      	beq.n	800c9e0 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c94c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c94e:	f000 fad3 	bl	800cef8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c952:	6a3b      	ldr	r3, [r7, #32]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d029      	beq.n	800c9ac <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c958:	4b11      	ldr	r3, [pc, #68]	; (800c9a0 <tcp_slowtmr+0x518>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c95e:	429a      	cmp	r2, r3
 800c960:	d106      	bne.n	800c970 <tcp_slowtmr+0x4e8>
 800c962:	4b0a      	ldr	r3, [pc, #40]	; (800c98c <tcp_slowtmr+0x504>)
 800c964:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800c968:	490f      	ldr	r1, [pc, #60]	; (800c9a8 <tcp_slowtmr+0x520>)
 800c96a:	480a      	ldr	r0, [pc, #40]	; (800c994 <tcp_slowtmr+0x50c>)
 800c96c:	f006 fff0 	bl	8013950 <iprintf>
        prev->next = pcb->next;
 800c970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c972:	68da      	ldr	r2, [r3, #12]
 800c974:	6a3b      	ldr	r3, [r7, #32]
 800c976:	60da      	str	r2, [r3, #12]
 800c978:	e028      	b.n	800c9cc <tcp_slowtmr+0x544>
 800c97a:	bf00      	nop
 800c97c:	20006ca0 	.word	0x20006ca0
 800c980:	000124f8 	.word	0x000124f8
 800c984:	10624dd3 	.word	0x10624dd3
 800c988:	20006c9c 	.word	0x20006c9c
 800c98c:	08015794 	.word	0x08015794
 800c990:	080159cc 	.word	0x080159cc
 800c994:	080157d0 	.word	0x080157d0
 800c998:	080159f8 	.word	0x080159f8
 800c99c:	20006c98 	.word	0x20006c98
 800c9a0:	20006cac 	.word	0x20006cac
 800c9a4:	08015a24 	.word	0x08015a24
 800c9a8:	08015a54 	.word	0x08015a54
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c9ac:	4b13      	ldr	r3, [pc, #76]	; (800c9fc <tcp_slowtmr+0x574>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d006      	beq.n	800c9c4 <tcp_slowtmr+0x53c>
 800c9b6:	4b12      	ldr	r3, [pc, #72]	; (800ca00 <tcp_slowtmr+0x578>)
 800c9b8:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800c9bc:	4911      	ldr	r1, [pc, #68]	; (800ca04 <tcp_slowtmr+0x57c>)
 800c9be:	4812      	ldr	r0, [pc, #72]	; (800ca08 <tcp_slowtmr+0x580>)
 800c9c0:	f006 ffc6 	bl	8013950 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c6:	68db      	ldr	r3, [r3, #12]
 800c9c8:	4a0c      	ldr	r2, [pc, #48]	; (800c9fc <tcp_slowtmr+0x574>)
 800c9ca:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ce:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800c9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800c9d6:	69b9      	ldr	r1, [r7, #24]
 800c9d8:	2001      	movs	r0, #1
 800c9da:	f7fe f9d1 	bl	800ad80 <memp_free>
 800c9de:	e004      	b.n	800c9ea <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800c9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e2:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800c9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800c9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d193      	bne.n	800c918 <tcp_slowtmr+0x490>
    }
  }
}
 800c9f0:	bf00      	nop
 800c9f2:	bf00      	nop
 800c9f4:	3728      	adds	r7, #40	; 0x28
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bdb0      	pop	{r4, r5, r7, pc}
 800c9fa:	bf00      	nop
 800c9fc:	20006cac 	.word	0x20006cac
 800ca00:	08015794 	.word	0x08015794
 800ca04:	08015a7c 	.word	0x08015a7c
 800ca08:	080157d0 	.word	0x080157d0

0800ca0c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ca12:	4b2d      	ldr	r3, [pc, #180]	; (800cac8 <tcp_fasttmr+0xbc>)
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	3301      	adds	r3, #1
 800ca18:	b2da      	uxtb	r2, r3
 800ca1a:	4b2b      	ldr	r3, [pc, #172]	; (800cac8 <tcp_fasttmr+0xbc>)
 800ca1c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ca1e:	4b2b      	ldr	r3, [pc, #172]	; (800cacc <tcp_fasttmr+0xc0>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ca24:	e048      	b.n	800cab8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	7f5a      	ldrb	r2, [r3, #29]
 800ca2a:	4b27      	ldr	r3, [pc, #156]	; (800cac8 <tcp_fasttmr+0xbc>)
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	d03f      	beq.n	800cab2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ca32:	4b25      	ldr	r3, [pc, #148]	; (800cac8 <tcp_fasttmr+0xbc>)
 800ca34:	781a      	ldrb	r2, [r3, #0]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	7e9b      	ldrb	r3, [r3, #26]
 800ca3e:	f003 0301 	and.w	r3, r3, #1
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d010      	beq.n	800ca68 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	7e9b      	ldrb	r3, [r3, #26]
 800ca4a:	f043 0302 	orr.w	r3, r3, #2
 800ca4e:	b2da      	uxtb	r2, r3
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f003 f85b 	bl	800fb10 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	7e9b      	ldrb	r3, [r3, #26]
 800ca5e:	f023 0303 	bic.w	r3, r3, #3
 800ca62:	b2da      	uxtb	r2, r3
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	7e9b      	ldrb	r3, [r3, #26]
 800ca6c:	f003 0308 	and.w	r3, r3, #8
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d009      	beq.n	800ca88 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	7e9b      	ldrb	r3, [r3, #26]
 800ca78:	f023 0308 	bic.w	r3, r3, #8
 800ca7c:	b2da      	uxtb	r2, r3
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f7ff fb18 	bl	800c0b8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	68db      	ldr	r3, [r3, #12]
 800ca8c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d00a      	beq.n	800caac <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ca96:	4b0e      	ldr	r3, [pc, #56]	; (800cad0 <tcp_fasttmr+0xc4>)
 800ca98:	2200      	movs	r2, #0
 800ca9a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f000 f819 	bl	800cad4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800caa2:	4b0b      	ldr	r3, [pc, #44]	; (800cad0 <tcp_fasttmr+0xc4>)
 800caa4:	781b      	ldrb	r3, [r3, #0]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d000      	beq.n	800caac <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800caaa:	e7b8      	b.n	800ca1e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	607b      	str	r3, [r7, #4]
 800cab0:	e002      	b.n	800cab8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	68db      	ldr	r3, [r3, #12]
 800cab6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d1b3      	bne.n	800ca26 <tcp_fasttmr+0x1a>
    }
  }
}
 800cabe:	bf00      	nop
 800cac0:	bf00      	nop
 800cac2:	3708      	adds	r7, #8
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}
 800cac8:	200004fe 	.word	0x200004fe
 800cacc:	20006c9c 	.word	0x20006c9c
 800cad0:	20006c98 	.word	0x20006c98

0800cad4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800cad4:	b590      	push	{r4, r7, lr}
 800cad6:	b085      	sub	sp, #20
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cae0:	7b5b      	ldrb	r3, [r3, #13]
 800cae2:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cae8:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2200      	movs	r2, #0
 800caee:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d00b      	beq.n	800cb12 <tcp_process_refused_data+0x3e>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6918      	ldr	r0, [r3, #16]
 800cb04:	2300      	movs	r3, #0
 800cb06:	68ba      	ldr	r2, [r7, #8]
 800cb08:	6879      	ldr	r1, [r7, #4]
 800cb0a:	47a0      	blx	r4
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	73fb      	strb	r3, [r7, #15]
 800cb10:	e007      	b.n	800cb22 <tcp_process_refused_data+0x4e>
 800cb12:	2300      	movs	r3, #0
 800cb14:	68ba      	ldr	r2, [r7, #8]
 800cb16:	6879      	ldr	r1, [r7, #4]
 800cb18:	2000      	movs	r0, #0
 800cb1a:	f000 f88d 	bl	800cc38 <tcp_recv_null>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cb22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d12a      	bne.n	800cb80 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800cb2a:	7bbb      	ldrb	r3, [r7, #14]
 800cb2c:	f003 0320 	and.w	r3, r3, #32
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d033      	beq.n	800cb9c <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb38:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cb3c:	d005      	beq.n	800cb4a <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb42:	3301      	adds	r3, #1
 800cb44:	b29a      	uxth	r2, r3
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d00b      	beq.n	800cb6c <tcp_process_refused_data+0x98>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6918      	ldr	r0, [r3, #16]
 800cb5e:	2300      	movs	r3, #0
 800cb60:	2200      	movs	r2, #0
 800cb62:	6879      	ldr	r1, [r7, #4]
 800cb64:	47a0      	blx	r4
 800cb66:	4603      	mov	r3, r0
 800cb68:	73fb      	strb	r3, [r7, #15]
 800cb6a:	e001      	b.n	800cb70 <tcp_process_refused_data+0x9c>
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800cb70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb74:	f113 0f0d 	cmn.w	r3, #13
 800cb78:	d110      	bne.n	800cb9c <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800cb7a:	f06f 030c 	mvn.w	r3, #12
 800cb7e:	e00e      	b.n	800cb9e <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800cb80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb84:	f113 0f0d 	cmn.w	r3, #13
 800cb88:	d102      	bne.n	800cb90 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800cb8a:	f06f 030c 	mvn.w	r3, #12
 800cb8e:	e006      	b.n	800cb9e <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	68ba      	ldr	r2, [r7, #8]
 800cb94:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800cb96:	f06f 0304 	mvn.w	r3, #4
 800cb9a:	e000      	b.n	800cb9e <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800cb9c:	2300      	movs	r3, #0
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3714      	adds	r7, #20
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd90      	pop	{r4, r7, pc}

0800cba6 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800cba6:	b580      	push	{r7, lr}
 800cba8:	b084      	sub	sp, #16
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800cbae:	e007      	b.n	800cbc0 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f000 f80a 	bl	800cbd0 <tcp_seg_free>
    seg = next;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d1f4      	bne.n	800cbb0 <tcp_segs_free+0xa>
  }
}
 800cbc6:	bf00      	nop
 800cbc8:	bf00      	nop
 800cbca:	3710      	adds	r7, #16
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}

0800cbd0 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d00c      	beq.n	800cbf8 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d004      	beq.n	800cbf0 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7fe fe00 	bl	800b7f0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800cbf0:	6879      	ldr	r1, [r7, #4]
 800cbf2:	2003      	movs	r0, #3
 800cbf4:	f7fe f8c4 	bl	800ad80 <memp_free>
  }
}
 800cbf8:	bf00      	nop
 800cbfa:	3708      	adds	r7, #8
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800cc08:	2003      	movs	r0, #3
 800cc0a:	f7fe f86d 	bl	800ace8 <memp_malloc>
 800cc0e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d101      	bne.n	800cc1a <tcp_seg_copy+0x1a>
    return NULL;
 800cc16:	2300      	movs	r3, #0
 800cc18:	e00a      	b.n	800cc30 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800cc1a:	2210      	movs	r2, #16
 800cc1c:	6879      	ldr	r1, [r7, #4]
 800cc1e:	68f8      	ldr	r0, [r7, #12]
 800cc20:	f006 fdc0 	bl	80137a4 <memcpy>
  pbuf_ref(cseg->p);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	685b      	ldr	r3, [r3, #4]
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f7fe fe8b 	bl	800b944 <pbuf_ref>
  return cseg;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3710      	adds	r7, #16
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b084      	sub	sp, #16
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	607a      	str	r2, [r7, #4]
 800cc44:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d009      	beq.n	800cc60 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	891b      	ldrh	r3, [r3, #8]
 800cc50:	4619      	mov	r1, r3
 800cc52:	68b8      	ldr	r0, [r7, #8]
 800cc54:	f7ff fbbe 	bl	800c3d4 <tcp_recved>
    pbuf_free(p);
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f7fe fdc9 	bl	800b7f0 <pbuf_free>
 800cc5e:	e008      	b.n	800cc72 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800cc60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d104      	bne.n	800cc72 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800cc68:	68b8      	ldr	r0, [r7, #8]
 800cc6a:	f7ff fa8f 	bl	800c18c <tcp_close>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	e000      	b.n	800cc74 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800cc72:	2300      	movs	r3, #0
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3710      	adds	r7, #16
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b086      	sub	sp, #24
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	4603      	mov	r3, r0
 800cc84:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800cc86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	db01      	blt.n	800cc92 <tcp_kill_prio+0x16>
 800cc8e:	79fb      	ldrb	r3, [r7, #7]
 800cc90:	e000      	b.n	800cc94 <tcp_kill_prio+0x18>
 800cc92:	237f      	movs	r3, #127	; 0x7f
 800cc94:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800cc96:	2300      	movs	r3, #0
 800cc98:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc9e:	4b16      	ldr	r3, [pc, #88]	; (800ccf8 <tcp_kill_prio+0x7c>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	617b      	str	r3, [r7, #20]
 800cca4:	e01a      	b.n	800ccdc <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	7d5b      	ldrb	r3, [r3, #21]
 800ccaa:	7afa      	ldrb	r2, [r7, #11]
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d312      	bcc.n	800ccd6 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ccb0:	4b12      	ldr	r3, [pc, #72]	; (800ccfc <tcp_kill_prio+0x80>)
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	6a1b      	ldr	r3, [r3, #32]
 800ccb8:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800ccba:	68fa      	ldr	r2, [r7, #12]
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d80a      	bhi.n	800ccd6 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800ccc0:	4b0e      	ldr	r3, [pc, #56]	; (800ccfc <tcp_kill_prio+0x80>)
 800ccc2:	681a      	ldr	r2, [r3, #0]
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	6a1b      	ldr	r3, [r3, #32]
 800ccc8:	1ad3      	subs	r3, r2, r3
 800ccca:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	7d5b      	ldrb	r3, [r3, #21]
 800ccd4:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	68db      	ldr	r3, [r3, #12]
 800ccda:	617b      	str	r3, [r7, #20]
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d1e1      	bne.n	800cca6 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d002      	beq.n	800ccee <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cce8:	6938      	ldr	r0, [r7, #16]
 800ccea:	f7ff fb19 	bl	800c320 <tcp_abort>
  }
}
 800ccee:	bf00      	nop
 800ccf0:	3718      	adds	r7, #24
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	bf00      	nop
 800ccf8:	20006c9c 	.word	0x20006c9c
 800ccfc:	20006ca0 	.word	0x20006ca0

0800cd00 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b086      	sub	sp, #24
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	4603      	mov	r3, r0
 800cd08:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800cd0a:	79fb      	ldrb	r3, [r7, #7]
 800cd0c:	2b08      	cmp	r3, #8
 800cd0e:	d009      	beq.n	800cd24 <tcp_kill_state+0x24>
 800cd10:	79fb      	ldrb	r3, [r7, #7]
 800cd12:	2b09      	cmp	r3, #9
 800cd14:	d006      	beq.n	800cd24 <tcp_kill_state+0x24>
 800cd16:	4b1a      	ldr	r3, [pc, #104]	; (800cd80 <tcp_kill_state+0x80>)
 800cd18:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800cd1c:	4919      	ldr	r1, [pc, #100]	; (800cd84 <tcp_kill_state+0x84>)
 800cd1e:	481a      	ldr	r0, [pc, #104]	; (800cd88 <tcp_kill_state+0x88>)
 800cd20:	f006 fe16 	bl	8013950 <iprintf>

  inactivity = 0;
 800cd24:	2300      	movs	r3, #0
 800cd26:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd2c:	4b17      	ldr	r3, [pc, #92]	; (800cd8c <tcp_kill_state+0x8c>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	617b      	str	r3, [r7, #20]
 800cd32:	e017      	b.n	800cd64 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	7d1b      	ldrb	r3, [r3, #20]
 800cd38:	79fa      	ldrb	r2, [r7, #7]
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d10f      	bne.n	800cd5e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cd3e:	4b14      	ldr	r3, [pc, #80]	; (800cd90 <tcp_kill_state+0x90>)
 800cd40:	681a      	ldr	r2, [r3, #0]
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	6a1b      	ldr	r3, [r3, #32]
 800cd46:	1ad3      	subs	r3, r2, r3
 800cd48:	68fa      	ldr	r2, [r7, #12]
 800cd4a:	429a      	cmp	r2, r3
 800cd4c:	d807      	bhi.n	800cd5e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800cd4e:	4b10      	ldr	r3, [pc, #64]	; (800cd90 <tcp_kill_state+0x90>)
 800cd50:	681a      	ldr	r2, [r3, #0]
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	6a1b      	ldr	r3, [r3, #32]
 800cd56:	1ad3      	subs	r3, r2, r3
 800cd58:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	68db      	ldr	r3, [r3, #12]
 800cd62:	617b      	str	r3, [r7, #20]
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d1e4      	bne.n	800cd34 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d003      	beq.n	800cd78 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800cd70:	2100      	movs	r1, #0
 800cd72:	6938      	ldr	r0, [r7, #16]
 800cd74:	f7ff fa22 	bl	800c1bc <tcp_abandon>
  }
}
 800cd78:	bf00      	nop
 800cd7a:	3718      	adds	r7, #24
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}
 800cd80:	08015794 	.word	0x08015794
 800cd84:	08015aa4 	.word	0x08015aa4
 800cd88:	080157d0 	.word	0x080157d0
 800cd8c:	20006c9c 	.word	0x20006c9c
 800cd90:	20006ca0 	.word	0x20006ca0

0800cd94 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cda2:	4b12      	ldr	r3, [pc, #72]	; (800cdec <tcp_kill_timewait+0x58>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	60fb      	str	r3, [r7, #12]
 800cda8:	e012      	b.n	800cdd0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cdaa:	4b11      	ldr	r3, [pc, #68]	; (800cdf0 <tcp_kill_timewait+0x5c>)
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	6a1b      	ldr	r3, [r3, #32]
 800cdb2:	1ad3      	subs	r3, r2, r3
 800cdb4:	687a      	ldr	r2, [r7, #4]
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d807      	bhi.n	800cdca <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800cdba:	4b0d      	ldr	r3, [pc, #52]	; (800cdf0 <tcp_kill_timewait+0x5c>)
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	6a1b      	ldr	r3, [r3, #32]
 800cdc2:	1ad3      	subs	r3, r2, r3
 800cdc4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	68db      	ldr	r3, [r3, #12]
 800cdce:	60fb      	str	r3, [r7, #12]
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d1e9      	bne.n	800cdaa <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d002      	beq.n	800cde2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cddc:	68b8      	ldr	r0, [r7, #8]
 800cdde:	f7ff fa9f 	bl	800c320 <tcp_abort>
  }
}
 800cde2:	bf00      	nop
 800cde4:	3710      	adds	r7, #16
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}
 800cdea:	bf00      	nop
 800cdec:	20006cac 	.word	0x20006cac
 800cdf0:	20006ca0 	.word	0x20006ca0

0800cdf4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b084      	sub	sp, #16
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cdfe:	2001      	movs	r0, #1
 800ce00:	f7fd ff72 	bl	800ace8 <memp_malloc>
 800ce04:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d124      	bne.n	800ce56 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ce0c:	f7ff ffc2 	bl	800cd94 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ce10:	2001      	movs	r0, #1
 800ce12:	f7fd ff69 	bl	800ace8 <memp_malloc>
 800ce16:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d11b      	bne.n	800ce56 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ce1e:	2009      	movs	r0, #9
 800ce20:	f7ff ff6e 	bl	800cd00 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ce24:	2001      	movs	r0, #1
 800ce26:	f7fd ff5f 	bl	800ace8 <memp_malloc>
 800ce2a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d111      	bne.n	800ce56 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ce32:	2008      	movs	r0, #8
 800ce34:	f7ff ff64 	bl	800cd00 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ce38:	2001      	movs	r0, #1
 800ce3a:	f7fd ff55 	bl	800ace8 <memp_malloc>
 800ce3e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d107      	bne.n	800ce56 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ce46:	79fb      	ldrb	r3, [r7, #7]
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f7ff ff17 	bl	800cc7c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ce4e:	2001      	movs	r0, #1
 800ce50:	f7fd ff4a 	bl	800ace8 <memp_malloc>
 800ce54:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d03f      	beq.n	800cedc <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ce5c:	2298      	movs	r2, #152	; 0x98
 800ce5e:	2100      	movs	r1, #0
 800ce60:	68f8      	ldr	r0, [r7, #12]
 800ce62:	f006 fcc7 	bl	80137f4 <memset>
    pcb->prio = prio;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	79fa      	ldrb	r2, [r7, #7]
 800ce6a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ce72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ce7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	22ff      	movs	r2, #255	; 0xff
 800ce8a:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ce92:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	2206      	movs	r2, #6
 800ce98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	2206      	movs	r2, #6
 800cea0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cea8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2201      	movs	r2, #1
 800ceae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ceb2:	4b0d      	ldr	r3, [pc, #52]	; (800cee8 <tcp_alloc+0xf4>)
 800ceb4:	681a      	ldr	r2, [r3, #0]
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ceba:	4b0c      	ldr	r3, [pc, #48]	; (800ceec <tcp_alloc+0xf8>)
 800cebc:	781a      	ldrb	r2, [r3, #0]
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800cec8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	4a08      	ldr	r2, [pc, #32]	; (800cef0 <tcp_alloc+0xfc>)
 800ced0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	4a07      	ldr	r2, [pc, #28]	; (800cef4 <tcp_alloc+0x100>)
 800ced8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800cedc:	68fb      	ldr	r3, [r7, #12]
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3710      	adds	r7, #16
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	20006ca0 	.word	0x20006ca0
 800ceec:	200004fe 	.word	0x200004fe
 800cef0:	0800cc39 	.word	0x0800cc39
 800cef4:	006ddd00 	.word	0x006ddd00

0800cef8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b082      	sub	sp, #8
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	7d1b      	ldrb	r3, [r3, #20]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d034      	beq.n	800cf72 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800cf0c:	2b0a      	cmp	r3, #10
 800cf0e:	d030      	beq.n	800cf72 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800cf14:	2b01      	cmp	r3, #1
 800cf16:	d02c      	beq.n	800cf72 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d007      	beq.n	800cf30 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf24:	4618      	mov	r0, r3
 800cf26:	f7fe fc63 	bl	800b7f0 <pbuf_free>
      pcb->refused_data = NULL;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7ff fe36 	bl	800cba6 <tcp_segs_free>
    pcb->ooseq = NULL;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf46:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f7ff fe2a 	bl	800cba6 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7ff fe25 	bl	800cba6 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	669a      	str	r2, [r3, #104]	; 0x68
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800cf72:	bf00      	nop
 800cf74:	3708      	adds	r7, #8
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
	...

0800cf7c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b084      	sub	sp, #16
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	683a      	ldr	r2, [r7, #0]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d105      	bne.n	800cf9c <tcp_pcb_remove+0x20>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	68da      	ldr	r2, [r3, #12]
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	601a      	str	r2, [r3, #0]
 800cf9a:	e013      	b.n	800cfc4 <tcp_pcb_remove+0x48>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	60fb      	str	r3, [r7, #12]
 800cfa2:	e00c      	b.n	800cfbe <tcp_pcb_remove+0x42>
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	68db      	ldr	r3, [r3, #12]
 800cfa8:	683a      	ldr	r2, [r7, #0]
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d104      	bne.n	800cfb8 <tcp_pcb_remove+0x3c>
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	68da      	ldr	r2, [r3, #12]
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	60da      	str	r2, [r3, #12]
 800cfb6:	e005      	b.n	800cfc4 <tcp_pcb_remove+0x48>
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	60fb      	str	r3, [r7, #12]
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d1ef      	bne.n	800cfa4 <tcp_pcb_remove+0x28>
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800cfca:	6838      	ldr	r0, [r7, #0]
 800cfcc:	f7ff ff94 	bl	800cef8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	7d1b      	ldrb	r3, [r3, #20]
 800cfd4:	2b0a      	cmp	r3, #10
 800cfd6:	d013      	beq.n	800d000 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d00f      	beq.n	800d000 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	7e9b      	ldrb	r3, [r3, #26]
 800cfe4:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d009      	beq.n	800d000 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	7e9b      	ldrb	r3, [r3, #26]
 800cff0:	f043 0302 	orr.w	r3, r3, #2
 800cff4:	b2da      	uxtb	r2, r3
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800cffa:	6838      	ldr	r0, [r7, #0]
 800cffc:	f002 fd88 	bl	800fb10 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	7d1b      	ldrb	r3, [r3, #20]
 800d004:	2b01      	cmp	r3, #1
 800d006:	d020      	beq.n	800d04a <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d006      	beq.n	800d01e <tcp_pcb_remove+0xa2>
 800d010:	4b13      	ldr	r3, [pc, #76]	; (800d060 <tcp_pcb_remove+0xe4>)
 800d012:	f240 7253 	movw	r2, #1875	; 0x753
 800d016:	4913      	ldr	r1, [pc, #76]	; (800d064 <tcp_pcb_remove+0xe8>)
 800d018:	4813      	ldr	r0, [pc, #76]	; (800d068 <tcp_pcb_remove+0xec>)
 800d01a:	f006 fc99 	bl	8013950 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d022:	2b00      	cmp	r3, #0
 800d024:	d006      	beq.n	800d034 <tcp_pcb_remove+0xb8>
 800d026:	4b0e      	ldr	r3, [pc, #56]	; (800d060 <tcp_pcb_remove+0xe4>)
 800d028:	f240 7254 	movw	r2, #1876	; 0x754
 800d02c:	490f      	ldr	r1, [pc, #60]	; (800d06c <tcp_pcb_remove+0xf0>)
 800d02e:	480e      	ldr	r0, [pc, #56]	; (800d068 <tcp_pcb_remove+0xec>)
 800d030:	f006 fc8e 	bl	8013950 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d006      	beq.n	800d04a <tcp_pcb_remove+0xce>
 800d03c:	4b08      	ldr	r3, [pc, #32]	; (800d060 <tcp_pcb_remove+0xe4>)
 800d03e:	f240 7256 	movw	r2, #1878	; 0x756
 800d042:	490b      	ldr	r1, [pc, #44]	; (800d070 <tcp_pcb_remove+0xf4>)
 800d044:	4808      	ldr	r0, [pc, #32]	; (800d068 <tcp_pcb_remove+0xec>)
 800d046:	f006 fc83 	bl	8013950 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	2200      	movs	r2, #0
 800d04e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	2200      	movs	r2, #0
 800d054:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d056:	bf00      	nop
 800d058:	3710      	adds	r7, #16
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}
 800d05e:	bf00      	nop
 800d060:	08015794 	.word	0x08015794
 800d064:	08015b4c 	.word	0x08015b4c
 800d068:	080157d0 	.word	0x080157d0
 800d06c:	08015b64 	.word	0x08015b64
 800d070:	08015b80 	.word	0x08015b80

0800d074 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d074:	b480      	push	{r7}
 800d076:	b083      	sub	sp, #12
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d07c:	4b06      	ldr	r3, [pc, #24]	; (800d098 <tcp_next_iss+0x24>)
 800d07e:	681a      	ldr	r2, [r3, #0]
 800d080:	4b06      	ldr	r3, [pc, #24]	; (800d09c <tcp_next_iss+0x28>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	4413      	add	r3, r2
 800d086:	4a04      	ldr	r2, [pc, #16]	; (800d098 <tcp_next_iss+0x24>)
 800d088:	6013      	str	r3, [r2, #0]
  return iss;
 800d08a:	4b03      	ldr	r3, [pc, #12]	; (800d098 <tcp_next_iss+0x24>)
 800d08c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d08e:	4618      	mov	r0, r3
 800d090:	370c      	adds	r7, #12
 800d092:	46bd      	mov	sp, r7
 800d094:	bc80      	pop	{r7}
 800d096:	4770      	bx	lr
 800d098:	2000005c 	.word	0x2000005c
 800d09c:	20006ca0 	.word	0x20006ca0

0800d0a0 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b084      	sub	sp, #16
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	6039      	str	r1, [r7, #0]
 800d0aa:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800d0ac:	6838      	ldr	r0, [r7, #0]
 800d0ae:	f004 ffd1 	bl	8012054 <ip4_route>
 800d0b2:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d101      	bne.n	800d0be <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800d0ba:	88fb      	ldrh	r3, [r7, #6]
 800d0bc:	e010      	b.n	800d0e0 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d0c2:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d0c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d008      	beq.n	800d0de <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800d0cc:	897b      	ldrh	r3, [r7, #10]
 800d0ce:	3b28      	subs	r3, #40	; 0x28
 800d0d0:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d0d2:	893a      	ldrh	r2, [r7, #8]
 800d0d4:	88fb      	ldrh	r3, [r7, #6]
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	bf28      	it	cs
 800d0da:	4613      	movcs	r3, r2
 800d0dc:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800d0de:	88fb      	ldrh	r3, [r7, #6]
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3710      	adds	r7, #16
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d0f6:	e011      	b.n	800d11c <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681a      	ldr	r2, [r3, #0]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	429a      	cmp	r2, r3
 800d102:	d108      	bne.n	800d116 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	68db      	ldr	r3, [r3, #12]
 800d108:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d10a:	68f8      	ldr	r0, [r7, #12]
 800d10c:	f7ff f908 	bl	800c320 <tcp_abort>
      pcb = next;
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	60fb      	str	r3, [r7, #12]
 800d114:	e002      	b.n	800d11c <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	68db      	ldr	r3, [r3, #12]
 800d11a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d1ea      	bne.n	800d0f8 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800d122:	bf00      	nop
 800d124:	bf00      	nop
 800d126:	3710      	adds	r7, #16
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b084      	sub	sp, #16
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d02c      	beq.n	800d196 <tcp_netif_ip_addr_changed+0x6a>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d028      	beq.n	800d196 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d144:	4b16      	ldr	r3, [pc, #88]	; (800d1a0 <tcp_netif_ip_addr_changed+0x74>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4619      	mov	r1, r3
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f7ff ffcc 	bl	800d0e8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d150:	4b14      	ldr	r3, [pc, #80]	; (800d1a4 <tcp_netif_ip_addr_changed+0x78>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	4619      	mov	r1, r3
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f7ff ffc6 	bl	800d0e8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d019      	beq.n	800d196 <tcp_netif_ip_addr_changed+0x6a>
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d015      	beq.n	800d196 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800d16a:	4b0f      	ldr	r3, [pc, #60]	; (800d1a8 <tcp_netif_ip_addr_changed+0x7c>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	60fb      	str	r3, [r7, #12]
 800d170:	e00e      	b.n	800d190 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	68db      	ldr	r3, [r3, #12]
 800d176:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681a      	ldr	r2, [r3, #0]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	429a      	cmp	r2, r3
 800d182:	d103      	bne.n	800d18c <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	60fb      	str	r3, [r7, #12]
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d1ed      	bne.n	800d172 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d196:	bf00      	nop
 800d198:	3710      	adds	r7, #16
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
 800d19e:	bf00      	nop
 800d1a0:	20006c9c 	.word	0x20006c9c
 800d1a4:	20006ca8 	.word	0x20006ca8
 800d1a8:	20006ca4 	.word	0x20006ca4

0800d1ac <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d1ac:	b590      	push	{r4, r7, lr}
 800d1ae:	b08b      	sub	sp, #44	; 0x2c
 800d1b0:	af02      	add	r7, sp, #8
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	685b      	ldr	r3, [r3, #4]
 800d1ba:	4a82      	ldr	r2, [pc, #520]	; (800d3c4 <tcp_input+0x218>)
 800d1bc:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	895b      	ldrh	r3, [r3, #10]
 800d1c2:	2b13      	cmp	r3, #19
 800d1c4:	f240 838a 	bls.w	800d8dc <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d1c8:	4b7f      	ldr	r3, [pc, #508]	; (800d3c8 <tcp_input+0x21c>)
 800d1ca:	695b      	ldr	r3, [r3, #20]
 800d1cc:	4a7e      	ldr	r2, [pc, #504]	; (800d3c8 <tcp_input+0x21c>)
 800d1ce:	6812      	ldr	r2, [r2, #0]
 800d1d0:	4611      	mov	r1, r2
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f005 f9ba 	bl	801254c <ip4_addr_isbroadcast_u32>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	f040 8380 	bne.w	800d8e0 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d1e0:	4b79      	ldr	r3, [pc, #484]	; (800d3c8 <tcp_input+0x21c>)
 800d1e2:	695b      	ldr	r3, [r3, #20]
 800d1e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d1e8:	2be0      	cmp	r3, #224	; 0xe0
 800d1ea:	f000 8379 	beq.w	800d8e0 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800d1ee:	4b75      	ldr	r3, [pc, #468]	; (800d3c4 <tcp_input+0x218>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	899b      	ldrh	r3, [r3, #12]
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7fd f9cd 	bl	800a596 <lwip_htons>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	0b1b      	lsrs	r3, r3, #12
 800d200:	b29b      	uxth	r3, r3
 800d202:	b2db      	uxtb	r3, r3
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d208:	7cbb      	ldrb	r3, [r7, #18]
 800d20a:	2b13      	cmp	r3, #19
 800d20c:	f240 836a 	bls.w	800d8e4 <tcp_input+0x738>
 800d210:	7cbb      	ldrb	r3, [r7, #18]
 800d212:	b29a      	uxth	r2, r3
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	891b      	ldrh	r3, [r3, #8]
 800d218:	429a      	cmp	r2, r3
 800d21a:	f200 8363 	bhi.w	800d8e4 <tcp_input+0x738>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800d21e:	7cbb      	ldrb	r3, [r7, #18]
 800d220:	b29b      	uxth	r3, r3
 800d222:	3b14      	subs	r3, #20
 800d224:	b29a      	uxth	r2, r3
 800d226:	4b69      	ldr	r3, [pc, #420]	; (800d3cc <tcp_input+0x220>)
 800d228:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d22a:	4b69      	ldr	r3, [pc, #420]	; (800d3d0 <tcp_input+0x224>)
 800d22c:	2200      	movs	r2, #0
 800d22e:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	895a      	ldrh	r2, [r3, #10]
 800d234:	7cbb      	ldrb	r3, [r7, #18]
 800d236:	b29b      	uxth	r3, r3
 800d238:	429a      	cmp	r2, r3
 800d23a:	d30d      	bcc.n	800d258 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d23c:	4b63      	ldr	r3, [pc, #396]	; (800d3cc <tcp_input+0x220>)
 800d23e:	881a      	ldrh	r2, [r3, #0]
 800d240:	4b64      	ldr	r3, [pc, #400]	; (800d3d4 <tcp_input+0x228>)
 800d242:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800d244:	7cbb      	ldrb	r3, [r7, #18]
 800d246:	b29b      	uxth	r3, r3
 800d248:	425b      	negs	r3, r3
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	b21b      	sxth	r3, r3
 800d24e:	4619      	mov	r1, r3
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f7fe faa9 	bl	800b7a8 <pbuf_header>
 800d256:	e055      	b.n	800d304 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d105      	bne.n	800d26c <tcp_input+0xc0>
 800d260:	4b5d      	ldr	r3, [pc, #372]	; (800d3d8 <tcp_input+0x22c>)
 800d262:	22b2      	movs	r2, #178	; 0xb2
 800d264:	495d      	ldr	r1, [pc, #372]	; (800d3dc <tcp_input+0x230>)
 800d266:	485e      	ldr	r0, [pc, #376]	; (800d3e0 <tcp_input+0x234>)
 800d268:	f006 fb72 	bl	8013950 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800d26c:	f06f 0113 	mvn.w	r1, #19
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f7fe fa99 	bl	800b7a8 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	895a      	ldrh	r2, [r3, #10]
 800d27a:	4b56      	ldr	r3, [pc, #344]	; (800d3d4 <tcp_input+0x228>)
 800d27c:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800d27e:	4b53      	ldr	r3, [pc, #332]	; (800d3cc <tcp_input+0x220>)
 800d280:	881a      	ldrh	r2, [r3, #0]
 800d282:	4b54      	ldr	r3, [pc, #336]	; (800d3d4 <tcp_input+0x228>)
 800d284:	881b      	ldrh	r3, [r3, #0]
 800d286:	1ad3      	subs	r3, r2, r3
 800d288:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800d28a:	4b52      	ldr	r3, [pc, #328]	; (800d3d4 <tcp_input+0x228>)
 800d28c:	881b      	ldrh	r3, [r3, #0]
 800d28e:	425b      	negs	r3, r3
 800d290:	b29b      	uxth	r3, r3
 800d292:	b21b      	sxth	r3, r3
 800d294:	4619      	mov	r1, r3
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f7fe fa86 	bl	800b7a8 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	895b      	ldrh	r3, [r3, #10]
 800d2a2:	8a3a      	ldrh	r2, [r7, #16]
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	f200 831f 	bhi.w	800d8e8 <tcp_input+0x73c>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	685b      	ldr	r3, [r3, #4]
 800d2b0:	4a47      	ldr	r2, [pc, #284]	; (800d3d0 <tcp_input+0x224>)
 800d2b2:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681a      	ldr	r2, [r3, #0]
 800d2b8:	8a3b      	ldrh	r3, [r7, #16]
 800d2ba:	425b      	negs	r3, r3
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	b21b      	sxth	r3, r3
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	4610      	mov	r0, r2
 800d2c4:	f7fe fa70 	bl	800b7a8 <pbuf_header>
    p->tot_len -= opt2len;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	891a      	ldrh	r2, [r3, #8]
 800d2cc:	8a3b      	ldrh	r3, [r7, #16]
 800d2ce:	1ad3      	subs	r3, r2, r3
 800d2d0:	b29a      	uxth	r2, r3
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	895b      	ldrh	r3, [r3, #10]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d005      	beq.n	800d2ea <tcp_input+0x13e>
 800d2de:	4b3e      	ldr	r3, [pc, #248]	; (800d3d8 <tcp_input+0x22c>)
 800d2e0:	22cf      	movs	r2, #207	; 0xcf
 800d2e2:	4940      	ldr	r1, [pc, #256]	; (800d3e4 <tcp_input+0x238>)
 800d2e4:	483e      	ldr	r0, [pc, #248]	; (800d3e0 <tcp_input+0x234>)
 800d2e6:	f006 fb33 	bl	8013950 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	891a      	ldrh	r2, [r3, #8]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	891b      	ldrh	r3, [r3, #8]
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d005      	beq.n	800d304 <tcp_input+0x158>
 800d2f8:	4b37      	ldr	r3, [pc, #220]	; (800d3d8 <tcp_input+0x22c>)
 800d2fa:	22d0      	movs	r2, #208	; 0xd0
 800d2fc:	493a      	ldr	r1, [pc, #232]	; (800d3e8 <tcp_input+0x23c>)
 800d2fe:	4838      	ldr	r0, [pc, #224]	; (800d3e0 <tcp_input+0x234>)
 800d300:	f006 fb26 	bl	8013950 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d304:	4b2f      	ldr	r3, [pc, #188]	; (800d3c4 <tcp_input+0x218>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	881b      	ldrh	r3, [r3, #0]
 800d30a:	b29b      	uxth	r3, r3
 800d30c:	4a2d      	ldr	r2, [pc, #180]	; (800d3c4 <tcp_input+0x218>)
 800d30e:	6814      	ldr	r4, [r2, #0]
 800d310:	4618      	mov	r0, r3
 800d312:	f7fd f940 	bl	800a596 <lwip_htons>
 800d316:	4603      	mov	r3, r0
 800d318:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d31a:	4b2a      	ldr	r3, [pc, #168]	; (800d3c4 <tcp_input+0x218>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	885b      	ldrh	r3, [r3, #2]
 800d320:	b29b      	uxth	r3, r3
 800d322:	4a28      	ldr	r2, [pc, #160]	; (800d3c4 <tcp_input+0x218>)
 800d324:	6814      	ldr	r4, [r2, #0]
 800d326:	4618      	mov	r0, r3
 800d328:	f7fd f935 	bl	800a596 <lwip_htons>
 800d32c:	4603      	mov	r3, r0
 800d32e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d330:	4b24      	ldr	r3, [pc, #144]	; (800d3c4 <tcp_input+0x218>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	685b      	ldr	r3, [r3, #4]
 800d336:	4a23      	ldr	r2, [pc, #140]	; (800d3c4 <tcp_input+0x218>)
 800d338:	6814      	ldr	r4, [r2, #0]
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7fd f938 	bl	800a5b0 <lwip_htonl>
 800d340:	4603      	mov	r3, r0
 800d342:	6063      	str	r3, [r4, #4]
 800d344:	6863      	ldr	r3, [r4, #4]
 800d346:	4a29      	ldr	r2, [pc, #164]	; (800d3ec <tcp_input+0x240>)
 800d348:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d34a:	4b1e      	ldr	r3, [pc, #120]	; (800d3c4 <tcp_input+0x218>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	689b      	ldr	r3, [r3, #8]
 800d350:	4a1c      	ldr	r2, [pc, #112]	; (800d3c4 <tcp_input+0x218>)
 800d352:	6814      	ldr	r4, [r2, #0]
 800d354:	4618      	mov	r0, r3
 800d356:	f7fd f92b 	bl	800a5b0 <lwip_htonl>
 800d35a:	4603      	mov	r3, r0
 800d35c:	60a3      	str	r3, [r4, #8]
 800d35e:	68a3      	ldr	r3, [r4, #8]
 800d360:	4a23      	ldr	r2, [pc, #140]	; (800d3f0 <tcp_input+0x244>)
 800d362:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d364:	4b17      	ldr	r3, [pc, #92]	; (800d3c4 <tcp_input+0x218>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	89db      	ldrh	r3, [r3, #14]
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	4a15      	ldr	r2, [pc, #84]	; (800d3c4 <tcp_input+0x218>)
 800d36e:	6814      	ldr	r4, [r2, #0]
 800d370:	4618      	mov	r0, r3
 800d372:	f7fd f910 	bl	800a596 <lwip_htons>
 800d376:	4603      	mov	r3, r0
 800d378:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d37a:	4b12      	ldr	r3, [pc, #72]	; (800d3c4 <tcp_input+0x218>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	899b      	ldrh	r3, [r3, #12]
 800d380:	b29b      	uxth	r3, r3
 800d382:	4618      	mov	r0, r3
 800d384:	f7fd f907 	bl	800a596 <lwip_htons>
 800d388:	4603      	mov	r3, r0
 800d38a:	b2db      	uxtb	r3, r3
 800d38c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d390:	b2da      	uxtb	r2, r3
 800d392:	4b18      	ldr	r3, [pc, #96]	; (800d3f4 <tcp_input+0x248>)
 800d394:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	891a      	ldrh	r2, [r3, #8]
 800d39a:	4b16      	ldr	r3, [pc, #88]	; (800d3f4 <tcp_input+0x248>)
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	f003 0303 	and.w	r3, r3, #3
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	bf14      	ite	ne
 800d3a6:	2301      	movne	r3, #1
 800d3a8:	2300      	moveq	r3, #0
 800d3aa:	b2db      	uxtb	r3, r3
 800d3ac:	b29b      	uxth	r3, r3
 800d3ae:	4413      	add	r3, r2
 800d3b0:	b29a      	uxth	r2, r3
 800d3b2:	4b11      	ldr	r3, [pc, #68]	; (800d3f8 <tcp_input+0x24c>)
 800d3b4:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d3ba:	4b10      	ldr	r3, [pc, #64]	; (800d3fc <tcp_input+0x250>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	61fb      	str	r3, [r7, #28]
 800d3c0:	e082      	b.n	800d4c8 <tcp_input+0x31c>
 800d3c2:	bf00      	nop
 800d3c4:	20000510 	.word	0x20000510
 800d3c8:	2000376c 	.word	0x2000376c
 800d3cc:	20000514 	.word	0x20000514
 800d3d0:	20000518 	.word	0x20000518
 800d3d4:	20000516 	.word	0x20000516
 800d3d8:	08015b98 	.word	0x08015b98
 800d3dc:	08015bcc 	.word	0x08015bcc
 800d3e0:	08015bdc 	.word	0x08015bdc
 800d3e4:	08015c04 	.word	0x08015c04
 800d3e8:	08015c10 	.word	0x08015c10
 800d3ec:	20000520 	.word	0x20000520
 800d3f0:	20000524 	.word	0x20000524
 800d3f4:	2000052c 	.word	0x2000052c
 800d3f8:	2000052a 	.word	0x2000052a
 800d3fc:	20006c9c 	.word	0x20006c9c
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	7d1b      	ldrb	r3, [r3, #20]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d105      	bne.n	800d414 <tcp_input+0x268>
 800d408:	4b8f      	ldr	r3, [pc, #572]	; (800d648 <tcp_input+0x49c>)
 800d40a:	22e2      	movs	r2, #226	; 0xe2
 800d40c:	498f      	ldr	r1, [pc, #572]	; (800d64c <tcp_input+0x4a0>)
 800d40e:	4890      	ldr	r0, [pc, #576]	; (800d650 <tcp_input+0x4a4>)
 800d410:	f006 fa9e 	bl	8013950 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d414:	69fb      	ldr	r3, [r7, #28]
 800d416:	7d1b      	ldrb	r3, [r3, #20]
 800d418:	2b0a      	cmp	r3, #10
 800d41a:	d105      	bne.n	800d428 <tcp_input+0x27c>
 800d41c:	4b8a      	ldr	r3, [pc, #552]	; (800d648 <tcp_input+0x49c>)
 800d41e:	22e3      	movs	r2, #227	; 0xe3
 800d420:	498c      	ldr	r1, [pc, #560]	; (800d654 <tcp_input+0x4a8>)
 800d422:	488b      	ldr	r0, [pc, #556]	; (800d650 <tcp_input+0x4a4>)
 800d424:	f006 fa94 	bl	8013950 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d428:	69fb      	ldr	r3, [r7, #28]
 800d42a:	7d1b      	ldrb	r3, [r3, #20]
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	d105      	bne.n	800d43c <tcp_input+0x290>
 800d430:	4b85      	ldr	r3, [pc, #532]	; (800d648 <tcp_input+0x49c>)
 800d432:	22e4      	movs	r2, #228	; 0xe4
 800d434:	4988      	ldr	r1, [pc, #544]	; (800d658 <tcp_input+0x4ac>)
 800d436:	4886      	ldr	r0, [pc, #536]	; (800d650 <tcp_input+0x4a4>)
 800d438:	f006 fa8a 	bl	8013950 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800d43c:	69fb      	ldr	r3, [r7, #28]
 800d43e:	8b1a      	ldrh	r2, [r3, #24]
 800d440:	4b86      	ldr	r3, [pc, #536]	; (800d65c <tcp_input+0x4b0>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	881b      	ldrh	r3, [r3, #0]
 800d446:	b29b      	uxth	r3, r3
 800d448:	429a      	cmp	r2, r3
 800d44a:	d138      	bne.n	800d4be <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800d44c:	69fb      	ldr	r3, [r7, #28]
 800d44e:	8ada      	ldrh	r2, [r3, #22]
 800d450:	4b82      	ldr	r3, [pc, #520]	; (800d65c <tcp_input+0x4b0>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	885b      	ldrh	r3, [r3, #2]
 800d456:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d458:	429a      	cmp	r2, r3
 800d45a:	d130      	bne.n	800d4be <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d45c:	69fb      	ldr	r3, [r7, #28]
 800d45e:	685a      	ldr	r2, [r3, #4]
 800d460:	4b7f      	ldr	r3, [pc, #508]	; (800d660 <tcp_input+0x4b4>)
 800d462:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d464:	429a      	cmp	r2, r3
 800d466:	d12a      	bne.n	800d4be <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d468:	69fb      	ldr	r3, [r7, #28]
 800d46a:	681a      	ldr	r2, [r3, #0]
 800d46c:	4b7c      	ldr	r3, [pc, #496]	; (800d660 <tcp_input+0x4b4>)
 800d46e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d470:	429a      	cmp	r2, r3
 800d472:	d124      	bne.n	800d4be <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d474:	69fb      	ldr	r3, [r7, #28]
 800d476:	68db      	ldr	r3, [r3, #12]
 800d478:	69fa      	ldr	r2, [r7, #28]
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d105      	bne.n	800d48a <tcp_input+0x2de>
 800d47e:	4b72      	ldr	r3, [pc, #456]	; (800d648 <tcp_input+0x49c>)
 800d480:	22ec      	movs	r2, #236	; 0xec
 800d482:	4978      	ldr	r1, [pc, #480]	; (800d664 <tcp_input+0x4b8>)
 800d484:	4872      	ldr	r0, [pc, #456]	; (800d650 <tcp_input+0x4a4>)
 800d486:	f006 fa63 	bl	8013950 <iprintf>
      if (prev != NULL) {
 800d48a:	69bb      	ldr	r3, [r7, #24]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d00a      	beq.n	800d4a6 <tcp_input+0x2fa>
        prev->next = pcb->next;
 800d490:	69fb      	ldr	r3, [r7, #28]
 800d492:	68da      	ldr	r2, [r3, #12]
 800d494:	69bb      	ldr	r3, [r7, #24]
 800d496:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d498:	4b73      	ldr	r3, [pc, #460]	; (800d668 <tcp_input+0x4bc>)
 800d49a:	681a      	ldr	r2, [r3, #0]
 800d49c:	69fb      	ldr	r3, [r7, #28]
 800d49e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d4a0:	4a71      	ldr	r2, [pc, #452]	; (800d668 <tcp_input+0x4bc>)
 800d4a2:	69fb      	ldr	r3, [r7, #28]
 800d4a4:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d4a6:	69fb      	ldr	r3, [r7, #28]
 800d4a8:	68db      	ldr	r3, [r3, #12]
 800d4aa:	69fa      	ldr	r2, [r7, #28]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d10f      	bne.n	800d4d0 <tcp_input+0x324>
 800d4b0:	4b65      	ldr	r3, [pc, #404]	; (800d648 <tcp_input+0x49c>)
 800d4b2:	22f4      	movs	r2, #244	; 0xf4
 800d4b4:	496d      	ldr	r1, [pc, #436]	; (800d66c <tcp_input+0x4c0>)
 800d4b6:	4866      	ldr	r0, [pc, #408]	; (800d650 <tcp_input+0x4a4>)
 800d4b8:	f006 fa4a 	bl	8013950 <iprintf>
      break;
 800d4bc:	e008      	b.n	800d4d0 <tcp_input+0x324>
    }
    prev = pcb;
 800d4be:	69fb      	ldr	r3, [r7, #28]
 800d4c0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d4c2:	69fb      	ldr	r3, [r7, #28]
 800d4c4:	68db      	ldr	r3, [r3, #12]
 800d4c6:	61fb      	str	r3, [r7, #28]
 800d4c8:	69fb      	ldr	r3, [r7, #28]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d198      	bne.n	800d400 <tcp_input+0x254>
 800d4ce:	e000      	b.n	800d4d2 <tcp_input+0x326>
      break;
 800d4d0:	bf00      	nop
  }

  if (pcb == NULL) {
 800d4d2:	69fb      	ldr	r3, [r7, #28]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d173      	bne.n	800d5c0 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d4d8:	4b65      	ldr	r3, [pc, #404]	; (800d670 <tcp_input+0x4c4>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	61fb      	str	r3, [r7, #28]
 800d4de:	e02f      	b.n	800d540 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d4e0:	69fb      	ldr	r3, [r7, #28]
 800d4e2:	7d1b      	ldrb	r3, [r3, #20]
 800d4e4:	2b0a      	cmp	r3, #10
 800d4e6:	d005      	beq.n	800d4f4 <tcp_input+0x348>
 800d4e8:	4b57      	ldr	r3, [pc, #348]	; (800d648 <tcp_input+0x49c>)
 800d4ea:	22fe      	movs	r2, #254	; 0xfe
 800d4ec:	4961      	ldr	r1, [pc, #388]	; (800d674 <tcp_input+0x4c8>)
 800d4ee:	4858      	ldr	r0, [pc, #352]	; (800d650 <tcp_input+0x4a4>)
 800d4f0:	f006 fa2e 	bl	8013950 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800d4f4:	69fb      	ldr	r3, [r7, #28]
 800d4f6:	8b1a      	ldrh	r2, [r3, #24]
 800d4f8:	4b58      	ldr	r3, [pc, #352]	; (800d65c <tcp_input+0x4b0>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	881b      	ldrh	r3, [r3, #0]
 800d4fe:	b29b      	uxth	r3, r3
 800d500:	429a      	cmp	r2, r3
 800d502:	d11a      	bne.n	800d53a <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800d504:	69fb      	ldr	r3, [r7, #28]
 800d506:	8ada      	ldrh	r2, [r3, #22]
 800d508:	4b54      	ldr	r3, [pc, #336]	; (800d65c <tcp_input+0x4b0>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	885b      	ldrh	r3, [r3, #2]
 800d50e:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d510:	429a      	cmp	r2, r3
 800d512:	d112      	bne.n	800d53a <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d514:	69fb      	ldr	r3, [r7, #28]
 800d516:	685a      	ldr	r2, [r3, #4]
 800d518:	4b51      	ldr	r3, [pc, #324]	; (800d660 <tcp_input+0x4b4>)
 800d51a:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d10c      	bne.n	800d53a <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d520:	69fb      	ldr	r3, [r7, #28]
 800d522:	681a      	ldr	r2, [r3, #0]
 800d524:	4b4e      	ldr	r3, [pc, #312]	; (800d660 <tcp_input+0x4b4>)
 800d526:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d528:	429a      	cmp	r2, r3
 800d52a:	d106      	bne.n	800d53a <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800d52c:	69f8      	ldr	r0, [r7, #28]
 800d52e:	f000 fb15 	bl	800db5c <tcp_timewait_input>
        pbuf_free(p);
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f7fe f95c 	bl	800b7f0 <pbuf_free>
        return;
 800d538:	e1dc      	b.n	800d8f4 <tcp_input+0x748>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d53a:	69fb      	ldr	r3, [r7, #28]
 800d53c:	68db      	ldr	r3, [r3, #12]
 800d53e:	61fb      	str	r3, [r7, #28]
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d1cc      	bne.n	800d4e0 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d546:	2300      	movs	r3, #0
 800d548:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d54a:	4b4b      	ldr	r3, [pc, #300]	; (800d678 <tcp_input+0x4cc>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	617b      	str	r3, [r7, #20]
 800d550:	e019      	b.n	800d586 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	8ada      	ldrh	r2, [r3, #22]
 800d556:	4b41      	ldr	r3, [pc, #260]	; (800d65c <tcp_input+0x4b0>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	885b      	ldrh	r3, [r3, #2]
 800d55c:	b29b      	uxth	r3, r3
 800d55e:	429a      	cmp	r2, r3
 800d560:	d10c      	bne.n	800d57c <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	681a      	ldr	r2, [r3, #0]
 800d566:	4b3e      	ldr	r3, [pc, #248]	; (800d660 <tcp_input+0x4b4>)
 800d568:	695b      	ldr	r3, [r3, #20]
 800d56a:	429a      	cmp	r2, r3
 800d56c:	d00f      	beq.n	800d58e <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d00d      	beq.n	800d590 <tcp_input+0x3e4>
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d009      	beq.n	800d590 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	68db      	ldr	r3, [r3, #12]
 800d584:	617b      	str	r3, [r7, #20]
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d1e2      	bne.n	800d552 <tcp_input+0x3a6>
 800d58c:	e000      	b.n	800d590 <tcp_input+0x3e4>
            break;
 800d58e:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d014      	beq.n	800d5c0 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d596:	69bb      	ldr	r3, [r7, #24]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d00a      	beq.n	800d5b2 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	68da      	ldr	r2, [r3, #12]
 800d5a0:	69bb      	ldr	r3, [r7, #24]
 800d5a2:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d5a4:	4b34      	ldr	r3, [pc, #208]	; (800d678 <tcp_input+0x4cc>)
 800d5a6:	681a      	ldr	r2, [r3, #0]
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d5ac:	4a32      	ldr	r2, [pc, #200]	; (800d678 <tcp_input+0x4cc>)
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800d5b2:	6978      	ldr	r0, [r7, #20]
 800d5b4:	f000 f9f2 	bl	800d99c <tcp_listen_input>
      pbuf_free(p);
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f7fe f919 	bl	800b7f0 <pbuf_free>
      return;
 800d5be:	e199      	b.n	800d8f4 <tcp_input+0x748>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800d5c0:	69fb      	ldr	r3, [r7, #28]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	f000 8164 	beq.w	800d890 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d5c8:	4b2c      	ldr	r3, [pc, #176]	; (800d67c <tcp_input+0x4d0>)
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	891a      	ldrh	r2, [r3, #8]
 800d5d2:	4b2a      	ldr	r3, [pc, #168]	; (800d67c <tcp_input+0x4d0>)
 800d5d4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d5d6:	4a29      	ldr	r2, [pc, #164]	; (800d67c <tcp_input+0x4d0>)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d5dc:	4b1f      	ldr	r3, [pc, #124]	; (800d65c <tcp_input+0x4b0>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4a26      	ldr	r2, [pc, #152]	; (800d67c <tcp_input+0x4d0>)
 800d5e2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d5e4:	4b26      	ldr	r3, [pc, #152]	; (800d680 <tcp_input+0x4d4>)
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d5ea:	4b26      	ldr	r3, [pc, #152]	; (800d684 <tcp_input+0x4d8>)
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d5f0:	4b25      	ldr	r3, [pc, #148]	; (800d688 <tcp_input+0x4dc>)
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d5f6:	4b25      	ldr	r3, [pc, #148]	; (800d68c <tcp_input+0x4e0>)
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	f003 0308 	and.w	r3, r3, #8
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d006      	beq.n	800d610 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	7b5b      	ldrb	r3, [r3, #13]
 800d606:	f043 0301 	orr.w	r3, r3, #1
 800d60a:	b2da      	uxtb	r2, r3
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d610:	69fb      	ldr	r3, [r7, #28]
 800d612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d614:	2b00      	cmp	r3, #0
 800d616:	d03d      	beq.n	800d694 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d618:	69f8      	ldr	r0, [r7, #28]
 800d61a:	f7ff fa5b 	bl	800cad4 <tcp_process_refused_data>
 800d61e:	4603      	mov	r3, r0
 800d620:	f113 0f0d 	cmn.w	r3, #13
 800d624:	d007      	beq.n	800d636 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d626:	69fb      	ldr	r3, [r7, #28]
 800d628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d032      	beq.n	800d694 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d62e:	4b18      	ldr	r3, [pc, #96]	; (800d690 <tcp_input+0x4e4>)
 800d630:	881b      	ldrh	r3, [r3, #0]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d02e      	beq.n	800d694 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d636:	69fb      	ldr	r3, [r7, #28]
 800d638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	f040 8108 	bne.w	800d850 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d640:	69f8      	ldr	r0, [r7, #28]
 800d642:	f002 fa09 	bl	800fa58 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d646:	e103      	b.n	800d850 <tcp_input+0x6a4>
 800d648:	08015b98 	.word	0x08015b98
 800d64c:	08015c30 	.word	0x08015c30
 800d650:	08015bdc 	.word	0x08015bdc
 800d654:	08015c58 	.word	0x08015c58
 800d658:	08015c84 	.word	0x08015c84
 800d65c:	20000510 	.word	0x20000510
 800d660:	2000376c 	.word	0x2000376c
 800d664:	08015cac 	.word	0x08015cac
 800d668:	20006c9c 	.word	0x20006c9c
 800d66c:	08015cd8 	.word	0x08015cd8
 800d670:	20006cac 	.word	0x20006cac
 800d674:	08015d04 	.word	0x08015d04
 800d678:	20006ca4 	.word	0x20006ca4
 800d67c:	20000500 	.word	0x20000500
 800d680:	20000530 	.word	0x20000530
 800d684:	2000052d 	.word	0x2000052d
 800d688:	20000528 	.word	0x20000528
 800d68c:	2000052c 	.word	0x2000052c
 800d690:	2000052a 	.word	0x2000052a
      }
    }
    tcp_input_pcb = pcb;
 800d694:	4a99      	ldr	r2, [pc, #612]	; (800d8fc <tcp_input+0x750>)
 800d696:	69fb      	ldr	r3, [r7, #28]
 800d698:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d69a:	69f8      	ldr	r0, [r7, #28]
 800d69c:	f000 fac6 	bl	800dc2c <tcp_process>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d6a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d6a8:	f113 0f0d 	cmn.w	r3, #13
 800d6ac:	f000 80d2 	beq.w	800d854 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 800d6b0:	4b93      	ldr	r3, [pc, #588]	; (800d900 <tcp_input+0x754>)
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	f003 0308 	and.w	r3, r3, #8
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d016      	beq.n	800d6ea <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d6bc:	69fb      	ldr	r3, [r7, #28]
 800d6be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d008      	beq.n	800d6d8 <tcp_input+0x52c>
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6cc:	69fa      	ldr	r2, [r7, #28]
 800d6ce:	6912      	ldr	r2, [r2, #16]
 800d6d0:	f06f 010d 	mvn.w	r1, #13
 800d6d4:	4610      	mov	r0, r2
 800d6d6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d6d8:	69f9      	ldr	r1, [r7, #28]
 800d6da:	488a      	ldr	r0, [pc, #552]	; (800d904 <tcp_input+0x758>)
 800d6dc:	f7ff fc4e 	bl	800cf7c <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800d6e0:	69f9      	ldr	r1, [r7, #28]
 800d6e2:	2001      	movs	r0, #1
 800d6e4:	f7fd fb4c 	bl	800ad80 <memp_free>
 800d6e8:	e0bf      	b.n	800d86a <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d6ee:	4b86      	ldr	r3, [pc, #536]	; (800d908 <tcp_input+0x75c>)
 800d6f0:	881b      	ldrh	r3, [r3, #0]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d01b      	beq.n	800d72e <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d6f6:	4b84      	ldr	r3, [pc, #528]	; (800d908 <tcp_input+0x75c>)
 800d6f8:	881b      	ldrh	r3, [r3, #0]
 800d6fa:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d6fc:	69fb      	ldr	r3, [r7, #28]
 800d6fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d700:	2b00      	cmp	r3, #0
 800d702:	d009      	beq.n	800d718 <tcp_input+0x56c>
 800d704:	69fb      	ldr	r3, [r7, #28]
 800d706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d708:	69fa      	ldr	r2, [r7, #28]
 800d70a:	6910      	ldr	r0, [r2, #16]
 800d70c:	89fa      	ldrh	r2, [r7, #14]
 800d70e:	69f9      	ldr	r1, [r7, #28]
 800d710:	4798      	blx	r3
 800d712:	4603      	mov	r3, r0
 800d714:	74fb      	strb	r3, [r7, #19]
 800d716:	e001      	b.n	800d71c <tcp_input+0x570>
 800d718:	2300      	movs	r3, #0
 800d71a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d71c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d720:	f113 0f0d 	cmn.w	r3, #13
 800d724:	f000 8098 	beq.w	800d858 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d728:	4b77      	ldr	r3, [pc, #476]	; (800d908 <tcp_input+0x75c>)
 800d72a:	2200      	movs	r2, #0
 800d72c:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d72e:	69f8      	ldr	r0, [r7, #28]
 800d730:	f000 f902 	bl	800d938 <tcp_input_delayed_close>
 800d734:	4603      	mov	r3, r0
 800d736:	2b00      	cmp	r3, #0
 800d738:	f040 8090 	bne.w	800d85c <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d73c:	4b73      	ldr	r3, [pc, #460]	; (800d90c <tcp_input+0x760>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d041      	beq.n	800d7c8 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d744:	69fb      	ldr	r3, [r7, #28]
 800d746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d006      	beq.n	800d75a <tcp_input+0x5ae>
 800d74c:	4b70      	ldr	r3, [pc, #448]	; (800d910 <tcp_input+0x764>)
 800d74e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800d752:	4970      	ldr	r1, [pc, #448]	; (800d914 <tcp_input+0x768>)
 800d754:	4870      	ldr	r0, [pc, #448]	; (800d918 <tcp_input+0x76c>)
 800d756:	f006 f8fb 	bl	8013950 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d75a:	69fb      	ldr	r3, [r7, #28]
 800d75c:	7e9b      	ldrb	r3, [r3, #26]
 800d75e:	f003 0310 	and.w	r3, r3, #16
 800d762:	2b00      	cmp	r3, #0
 800d764:	d008      	beq.n	800d778 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d766:	4b69      	ldr	r3, [pc, #420]	; (800d90c <tcp_input+0x760>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	4618      	mov	r0, r3
 800d76c:	f7fe f840 	bl	800b7f0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d770:	69f8      	ldr	r0, [r7, #28]
 800d772:	f7fe fdd5 	bl	800c320 <tcp_abort>
            goto aborted;
 800d776:	e078      	b.n	800d86a <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d778:	69fb      	ldr	r3, [r7, #28]
 800d77a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d00c      	beq.n	800d79c <tcp_input+0x5f0>
 800d782:	69fb      	ldr	r3, [r7, #28]
 800d784:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800d788:	69fb      	ldr	r3, [r7, #28]
 800d78a:	6918      	ldr	r0, [r3, #16]
 800d78c:	4b5f      	ldr	r3, [pc, #380]	; (800d90c <tcp_input+0x760>)
 800d78e:	681a      	ldr	r2, [r3, #0]
 800d790:	2300      	movs	r3, #0
 800d792:	69f9      	ldr	r1, [r7, #28]
 800d794:	47a0      	blx	r4
 800d796:	4603      	mov	r3, r0
 800d798:	74fb      	strb	r3, [r7, #19]
 800d79a:	e008      	b.n	800d7ae <tcp_input+0x602>
 800d79c:	4b5b      	ldr	r3, [pc, #364]	; (800d90c <tcp_input+0x760>)
 800d79e:	681a      	ldr	r2, [r3, #0]
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	69f9      	ldr	r1, [r7, #28]
 800d7a4:	2000      	movs	r0, #0
 800d7a6:	f7ff fa47 	bl	800cc38 <tcp_recv_null>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d7ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d7b2:	f113 0f0d 	cmn.w	r3, #13
 800d7b6:	d053      	beq.n	800d860 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d7b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d003      	beq.n	800d7c8 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d7c0:	4b52      	ldr	r3, [pc, #328]	; (800d90c <tcp_input+0x760>)
 800d7c2:	681a      	ldr	r2, [r3, #0]
 800d7c4:	69fb      	ldr	r3, [r7, #28]
 800d7c6:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d7c8:	4b4d      	ldr	r3, [pc, #308]	; (800d900 <tcp_input+0x754>)
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	f003 0320 	and.w	r3, r3, #32
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d030      	beq.n	800d836 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800d7d4:	69fb      	ldr	r3, [r7, #28]
 800d7d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d009      	beq.n	800d7f0 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d7dc:	69fb      	ldr	r3, [r7, #28]
 800d7de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7e0:	7b5a      	ldrb	r2, [r3, #13]
 800d7e2:	69fb      	ldr	r3, [r7, #28]
 800d7e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7e6:	f042 0220 	orr.w	r2, r2, #32
 800d7ea:	b2d2      	uxtb	r2, r2
 800d7ec:	735a      	strb	r2, [r3, #13]
 800d7ee:	e022      	b.n	800d836 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d7f4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d7f8:	d005      	beq.n	800d806 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800d7fa:	69fb      	ldr	r3, [r7, #28]
 800d7fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d7fe:	3301      	adds	r3, #1
 800d800:	b29a      	uxth	r2, r3
 800d802:	69fb      	ldr	r3, [r7, #28]
 800d804:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d806:	69fb      	ldr	r3, [r7, #28]
 800d808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d00b      	beq.n	800d828 <tcp_input+0x67c>
 800d810:	69fb      	ldr	r3, [r7, #28]
 800d812:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800d816:	69fb      	ldr	r3, [r7, #28]
 800d818:	6918      	ldr	r0, [r3, #16]
 800d81a:	2300      	movs	r3, #0
 800d81c:	2200      	movs	r2, #0
 800d81e:	69f9      	ldr	r1, [r7, #28]
 800d820:	47a0      	blx	r4
 800d822:	4603      	mov	r3, r0
 800d824:	74fb      	strb	r3, [r7, #19]
 800d826:	e001      	b.n	800d82c <tcp_input+0x680>
 800d828:	2300      	movs	r3, #0
 800d82a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d82c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d830:	f113 0f0d 	cmn.w	r3, #13
 800d834:	d016      	beq.n	800d864 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d836:	4b31      	ldr	r3, [pc, #196]	; (800d8fc <tcp_input+0x750>)
 800d838:	2200      	movs	r2, #0
 800d83a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d83c:	69f8      	ldr	r0, [r7, #28]
 800d83e:	f000 f87b 	bl	800d938 <tcp_input_delayed_close>
 800d842:	4603      	mov	r3, r0
 800d844:	2b00      	cmp	r3, #0
 800d846:	d10f      	bne.n	800d868 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d848:	69f8      	ldr	r0, [r7, #28]
 800d84a:	f002 f961 	bl	800fb10 <tcp_output>
 800d84e:	e00c      	b.n	800d86a <tcp_input+0x6be>
        goto aborted;
 800d850:	bf00      	nop
 800d852:	e00a      	b.n	800d86a <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d854:	bf00      	nop
 800d856:	e008      	b.n	800d86a <tcp_input+0x6be>
              goto aborted;
 800d858:	bf00      	nop
 800d85a:	e006      	b.n	800d86a <tcp_input+0x6be>
          goto aborted;
 800d85c:	bf00      	nop
 800d85e:	e004      	b.n	800d86a <tcp_input+0x6be>
            goto aborted;
 800d860:	bf00      	nop
 800d862:	e002      	b.n	800d86a <tcp_input+0x6be>
              goto aborted;
 800d864:	bf00      	nop
 800d866:	e000      	b.n	800d86a <tcp_input+0x6be>
          goto aborted;
 800d868:	bf00      	nop
    tcp_input_pcb = NULL;
 800d86a:	4b24      	ldr	r3, [pc, #144]	; (800d8fc <tcp_input+0x750>)
 800d86c:	2200      	movs	r2, #0
 800d86e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d870:	4b26      	ldr	r3, [pc, #152]	; (800d90c <tcp_input+0x760>)
 800d872:	2200      	movs	r2, #0
 800d874:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800d876:	4b29      	ldr	r3, [pc, #164]	; (800d91c <tcp_input+0x770>)
 800d878:	685b      	ldr	r3, [r3, #4]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d039      	beq.n	800d8f2 <tcp_input+0x746>
    {
      pbuf_free(inseg.p);
 800d87e:	4b27      	ldr	r3, [pc, #156]	; (800d91c <tcp_input+0x770>)
 800d880:	685b      	ldr	r3, [r3, #4]
 800d882:	4618      	mov	r0, r3
 800d884:	f7fd ffb4 	bl	800b7f0 <pbuf_free>
      inseg.p = NULL;
 800d888:	4b24      	ldr	r3, [pc, #144]	; (800d91c <tcp_input+0x770>)
 800d88a:	2200      	movs	r2, #0
 800d88c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d88e:	e030      	b.n	800d8f2 <tcp_input+0x746>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d890:	4b23      	ldr	r3, [pc, #140]	; (800d920 <tcp_input+0x774>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	899b      	ldrh	r3, [r3, #12]
 800d896:	b29b      	uxth	r3, r3
 800d898:	4618      	mov	r0, r3
 800d89a:	f7fc fe7c 	bl	800a596 <lwip_htons>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	f003 0304 	and.w	r3, r3, #4
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d115      	bne.n	800d8d4 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d8a8:	4b1e      	ldr	r3, [pc, #120]	; (800d924 <tcp_input+0x778>)
 800d8aa:	6818      	ldr	r0, [r3, #0]
 800d8ac:	4b1e      	ldr	r3, [pc, #120]	; (800d928 <tcp_input+0x77c>)
 800d8ae:	881b      	ldrh	r3, [r3, #0]
 800d8b0:	461a      	mov	r2, r3
 800d8b2:	4b1e      	ldr	r3, [pc, #120]	; (800d92c <tcp_input+0x780>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d8b8:	4b19      	ldr	r3, [pc, #100]	; (800d920 <tcp_input+0x774>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d8bc:	885b      	ldrh	r3, [r3, #2]
 800d8be:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d8c0:	4a17      	ldr	r2, [pc, #92]	; (800d920 <tcp_input+0x774>)
 800d8c2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d8c4:	8812      	ldrh	r2, [r2, #0]
 800d8c6:	b292      	uxth	r2, r2
 800d8c8:	9201      	str	r2, [sp, #4]
 800d8ca:	9300      	str	r3, [sp, #0]
 800d8cc:	4b18      	ldr	r3, [pc, #96]	; (800d930 <tcp_input+0x784>)
 800d8ce:	4a19      	ldr	r2, [pc, #100]	; (800d934 <tcp_input+0x788>)
 800d8d0:	f002 fba2 	bl	8010018 <tcp_rst>
    pbuf_free(p);
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f7fd ff8b 	bl	800b7f0 <pbuf_free>
  return;
 800d8da:	e00a      	b.n	800d8f2 <tcp_input+0x746>
    goto dropped;
 800d8dc:	bf00      	nop
 800d8de:	e004      	b.n	800d8ea <tcp_input+0x73e>
    goto dropped;
 800d8e0:	bf00      	nop
 800d8e2:	e002      	b.n	800d8ea <tcp_input+0x73e>
    goto dropped;
 800d8e4:	bf00      	nop
 800d8e6:	e000      	b.n	800d8ea <tcp_input+0x73e>
      goto dropped;
 800d8e8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f7fd ff80 	bl	800b7f0 <pbuf_free>
 800d8f0:	e000      	b.n	800d8f4 <tcp_input+0x748>
  return;
 800d8f2:	bf00      	nop
}
 800d8f4:	3724      	adds	r7, #36	; 0x24
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd90      	pop	{r4, r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	20006cb0 	.word	0x20006cb0
 800d900:	2000052d 	.word	0x2000052d
 800d904:	20006c9c 	.word	0x20006c9c
 800d908:	20000528 	.word	0x20000528
 800d90c:	20000530 	.word	0x20000530
 800d910:	08015b98 	.word	0x08015b98
 800d914:	08015d34 	.word	0x08015d34
 800d918:	08015bdc 	.word	0x08015bdc
 800d91c:	20000500 	.word	0x20000500
 800d920:	20000510 	.word	0x20000510
 800d924:	20000524 	.word	0x20000524
 800d928:	2000052a 	.word	0x2000052a
 800d92c:	20000520 	.word	0x20000520
 800d930:	2000377c 	.word	0x2000377c
 800d934:	20003780 	.word	0x20003780

0800d938 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b082      	sub	sp, #8
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800d940:	4b14      	ldr	r3, [pc, #80]	; (800d994 <tcp_input_delayed_close+0x5c>)
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	f003 0310 	and.w	r3, r3, #16
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d01d      	beq.n	800d988 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	7e9b      	ldrb	r3, [r3, #26]
 800d950:	f003 0310 	and.w	r3, r3, #16
 800d954:	2b00      	cmp	r3, #0
 800d956:	d10d      	bne.n	800d974 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d008      	beq.n	800d974 <tcp_input_delayed_close+0x3c>
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	6912      	ldr	r2, [r2, #16]
 800d96c:	f06f 010e 	mvn.w	r1, #14
 800d970:	4610      	mov	r0, r2
 800d972:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d974:	6879      	ldr	r1, [r7, #4]
 800d976:	4808      	ldr	r0, [pc, #32]	; (800d998 <tcp_input_delayed_close+0x60>)
 800d978:	f7ff fb00 	bl	800cf7c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800d97c:	6879      	ldr	r1, [r7, #4]
 800d97e:	2001      	movs	r0, #1
 800d980:	f7fd f9fe 	bl	800ad80 <memp_free>
    return 1;
 800d984:	2301      	movs	r3, #1
 800d986:	e000      	b.n	800d98a <tcp_input_delayed_close+0x52>
  }
  return 0;
 800d988:	2300      	movs	r3, #0
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3708      	adds	r7, #8
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
 800d992:	bf00      	nop
 800d994:	2000052d 	.word	0x2000052d
 800d998:	20006c9c 	.word	0x20006c9c

0800d99c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b088      	sub	sp, #32
 800d9a0:	af02      	add	r7, sp, #8
 800d9a2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d9a4:	4b63      	ldr	r3, [pc, #396]	; (800db34 <tcp_listen_input+0x198>)
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	f003 0304 	and.w	r3, r3, #4
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	f040 80bb 	bne.w	800db28 <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d9b2:	4b60      	ldr	r3, [pc, #384]	; (800db34 <tcp_listen_input+0x198>)
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	f003 0310 	and.w	r3, r3, #16
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d016      	beq.n	800d9ec <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d9be:	4b5e      	ldr	r3, [pc, #376]	; (800db38 <tcp_listen_input+0x19c>)
 800d9c0:	6818      	ldr	r0, [r3, #0]
 800d9c2:	4b5e      	ldr	r3, [pc, #376]	; (800db3c <tcp_listen_input+0x1a0>)
 800d9c4:	881b      	ldrh	r3, [r3, #0]
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	4b5d      	ldr	r3, [pc, #372]	; (800db40 <tcp_listen_input+0x1a4>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d9ce:	4b5d      	ldr	r3, [pc, #372]	; (800db44 <tcp_listen_input+0x1a8>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d9d2:	885b      	ldrh	r3, [r3, #2]
 800d9d4:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d9d6:	4a5b      	ldr	r2, [pc, #364]	; (800db44 <tcp_listen_input+0x1a8>)
 800d9d8:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d9da:	8812      	ldrh	r2, [r2, #0]
 800d9dc:	b292      	uxth	r2, r2
 800d9de:	9201      	str	r2, [sp, #4]
 800d9e0:	9300      	str	r3, [sp, #0]
 800d9e2:	4b59      	ldr	r3, [pc, #356]	; (800db48 <tcp_listen_input+0x1ac>)
 800d9e4:	4a59      	ldr	r2, [pc, #356]	; (800db4c <tcp_listen_input+0x1b0>)
 800d9e6:	f002 fb17 	bl	8010018 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d9ea:	e09f      	b.n	800db2c <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 800d9ec:	4b51      	ldr	r3, [pc, #324]	; (800db34 <tcp_listen_input+0x198>)
 800d9ee:	781b      	ldrb	r3, [r3, #0]
 800d9f0:	f003 0302 	and.w	r3, r3, #2
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	f000 8099 	beq.w	800db2c <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	7d5b      	ldrb	r3, [r3, #21]
 800d9fe:	4618      	mov	r0, r3
 800da00:	f7ff f9f8 	bl	800cdf4 <tcp_alloc>
 800da04:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d111      	bne.n	800da30 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	699b      	ldr	r3, [r3, #24]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d00a      	beq.n	800da2a <tcp_listen_input+0x8e>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	699b      	ldr	r3, [r3, #24]
 800da18:	687a      	ldr	r2, [r7, #4]
 800da1a:	6910      	ldr	r0, [r2, #16]
 800da1c:	f04f 32ff 	mov.w	r2, #4294967295
 800da20:	2100      	movs	r1, #0
 800da22:	4798      	blx	r3
 800da24:	4603      	mov	r3, r0
 800da26:	73bb      	strb	r3, [r7, #14]
      return;
 800da28:	e081      	b.n	800db2e <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800da2a:	23f0      	movs	r3, #240	; 0xf0
 800da2c:	73bb      	strb	r3, [r7, #14]
      return;
 800da2e:	e07e      	b.n	800db2e <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800da30:	4b47      	ldr	r3, [pc, #284]	; (800db50 <tcp_listen_input+0x1b4>)
 800da32:	695a      	ldr	r2, [r3, #20]
 800da34:	697b      	ldr	r3, [r7, #20]
 800da36:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800da38:	4b45      	ldr	r3, [pc, #276]	; (800db50 <tcp_listen_input+0x1b4>)
 800da3a:	691a      	ldr	r2, [r3, #16]
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	8ada      	ldrh	r2, [r3, #22]
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800da48:	4b3e      	ldr	r3, [pc, #248]	; (800db44 <tcp_listen_input+0x1a8>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	881b      	ldrh	r3, [r3, #0]
 800da4e:	b29a      	uxth	r2, r3
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	2203      	movs	r2, #3
 800da58:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800da5a:	4b39      	ldr	r3, [pc, #228]	; (800db40 <tcp_listen_input+0x1a4>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	1c5a      	adds	r2, r3, #1
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800da6c:	6978      	ldr	r0, [r7, #20]
 800da6e:	f7ff fb01 	bl	800d074 <tcp_next_iss>
 800da72:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	693a      	ldr	r2, [r7, #16]
 800da78:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	693a      	ldr	r2, [r7, #16]
 800da7e:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	693a      	ldr	r2, [r7, #16]
 800da84:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	693a      	ldr	r2, [r7, #16]
 800da8a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800da8c:	4b2c      	ldr	r3, [pc, #176]	; (800db40 <tcp_listen_input+0x1a4>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	1e5a      	subs	r2, r3, #1
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	691a      	ldr	r2, [r3, #16]
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	7a1b      	ldrb	r3, [r3, #8]
 800daa8:	f003 030c 	and.w	r3, r3, #12
 800daac:	b2da      	uxtb	r2, r3
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800dab2:	4b28      	ldr	r3, [pc, #160]	; (800db54 <tcp_listen_input+0x1b8>)
 800dab4:	681a      	ldr	r2, [r3, #0]
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	60da      	str	r2, [r3, #12]
 800daba:	4a26      	ldr	r2, [pc, #152]	; (800db54 <tcp_listen_input+0x1b8>)
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	6013      	str	r3, [r2, #0]
 800dac0:	f002 fcf2 	bl	80104a8 <tcp_timer_needed>
 800dac4:	4b24      	ldr	r3, [pc, #144]	; (800db58 <tcp_listen_input+0x1bc>)
 800dac6:	2201      	movs	r2, #1
 800dac8:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800daca:	6978      	ldr	r0, [r7, #20]
 800dacc:	f001 fd10 	bl	800f4f0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800dad0:	4b1c      	ldr	r3, [pc, #112]	; (800db44 <tcp_listen_input+0x1a8>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	89db      	ldrh	r3, [r3, #14]
 800dad6:	b29a      	uxth	r2, r3
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	3304      	adds	r3, #4
 800daf2:	4619      	mov	r1, r3
 800daf4:	4610      	mov	r0, r2
 800daf6:	f7ff fad3 	bl	800d0a0 <tcp_eff_send_mss_impl>
 800dafa:	4603      	mov	r3, r0
 800dafc:	461a      	mov	r2, r3
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800db02:	2112      	movs	r1, #18
 800db04:	6978      	ldr	r0, [r7, #20]
 800db06:	f001 feab 	bl	800f860 <tcp_enqueue_flags>
 800db0a:	4603      	mov	r3, r0
 800db0c:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800db0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d004      	beq.n	800db20 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800db16:	2100      	movs	r1, #0
 800db18:	6978      	ldr	r0, [r7, #20]
 800db1a:	f7fe fb4f 	bl	800c1bc <tcp_abandon>
      return;
 800db1e:	e006      	b.n	800db2e <tcp_listen_input+0x192>
    tcp_output(npcb);
 800db20:	6978      	ldr	r0, [r7, #20]
 800db22:	f001 fff5 	bl	800fb10 <tcp_output>
  return;
 800db26:	e001      	b.n	800db2c <tcp_listen_input+0x190>
    return;
 800db28:	bf00      	nop
 800db2a:	e000      	b.n	800db2e <tcp_listen_input+0x192>
  return;
 800db2c:	bf00      	nop
}
 800db2e:	3718      	adds	r7, #24
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}
 800db34:	2000052c 	.word	0x2000052c
 800db38:	20000524 	.word	0x20000524
 800db3c:	2000052a 	.word	0x2000052a
 800db40:	20000520 	.word	0x20000520
 800db44:	20000510 	.word	0x20000510
 800db48:	2000377c 	.word	0x2000377c
 800db4c:	20003780 	.word	0x20003780
 800db50:	2000376c 	.word	0x2000376c
 800db54:	20006c9c 	.word	0x20006c9c
 800db58:	20006c98 	.word	0x20006c98

0800db5c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b084      	sub	sp, #16
 800db60:	af02      	add	r7, sp, #8
 800db62:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800db64:	4b29      	ldr	r3, [pc, #164]	; (800dc0c <tcp_timewait_input+0xb0>)
 800db66:	781b      	ldrb	r3, [r3, #0]
 800db68:	f003 0304 	and.w	r3, r3, #4
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d146      	bne.n	800dbfe <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800db70:	4b26      	ldr	r3, [pc, #152]	; (800dc0c <tcp_timewait_input+0xb0>)
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	f003 0302 	and.w	r3, r3, #2
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d027      	beq.n	800dbcc <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800db7c:	4b24      	ldr	r3, [pc, #144]	; (800dc10 <tcp_timewait_input+0xb4>)
 800db7e:	681a      	ldr	r2, [r3, #0]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db84:	1ad3      	subs	r3, r2, r3
 800db86:	2b00      	cmp	r3, #0
 800db88:	db2a      	blt.n	800dbe0 <tcp_timewait_input+0x84>
 800db8a:	4b21      	ldr	r3, [pc, #132]	; (800dc10 <tcp_timewait_input+0xb4>)
 800db8c:	681a      	ldr	r2, [r3, #0]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db92:	6879      	ldr	r1, [r7, #4]
 800db94:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800db96:	440b      	add	r3, r1
 800db98:	1ad3      	subs	r3, r2, r3
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	dc20      	bgt.n	800dbe0 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800db9e:	4b1d      	ldr	r3, [pc, #116]	; (800dc14 <tcp_timewait_input+0xb8>)
 800dba0:	6818      	ldr	r0, [r3, #0]
 800dba2:	4b1d      	ldr	r3, [pc, #116]	; (800dc18 <tcp_timewait_input+0xbc>)
 800dba4:	881b      	ldrh	r3, [r3, #0]
 800dba6:	461a      	mov	r2, r3
 800dba8:	4b19      	ldr	r3, [pc, #100]	; (800dc10 <tcp_timewait_input+0xb4>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dbae:	4b1b      	ldr	r3, [pc, #108]	; (800dc1c <tcp_timewait_input+0xc0>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800dbb2:	885b      	ldrh	r3, [r3, #2]
 800dbb4:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dbb6:	4a19      	ldr	r2, [pc, #100]	; (800dc1c <tcp_timewait_input+0xc0>)
 800dbb8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800dbba:	8812      	ldrh	r2, [r2, #0]
 800dbbc:	b292      	uxth	r2, r2
 800dbbe:	9201      	str	r2, [sp, #4]
 800dbc0:	9300      	str	r3, [sp, #0]
 800dbc2:	4b17      	ldr	r3, [pc, #92]	; (800dc20 <tcp_timewait_input+0xc4>)
 800dbc4:	4a17      	ldr	r2, [pc, #92]	; (800dc24 <tcp_timewait_input+0xc8>)
 800dbc6:	f002 fa27 	bl	8010018 <tcp_rst>
      return;
 800dbca:	e01b      	b.n	800dc04 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 800dbcc:	4b0f      	ldr	r3, [pc, #60]	; (800dc0c <tcp_timewait_input+0xb0>)
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	f003 0301 	and.w	r3, r3, #1
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d003      	beq.n	800dbe0 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800dbd8:	4b13      	ldr	r3, [pc, #76]	; (800dc28 <tcp_timewait_input+0xcc>)
 800dbda:	681a      	ldr	r2, [r3, #0]
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800dbe0:	4b0d      	ldr	r3, [pc, #52]	; (800dc18 <tcp_timewait_input+0xbc>)
 800dbe2:	881b      	ldrh	r3, [r3, #0]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d00c      	beq.n	800dc02 <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	7e9b      	ldrb	r3, [r3, #26]
 800dbec:	f043 0302 	orr.w	r3, r3, #2
 800dbf0:	b2da      	uxtb	r2, r3
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f001 ff8a 	bl	800fb10 <tcp_output>
  }
  return;
 800dbfc:	e001      	b.n	800dc02 <tcp_timewait_input+0xa6>
    return;
 800dbfe:	bf00      	nop
 800dc00:	e000      	b.n	800dc04 <tcp_timewait_input+0xa8>
  return;
 800dc02:	bf00      	nop
}
 800dc04:	3708      	adds	r7, #8
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	bf00      	nop
 800dc0c:	2000052c 	.word	0x2000052c
 800dc10:	20000520 	.word	0x20000520
 800dc14:	20000524 	.word	0x20000524
 800dc18:	2000052a 	.word	0x2000052a
 800dc1c:	20000510 	.word	0x20000510
 800dc20:	2000377c 	.word	0x2000377c
 800dc24:	20003780 	.word	0x20003780
 800dc28:	20006ca0 	.word	0x20006ca0

0800dc2c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b08a      	sub	sp, #40	; 0x28
 800dc30:	af02      	add	r7, sp, #8
 800dc32:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800dc34:	2300      	movs	r3, #0
 800dc36:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800dc3c:	4ba4      	ldr	r3, [pc, #656]	; (800ded0 <tcp_process+0x2a4>)
 800dc3e:	781b      	ldrb	r3, [r3, #0]
 800dc40:	f003 0304 	and.w	r3, r3, #4
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d04e      	beq.n	800dce6 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	7d1b      	ldrb	r3, [r3, #20]
 800dc4c:	2b02      	cmp	r3, #2
 800dc4e:	d108      	bne.n	800dc62 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc54:	4b9f      	ldr	r3, [pc, #636]	; (800ded4 <tcp_process+0x2a8>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d123      	bne.n	800dca4 <tcp_process+0x78>
        acceptable = 1;
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	76fb      	strb	r3, [r7, #27]
 800dc60:	e020      	b.n	800dca4 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc66:	4b9c      	ldr	r3, [pc, #624]	; (800ded8 <tcp_process+0x2ac>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d102      	bne.n	800dc74 <tcp_process+0x48>
        acceptable = 1;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	76fb      	strb	r3, [r7, #27]
 800dc72:	e017      	b.n	800dca4 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dc74:	4b98      	ldr	r3, [pc, #608]	; (800ded8 <tcp_process+0x2ac>)
 800dc76:	681a      	ldr	r2, [r3, #0]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc7c:	1ad3      	subs	r3, r2, r3
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	db10      	blt.n	800dca4 <tcp_process+0x78>
 800dc82:	4b95      	ldr	r3, [pc, #596]	; (800ded8 <tcp_process+0x2ac>)
 800dc84:	681a      	ldr	r2, [r3, #0]
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc8a:	6879      	ldr	r1, [r7, #4]
 800dc8c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dc8e:	440b      	add	r3, r1
 800dc90:	1ad3      	subs	r3, r2, r3
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	dc06      	bgt.n	800dca4 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	7e9b      	ldrb	r3, [r3, #26]
 800dc9a:	f043 0302 	orr.w	r3, r3, #2
 800dc9e:	b2da      	uxtb	r2, r3
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800dca4:	7efb      	ldrb	r3, [r7, #27]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d01b      	beq.n	800dce2 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	7d1b      	ldrb	r3, [r3, #20]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d106      	bne.n	800dcc0 <tcp_process+0x94>
 800dcb2:	4b8a      	ldr	r3, [pc, #552]	; (800dedc <tcp_process+0x2b0>)
 800dcb4:	f240 22e7 	movw	r2, #743	; 0x2e7
 800dcb8:	4989      	ldr	r1, [pc, #548]	; (800dee0 <tcp_process+0x2b4>)
 800dcba:	488a      	ldr	r0, [pc, #552]	; (800dee4 <tcp_process+0x2b8>)
 800dcbc:	f005 fe48 	bl	8013950 <iprintf>
      recv_flags |= TF_RESET;
 800dcc0:	4b89      	ldr	r3, [pc, #548]	; (800dee8 <tcp_process+0x2bc>)
 800dcc2:	781b      	ldrb	r3, [r3, #0]
 800dcc4:	f043 0308 	orr.w	r3, r3, #8
 800dcc8:	b2da      	uxtb	r2, r3
 800dcca:	4b87      	ldr	r3, [pc, #540]	; (800dee8 <tcp_process+0x2bc>)
 800dccc:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	7e9b      	ldrb	r3, [r3, #26]
 800dcd2:	f023 0301 	bic.w	r3, r3, #1
 800dcd6:	b2da      	uxtb	r2, r3
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800dcdc:	f06f 030d 	mvn.w	r3, #13
 800dce0:	e34d      	b.n	800e37e <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800dce2:	2300      	movs	r3, #0
 800dce4:	e34b      	b.n	800e37e <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800dce6:	4b7a      	ldr	r3, [pc, #488]	; (800ded0 <tcp_process+0x2a4>)
 800dce8:	781b      	ldrb	r3, [r3, #0]
 800dcea:	f003 0302 	and.w	r3, r3, #2
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d010      	beq.n	800dd14 <tcp_process+0xe8>
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	7d1b      	ldrb	r3, [r3, #20]
 800dcf6:	2b02      	cmp	r3, #2
 800dcf8:	d00c      	beq.n	800dd14 <tcp_process+0xe8>
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	7d1b      	ldrb	r3, [r3, #20]
 800dcfe:	2b03      	cmp	r3, #3
 800dd00:	d008      	beq.n	800dd14 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	7e9b      	ldrb	r3, [r3, #26]
 800dd06:	f043 0302 	orr.w	r3, r3, #2
 800dd0a:	b2da      	uxtb	r2, r3
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800dd10:	2300      	movs	r3, #0
 800dd12:	e334      	b.n	800e37e <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	7e9b      	ldrb	r3, [r3, #26]
 800dd18:	f003 0310 	and.w	r3, r3, #16
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d103      	bne.n	800dd28 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800dd20:	4b72      	ldr	r3, [pc, #456]	; (800deec <tcp_process+0x2c0>)
 800dd22:	681a      	ldr	r2, [r3, #0]
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f001 fbdd 	bl	800f4f0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	7d1b      	ldrb	r3, [r3, #20]
 800dd3a:	3b02      	subs	r3, #2
 800dd3c:	2b07      	cmp	r3, #7
 800dd3e:	f200 830e 	bhi.w	800e35e <tcp_process+0x732>
 800dd42:	a201      	add	r2, pc, #4	; (adr r2, 800dd48 <tcp_process+0x11c>)
 800dd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd48:	0800dd69 	.word	0x0800dd69
 800dd4c:	0800df61 	.word	0x0800df61
 800dd50:	0800e0b9 	.word	0x0800e0b9
 800dd54:	0800e0e3 	.word	0x0800e0e3
 800dd58:	0800e20d 	.word	0x0800e20d
 800dd5c:	0800e0b9 	.word	0x0800e0b9
 800dd60:	0800e299 	.word	0x0800e299
 800dd64:	0800e329 	.word	0x0800e329
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800dd68:	4b59      	ldr	r3, [pc, #356]	; (800ded0 <tcp_process+0x2a4>)
 800dd6a:	781b      	ldrb	r3, [r3, #0]
 800dd6c:	f003 0310 	and.w	r3, r3, #16
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	f000 80cb 	beq.w	800df0c <tcp_process+0x2e0>
 800dd76:	4b56      	ldr	r3, [pc, #344]	; (800ded0 <tcp_process+0x2a4>)
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	f003 0302 	and.w	r3, r3, #2
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	f000 80c4 	beq.w	800df0c <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd88:	1c5a      	adds	r2, r3, #1
 800dd8a:	4b52      	ldr	r3, [pc, #328]	; (800ded4 <tcp_process+0x2a8>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	f040 80bc 	bne.w	800df0c <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800dd94:	4b50      	ldr	r3, [pc, #320]	; (800ded8 <tcp_process+0x2ac>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	1c5a      	adds	r2, r3, #1
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800dda6:	4b4b      	ldr	r3, [pc, #300]	; (800ded4 <tcp_process+0x2a8>)
 800dda8:	681a      	ldr	r2, [r3, #0]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800ddae:	4b50      	ldr	r3, [pc, #320]	; (800def0 <tcp_process+0x2c4>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	89db      	ldrh	r3, [r3, #14]
 800ddb4:	b29a      	uxth	r2, r3
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ddc8:	4b43      	ldr	r3, [pc, #268]	; (800ded8 <tcp_process+0x2ac>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	1e5a      	subs	r2, r3, #1
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2204      	movs	r2, #4
 800ddd6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	3304      	adds	r3, #4
 800dde0:	4619      	mov	r1, r3
 800dde2:	4610      	mov	r0, r2
 800dde4:	f7ff f95c 	bl	800d0a0 <tcp_eff_send_mss_impl>
 800dde8:	4603      	mov	r3, r0
 800ddea:	461a      	mov	r2, r3
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ddf4:	005b      	lsls	r3, r3, #1
 800ddf6:	f241 121c 	movw	r2, #4380	; 0x111c
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	bf38      	it	cc
 800ddfe:	461a      	movcc	r2, r3
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de04:	009b      	lsls	r3, r3, #2
 800de06:	4293      	cmp	r3, r2
 800de08:	bf28      	it	cs
 800de0a:	4613      	movcs	r3, r2
 800de0c:	b29a      	uxth	r2, r3
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d106      	bne.n	800de2c <tcp_process+0x200>
 800de1e:	4b2f      	ldr	r3, [pc, #188]	; (800dedc <tcp_process+0x2b0>)
 800de20:	f240 321a 	movw	r2, #794	; 0x31a
 800de24:	4933      	ldr	r1, [pc, #204]	; (800def4 <tcp_process+0x2c8>)
 800de26:	482f      	ldr	r0, [pc, #188]	; (800dee4 <tcp_process+0x2b8>)
 800de28:	f005 fd92 	bl	8013950 <iprintf>
      --pcb->snd_queuelen;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de32:	3b01      	subs	r3, #1
 800de34:	b29a      	uxth	r2, r3
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de40:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800de42:	69fb      	ldr	r3, [r7, #28]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d111      	bne.n	800de6c <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de4c:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800de4e:	69fb      	ldr	r3, [r7, #28]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d106      	bne.n	800de62 <tcp_process+0x236>
 800de54:	4b21      	ldr	r3, [pc, #132]	; (800dedc <tcp_process+0x2b0>)
 800de56:	f240 3222 	movw	r2, #802	; 0x322
 800de5a:	4927      	ldr	r1, [pc, #156]	; (800def8 <tcp_process+0x2cc>)
 800de5c:	4821      	ldr	r0, [pc, #132]	; (800dee4 <tcp_process+0x2b8>)
 800de5e:	f005 fd77 	bl	8013950 <iprintf>
        pcb->unsent = rseg->next;
 800de62:	69fb      	ldr	r3, [r7, #28]
 800de64:	681a      	ldr	r2, [r3, #0]
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	669a      	str	r2, [r3, #104]	; 0x68
 800de6a:	e003      	b.n	800de74 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800de74:	69f8      	ldr	r0, [r7, #28]
 800de76:	f7fe feab 	bl	800cbd0 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d104      	bne.n	800de8c <tcp_process+0x260>
        pcb->rtime = -1;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de88:	861a      	strh	r2, [r3, #48]	; 0x30
 800de8a:	e006      	b.n	800de9a <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2200      	movs	r2, #0
 800de90:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2200      	movs	r2, #0
 800de96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d00a      	beq.n	800deba <tcp_process+0x28e>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800deaa:	687a      	ldr	r2, [r7, #4]
 800deac:	6910      	ldr	r0, [r2, #16]
 800deae:	2200      	movs	r2, #0
 800deb0:	6879      	ldr	r1, [r7, #4]
 800deb2:	4798      	blx	r3
 800deb4:	4603      	mov	r3, r0
 800deb6:	76bb      	strb	r3, [r7, #26]
 800deb8:	e001      	b.n	800debe <tcp_process+0x292>
 800deba:	2300      	movs	r3, #0
 800debc:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800debe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800dec2:	f113 0f0d 	cmn.w	r3, #13
 800dec6:	d119      	bne.n	800defc <tcp_process+0x2d0>
        return ERR_ABRT;
 800dec8:	f06f 030c 	mvn.w	r3, #12
 800decc:	e257      	b.n	800e37e <tcp_process+0x752>
 800dece:	bf00      	nop
 800ded0:	2000052c 	.word	0x2000052c
 800ded4:	20000524 	.word	0x20000524
 800ded8:	20000520 	.word	0x20000520
 800dedc:	08015b98 	.word	0x08015b98
 800dee0:	08015d50 	.word	0x08015d50
 800dee4:	08015bdc 	.word	0x08015bdc
 800dee8:	2000052d 	.word	0x2000052d
 800deec:	20006ca0 	.word	0x20006ca0
 800def0:	20000510 	.word	0x20000510
 800def4:	08015d70 	.word	0x08015d70
 800def8:	08015d88 	.word	0x08015d88
      }
      tcp_ack_now(pcb);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	7e9b      	ldrb	r3, [r3, #26]
 800df00:	f043 0302 	orr.w	r3, r3, #2
 800df04:	b2da      	uxtb	r2, r3
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800df0a:	e22a      	b.n	800e362 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800df0c:	4b9f      	ldr	r3, [pc, #636]	; (800e18c <tcp_process+0x560>)
 800df0e:	781b      	ldrb	r3, [r3, #0]
 800df10:	f003 0310 	and.w	r3, r3, #16
 800df14:	2b00      	cmp	r3, #0
 800df16:	f000 8224 	beq.w	800e362 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800df1a:	4b9d      	ldr	r3, [pc, #628]	; (800e190 <tcp_process+0x564>)
 800df1c:	6818      	ldr	r0, [r3, #0]
 800df1e:	4b9d      	ldr	r3, [pc, #628]	; (800e194 <tcp_process+0x568>)
 800df20:	881b      	ldrh	r3, [r3, #0]
 800df22:	461a      	mov	r2, r3
 800df24:	4b9c      	ldr	r3, [pc, #624]	; (800e198 <tcp_process+0x56c>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df2a:	4b9c      	ldr	r3, [pc, #624]	; (800e19c <tcp_process+0x570>)
 800df2c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800df2e:	885b      	ldrh	r3, [r3, #2]
 800df30:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df32:	4a9a      	ldr	r2, [pc, #616]	; (800e19c <tcp_process+0x570>)
 800df34:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800df36:	8812      	ldrh	r2, [r2, #0]
 800df38:	b292      	uxth	r2, r2
 800df3a:	9201      	str	r2, [sp, #4]
 800df3c:	9300      	str	r3, [sp, #0]
 800df3e:	4b98      	ldr	r3, [pc, #608]	; (800e1a0 <tcp_process+0x574>)
 800df40:	4a98      	ldr	r2, [pc, #608]	; (800e1a4 <tcp_process+0x578>)
 800df42:	f002 f869 	bl	8010018 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800df4c:	2b05      	cmp	r3, #5
 800df4e:	f200 8208 	bhi.w	800e362 <tcp_process+0x736>
        pcb->rtime = 0;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2200      	movs	r2, #0
 800df56:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f002 f8d3 	bl	8010104 <tcp_rexmit_rto>
    break;
 800df5e:	e200      	b.n	800e362 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800df60:	4b8a      	ldr	r3, [pc, #552]	; (800e18c <tcp_process+0x560>)
 800df62:	781b      	ldrb	r3, [r3, #0]
 800df64:	f003 0310 	and.w	r3, r3, #16
 800df68:	2b00      	cmp	r3, #0
 800df6a:	f000 8091 	beq.w	800e090 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800df6e:	4b88      	ldr	r3, [pc, #544]	; (800e190 <tcp_process+0x564>)
 800df70:	681a      	ldr	r2, [r3, #0]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df76:	1ad3      	subs	r3, r2, r3
 800df78:	3b01      	subs	r3, #1
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	db71      	blt.n	800e062 <tcp_process+0x436>
 800df7e:	4b84      	ldr	r3, [pc, #528]	; (800e190 <tcp_process+0x564>)
 800df80:	681a      	ldr	r2, [r3, #0]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df86:	1ad3      	subs	r3, r2, r3
 800df88:	2b00      	cmp	r3, #0
 800df8a:	dc6a      	bgt.n	800e062 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2204      	movs	r2, #4
 800df90:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df96:	2b00      	cmp	r3, #0
 800df98:	d00b      	beq.n	800dfb2 <tcp_process+0x386>
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df9e:	699b      	ldr	r3, [r3, #24]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d106      	bne.n	800dfb2 <tcp_process+0x386>
 800dfa4:	4b80      	ldr	r3, [pc, #512]	; (800e1a8 <tcp_process+0x57c>)
 800dfa6:	f44f 7254 	mov.w	r2, #848	; 0x350
 800dfaa:	4980      	ldr	r1, [pc, #512]	; (800e1ac <tcp_process+0x580>)
 800dfac:	4880      	ldr	r0, [pc, #512]	; (800e1b0 <tcp_process+0x584>)
 800dfae:	f005 fccf 	bl	8013950 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d102      	bne.n	800dfc0 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800dfba:	23fa      	movs	r3, #250	; 0xfa
 800dfbc:	76bb      	strb	r3, [r7, #26]
 800dfbe:	e011      	b.n	800dfe4 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfc4:	699b      	ldr	r3, [r3, #24]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d00a      	beq.n	800dfe0 <tcp_process+0x3b4>
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfce:	699b      	ldr	r3, [r3, #24]
 800dfd0:	687a      	ldr	r2, [r7, #4]
 800dfd2:	6910      	ldr	r0, [r2, #16]
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	6879      	ldr	r1, [r7, #4]
 800dfd8:	4798      	blx	r3
 800dfda:	4603      	mov	r3, r0
 800dfdc:	76bb      	strb	r3, [r7, #26]
 800dfde:	e001      	b.n	800dfe4 <tcp_process+0x3b8>
 800dfe0:	23f0      	movs	r3, #240	; 0xf0
 800dfe2:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800dfe4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d00a      	beq.n	800e002 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800dfec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800dff0:	f113 0f0d 	cmn.w	r3, #13
 800dff4:	d002      	beq.n	800dffc <tcp_process+0x3d0>
            tcp_abort(pcb);
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f7fe f992 	bl	800c320 <tcp_abort>
          }
          return ERR_ABRT;
 800dffc:	f06f 030c 	mvn.w	r3, #12
 800e000:	e1bd      	b.n	800e37e <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f000 fa42 	bl	800e48c <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800e008:	4b6a      	ldr	r3, [pc, #424]	; (800e1b4 <tcp_process+0x588>)
 800e00a:	881b      	ldrh	r3, [r3, #0]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d005      	beq.n	800e01c <tcp_process+0x3f0>
          recv_acked--;
 800e010:	4b68      	ldr	r3, [pc, #416]	; (800e1b4 <tcp_process+0x588>)
 800e012:	881b      	ldrh	r3, [r3, #0]
 800e014:	3b01      	subs	r3, #1
 800e016:	b29a      	uxth	r2, r3
 800e018:	4b66      	ldr	r3, [pc, #408]	; (800e1b4 <tcp_process+0x588>)
 800e01a:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e020:	005b      	lsls	r3, r3, #1
 800e022:	f241 121c 	movw	r2, #4380	; 0x111c
 800e026:	429a      	cmp	r2, r3
 800e028:	bf38      	it	cc
 800e02a:	461a      	movcc	r2, r3
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e030:	009b      	lsls	r3, r3, #2
 800e032:	4293      	cmp	r3, r2
 800e034:	bf28      	it	cs
 800e036:	4613      	movcs	r3, r2
 800e038:	b29a      	uxth	r2, r3
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800e040:	4b5d      	ldr	r3, [pc, #372]	; (800e1b8 <tcp_process+0x58c>)
 800e042:	781b      	ldrb	r3, [r3, #0]
 800e044:	f003 0320 	and.w	r3, r3, #32
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d034      	beq.n	800e0b6 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	7e9b      	ldrb	r3, [r3, #26]
 800e050:	f043 0302 	orr.w	r3, r3, #2
 800e054:	b2da      	uxtb	r2, r3
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2207      	movs	r2, #7
 800e05e:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800e060:	e029      	b.n	800e0b6 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e062:	4b4b      	ldr	r3, [pc, #300]	; (800e190 <tcp_process+0x564>)
 800e064:	6818      	ldr	r0, [r3, #0]
 800e066:	4b4b      	ldr	r3, [pc, #300]	; (800e194 <tcp_process+0x568>)
 800e068:	881b      	ldrh	r3, [r3, #0]
 800e06a:	461a      	mov	r2, r3
 800e06c:	4b4a      	ldr	r3, [pc, #296]	; (800e198 <tcp_process+0x56c>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e072:	4b4a      	ldr	r3, [pc, #296]	; (800e19c <tcp_process+0x570>)
 800e074:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e076:	885b      	ldrh	r3, [r3, #2]
 800e078:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e07a:	4a48      	ldr	r2, [pc, #288]	; (800e19c <tcp_process+0x570>)
 800e07c:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e07e:	8812      	ldrh	r2, [r2, #0]
 800e080:	b292      	uxth	r2, r2
 800e082:	9201      	str	r2, [sp, #4]
 800e084:	9300      	str	r3, [sp, #0]
 800e086:	4b46      	ldr	r3, [pc, #280]	; (800e1a0 <tcp_process+0x574>)
 800e088:	4a46      	ldr	r2, [pc, #280]	; (800e1a4 <tcp_process+0x578>)
 800e08a:	f001 ffc5 	bl	8010018 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800e08e:	e16a      	b.n	800e366 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e090:	4b3e      	ldr	r3, [pc, #248]	; (800e18c <tcp_process+0x560>)
 800e092:	781b      	ldrb	r3, [r3, #0]
 800e094:	f003 0302 	and.w	r3, r3, #2
 800e098:	2b00      	cmp	r3, #0
 800e09a:	f000 8164 	beq.w	800e366 <tcp_process+0x73a>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0a2:	1e5a      	subs	r2, r3, #1
 800e0a4:	4b3c      	ldr	r3, [pc, #240]	; (800e198 <tcp_process+0x56c>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	f040 815c 	bne.w	800e366 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f002 f85e 	bl	8010170 <tcp_rexmit>
    break;
 800e0b4:	e157      	b.n	800e366 <tcp_process+0x73a>
 800e0b6:	e156      	b.n	800e366 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f000 f9e7 	bl	800e48c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e0be:	4b3e      	ldr	r3, [pc, #248]	; (800e1b8 <tcp_process+0x58c>)
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	f003 0320 	and.w	r3, r3, #32
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	f000 814f 	beq.w	800e36a <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	7e9b      	ldrb	r3, [r3, #26]
 800e0d0:	f043 0302 	orr.w	r3, r3, #2
 800e0d4:	b2da      	uxtb	r2, r3
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2207      	movs	r2, #7
 800e0de:	751a      	strb	r2, [r3, #20]
    }
    break;
 800e0e0:	e143      	b.n	800e36a <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f000 f9d2 	bl	800e48c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800e0e8:	4b33      	ldr	r3, [pc, #204]	; (800e1b8 <tcp_process+0x58c>)
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	f003 0320 	and.w	r3, r3, #32
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d074      	beq.n	800e1de <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e0f4:	4b25      	ldr	r3, [pc, #148]	; (800e18c <tcp_process+0x560>)
 800e0f6:	781b      	ldrb	r3, [r3, #0]
 800e0f8:	f003 0310 	and.w	r3, r3, #16
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d063      	beq.n	800e1c8 <tcp_process+0x59c>
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e104:	4b22      	ldr	r3, [pc, #136]	; (800e190 <tcp_process+0x564>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	429a      	cmp	r2, r3
 800e10a:	d15d      	bne.n	800e1c8 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e110:	2b00      	cmp	r3, #0
 800e112:	d159      	bne.n	800e1c8 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	7e9b      	ldrb	r3, [r3, #26]
 800e118:	f043 0302 	orr.w	r3, r3, #2
 800e11c:	b2da      	uxtb	r2, r3
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f7fe fee8 	bl	800cef8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e128:	4b24      	ldr	r3, [pc, #144]	; (800e1bc <tcp_process+0x590>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	687a      	ldr	r2, [r7, #4]
 800e12e:	429a      	cmp	r2, r3
 800e130:	d105      	bne.n	800e13e <tcp_process+0x512>
 800e132:	4b22      	ldr	r3, [pc, #136]	; (800e1bc <tcp_process+0x590>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	68db      	ldr	r3, [r3, #12]
 800e138:	4a20      	ldr	r2, [pc, #128]	; (800e1bc <tcp_process+0x590>)
 800e13a:	6013      	str	r3, [r2, #0]
 800e13c:	e013      	b.n	800e166 <tcp_process+0x53a>
 800e13e:	4b1f      	ldr	r3, [pc, #124]	; (800e1bc <tcp_process+0x590>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	617b      	str	r3, [r7, #20]
 800e144:	e00c      	b.n	800e160 <tcp_process+0x534>
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	68db      	ldr	r3, [r3, #12]
 800e14a:	687a      	ldr	r2, [r7, #4]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d104      	bne.n	800e15a <tcp_process+0x52e>
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	68da      	ldr	r2, [r3, #12]
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	60da      	str	r2, [r3, #12]
 800e158:	e005      	b.n	800e166 <tcp_process+0x53a>
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	68db      	ldr	r3, [r3, #12]
 800e15e:	617b      	str	r3, [r7, #20]
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d1ef      	bne.n	800e146 <tcp_process+0x51a>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2200      	movs	r2, #0
 800e16a:	60da      	str	r2, [r3, #12]
 800e16c:	4b14      	ldr	r3, [pc, #80]	; (800e1c0 <tcp_process+0x594>)
 800e16e:	2201      	movs	r2, #1
 800e170:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	220a      	movs	r2, #10
 800e176:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e178:	4b12      	ldr	r3, [pc, #72]	; (800e1c4 <tcp_process+0x598>)
 800e17a:	681a      	ldr	r2, [r3, #0]
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	60da      	str	r2, [r3, #12]
 800e180:	4a10      	ldr	r2, [pc, #64]	; (800e1c4 <tcp_process+0x598>)
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6013      	str	r3, [r2, #0]
 800e186:	f002 f98f 	bl	80104a8 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800e18a:	e0f0      	b.n	800e36e <tcp_process+0x742>
 800e18c:	2000052c 	.word	0x2000052c
 800e190:	20000524 	.word	0x20000524
 800e194:	2000052a 	.word	0x2000052a
 800e198:	20000520 	.word	0x20000520
 800e19c:	20000510 	.word	0x20000510
 800e1a0:	2000377c 	.word	0x2000377c
 800e1a4:	20003780 	.word	0x20003780
 800e1a8:	08015b98 	.word	0x08015b98
 800e1ac:	08015d9c 	.word	0x08015d9c
 800e1b0:	08015bdc 	.word	0x08015bdc
 800e1b4:	20000528 	.word	0x20000528
 800e1b8:	2000052d 	.word	0x2000052d
 800e1bc:	20006c9c 	.word	0x20006c9c
 800e1c0:	20006c98 	.word	0x20006c98
 800e1c4:	20006cac 	.word	0x20006cac
        tcp_ack_now(pcb);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	7e9b      	ldrb	r3, [r3, #26]
 800e1cc:	f043 0302 	orr.w	r3, r3, #2
 800e1d0:	b2da      	uxtb	r2, r3
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2208      	movs	r2, #8
 800e1da:	751a      	strb	r2, [r3, #20]
    break;
 800e1dc:	e0c7      	b.n	800e36e <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e1de:	4b6a      	ldr	r3, [pc, #424]	; (800e388 <tcp_process+0x75c>)
 800e1e0:	781b      	ldrb	r3, [r3, #0]
 800e1e2:	f003 0310 	and.w	r3, r3, #16
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	f000 80c1 	beq.w	800e36e <tcp_process+0x742>
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e1f0:	4b66      	ldr	r3, [pc, #408]	; (800e38c <tcp_process+0x760>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	f040 80ba 	bne.w	800e36e <tcp_process+0x742>
               pcb->unsent == NULL) {
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	f040 80b5 	bne.w	800e36e <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2206      	movs	r2, #6
 800e208:	751a      	strb	r2, [r3, #20]
    break;
 800e20a:	e0b0      	b.n	800e36e <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f000 f93d 	bl	800e48c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800e212:	4b5f      	ldr	r3, [pc, #380]	; (800e390 <tcp_process+0x764>)
 800e214:	781b      	ldrb	r3, [r3, #0]
 800e216:	f003 0320 	and.w	r3, r3, #32
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	f000 80a9 	beq.w	800e372 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	7e9b      	ldrb	r3, [r3, #26]
 800e224:	f043 0302 	orr.w	r3, r3, #2
 800e228:	b2da      	uxtb	r2, r3
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f7fe fe62 	bl	800cef8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e234:	4b57      	ldr	r3, [pc, #348]	; (800e394 <tcp_process+0x768>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	687a      	ldr	r2, [r7, #4]
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d105      	bne.n	800e24a <tcp_process+0x61e>
 800e23e:	4b55      	ldr	r3, [pc, #340]	; (800e394 <tcp_process+0x768>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	68db      	ldr	r3, [r3, #12]
 800e244:	4a53      	ldr	r2, [pc, #332]	; (800e394 <tcp_process+0x768>)
 800e246:	6013      	str	r3, [r2, #0]
 800e248:	e013      	b.n	800e272 <tcp_process+0x646>
 800e24a:	4b52      	ldr	r3, [pc, #328]	; (800e394 <tcp_process+0x768>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	613b      	str	r3, [r7, #16]
 800e250:	e00c      	b.n	800e26c <tcp_process+0x640>
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	68db      	ldr	r3, [r3, #12]
 800e256:	687a      	ldr	r2, [r7, #4]
 800e258:	429a      	cmp	r2, r3
 800e25a:	d104      	bne.n	800e266 <tcp_process+0x63a>
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	68da      	ldr	r2, [r3, #12]
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	60da      	str	r2, [r3, #12]
 800e264:	e005      	b.n	800e272 <tcp_process+0x646>
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	68db      	ldr	r3, [r3, #12]
 800e26a:	613b      	str	r3, [r7, #16]
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d1ef      	bne.n	800e252 <tcp_process+0x626>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2200      	movs	r2, #0
 800e276:	60da      	str	r2, [r3, #12]
 800e278:	4b47      	ldr	r3, [pc, #284]	; (800e398 <tcp_process+0x76c>)
 800e27a:	2201      	movs	r2, #1
 800e27c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	220a      	movs	r2, #10
 800e282:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800e284:	4b45      	ldr	r3, [pc, #276]	; (800e39c <tcp_process+0x770>)
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	60da      	str	r2, [r3, #12]
 800e28c:	4a43      	ldr	r2, [pc, #268]	; (800e39c <tcp_process+0x770>)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6013      	str	r3, [r2, #0]
 800e292:	f002 f909 	bl	80104a8 <tcp_timer_needed>
    }
    break;
 800e296:	e06c      	b.n	800e372 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f000 f8f7 	bl	800e48c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e29e:	4b3a      	ldr	r3, [pc, #232]	; (800e388 <tcp_process+0x75c>)
 800e2a0:	781b      	ldrb	r3, [r3, #0]
 800e2a2:	f003 0310 	and.w	r3, r3, #16
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d065      	beq.n	800e376 <tcp_process+0x74a>
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e2ae:	4b37      	ldr	r3, [pc, #220]	; (800e38c <tcp_process+0x760>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d15f      	bne.n	800e376 <tcp_process+0x74a>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d15b      	bne.n	800e376 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800e2be:	6878      	ldr	r0, [r7, #4]
 800e2c0:	f7fe fe1a 	bl	800cef8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e2c4:	4b33      	ldr	r3, [pc, #204]	; (800e394 <tcp_process+0x768>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	687a      	ldr	r2, [r7, #4]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d105      	bne.n	800e2da <tcp_process+0x6ae>
 800e2ce:	4b31      	ldr	r3, [pc, #196]	; (800e394 <tcp_process+0x768>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	68db      	ldr	r3, [r3, #12]
 800e2d4:	4a2f      	ldr	r2, [pc, #188]	; (800e394 <tcp_process+0x768>)
 800e2d6:	6013      	str	r3, [r2, #0]
 800e2d8:	e013      	b.n	800e302 <tcp_process+0x6d6>
 800e2da:	4b2e      	ldr	r3, [pc, #184]	; (800e394 <tcp_process+0x768>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	60fb      	str	r3, [r7, #12]
 800e2e0:	e00c      	b.n	800e2fc <tcp_process+0x6d0>
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	68db      	ldr	r3, [r3, #12]
 800e2e6:	687a      	ldr	r2, [r7, #4]
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d104      	bne.n	800e2f6 <tcp_process+0x6ca>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	68da      	ldr	r2, [r3, #12]
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	60da      	str	r2, [r3, #12]
 800e2f4:	e005      	b.n	800e302 <tcp_process+0x6d6>
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	68db      	ldr	r3, [r3, #12]
 800e2fa:	60fb      	str	r3, [r7, #12]
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d1ef      	bne.n	800e2e2 <tcp_process+0x6b6>
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2200      	movs	r2, #0
 800e306:	60da      	str	r2, [r3, #12]
 800e308:	4b23      	ldr	r3, [pc, #140]	; (800e398 <tcp_process+0x76c>)
 800e30a:	2201      	movs	r2, #1
 800e30c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	220a      	movs	r2, #10
 800e312:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800e314:	4b21      	ldr	r3, [pc, #132]	; (800e39c <tcp_process+0x770>)
 800e316:	681a      	ldr	r2, [r3, #0]
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	60da      	str	r2, [r3, #12]
 800e31c:	4a1f      	ldr	r2, [pc, #124]	; (800e39c <tcp_process+0x770>)
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6013      	str	r3, [r2, #0]
 800e322:	f002 f8c1 	bl	80104a8 <tcp_timer_needed>
    }
    break;
 800e326:	e026      	b.n	800e376 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f000 f8af 	bl	800e48c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e32e:	4b16      	ldr	r3, [pc, #88]	; (800e388 <tcp_process+0x75c>)
 800e330:	781b      	ldrb	r3, [r3, #0]
 800e332:	f003 0310 	and.w	r3, r3, #16
 800e336:	2b00      	cmp	r3, #0
 800e338:	d01f      	beq.n	800e37a <tcp_process+0x74e>
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e33e:	4b13      	ldr	r3, [pc, #76]	; (800e38c <tcp_process+0x760>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	429a      	cmp	r2, r3
 800e344:	d119      	bne.n	800e37a <tcp_process+0x74e>
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d115      	bne.n	800e37a <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800e34e:	4b10      	ldr	r3, [pc, #64]	; (800e390 <tcp_process+0x764>)
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	f043 0310 	orr.w	r3, r3, #16
 800e356:	b2da      	uxtb	r2, r3
 800e358:	4b0d      	ldr	r3, [pc, #52]	; (800e390 <tcp_process+0x764>)
 800e35a:	701a      	strb	r2, [r3, #0]
    }
    break;
 800e35c:	e00d      	b.n	800e37a <tcp_process+0x74e>
  default:
    break;
 800e35e:	bf00      	nop
 800e360:	e00c      	b.n	800e37c <tcp_process+0x750>
    break;
 800e362:	bf00      	nop
 800e364:	e00a      	b.n	800e37c <tcp_process+0x750>
    break;
 800e366:	bf00      	nop
 800e368:	e008      	b.n	800e37c <tcp_process+0x750>
    break;
 800e36a:	bf00      	nop
 800e36c:	e006      	b.n	800e37c <tcp_process+0x750>
    break;
 800e36e:	bf00      	nop
 800e370:	e004      	b.n	800e37c <tcp_process+0x750>
    break;
 800e372:	bf00      	nop
 800e374:	e002      	b.n	800e37c <tcp_process+0x750>
    break;
 800e376:	bf00      	nop
 800e378:	e000      	b.n	800e37c <tcp_process+0x750>
    break;
 800e37a:	bf00      	nop
  }
  return ERR_OK;
 800e37c:	2300      	movs	r3, #0
}
 800e37e:	4618      	mov	r0, r3
 800e380:	3720      	adds	r7, #32
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}
 800e386:	bf00      	nop
 800e388:	2000052c 	.word	0x2000052c
 800e38c:	20000524 	.word	0x20000524
 800e390:	2000052d 	.word	0x2000052d
 800e394:	20006c9c 	.word	0x20006c9c
 800e398:	20006c98 	.word	0x20006c98
 800e39c:	20006cac 	.word	0x20006cac

0800e3a0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e3a0:	b590      	push	{r4, r7, lr}
 800e3a2:	b085      	sub	sp, #20
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	68db      	ldr	r3, [r3, #12]
 800e3ae:	899b      	ldrh	r3, [r3, #12]
 800e3b0:	b29b      	uxth	r3, r3
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7fc f8ef 	bl	800a596 <lwip_htons>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	f003 0301 	and.w	r3, r3, #1
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d027      	beq.n	800e412 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e3c2:	6838      	ldr	r0, [r7, #0]
 800e3c4:	f7fe fbef 	bl	800cba6 <tcp_segs_free>
    next = NULL;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	603b      	str	r3, [r7, #0]
 800e3cc:	e055      	b.n	800e47a <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	68db      	ldr	r3, [r3, #12]
 800e3d2:	899b      	ldrh	r3, [r3, #12]
 800e3d4:	b29b      	uxth	r3, r3
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fc f8dd 	bl	800a596 <lwip_htons>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	f003 0301 	and.w	r3, r3, #1
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d00d      	beq.n	800e402 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	68db      	ldr	r3, [r3, #12]
 800e3ea:	899b      	ldrh	r3, [r3, #12]
 800e3ec:	b29c      	uxth	r4, r3
 800e3ee:	2001      	movs	r0, #1
 800e3f0:	f7fc f8d1 	bl	800a596 <lwip_htons>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	461a      	mov	r2, r3
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	68db      	ldr	r3, [r3, #12]
 800e3fc:	4322      	orrs	r2, r4
 800e3fe:	b292      	uxth	r2, r2
 800e400:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e40c:	68f8      	ldr	r0, [r7, #12]
 800e40e:	f7fe fbdf 	bl	800cbd0 <tcp_seg_free>
    while (next &&
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d00e      	beq.n	800e436 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	891b      	ldrh	r3, [r3, #8]
 800e41c:	461a      	mov	r2, r3
 800e41e:	4b1a      	ldr	r3, [pc, #104]	; (800e488 <tcp_oos_insert_segment+0xe8>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	441a      	add	r2, r3
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	68db      	ldr	r3, [r3, #12]
 800e428:	685b      	ldr	r3, [r3, #4]
 800e42a:	6839      	ldr	r1, [r7, #0]
 800e42c:	8909      	ldrh	r1, [r1, #8]
 800e42e:	440b      	add	r3, r1
 800e430:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e432:	2b00      	cmp	r3, #0
 800e434:	dacb      	bge.n	800e3ce <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d01e      	beq.n	800e47a <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	891b      	ldrh	r3, [r3, #8]
 800e440:	461a      	mov	r2, r3
 800e442:	4b11      	ldr	r3, [pc, #68]	; (800e488 <tcp_oos_insert_segment+0xe8>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	441a      	add	r2, r3
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	68db      	ldr	r3, [r3, #12]
 800e44c:	685b      	ldr	r3, [r3, #4]
 800e44e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e450:	2b00      	cmp	r3, #0
 800e452:	dd12      	ble.n	800e47a <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	68db      	ldr	r3, [r3, #12]
 800e458:	685b      	ldr	r3, [r3, #4]
 800e45a:	b29a      	uxth	r2, r3
 800e45c:	4b0a      	ldr	r3, [pc, #40]	; (800e488 <tcp_oos_insert_segment+0xe8>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	b29b      	uxth	r3, r3
 800e462:	1ad3      	subs	r3, r2, r3
 800e464:	b29a      	uxth	r2, r3
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	685a      	ldr	r2, [r3, #4]
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	891b      	ldrh	r3, [r3, #8]
 800e472:	4619      	mov	r1, r3
 800e474:	4610      	mov	r0, r2
 800e476:	f7fd f847 	bl	800b508 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	683a      	ldr	r2, [r7, #0]
 800e47e:	601a      	str	r2, [r3, #0]
}
 800e480:	bf00      	nop
 800e482:	3714      	adds	r7, #20
 800e484:	46bd      	mov	sp, r7
 800e486:	bd90      	pop	{r4, r7, pc}
 800e488:	20000520 	.word	0x20000520

0800e48c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e48c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e48e:	b08d      	sub	sp, #52	; 0x34
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800e494:	2300      	movs	r3, #0
 800e496:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	7d1b      	ldrb	r3, [r3, #20]
 800e49c:	2b03      	cmp	r3, #3
 800e49e:	d806      	bhi.n	800e4ae <tcp_receive+0x22>
 800e4a0:	4ba6      	ldr	r3, [pc, #664]	; (800e73c <tcp_receive+0x2b0>)
 800e4a2:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800e4a6:	49a6      	ldr	r1, [pc, #664]	; (800e740 <tcp_receive+0x2b4>)
 800e4a8:	48a6      	ldr	r0, [pc, #664]	; (800e744 <tcp_receive+0x2b8>)
 800e4aa:	f005 fa51 	bl	8013950 <iprintf>

  if (flags & TCP_ACK) {
 800e4ae:	4ba6      	ldr	r3, [pc, #664]	; (800e748 <tcp_receive+0x2bc>)
 800e4b0:	781b      	ldrb	r3, [r3, #0]
 800e4b2:	f003 0310 	and.w	r3, r3, #16
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	f000 82bf 	beq.w	800ea3a <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e4c2:	461a      	mov	r2, r3
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4c8:	4413      	add	r3, r2
 800e4ca:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e4d0:	4b9e      	ldr	r3, [pc, #632]	; (800e74c <tcp_receive+0x2c0>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	1ad3      	subs	r3, r2, r3
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	db1b      	blt.n	800e512 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e4de:	4b9b      	ldr	r3, [pc, #620]	; (800e74c <tcp_receive+0x2c0>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	d106      	bne.n	800e4f4 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e4ea:	4b99      	ldr	r3, [pc, #612]	; (800e750 <tcp_receive+0x2c4>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	1ad3      	subs	r3, r2, r3
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	db0e      	blt.n	800e512 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e4f8:	4b95      	ldr	r3, [pc, #596]	; (800e750 <tcp_receive+0x2c4>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e4fc:	429a      	cmp	r2, r3
 800e4fe:	d141      	bne.n	800e584 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e500:	4b94      	ldr	r3, [pc, #592]	; (800e754 <tcp_receive+0x2c8>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	89db      	ldrh	r3, [r3, #14]
 800e506:	b29a      	uxth	r2, r3
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e50e:	429a      	cmp	r2, r3
 800e510:	d938      	bls.n	800e584 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e512:	4b90      	ldr	r3, [pc, #576]	; (800e754 <tcp_receive+0x2c8>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	89db      	ldrh	r3, [r3, #14]
 800e518:	b29a      	uxth	r2, r3
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d205      	bcs.n	800e53c <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800e53c:	4b83      	ldr	r3, [pc, #524]	; (800e74c <tcp_receive+0x2c0>)
 800e53e:	681a      	ldr	r2, [r3, #0]
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800e544:	4b82      	ldr	r3, [pc, #520]	; (800e750 <tcp_receive+0x2c4>)
 800e546:	681a      	ldr	r2, [r3, #0]
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e552:	2b00      	cmp	r3, #0
 800e554:	d10d      	bne.n	800e572 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d111      	bne.n	800e584 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2200      	movs	r2, #0
 800e564:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2201      	movs	r2, #1
 800e56c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800e570:	e008      	b.n	800e584 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d003      	beq.n	800e584 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2200      	movs	r2, #0
 800e580:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e584:	4b72      	ldr	r3, [pc, #456]	; (800e750 <tcp_receive+0x2c4>)
 800e586:	681a      	ldr	r2, [r3, #0]
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e58c:	1ad3      	subs	r3, r2, r3
 800e58e:	2b00      	cmp	r3, #0
 800e590:	dc53      	bgt.n	800e63a <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800e592:	4b71      	ldr	r3, [pc, #452]	; (800e758 <tcp_receive+0x2cc>)
 800e594:	881b      	ldrh	r3, [r3, #0]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d146      	bne.n	800e628 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e59e:	687a      	ldr	r2, [r7, #4]
 800e5a0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800e5a4:	4413      	add	r3, r2
 800e5a6:	697a      	ldr	r2, [r7, #20]
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d13d      	bne.n	800e628 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	db38      	blt.n	800e628 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e5ba:	4b65      	ldr	r3, [pc, #404]	; (800e750 <tcp_receive+0x2c4>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d132      	bne.n	800e628 <tcp_receive+0x19c>
              found_dupack = 1;
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e5cc:	2bff      	cmp	r3, #255	; 0xff
 800e5ce:	d007      	beq.n	800e5e0 <tcp_receive+0x154>
                ++pcb->dupacks;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e5d6:	3301      	adds	r3, #1
 800e5d8:	b2da      	uxtb	r2, r3
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e5e6:	2b03      	cmp	r3, #3
 800e5e8:	d916      	bls.n	800e618 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e5f4:	4413      	add	r3, r2
 800e5f6:	b29a      	uxth	r2, r3
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e5fe:	429a      	cmp	r2, r3
 800e600:	d912      	bls.n	800e628 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e60c:	4413      	add	r3, r2
 800e60e:	b29a      	uxth	r2, r3
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e616:	e007      	b.n	800e628 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e61e:	2b03      	cmp	r3, #3
 800e620:	d102      	bne.n	800e628 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f001 fdf4 	bl	8010210 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e628:	69fb      	ldr	r3, [r7, #28]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	f040 8169 	bne.w	800e902 <tcp_receive+0x476>
        pcb->dupacks = 0;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2200      	movs	r2, #0
 800e634:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e638:	e163      	b.n	800e902 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800e63a:	4b45      	ldr	r3, [pc, #276]	; (800e750 <tcp_receive+0x2c4>)
 800e63c:	681a      	ldr	r2, [r3, #0]
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e642:	1ad3      	subs	r3, r2, r3
 800e644:	3b01      	subs	r3, #1
 800e646:	2b00      	cmp	r3, #0
 800e648:	f2c0 8107 	blt.w	800e85a <tcp_receive+0x3ce>
 800e64c:	4b40      	ldr	r3, [pc, #256]	; (800e750 <tcp_receive+0x2c4>)
 800e64e:	681a      	ldr	r2, [r3, #0]
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e654:	1ad3      	subs	r3, r2, r3
 800e656:	2b00      	cmp	r3, #0
 800e658:	f300 80ff 	bgt.w	800e85a <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	7e9b      	ldrb	r3, [r3, #26]
 800e660:	f003 0304 	and.w	r3, r3, #4
 800e664:	2b00      	cmp	r3, #0
 800e666:	d00c      	beq.n	800e682 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	7e9b      	ldrb	r3, [r3, #26]
 800e66c:	f023 0304 	bic.w	r3, r3, #4
 800e670:	b2da      	uxtb	r2, r3
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2200      	movs	r2, #0
 800e686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e690:	10db      	asrs	r3, r3, #3
 800e692:	b21b      	sxth	r3, r3
 800e694:	b29a      	uxth	r2, r3
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e69c:	b29b      	uxth	r3, r3
 800e69e:	4413      	add	r3, r2
 800e6a0:	b29b      	uxth	r3, r3
 800e6a2:	b21a      	sxth	r2, r3
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800e6b2:	4b27      	ldr	r3, [pc, #156]	; (800e750 <tcp_receive+0x2c4>)
 800e6b4:	681a      	ldr	r2, [r3, #0]
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	7d1b      	ldrb	r3, [r3, #20]
 800e6be:	2b03      	cmp	r3, #3
 800e6c0:	f240 8094 	bls.w	800e7ec <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e6d0:	429a      	cmp	r2, r3
 800e6d2:	d216      	bcs.n	800e702 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6de:	4413      	add	r3, r2
 800e6e0:	b29a      	uxth	r2, r3
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d97f      	bls.n	800e7ec <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6f6:	4413      	add	r3, r2
 800e6f8:	b29a      	uxth	r2, r3
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e700:	e074      	b.n	800e7ec <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e70c:	4619      	mov	r1, r3
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e712:	fb03 f301 	mul.w	r3, r3, r1
 800e716:	6879      	ldr	r1, [r7, #4]
 800e718:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800e71c:	fb93 f3f1 	sdiv	r3, r3, r1
 800e720:	b29b      	uxth	r3, r3
 800e722:	4413      	add	r3, r2
 800e724:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e72c:	8a7a      	ldrh	r2, [r7, #18]
 800e72e:	429a      	cmp	r2, r3
 800e730:	d95c      	bls.n	800e7ec <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	8a7a      	ldrh	r2, [r7, #18]
 800e736:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800e73a:	e057      	b.n	800e7ec <tcp_receive+0x360>
 800e73c:	08015b98 	.word	0x08015b98
 800e740:	08015dbc 	.word	0x08015dbc
 800e744:	08015bdc 	.word	0x08015bdc
 800e748:	2000052c 	.word	0x2000052c
 800e74c:	20000520 	.word	0x20000520
 800e750:	20000524 	.word	0x20000524
 800e754:	20000510 	.word	0x20000510
 800e758:	2000052a 	.word	0x2000052a
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e760:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e766:	681a      	ldr	r2, [r3, #0]
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800e772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e774:	685b      	ldr	r3, [r3, #4]
 800e776:	4618      	mov	r0, r3
 800e778:	f7fd f8ce 	bl	800b918 <pbuf_clen>
 800e77c:	4603      	mov	r3, r0
 800e77e:	429c      	cmp	r4, r3
 800e780:	d206      	bcs.n	800e790 <tcp_receive+0x304>
 800e782:	4b70      	ldr	r3, [pc, #448]	; (800e944 <tcp_receive+0x4b8>)
 800e784:	f240 429e 	movw	r2, #1182	; 0x49e
 800e788:	496f      	ldr	r1, [pc, #444]	; (800e948 <tcp_receive+0x4bc>)
 800e78a:	4870      	ldr	r0, [pc, #448]	; (800e94c <tcp_receive+0x4c0>)
 800e78c:	f005 f8e0 	bl	8013950 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800e790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e792:	685b      	ldr	r3, [r3, #4]
 800e794:	4618      	mov	r0, r3
 800e796:	f7fd f8bf 	bl	800b918 <pbuf_clen>
 800e79a:	4603      	mov	r3, r0
 800e79c:	461a      	mov	r2, r3
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e7a4:	1a9b      	subs	r3, r3, r2
 800e7a6:	b29a      	uxth	r2, r3
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800e7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b0:	891a      	ldrh	r2, [r3, #8]
 800e7b2:	4b67      	ldr	r3, [pc, #412]	; (800e950 <tcp_receive+0x4c4>)
 800e7b4:	881b      	ldrh	r3, [r3, #0]
 800e7b6:	4413      	add	r3, r2
 800e7b8:	b29a      	uxth	r2, r3
 800e7ba:	4b65      	ldr	r3, [pc, #404]	; (800e950 <tcp_receive+0x4c4>)
 800e7bc:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800e7be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7c0:	f7fe fa06 	bl	800cbd0 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d00e      	beq.n	800e7ec <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d10a      	bne.n	800e7ec <tcp_receive+0x360>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d106      	bne.n	800e7ec <tcp_receive+0x360>
 800e7de:	4b59      	ldr	r3, [pc, #356]	; (800e944 <tcp_receive+0x4b8>)
 800e7e0:	f240 42a6 	movw	r2, #1190	; 0x4a6
 800e7e4:	495b      	ldr	r1, [pc, #364]	; (800e954 <tcp_receive+0x4c8>)
 800e7e6:	4859      	ldr	r0, [pc, #356]	; (800e94c <tcp_receive+0x4c0>)
 800e7e8:	f005 f8b2 	bl	8013950 <iprintf>
      while (pcb->unacked != NULL &&
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d022      	beq.n	800e83a <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7f8:	68db      	ldr	r3, [r3, #12]
 800e7fa:	685b      	ldr	r3, [r3, #4]
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f7fb fed7 	bl	800a5b0 <lwip_htonl>
 800e802:	4604      	mov	r4, r0
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e808:	891b      	ldrh	r3, [r3, #8]
 800e80a:	461d      	mov	r5, r3
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e810:	68db      	ldr	r3, [r3, #12]
 800e812:	899b      	ldrh	r3, [r3, #12]
 800e814:	b29b      	uxth	r3, r3
 800e816:	4618      	mov	r0, r3
 800e818:	f7fb febd 	bl	800a596 <lwip_htons>
 800e81c:	4603      	mov	r3, r0
 800e81e:	f003 0303 	and.w	r3, r3, #3
 800e822:	2b00      	cmp	r3, #0
 800e824:	d001      	beq.n	800e82a <tcp_receive+0x39e>
 800e826:	2301      	movs	r3, #1
 800e828:	e000      	b.n	800e82c <tcp_receive+0x3a0>
 800e82a:	2300      	movs	r3, #0
 800e82c:	442b      	add	r3, r5
 800e82e:	18e2      	adds	r2, r4, r3
 800e830:	4b49      	ldr	r3, [pc, #292]	; (800e958 <tcp_receive+0x4cc>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800e836:	2b00      	cmp	r3, #0
 800e838:	dd90      	ble.n	800e75c <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d104      	bne.n	800e84c <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e848:	861a      	strh	r2, [r3, #48]	; 0x30
 800e84a:	e002      	b.n	800e852 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2200      	movs	r2, #0
 800e850:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2200      	movs	r2, #0
 800e856:	76da      	strb	r2, [r3, #27]
 800e858:	e002      	b.n	800e860 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f001 f8fc 	bl	800fa58 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800e860:	e04f      	b.n	800e902 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e866:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e86c:	681a      	ldr	r2, [r3, #0]
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e876:	2b00      	cmp	r3, #0
 800e878:	d103      	bne.n	800e882 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2200      	movs	r2, #0
 800e87e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800e888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e88a:	685b      	ldr	r3, [r3, #4]
 800e88c:	4618      	mov	r0, r3
 800e88e:	f7fd f843 	bl	800b918 <pbuf_clen>
 800e892:	4603      	mov	r3, r0
 800e894:	429c      	cmp	r4, r3
 800e896:	d206      	bcs.n	800e8a6 <tcp_receive+0x41a>
 800e898:	4b2a      	ldr	r3, [pc, #168]	; (800e944 <tcp_receive+0x4b8>)
 800e89a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e89e:	492a      	ldr	r1, [pc, #168]	; (800e948 <tcp_receive+0x4bc>)
 800e8a0:	482a      	ldr	r0, [pc, #168]	; (800e94c <tcp_receive+0x4c0>)
 800e8a2:	f005 f855 	bl	8013950 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800e8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a8:	685b      	ldr	r3, [r3, #4]
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f7fd f834 	bl	800b918 <pbuf_clen>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	461a      	mov	r2, r3
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e8ba:	1a9b      	subs	r3, r3, r2
 800e8bc:	b29a      	uxth	r2, r3
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800e8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8c6:	891a      	ldrh	r2, [r3, #8]
 800e8c8:	4b21      	ldr	r3, [pc, #132]	; (800e950 <tcp_receive+0x4c4>)
 800e8ca:	881b      	ldrh	r3, [r3, #0]
 800e8cc:	4413      	add	r3, r2
 800e8ce:	b29a      	uxth	r2, r3
 800e8d0:	4b1f      	ldr	r3, [pc, #124]	; (800e950 <tcp_receive+0x4c4>)
 800e8d2:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800e8d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8d6:	f7fe f97b 	bl	800cbd0 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d00e      	beq.n	800e902 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d10a      	bne.n	800e902 <tcp_receive+0x476>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d106      	bne.n	800e902 <tcp_receive+0x476>
 800e8f4:	4b13      	ldr	r3, [pc, #76]	; (800e944 <tcp_receive+0x4b8>)
 800e8f6:	f240 42dc 	movw	r2, #1244	; 0x4dc
 800e8fa:	4916      	ldr	r1, [pc, #88]	; (800e954 <tcp_receive+0x4c8>)
 800e8fc:	4813      	ldr	r0, [pc, #76]	; (800e94c <tcp_receive+0x4c0>)
 800e8fe:	f005 f827 	bl	8013950 <iprintf>
    while (pcb->unsent != NULL &&
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e906:	2b00      	cmp	r3, #0
 800e908:	d036      	beq.n	800e978 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800e90a:	4b13      	ldr	r3, [pc, #76]	; (800e958 <tcp_receive+0x4cc>)
 800e90c:	681c      	ldr	r4, [r3, #0]
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e912:	68db      	ldr	r3, [r3, #12]
 800e914:	685b      	ldr	r3, [r3, #4]
 800e916:	4618      	mov	r0, r3
 800e918:	f7fb fe4a 	bl	800a5b0 <lwip_htonl>
 800e91c:	4605      	mov	r5, r0
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e922:	891b      	ldrh	r3, [r3, #8]
 800e924:	461e      	mov	r6, r3
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e92a:	68db      	ldr	r3, [r3, #12]
 800e92c:	899b      	ldrh	r3, [r3, #12]
 800e92e:	b29b      	uxth	r3, r3
 800e930:	4618      	mov	r0, r3
 800e932:	f7fb fe30 	bl	800a596 <lwip_htons>
 800e936:	4603      	mov	r3, r0
 800e938:	f003 0303 	and.w	r3, r3, #3
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d00d      	beq.n	800e95c <tcp_receive+0x4d0>
 800e940:	2301      	movs	r3, #1
 800e942:	e00c      	b.n	800e95e <tcp_receive+0x4d2>
 800e944:	08015b98 	.word	0x08015b98
 800e948:	08015dd8 	.word	0x08015dd8
 800e94c:	08015bdc 	.word	0x08015bdc
 800e950:	20000528 	.word	0x20000528
 800e954:	08015e00 	.word	0x08015e00
 800e958:	20000524 	.word	0x20000524
 800e95c:	2300      	movs	r3, #0
 800e95e:	4433      	add	r3, r6
 800e960:	442b      	add	r3, r5
 800e962:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800e964:	2b00      	cmp	r3, #0
 800e966:	db07      	blt.n	800e978 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800e968:	4b8d      	ldr	r3, [pc, #564]	; (800eba0 <tcp_receive+0x714>)
 800e96a:	681a      	ldr	r2, [r3, #0]
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e970:	1ad3      	subs	r3, r2, r3
 800e972:	2b00      	cmp	r3, #0
 800e974:	f77f af75 	ble.w	800e862 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e97e:	4b89      	ldr	r3, [pc, #548]	; (800eba4 <tcp_receive+0x718>)
 800e980:	881b      	ldrh	r3, [r3, #0]
 800e982:	4413      	add	r3, r2
 800e984:	b29a      	uxth	r2, r3
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e990:	2b00      	cmp	r3, #0
 800e992:	d052      	beq.n	800ea3a <tcp_receive+0x5ae>
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e998:	4b81      	ldr	r3, [pc, #516]	; (800eba0 <tcp_receive+0x714>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	1ad3      	subs	r3, r2, r3
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	da4b      	bge.n	800ea3a <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e9a2:	4b81      	ldr	r3, [pc, #516]	; (800eba8 <tcp_receive+0x71c>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	b29a      	uxth	r2, r3
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9ac:	b29b      	uxth	r3, r3
 800e9ae:	1ad3      	subs	r3, r2, r3
 800e9b0:	b29b      	uxth	r3, r3
 800e9b2:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800e9b4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e9bc:	10db      	asrs	r3, r3, #3
 800e9be:	b21b      	sxth	r3, r3
 800e9c0:	b29b      	uxth	r3, r3
 800e9c2:	1ad3      	subs	r3, r2, r3
 800e9c4:	b29b      	uxth	r3, r3
 800e9c6:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e9ce:	b29a      	uxth	r2, r3
 800e9d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e9d2:	4413      	add	r3, r2
 800e9d4:	b29b      	uxth	r3, r3
 800e9d6:	b21a      	sxth	r2, r3
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800e9dc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	da03      	bge.n	800e9ec <tcp_receive+0x560>
        m = -m;
 800e9e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e9e6:	425b      	negs	r3, r3
 800e9e8:	b29b      	uxth	r3, r3
 800e9ea:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800e9ec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e9f4:	109b      	asrs	r3, r3, #2
 800e9f6:	b21b      	sxth	r3, r3
 800e9f8:	b29b      	uxth	r3, r3
 800e9fa:	1ad3      	subs	r3, r2, r3
 800e9fc:	b29b      	uxth	r3, r3
 800e9fe:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ea06:	b29a      	uxth	r2, r3
 800ea08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea0a:	4413      	add	r3, r2
 800ea0c:	b29b      	uxth	r3, r3
 800ea0e:	b21a      	sxth	r2, r3
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ea1a:	10db      	asrs	r3, r3, #3
 800ea1c:	b21b      	sxth	r3, r3
 800ea1e:	b29a      	uxth	r2, r3
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ea26:	b29b      	uxth	r3, r3
 800ea28:	4413      	add	r3, r2
 800ea2a:	b29b      	uxth	r3, r3
 800ea2c:	b21a      	sxth	r2, r3
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2200      	movs	r2, #0
 800ea38:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ea3a:	4b5c      	ldr	r3, [pc, #368]	; (800ebac <tcp_receive+0x720>)
 800ea3c:	881b      	ldrh	r3, [r3, #0]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	f000 84f1 	beq.w	800f426 <tcp_receive+0xf9a>
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	7d1b      	ldrb	r3, [r3, #20]
 800ea48:	2b06      	cmp	r3, #6
 800ea4a:	f200 84ec 	bhi.w	800f426 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea52:	4b57      	ldr	r3, [pc, #348]	; (800ebb0 <tcp_receive+0x724>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	1ad3      	subs	r3, r2, r3
 800ea58:	3b01      	subs	r3, #1
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	f2c0 80b8 	blt.w	800ebd0 <tcp_receive+0x744>
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea64:	4b51      	ldr	r3, [pc, #324]	; (800ebac <tcp_receive+0x720>)
 800ea66:	881b      	ldrh	r3, [r3, #0]
 800ea68:	4619      	mov	r1, r3
 800ea6a:	4b51      	ldr	r3, [pc, #324]	; (800ebb0 <tcp_receive+0x724>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	440b      	add	r3, r1
 800ea70:	1ad3      	subs	r3, r2, r3
 800ea72:	3301      	adds	r3, #1
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	f300 80ab 	bgt.w	800ebd0 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ea7a:	4b4e      	ldr	r3, [pc, #312]	; (800ebb4 <tcp_receive+0x728>)
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea84:	4b4a      	ldr	r3, [pc, #296]	; (800ebb0 <tcp_receive+0x724>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	1ad3      	subs	r3, r2, r3
 800ea8a:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ea8c:	4b49      	ldr	r3, [pc, #292]	; (800ebb4 <tcp_receive+0x728>)
 800ea8e:	685b      	ldr	r3, [r3, #4]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d106      	bne.n	800eaa2 <tcp_receive+0x616>
 800ea94:	4b48      	ldr	r3, [pc, #288]	; (800ebb8 <tcp_receive+0x72c>)
 800ea96:	f240 523c 	movw	r2, #1340	; 0x53c
 800ea9a:	4948      	ldr	r1, [pc, #288]	; (800ebbc <tcp_receive+0x730>)
 800ea9c:	4848      	ldr	r0, [pc, #288]	; (800ebc0 <tcp_receive+0x734>)
 800ea9e:	f004 ff57 	bl	8013950 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800eaa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa4:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800eaa8:	4293      	cmp	r3, r2
 800eaaa:	dd06      	ble.n	800eaba <tcp_receive+0x62e>
 800eaac:	4b42      	ldr	r3, [pc, #264]	; (800ebb8 <tcp_receive+0x72c>)
 800eaae:	f240 523d 	movw	r2, #1341	; 0x53d
 800eab2:	4944      	ldr	r1, [pc, #272]	; (800ebc4 <tcp_receive+0x738>)
 800eab4:	4842      	ldr	r0, [pc, #264]	; (800ebc0 <tcp_receive+0x734>)
 800eab6:	f004 ff4b 	bl	8013950 <iprintf>
      if (inseg.p->len < off) {
 800eaba:	4b3e      	ldr	r3, [pc, #248]	; (800ebb4 <tcp_receive+0x728>)
 800eabc:	685b      	ldr	r3, [r3, #4]
 800eabe:	895b      	ldrh	r3, [r3, #10]
 800eac0:	461a      	mov	r2, r3
 800eac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac4:	4293      	cmp	r3, r2
 800eac6:	dd3e      	ble.n	800eb46 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800eac8:	4b3a      	ldr	r3, [pc, #232]	; (800ebb4 <tcp_receive+0x728>)
 800eaca:	685b      	ldr	r3, [r3, #4]
 800eacc:	891b      	ldrh	r3, [r3, #8]
 800eace:	461a      	mov	r2, r3
 800ead0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead2:	4293      	cmp	r3, r2
 800ead4:	dd06      	ble.n	800eae4 <tcp_receive+0x658>
 800ead6:	4b38      	ldr	r3, [pc, #224]	; (800ebb8 <tcp_receive+0x72c>)
 800ead8:	f240 523f 	movw	r2, #1343	; 0x53f
 800eadc:	493a      	ldr	r1, [pc, #232]	; (800ebc8 <tcp_receive+0x73c>)
 800eade:	4838      	ldr	r0, [pc, #224]	; (800ebc0 <tcp_receive+0x734>)
 800eae0:	f004 ff36 	bl	8013950 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800eae4:	4b33      	ldr	r3, [pc, #204]	; (800ebb4 <tcp_receive+0x728>)
 800eae6:	685b      	ldr	r3, [r3, #4]
 800eae8:	891a      	ldrh	r2, [r3, #8]
 800eaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaec:	b29b      	uxth	r3, r3
 800eaee:	1ad3      	subs	r3, r2, r3
 800eaf0:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800eaf2:	e00e      	b.n	800eb12 <tcp_receive+0x686>
          off -= p->len;
 800eaf4:	69bb      	ldr	r3, [r7, #24]
 800eaf6:	895b      	ldrh	r3, [r3, #10]
 800eaf8:	461a      	mov	r2, r3
 800eafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafc:	1a9b      	subs	r3, r3, r2
 800eafe:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800eb00:	69bb      	ldr	r3, [r7, #24]
 800eb02:	8a3a      	ldrh	r2, [r7, #16]
 800eb04:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800eb06:	69bb      	ldr	r3, [r7, #24]
 800eb08:	2200      	movs	r2, #0
 800eb0a:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800eb0c:	69bb      	ldr	r3, [r7, #24]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800eb12:	69bb      	ldr	r3, [r7, #24]
 800eb14:	895b      	ldrh	r3, [r3, #10]
 800eb16:	461a      	mov	r2, r3
 800eb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	dcea      	bgt.n	800eaf4 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800eb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb20:	b29b      	uxth	r3, r3
 800eb22:	425b      	negs	r3, r3
 800eb24:	b29b      	uxth	r3, r3
 800eb26:	b21b      	sxth	r3, r3
 800eb28:	4619      	mov	r1, r3
 800eb2a:	69b8      	ldr	r0, [r7, #24]
 800eb2c:	f7fc fe3c 	bl	800b7a8 <pbuf_header>
 800eb30:	4603      	mov	r3, r0
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d01c      	beq.n	800eb70 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800eb36:	4b20      	ldr	r3, [pc, #128]	; (800ebb8 <tcp_receive+0x72c>)
 800eb38:	f240 524c 	movw	r2, #1356	; 0x54c
 800eb3c:	4923      	ldr	r1, [pc, #140]	; (800ebcc <tcp_receive+0x740>)
 800eb3e:	4820      	ldr	r0, [pc, #128]	; (800ebc0 <tcp_receive+0x734>)
 800eb40:	f004 ff06 	bl	8013950 <iprintf>
 800eb44:	e014      	b.n	800eb70 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800eb46:	4b1b      	ldr	r3, [pc, #108]	; (800ebb4 <tcp_receive+0x728>)
 800eb48:	685b      	ldr	r3, [r3, #4]
 800eb4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb4c:	b292      	uxth	r2, r2
 800eb4e:	4252      	negs	r2, r2
 800eb50:	b292      	uxth	r2, r2
 800eb52:	b212      	sxth	r2, r2
 800eb54:	4611      	mov	r1, r2
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7fc fe26 	bl	800b7a8 <pbuf_header>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d006      	beq.n	800eb70 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800eb62:	4b15      	ldr	r3, [pc, #84]	; (800ebb8 <tcp_receive+0x72c>)
 800eb64:	f240 5251 	movw	r2, #1361	; 0x551
 800eb68:	4918      	ldr	r1, [pc, #96]	; (800ebcc <tcp_receive+0x740>)
 800eb6a:	4815      	ldr	r0, [pc, #84]	; (800ebc0 <tcp_receive+0x734>)
 800eb6c:	f004 fef0 	bl	8013950 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800eb70:	4b10      	ldr	r3, [pc, #64]	; (800ebb4 <tcp_receive+0x728>)
 800eb72:	891a      	ldrh	r2, [r3, #8]
 800eb74:	4b0e      	ldr	r3, [pc, #56]	; (800ebb0 <tcp_receive+0x724>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	b299      	uxth	r1, r3
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb7e:	b29b      	uxth	r3, r3
 800eb80:	1acb      	subs	r3, r1, r3
 800eb82:	b29b      	uxth	r3, r3
 800eb84:	4413      	add	r3, r2
 800eb86:	b29a      	uxth	r2, r3
 800eb88:	4b0a      	ldr	r3, [pc, #40]	; (800ebb4 <tcp_receive+0x728>)
 800eb8a:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb90:	4a07      	ldr	r2, [pc, #28]	; (800ebb0 <tcp_receive+0x724>)
 800eb92:	6013      	str	r3, [r2, #0]
 800eb94:	4b07      	ldr	r3, [pc, #28]	; (800ebb4 <tcp_receive+0x728>)
 800eb96:	68db      	ldr	r3, [r3, #12]
 800eb98:	4a05      	ldr	r2, [pc, #20]	; (800ebb0 <tcp_receive+0x724>)
 800eb9a:	6812      	ldr	r2, [r2, #0]
 800eb9c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800eb9e:	e025      	b.n	800ebec <tcp_receive+0x760>
 800eba0:	20000524 	.word	0x20000524
 800eba4:	20000528 	.word	0x20000528
 800eba8:	20006ca0 	.word	0x20006ca0
 800ebac:	2000052a 	.word	0x2000052a
 800ebb0:	20000520 	.word	0x20000520
 800ebb4:	20000500 	.word	0x20000500
 800ebb8:	08015b98 	.word	0x08015b98
 800ebbc:	08015e20 	.word	0x08015e20
 800ebc0:	08015bdc 	.word	0x08015bdc
 800ebc4:	08015e30 	.word	0x08015e30
 800ebc8:	08015e40 	.word	0x08015e40
 800ebcc:	08015e50 	.word	0x08015e50
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ebd0:	4b87      	ldr	r3, [pc, #540]	; (800edf0 <tcp_receive+0x964>)
 800ebd2:	681a      	ldr	r2, [r3, #0]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebd8:	1ad3      	subs	r3, r2, r3
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	da06      	bge.n	800ebec <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	7e9b      	ldrb	r3, [r3, #26]
 800ebe2:	f043 0302 	orr.w	r3, r3, #2
 800ebe6:	b2da      	uxtb	r2, r3
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ebec:	4b80      	ldr	r3, [pc, #512]	; (800edf0 <tcp_receive+0x964>)
 800ebee:	681a      	ldr	r2, [r3, #0]
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf4:	1ad3      	subs	r3, r2, r3
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	f2c0 8410 	blt.w	800f41c <tcp_receive+0xf90>
 800ebfc:	4b7c      	ldr	r3, [pc, #496]	; (800edf0 <tcp_receive+0x964>)
 800ebfe:	681a      	ldr	r2, [r3, #0]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec04:	6879      	ldr	r1, [r7, #4]
 800ec06:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ec08:	440b      	add	r3, r1
 800ec0a:	1ad3      	subs	r3, r2, r3
 800ec0c:	3301      	adds	r3, #1
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	f300 8404 	bgt.w	800f41c <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec18:	4b75      	ldr	r3, [pc, #468]	; (800edf0 <tcp_receive+0x964>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	f040 8287 	bne.w	800f130 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ec22:	4b74      	ldr	r3, [pc, #464]	; (800edf4 <tcp_receive+0x968>)
 800ec24:	891c      	ldrh	r4, [r3, #8]
 800ec26:	4b73      	ldr	r3, [pc, #460]	; (800edf4 <tcp_receive+0x968>)
 800ec28:	68db      	ldr	r3, [r3, #12]
 800ec2a:	899b      	ldrh	r3, [r3, #12]
 800ec2c:	b29b      	uxth	r3, r3
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7fb fcb1 	bl	800a596 <lwip_htons>
 800ec34:	4603      	mov	r3, r0
 800ec36:	f003 0303 	and.w	r3, r3, #3
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d001      	beq.n	800ec42 <tcp_receive+0x7b6>
 800ec3e:	2301      	movs	r3, #1
 800ec40:	e000      	b.n	800ec44 <tcp_receive+0x7b8>
 800ec42:	2300      	movs	r3, #0
 800ec44:	4423      	add	r3, r4
 800ec46:	b29a      	uxth	r2, r3
 800ec48:	4b6b      	ldr	r3, [pc, #428]	; (800edf8 <tcp_receive+0x96c>)
 800ec4a:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ec50:	4b69      	ldr	r3, [pc, #420]	; (800edf8 <tcp_receive+0x96c>)
 800ec52:	881b      	ldrh	r3, [r3, #0]
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d26e      	bcs.n	800ed36 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ec58:	4b66      	ldr	r3, [pc, #408]	; (800edf4 <tcp_receive+0x968>)
 800ec5a:	68db      	ldr	r3, [r3, #12]
 800ec5c:	899b      	ldrh	r3, [r3, #12]
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7fb fc98 	bl	800a596 <lwip_htons>
 800ec66:	4603      	mov	r3, r0
 800ec68:	f003 0301 	and.w	r3, r3, #1
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d01b      	beq.n	800eca8 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ec70:	4b60      	ldr	r3, [pc, #384]	; (800edf4 <tcp_receive+0x968>)
 800ec72:	68db      	ldr	r3, [r3, #12]
 800ec74:	899b      	ldrh	r3, [r3, #12]
 800ec76:	b29b      	uxth	r3, r3
 800ec78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ec7c:	b29c      	uxth	r4, r3
 800ec7e:	4b5d      	ldr	r3, [pc, #372]	; (800edf4 <tcp_receive+0x968>)
 800ec80:	68db      	ldr	r3, [r3, #12]
 800ec82:	899b      	ldrh	r3, [r3, #12]
 800ec84:	b29b      	uxth	r3, r3
 800ec86:	4618      	mov	r0, r3
 800ec88:	f7fb fc85 	bl	800a596 <lwip_htons>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ec92:	b29b      	uxth	r3, r3
 800ec94:	4618      	mov	r0, r3
 800ec96:	f7fb fc7e 	bl	800a596 <lwip_htons>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	461a      	mov	r2, r3
 800ec9e:	4b55      	ldr	r3, [pc, #340]	; (800edf4 <tcp_receive+0x968>)
 800eca0:	68db      	ldr	r3, [r3, #12]
 800eca2:	4322      	orrs	r2, r4
 800eca4:	b292      	uxth	r2, r2
 800eca6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ecac:	4b51      	ldr	r3, [pc, #324]	; (800edf4 <tcp_receive+0x968>)
 800ecae:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ecb0:	4b50      	ldr	r3, [pc, #320]	; (800edf4 <tcp_receive+0x968>)
 800ecb2:	68db      	ldr	r3, [r3, #12]
 800ecb4:	899b      	ldrh	r3, [r3, #12]
 800ecb6:	b29b      	uxth	r3, r3
 800ecb8:	4618      	mov	r0, r3
 800ecba:	f7fb fc6c 	bl	800a596 <lwip_htons>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	f003 0302 	and.w	r3, r3, #2
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d005      	beq.n	800ecd4 <tcp_receive+0x848>
            inseg.len -= 1;
 800ecc8:	4b4a      	ldr	r3, [pc, #296]	; (800edf4 <tcp_receive+0x968>)
 800ecca:	891b      	ldrh	r3, [r3, #8]
 800eccc:	3b01      	subs	r3, #1
 800ecce:	b29a      	uxth	r2, r3
 800ecd0:	4b48      	ldr	r3, [pc, #288]	; (800edf4 <tcp_receive+0x968>)
 800ecd2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ecd4:	4b47      	ldr	r3, [pc, #284]	; (800edf4 <tcp_receive+0x968>)
 800ecd6:	685b      	ldr	r3, [r3, #4]
 800ecd8:	4a46      	ldr	r2, [pc, #280]	; (800edf4 <tcp_receive+0x968>)
 800ecda:	8912      	ldrh	r2, [r2, #8]
 800ecdc:	4611      	mov	r1, r2
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7fc fc12 	bl	800b508 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ece4:	4b43      	ldr	r3, [pc, #268]	; (800edf4 <tcp_receive+0x968>)
 800ece6:	891c      	ldrh	r4, [r3, #8]
 800ece8:	4b42      	ldr	r3, [pc, #264]	; (800edf4 <tcp_receive+0x968>)
 800ecea:	68db      	ldr	r3, [r3, #12]
 800ecec:	899b      	ldrh	r3, [r3, #12]
 800ecee:	b29b      	uxth	r3, r3
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f7fb fc50 	bl	800a596 <lwip_htons>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	f003 0303 	and.w	r3, r3, #3
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d001      	beq.n	800ed04 <tcp_receive+0x878>
 800ed00:	2301      	movs	r3, #1
 800ed02:	e000      	b.n	800ed06 <tcp_receive+0x87a>
 800ed04:	2300      	movs	r3, #0
 800ed06:	4423      	add	r3, r4
 800ed08:	b29a      	uxth	r2, r3
 800ed0a:	4b3b      	ldr	r3, [pc, #236]	; (800edf8 <tcp_receive+0x96c>)
 800ed0c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ed0e:	4b3a      	ldr	r3, [pc, #232]	; (800edf8 <tcp_receive+0x96c>)
 800ed10:	881b      	ldrh	r3, [r3, #0]
 800ed12:	461a      	mov	r2, r3
 800ed14:	4b36      	ldr	r3, [pc, #216]	; (800edf0 <tcp_receive+0x964>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	441a      	add	r2, r3
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed1e:	6879      	ldr	r1, [r7, #4]
 800ed20:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ed22:	440b      	add	r3, r1
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d006      	beq.n	800ed36 <tcp_receive+0x8aa>
 800ed28:	4b34      	ldr	r3, [pc, #208]	; (800edfc <tcp_receive+0x970>)
 800ed2a:	f240 527e 	movw	r2, #1406	; 0x57e
 800ed2e:	4934      	ldr	r1, [pc, #208]	; (800ee00 <tcp_receive+0x974>)
 800ed30:	4834      	ldr	r0, [pc, #208]	; (800ee04 <tcp_receive+0x978>)
 800ed32:	f004 fe0d 	bl	8013950 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	f000 80e1 	beq.w	800ef02 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ed40:	4b2c      	ldr	r3, [pc, #176]	; (800edf4 <tcp_receive+0x968>)
 800ed42:	68db      	ldr	r3, [r3, #12]
 800ed44:	899b      	ldrh	r3, [r3, #12]
 800ed46:	b29b      	uxth	r3, r3
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7fb fc24 	bl	800a596 <lwip_htons>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	f003 0301 	and.w	r3, r3, #1
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d010      	beq.n	800ed7a <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ed58:	e00a      	b.n	800ed70 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed5e:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed64:	681a      	ldr	r2, [r3, #0]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800ed6a:	68b8      	ldr	r0, [r7, #8]
 800ed6c:	f7fd ff30 	bl	800cbd0 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d1f0      	bne.n	800ed5a <tcp_receive+0x8ce>
 800ed78:	e0c3      	b.n	800ef02 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed7e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ed80:	e04f      	b.n	800ee22 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ed82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed84:	68db      	ldr	r3, [r3, #12]
 800ed86:	899b      	ldrh	r3, [r3, #12]
 800ed88:	b29b      	uxth	r3, r3
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f7fb fc03 	bl	800a596 <lwip_htons>
 800ed90:	4603      	mov	r3, r0
 800ed92:	f003 0301 	and.w	r3, r3, #1
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d03b      	beq.n	800ee12 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ed9a:	4b16      	ldr	r3, [pc, #88]	; (800edf4 <tcp_receive+0x968>)
 800ed9c:	68db      	ldr	r3, [r3, #12]
 800ed9e:	899b      	ldrh	r3, [r3, #12]
 800eda0:	b29b      	uxth	r3, r3
 800eda2:	4618      	mov	r0, r3
 800eda4:	f7fb fbf7 	bl	800a596 <lwip_htons>
 800eda8:	4603      	mov	r3, r0
 800edaa:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d12f      	bne.n	800ee12 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800edb2:	4b10      	ldr	r3, [pc, #64]	; (800edf4 <tcp_receive+0x968>)
 800edb4:	68db      	ldr	r3, [r3, #12]
 800edb6:	899b      	ldrh	r3, [r3, #12]
 800edb8:	b29c      	uxth	r4, r3
 800edba:	2001      	movs	r0, #1
 800edbc:	f7fb fbeb 	bl	800a596 <lwip_htons>
 800edc0:	4603      	mov	r3, r0
 800edc2:	461a      	mov	r2, r3
 800edc4:	4b0b      	ldr	r3, [pc, #44]	; (800edf4 <tcp_receive+0x968>)
 800edc6:	68db      	ldr	r3, [r3, #12]
 800edc8:	4322      	orrs	r2, r4
 800edca:	b292      	uxth	r2, r2
 800edcc:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800edce:	4b09      	ldr	r3, [pc, #36]	; (800edf4 <tcp_receive+0x968>)
 800edd0:	891c      	ldrh	r4, [r3, #8]
 800edd2:	4b08      	ldr	r3, [pc, #32]	; (800edf4 <tcp_receive+0x968>)
 800edd4:	68db      	ldr	r3, [r3, #12]
 800edd6:	899b      	ldrh	r3, [r3, #12]
 800edd8:	b29b      	uxth	r3, r3
 800edda:	4618      	mov	r0, r3
 800eddc:	f7fb fbdb 	bl	800a596 <lwip_htons>
 800ede0:	4603      	mov	r3, r0
 800ede2:	f003 0303 	and.w	r3, r3, #3
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d00e      	beq.n	800ee08 <tcp_receive+0x97c>
 800edea:	2301      	movs	r3, #1
 800edec:	e00d      	b.n	800ee0a <tcp_receive+0x97e>
 800edee:	bf00      	nop
 800edf0:	20000520 	.word	0x20000520
 800edf4:	20000500 	.word	0x20000500
 800edf8:	2000052a 	.word	0x2000052a
 800edfc:	08015b98 	.word	0x08015b98
 800ee00:	08015e64 	.word	0x08015e64
 800ee04:	08015bdc 	.word	0x08015bdc
 800ee08:	2300      	movs	r3, #0
 800ee0a:	4423      	add	r3, r4
 800ee0c:	b29a      	uxth	r2, r3
 800ee0e:	4b95      	ldr	r3, [pc, #596]	; (800f064 <tcp_receive+0xbd8>)
 800ee10:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800ee12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee14:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800ee16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800ee1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee1e:	f7fd fed7 	bl	800cbd0 <tcp_seg_free>
            while (next &&
 800ee22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d00e      	beq.n	800ee46 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ee28:	4b8e      	ldr	r3, [pc, #568]	; (800f064 <tcp_receive+0xbd8>)
 800ee2a:	881b      	ldrh	r3, [r3, #0]
 800ee2c:	461a      	mov	r2, r3
 800ee2e:	4b8e      	ldr	r3, [pc, #568]	; (800f068 <tcp_receive+0xbdc>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	441a      	add	r2, r3
 800ee34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee36:	68db      	ldr	r3, [r3, #12]
 800ee38:	685b      	ldr	r3, [r3, #4]
 800ee3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee3c:	8909      	ldrh	r1, [r1, #8]
 800ee3e:	440b      	add	r3, r1
 800ee40:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	da9d      	bge.n	800ed82 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ee46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d057      	beq.n	800eefc <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800ee4c:	4b85      	ldr	r3, [pc, #532]	; (800f064 <tcp_receive+0xbd8>)
 800ee4e:	881b      	ldrh	r3, [r3, #0]
 800ee50:	461a      	mov	r2, r3
 800ee52:	4b85      	ldr	r3, [pc, #532]	; (800f068 <tcp_receive+0xbdc>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	441a      	add	r2, r3
 800ee58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee5a:	68db      	ldr	r3, [r3, #12]
 800ee5c:	685b      	ldr	r3, [r3, #4]
 800ee5e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	dd4b      	ble.n	800eefc <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ee64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee66:	68db      	ldr	r3, [r3, #12]
 800ee68:	685b      	ldr	r3, [r3, #4]
 800ee6a:	b29a      	uxth	r2, r3
 800ee6c:	4b7e      	ldr	r3, [pc, #504]	; (800f068 <tcp_receive+0xbdc>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	b29b      	uxth	r3, r3
 800ee72:	1ad3      	subs	r3, r2, r3
 800ee74:	b29a      	uxth	r2, r3
 800ee76:	4b7d      	ldr	r3, [pc, #500]	; (800f06c <tcp_receive+0xbe0>)
 800ee78:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ee7a:	4b7c      	ldr	r3, [pc, #496]	; (800f06c <tcp_receive+0xbe0>)
 800ee7c:	68db      	ldr	r3, [r3, #12]
 800ee7e:	899b      	ldrh	r3, [r3, #12]
 800ee80:	b29b      	uxth	r3, r3
 800ee82:	4618      	mov	r0, r3
 800ee84:	f7fb fb87 	bl	800a596 <lwip_htons>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	f003 0302 	and.w	r3, r3, #2
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d005      	beq.n	800ee9e <tcp_receive+0xa12>
                inseg.len -= 1;
 800ee92:	4b76      	ldr	r3, [pc, #472]	; (800f06c <tcp_receive+0xbe0>)
 800ee94:	891b      	ldrh	r3, [r3, #8]
 800ee96:	3b01      	subs	r3, #1
 800ee98:	b29a      	uxth	r2, r3
 800ee9a:	4b74      	ldr	r3, [pc, #464]	; (800f06c <tcp_receive+0xbe0>)
 800ee9c:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ee9e:	4b73      	ldr	r3, [pc, #460]	; (800f06c <tcp_receive+0xbe0>)
 800eea0:	685b      	ldr	r3, [r3, #4]
 800eea2:	4a72      	ldr	r2, [pc, #456]	; (800f06c <tcp_receive+0xbe0>)
 800eea4:	8912      	ldrh	r2, [r2, #8]
 800eea6:	4611      	mov	r1, r2
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7fc fb2d 	bl	800b508 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800eeae:	4b6f      	ldr	r3, [pc, #444]	; (800f06c <tcp_receive+0xbe0>)
 800eeb0:	891c      	ldrh	r4, [r3, #8]
 800eeb2:	4b6e      	ldr	r3, [pc, #440]	; (800f06c <tcp_receive+0xbe0>)
 800eeb4:	68db      	ldr	r3, [r3, #12]
 800eeb6:	899b      	ldrh	r3, [r3, #12]
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	4618      	mov	r0, r3
 800eebc:	f7fb fb6b 	bl	800a596 <lwip_htons>
 800eec0:	4603      	mov	r3, r0
 800eec2:	f003 0303 	and.w	r3, r3, #3
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d001      	beq.n	800eece <tcp_receive+0xa42>
 800eeca:	2301      	movs	r3, #1
 800eecc:	e000      	b.n	800eed0 <tcp_receive+0xa44>
 800eece:	2300      	movs	r3, #0
 800eed0:	4423      	add	r3, r4
 800eed2:	b29a      	uxth	r2, r3
 800eed4:	4b63      	ldr	r3, [pc, #396]	; (800f064 <tcp_receive+0xbd8>)
 800eed6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800eed8:	4b62      	ldr	r3, [pc, #392]	; (800f064 <tcp_receive+0xbd8>)
 800eeda:	881b      	ldrh	r3, [r3, #0]
 800eedc:	461a      	mov	r2, r3
 800eede:	4b62      	ldr	r3, [pc, #392]	; (800f068 <tcp_receive+0xbdc>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	441a      	add	r2, r3
 800eee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee6:	68db      	ldr	r3, [r3, #12]
 800eee8:	685b      	ldr	r3, [r3, #4]
 800eeea:	429a      	cmp	r2, r3
 800eeec:	d006      	beq.n	800eefc <tcp_receive+0xa70>
 800eeee:	4b60      	ldr	r3, [pc, #384]	; (800f070 <tcp_receive+0xbe4>)
 800eef0:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800eef4:	495f      	ldr	r1, [pc, #380]	; (800f074 <tcp_receive+0xbe8>)
 800eef6:	4860      	ldr	r0, [pc, #384]	; (800f078 <tcp_receive+0xbec>)
 800eef8:	f004 fd2a 	bl	8013950 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef00:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ef02:	4b58      	ldr	r3, [pc, #352]	; (800f064 <tcp_receive+0xbd8>)
 800ef04:	881b      	ldrh	r3, [r3, #0]
 800ef06:	461a      	mov	r2, r3
 800ef08:	4b57      	ldr	r3, [pc, #348]	; (800f068 <tcp_receive+0xbdc>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	441a      	add	r2, r3
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ef16:	4b53      	ldr	r3, [pc, #332]	; (800f064 <tcp_receive+0xbd8>)
 800ef18:	881b      	ldrh	r3, [r3, #0]
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d206      	bcs.n	800ef2c <tcp_receive+0xaa0>
 800ef1e:	4b54      	ldr	r3, [pc, #336]	; (800f070 <tcp_receive+0xbe4>)
 800ef20:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800ef24:	4955      	ldr	r1, [pc, #340]	; (800f07c <tcp_receive+0xbf0>)
 800ef26:	4854      	ldr	r0, [pc, #336]	; (800f078 <tcp_receive+0xbec>)
 800ef28:	f004 fd12 	bl	8013950 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ef30:	4b4c      	ldr	r3, [pc, #304]	; (800f064 <tcp_receive+0xbd8>)
 800ef32:	881b      	ldrh	r3, [r3, #0]
 800ef34:	1ad3      	subs	r3, r2, r3
 800ef36:	b29a      	uxth	r2, r3
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f7fd f9fb 	bl	800c338 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ef42:	4b4a      	ldr	r3, [pc, #296]	; (800f06c <tcp_receive+0xbe0>)
 800ef44:	685b      	ldr	r3, [r3, #4]
 800ef46:	891b      	ldrh	r3, [r3, #8]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d006      	beq.n	800ef5a <tcp_receive+0xace>
          recv_data = inseg.p;
 800ef4c:	4b47      	ldr	r3, [pc, #284]	; (800f06c <tcp_receive+0xbe0>)
 800ef4e:	685b      	ldr	r3, [r3, #4]
 800ef50:	4a4b      	ldr	r2, [pc, #300]	; (800f080 <tcp_receive+0xbf4>)
 800ef52:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ef54:	4b45      	ldr	r3, [pc, #276]	; (800f06c <tcp_receive+0xbe0>)
 800ef56:	2200      	movs	r2, #0
 800ef58:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ef5a:	4b44      	ldr	r3, [pc, #272]	; (800f06c <tcp_receive+0xbe0>)
 800ef5c:	68db      	ldr	r3, [r3, #12]
 800ef5e:	899b      	ldrh	r3, [r3, #12]
 800ef60:	b29b      	uxth	r3, r3
 800ef62:	4618      	mov	r0, r3
 800ef64:	f7fb fb17 	bl	800a596 <lwip_htons>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	f003 0301 	and.w	r3, r3, #1
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	f000 80b4 	beq.w	800f0dc <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800ef74:	4b43      	ldr	r3, [pc, #268]	; (800f084 <tcp_receive+0xbf8>)
 800ef76:	781b      	ldrb	r3, [r3, #0]
 800ef78:	f043 0320 	orr.w	r3, r3, #32
 800ef7c:	b2da      	uxtb	r2, r3
 800ef7e:	4b41      	ldr	r3, [pc, #260]	; (800f084 <tcp_receive+0xbf8>)
 800ef80:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ef82:	e0ab      	b.n	800f0dc <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef88:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef8e:	68db      	ldr	r3, [r3, #12]
 800ef90:	685b      	ldr	r3, [r3, #4]
 800ef92:	4a35      	ldr	r2, [pc, #212]	; (800f068 <tcp_receive+0xbdc>)
 800ef94:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	891b      	ldrh	r3, [r3, #8]
 800ef9a:	461c      	mov	r4, r3
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	68db      	ldr	r3, [r3, #12]
 800efa0:	899b      	ldrh	r3, [r3, #12]
 800efa2:	b29b      	uxth	r3, r3
 800efa4:	4618      	mov	r0, r3
 800efa6:	f7fb faf6 	bl	800a596 <lwip_htons>
 800efaa:	4603      	mov	r3, r0
 800efac:	f003 0303 	and.w	r3, r3, #3
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d001      	beq.n	800efb8 <tcp_receive+0xb2c>
 800efb4:	2301      	movs	r3, #1
 800efb6:	e000      	b.n	800efba <tcp_receive+0xb2e>
 800efb8:	2300      	movs	r3, #0
 800efba:	191a      	adds	r2, r3, r4
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efc0:	441a      	add	r2, r3
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800efca:	461c      	mov	r4, r3
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	891b      	ldrh	r3, [r3, #8]
 800efd0:	461d      	mov	r5, r3
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	68db      	ldr	r3, [r3, #12]
 800efd6:	899b      	ldrh	r3, [r3, #12]
 800efd8:	b29b      	uxth	r3, r3
 800efda:	4618      	mov	r0, r3
 800efdc:	f7fb fadb 	bl	800a596 <lwip_htons>
 800efe0:	4603      	mov	r3, r0
 800efe2:	f003 0303 	and.w	r3, r3, #3
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d001      	beq.n	800efee <tcp_receive+0xb62>
 800efea:	2301      	movs	r3, #1
 800efec:	e000      	b.n	800eff0 <tcp_receive+0xb64>
 800efee:	2300      	movs	r3, #0
 800eff0:	442b      	add	r3, r5
 800eff2:	429c      	cmp	r4, r3
 800eff4:	d206      	bcs.n	800f004 <tcp_receive+0xb78>
 800eff6:	4b1e      	ldr	r3, [pc, #120]	; (800f070 <tcp_receive+0xbe4>)
 800eff8:	f240 52dd 	movw	r2, #1501	; 0x5dd
 800effc:	4922      	ldr	r1, [pc, #136]	; (800f088 <tcp_receive+0xbfc>)
 800effe:	481e      	ldr	r0, [pc, #120]	; (800f078 <tcp_receive+0xbec>)
 800f000:	f004 fca6 	bl	8013950 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	891b      	ldrh	r3, [r3, #8]
 800f008:	461c      	mov	r4, r3
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	68db      	ldr	r3, [r3, #12]
 800f00e:	899b      	ldrh	r3, [r3, #12]
 800f010:	b29b      	uxth	r3, r3
 800f012:	4618      	mov	r0, r3
 800f014:	f7fb fabf 	bl	800a596 <lwip_htons>
 800f018:	4603      	mov	r3, r0
 800f01a:	f003 0303 	and.w	r3, r3, #3
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d001      	beq.n	800f026 <tcp_receive+0xb9a>
 800f022:	2301      	movs	r3, #1
 800f024:	e000      	b.n	800f028 <tcp_receive+0xb9c>
 800f026:	2300      	movs	r3, #0
 800f028:	1919      	adds	r1, r3, r4
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f02e:	b28b      	uxth	r3, r1
 800f030:	1ad3      	subs	r3, r2, r3
 800f032:	b29a      	uxth	r2, r3
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f7fd f97d 	bl	800c338 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	685b      	ldr	r3, [r3, #4]
 800f042:	891b      	ldrh	r3, [r3, #8]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d028      	beq.n	800f09a <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f048:	4b0d      	ldr	r3, [pc, #52]	; (800f080 <tcp_receive+0xbf4>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d01d      	beq.n	800f08c <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 800f050:	4b0b      	ldr	r3, [pc, #44]	; (800f080 <tcp_receive+0xbf4>)
 800f052:	681a      	ldr	r2, [r3, #0]
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	685b      	ldr	r3, [r3, #4]
 800f058:	4619      	mov	r1, r3
 800f05a:	4610      	mov	r0, r2
 800f05c:	f7fc fc94 	bl	800b988 <pbuf_cat>
 800f060:	e018      	b.n	800f094 <tcp_receive+0xc08>
 800f062:	bf00      	nop
 800f064:	2000052a 	.word	0x2000052a
 800f068:	20000520 	.word	0x20000520
 800f06c:	20000500 	.word	0x20000500
 800f070:	08015b98 	.word	0x08015b98
 800f074:	08015e9c 	.word	0x08015e9c
 800f078:	08015bdc 	.word	0x08015bdc
 800f07c:	08015ed8 	.word	0x08015ed8
 800f080:	20000530 	.word	0x20000530
 800f084:	2000052d 	.word	0x2000052d
 800f088:	08015ef8 	.word	0x08015ef8
            } else {
              recv_data = cseg->p;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	685b      	ldr	r3, [r3, #4]
 800f090:	4a71      	ldr	r2, [pc, #452]	; (800f258 <tcp_receive+0xdcc>)
 800f092:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	2200      	movs	r2, #0
 800f098:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	68db      	ldr	r3, [r3, #12]
 800f09e:	899b      	ldrh	r3, [r3, #12]
 800f0a0:	b29b      	uxth	r3, r3
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f7fb fa77 	bl	800a596 <lwip_htons>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	f003 0301 	and.w	r3, r3, #1
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d00d      	beq.n	800f0ce <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f0b2:	4b6a      	ldr	r3, [pc, #424]	; (800f25c <tcp_receive+0xdd0>)
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	f043 0320 	orr.w	r3, r3, #32
 800f0ba:	b2da      	uxtb	r2, r3
 800f0bc:	4b67      	ldr	r3, [pc, #412]	; (800f25c <tcp_receive+0xdd0>)
 800f0be:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	7d1b      	ldrb	r3, [r3, #20]
 800f0c4:	2b04      	cmp	r3, #4
 800f0c6:	d102      	bne.n	800f0ce <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2207      	movs	r2, #7
 800f0cc:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	681a      	ldr	r2, [r3, #0]
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800f0d6:	68f8      	ldr	r0, [r7, #12]
 800f0d8:	f7fd fd7a 	bl	800cbd0 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d008      	beq.n	800f0f6 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0e8:	68db      	ldr	r3, [r3, #12]
 800f0ea:	685a      	ldr	r2, [r3, #4]
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	f43f af47 	beq.w	800ef84 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	7e9b      	ldrb	r3, [r3, #26]
 800f0fa:	f003 0301 	and.w	r3, r3, #1
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d00e      	beq.n	800f120 <tcp_receive+0xc94>
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	7e9b      	ldrb	r3, [r3, #26]
 800f106:	f023 0301 	bic.w	r3, r3, #1
 800f10a:	b2da      	uxtb	r2, r3
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	769a      	strb	r2, [r3, #26]
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	7e9b      	ldrb	r3, [r3, #26]
 800f114:	f043 0302 	orr.w	r3, r3, #2
 800f118:	b2da      	uxtb	r2, r3
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f11e:	e181      	b.n	800f424 <tcp_receive+0xf98>
        tcp_ack(pcb);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	7e9b      	ldrb	r3, [r3, #26]
 800f124:	f043 0301 	orr.w	r3, r3, #1
 800f128:	b2da      	uxtb	r2, r3
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f12e:	e179      	b.n	800f424 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f000 fc91 	bl	800fa58 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d106      	bne.n	800f14c <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f13e:	4848      	ldr	r0, [pc, #288]	; (800f260 <tcp_receive+0xdd4>)
 800f140:	f7fd fd5e 	bl	800cc00 <tcp_seg_copy>
 800f144:	4602      	mov	r2, r0
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800f14a:	e16b      	b.n	800f424 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800f14c:	2300      	movs	r3, #0
 800f14e:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f154:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f156:	e150      	b.n	800f3fa <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800f158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f15a:	68db      	ldr	r3, [r3, #12]
 800f15c:	685a      	ldr	r2, [r3, #4]
 800f15e:	4b41      	ldr	r3, [pc, #260]	; (800f264 <tcp_receive+0xdd8>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	429a      	cmp	r2, r3
 800f164:	d11d      	bne.n	800f1a2 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f166:	4b3e      	ldr	r3, [pc, #248]	; (800f260 <tcp_receive+0xdd4>)
 800f168:	891a      	ldrh	r2, [r3, #8]
 800f16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16c:	891b      	ldrh	r3, [r3, #8]
 800f16e:	429a      	cmp	r2, r3
 800f170:	f240 8148 	bls.w	800f404 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800f174:	483a      	ldr	r0, [pc, #232]	; (800f260 <tcp_receive+0xdd4>)
 800f176:	f7fd fd43 	bl	800cc00 <tcp_seg_copy>
 800f17a:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	f000 8142 	beq.w	800f408 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 800f184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f186:	2b00      	cmp	r3, #0
 800f188:	d003      	beq.n	800f192 <tcp_receive+0xd06>
                    prev->next = cseg;
 800f18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f18c:	68fa      	ldr	r2, [r7, #12]
 800f18e:	601a      	str	r2, [r3, #0]
 800f190:	e002      	b.n	800f198 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	68fa      	ldr	r2, [r7, #12]
 800f196:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f198:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f19a:	68f8      	ldr	r0, [r7, #12]
 800f19c:	f7ff f900 	bl	800e3a0 <tcp_oos_insert_segment>
                }
                break;
 800f1a0:	e132      	b.n	800f408 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d117      	bne.n	800f1d8 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f1a8:	4b2e      	ldr	r3, [pc, #184]	; (800f264 <tcp_receive+0xdd8>)
 800f1aa:	681a      	ldr	r2, [r3, #0]
 800f1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ae:	68db      	ldr	r3, [r3, #12]
 800f1b0:	685b      	ldr	r3, [r3, #4]
 800f1b2:	1ad3      	subs	r3, r2, r3
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	da57      	bge.n	800f268 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800f1b8:	4829      	ldr	r0, [pc, #164]	; (800f260 <tcp_receive+0xdd4>)
 800f1ba:	f7fd fd21 	bl	800cc00 <tcp_seg_copy>
 800f1be:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	f000 8122 	beq.w	800f40c <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	68fa      	ldr	r2, [r7, #12]
 800f1cc:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800f1ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f1d0:	68f8      	ldr	r0, [r7, #12]
 800f1d2:	f7ff f8e5 	bl	800e3a0 <tcp_oos_insert_segment>
                  }
                  break;
 800f1d6:	e119      	b.n	800f40c <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800f1d8:	4b22      	ldr	r3, [pc, #136]	; (800f264 <tcp_receive+0xdd8>)
 800f1da:	681a      	ldr	r2, [r3, #0]
 800f1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1de:	68db      	ldr	r3, [r3, #12]
 800f1e0:	685b      	ldr	r3, [r3, #4]
 800f1e2:	1ad3      	subs	r3, r2, r3
 800f1e4:	3b01      	subs	r3, #1
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	db3e      	blt.n	800f268 <tcp_receive+0xddc>
 800f1ea:	4b1e      	ldr	r3, [pc, #120]	; (800f264 <tcp_receive+0xdd8>)
 800f1ec:	681a      	ldr	r2, [r3, #0]
 800f1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f0:	68db      	ldr	r3, [r3, #12]
 800f1f2:	685b      	ldr	r3, [r3, #4]
 800f1f4:	1ad3      	subs	r3, r2, r3
 800f1f6:	3301      	adds	r3, #1
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	dc35      	bgt.n	800f268 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800f1fc:	4818      	ldr	r0, [pc, #96]	; (800f260 <tcp_receive+0xdd4>)
 800f1fe:	f7fd fcff 	bl	800cc00 <tcp_seg_copy>
 800f202:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	2b00      	cmp	r3, #0
 800f208:	f000 8102 	beq.w	800f410 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f20e:	68db      	ldr	r3, [r3, #12]
 800f210:	685b      	ldr	r3, [r3, #4]
 800f212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f214:	8912      	ldrh	r2, [r2, #8]
 800f216:	441a      	add	r2, r3
 800f218:	4b12      	ldr	r3, [pc, #72]	; (800f264 <tcp_receive+0xdd8>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	1ad3      	subs	r3, r2, r3
 800f21e:	2b00      	cmp	r3, #0
 800f220:	dd12      	ble.n	800f248 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f222:	4b10      	ldr	r3, [pc, #64]	; (800f264 <tcp_receive+0xdd8>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	b29a      	uxth	r2, r3
 800f228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f22a:	68db      	ldr	r3, [r3, #12]
 800f22c:	685b      	ldr	r3, [r3, #4]
 800f22e:	b29b      	uxth	r3, r3
 800f230:	1ad3      	subs	r3, r2, r3
 800f232:	b29a      	uxth	r2, r3
 800f234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f236:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f23a:	685a      	ldr	r2, [r3, #4]
 800f23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f23e:	891b      	ldrh	r3, [r3, #8]
 800f240:	4619      	mov	r1, r3
 800f242:	4610      	mov	r0, r2
 800f244:	f7fc f960 	bl	800b508 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f24a:	68fa      	ldr	r2, [r7, #12]
 800f24c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f24e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f250:	68f8      	ldr	r0, [r7, #12]
 800f252:	f7ff f8a5 	bl	800e3a0 <tcp_oos_insert_segment>
                  }
                  break;
 800f256:	e0db      	b.n	800f410 <tcp_receive+0xf84>
 800f258:	20000530 	.word	0x20000530
 800f25c:	2000052d 	.word	0x2000052d
 800f260:	20000500 	.word	0x20000500
 800f264:	20000520 	.word	0x20000520
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	f040 80bf 	bne.w	800f3f0 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f272:	4b7c      	ldr	r3, [pc, #496]	; (800f464 <tcp_receive+0xfd8>)
 800f274:	681a      	ldr	r2, [r3, #0]
 800f276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f278:	68db      	ldr	r3, [r3, #12]
 800f27a:	685b      	ldr	r3, [r3, #4]
 800f27c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f27e:	2b00      	cmp	r3, #0
 800f280:	f340 80b6 	ble.w	800f3f0 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f286:	68db      	ldr	r3, [r3, #12]
 800f288:	899b      	ldrh	r3, [r3, #12]
 800f28a:	b29b      	uxth	r3, r3
 800f28c:	4618      	mov	r0, r3
 800f28e:	f7fb f982 	bl	800a596 <lwip_htons>
 800f292:	4603      	mov	r3, r0
 800f294:	f003 0301 	and.w	r3, r3, #1
 800f298:	2b00      	cmp	r3, #0
 800f29a:	f040 80bb 	bne.w	800f414 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f29e:	4872      	ldr	r0, [pc, #456]	; (800f468 <tcp_receive+0xfdc>)
 800f2a0:	f7fd fcae 	bl	800cc00 <tcp_seg_copy>
 800f2a4:	4602      	mov	r2, r0
 800f2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a8:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	f000 80b2 	beq.w	800f418 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b6:	68db      	ldr	r3, [r3, #12]
 800f2b8:	685b      	ldr	r3, [r3, #4]
 800f2ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2bc:	8912      	ldrh	r2, [r2, #8]
 800f2be:	441a      	add	r2, r3
 800f2c0:	4b68      	ldr	r3, [pc, #416]	; (800f464 <tcp_receive+0xfd8>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	1ad3      	subs	r3, r2, r3
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	dd12      	ble.n	800f2f0 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f2ca:	4b66      	ldr	r3, [pc, #408]	; (800f464 <tcp_receive+0xfd8>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	b29a      	uxth	r2, r3
 800f2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d2:	68db      	ldr	r3, [r3, #12]
 800f2d4:	685b      	ldr	r3, [r3, #4]
 800f2d6:	b29b      	uxth	r3, r3
 800f2d8:	1ad3      	subs	r3, r2, r3
 800f2da:	b29a      	uxth	r2, r3
 800f2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2de:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e2:	685a      	ldr	r2, [r3, #4]
 800f2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e6:	891b      	ldrh	r3, [r3, #8]
 800f2e8:	4619      	mov	r1, r3
 800f2ea:	4610      	mov	r0, r2
 800f2ec:	f7fc f90c 	bl	800b508 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f2f0:	4b5e      	ldr	r3, [pc, #376]	; (800f46c <tcp_receive+0xfe0>)
 800f2f2:	881b      	ldrh	r3, [r3, #0]
 800f2f4:	461a      	mov	r2, r3
 800f2f6:	4b5b      	ldr	r3, [pc, #364]	; (800f464 <tcp_receive+0xfd8>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	441a      	add	r2, r3
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f300:	6879      	ldr	r1, [r7, #4]
 800f302:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f304:	440b      	add	r3, r1
 800f306:	1ad3      	subs	r3, r2, r3
 800f308:	2b00      	cmp	r3, #0
 800f30a:	f340 8085 	ble.w	800f418 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	68db      	ldr	r3, [r3, #12]
 800f314:	899b      	ldrh	r3, [r3, #12]
 800f316:	b29b      	uxth	r3, r3
 800f318:	4618      	mov	r0, r3
 800f31a:	f7fb f93c 	bl	800a596 <lwip_htons>
 800f31e:	4603      	mov	r3, r0
 800f320:	f003 0301 	and.w	r3, r3, #1
 800f324:	2b00      	cmp	r3, #0
 800f326:	d01e      	beq.n	800f366 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	68db      	ldr	r3, [r3, #12]
 800f32e:	899b      	ldrh	r3, [r3, #12]
 800f330:	b29b      	uxth	r3, r3
 800f332:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f336:	b29c      	uxth	r4, r3
 800f338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	68db      	ldr	r3, [r3, #12]
 800f33e:	899b      	ldrh	r3, [r3, #12]
 800f340:	b29b      	uxth	r3, r3
 800f342:	4618      	mov	r0, r3
 800f344:	f7fb f927 	bl	800a596 <lwip_htons>
 800f348:	4603      	mov	r3, r0
 800f34a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f34e:	b29b      	uxth	r3, r3
 800f350:	4618      	mov	r0, r3
 800f352:	f7fb f920 	bl	800a596 <lwip_htons>
 800f356:	4603      	mov	r3, r0
 800f358:	461a      	mov	r2, r3
 800f35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	68db      	ldr	r3, [r3, #12]
 800f360:	4322      	orrs	r2, r4
 800f362:	b292      	uxth	r2, r2
 800f364:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f36a:	b29a      	uxth	r2, r3
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f370:	4413      	add	r3, r2
 800f372:	b299      	uxth	r1, r3
 800f374:	4b3b      	ldr	r3, [pc, #236]	; (800f464 <tcp_receive+0xfd8>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	b29a      	uxth	r2, r3
 800f37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	1a8a      	subs	r2, r1, r2
 800f380:	b292      	uxth	r2, r2
 800f382:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	685a      	ldr	r2, [r3, #4]
 800f38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	891b      	ldrh	r3, [r3, #8]
 800f390:	4619      	mov	r1, r3
 800f392:	4610      	mov	r0, r2
 800f394:	f7fc f8b8 	bl	800b508 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	891c      	ldrh	r4, [r3, #8]
 800f39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	68db      	ldr	r3, [r3, #12]
 800f3a4:	899b      	ldrh	r3, [r3, #12]
 800f3a6:	b29b      	uxth	r3, r3
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f7fb f8f4 	bl	800a596 <lwip_htons>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	f003 0303 	and.w	r3, r3, #3
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d001      	beq.n	800f3bc <tcp_receive+0xf30>
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	e000      	b.n	800f3be <tcp_receive+0xf32>
 800f3bc:	2300      	movs	r3, #0
 800f3be:	4423      	add	r3, r4
 800f3c0:	b29a      	uxth	r2, r3
 800f3c2:	4b2a      	ldr	r3, [pc, #168]	; (800f46c <tcp_receive+0xfe0>)
 800f3c4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f3c6:	4b29      	ldr	r3, [pc, #164]	; (800f46c <tcp_receive+0xfe0>)
 800f3c8:	881b      	ldrh	r3, [r3, #0]
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	4b25      	ldr	r3, [pc, #148]	; (800f464 <tcp_receive+0xfd8>)
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	441a      	add	r2, r3
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3d6:	6879      	ldr	r1, [r7, #4]
 800f3d8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f3da:	440b      	add	r3, r1
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d01b      	beq.n	800f418 <tcp_receive+0xf8c>
 800f3e0:	4b23      	ldr	r3, [pc, #140]	; (800f470 <tcp_receive+0xfe4>)
 800f3e2:	f240 627a 	movw	r2, #1658	; 0x67a
 800f3e6:	4923      	ldr	r1, [pc, #140]	; (800f474 <tcp_receive+0xfe8>)
 800f3e8:	4823      	ldr	r0, [pc, #140]	; (800f478 <tcp_receive+0xfec>)
 800f3ea:	f004 fab1 	bl	8013950 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f3ee:	e013      	b.n	800f418 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 800f3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f2:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	f47f aeab 	bne.w	800f158 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 800f402:	e00f      	b.n	800f424 <tcp_receive+0xf98>
                break;
 800f404:	bf00      	nop
 800f406:	e00d      	b.n	800f424 <tcp_receive+0xf98>
                break;
 800f408:	bf00      	nop
 800f40a:	e00b      	b.n	800f424 <tcp_receive+0xf98>
                  break;
 800f40c:	bf00      	nop
 800f40e:	e009      	b.n	800f424 <tcp_receive+0xf98>
                  break;
 800f410:	bf00      	nop
 800f412:	e007      	b.n	800f424 <tcp_receive+0xf98>
                  break;
 800f414:	bf00      	nop
 800f416:	e005      	b.n	800f424 <tcp_receive+0xf98>
                break;
 800f418:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800f41a:	e003      	b.n	800f424 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f41c:	6878      	ldr	r0, [r7, #4]
 800f41e:	f000 fb1b 	bl	800fa58 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f422:	e01a      	b.n	800f45a <tcp_receive+0xfce>
 800f424:	e019      	b.n	800f45a <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f426:	4b0f      	ldr	r3, [pc, #60]	; (800f464 <tcp_receive+0xfd8>)
 800f428:	681a      	ldr	r2, [r3, #0]
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f42e:	1ad3      	subs	r3, r2, r3
 800f430:	2b00      	cmp	r3, #0
 800f432:	db0a      	blt.n	800f44a <tcp_receive+0xfbe>
 800f434:	4b0b      	ldr	r3, [pc, #44]	; (800f464 <tcp_receive+0xfd8>)
 800f436:	681a      	ldr	r2, [r3, #0]
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f43c:	6879      	ldr	r1, [r7, #4]
 800f43e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f440:	440b      	add	r3, r1
 800f442:	1ad3      	subs	r3, r2, r3
 800f444:	3301      	adds	r3, #1
 800f446:	2b00      	cmp	r3, #0
 800f448:	dd07      	ble.n	800f45a <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	7e9b      	ldrb	r3, [r3, #26]
 800f44e:	f043 0302 	orr.w	r3, r3, #2
 800f452:	b2da      	uxtb	r2, r3
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800f458:	e7ff      	b.n	800f45a <tcp_receive+0xfce>
 800f45a:	bf00      	nop
 800f45c:	3734      	adds	r7, #52	; 0x34
 800f45e:	46bd      	mov	sp, r7
 800f460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f462:	bf00      	nop
 800f464:	20000520 	.word	0x20000520
 800f468:	20000500 	.word	0x20000500
 800f46c:	2000052a 	.word	0x2000052a
 800f470:	08015b98 	.word	0x08015b98
 800f474:	08015e64 	.word	0x08015e64
 800f478:	08015bdc 	.word	0x08015bdc

0800f47c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800f47c:	b480      	push	{r7}
 800f47e:	b083      	sub	sp, #12
 800f480:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800f482:	4b17      	ldr	r3, [pc, #92]	; (800f4e0 <tcp_getoptbyte+0x64>)
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d005      	beq.n	800f496 <tcp_getoptbyte+0x1a>
 800f48a:	4b16      	ldr	r3, [pc, #88]	; (800f4e4 <tcp_getoptbyte+0x68>)
 800f48c:	881a      	ldrh	r2, [r3, #0]
 800f48e:	4b16      	ldr	r3, [pc, #88]	; (800f4e8 <tcp_getoptbyte+0x6c>)
 800f490:	881b      	ldrh	r3, [r3, #0]
 800f492:	429a      	cmp	r2, r3
 800f494:	d20e      	bcs.n	800f4b4 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800f496:	4b15      	ldr	r3, [pc, #84]	; (800f4ec <tcp_getoptbyte+0x70>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	3314      	adds	r3, #20
 800f49c:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800f49e:	4b11      	ldr	r3, [pc, #68]	; (800f4e4 <tcp_getoptbyte+0x68>)
 800f4a0:	881b      	ldrh	r3, [r3, #0]
 800f4a2:	1c5a      	adds	r2, r3, #1
 800f4a4:	b291      	uxth	r1, r2
 800f4a6:	4a0f      	ldr	r2, [pc, #60]	; (800f4e4 <tcp_getoptbyte+0x68>)
 800f4a8:	8011      	strh	r1, [r2, #0]
 800f4aa:	461a      	mov	r2, r3
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	4413      	add	r3, r2
 800f4b0:	781b      	ldrb	r3, [r3, #0]
 800f4b2:	e010      	b.n	800f4d6 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800f4b4:	4b0b      	ldr	r3, [pc, #44]	; (800f4e4 <tcp_getoptbyte+0x68>)
 800f4b6:	881b      	ldrh	r3, [r3, #0]
 800f4b8:	1c5a      	adds	r2, r3, #1
 800f4ba:	b291      	uxth	r1, r2
 800f4bc:	4a09      	ldr	r2, [pc, #36]	; (800f4e4 <tcp_getoptbyte+0x68>)
 800f4be:	8011      	strh	r1, [r2, #0]
 800f4c0:	b2da      	uxtb	r2, r3
 800f4c2:	4b09      	ldr	r3, [pc, #36]	; (800f4e8 <tcp_getoptbyte+0x6c>)
 800f4c4:	881b      	ldrh	r3, [r3, #0]
 800f4c6:	b2db      	uxtb	r3, r3
 800f4c8:	1ad3      	subs	r3, r2, r3
 800f4ca:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800f4cc:	4b04      	ldr	r3, [pc, #16]	; (800f4e0 <tcp_getoptbyte+0x64>)
 800f4ce:	681a      	ldr	r2, [r3, #0]
 800f4d0:	79fb      	ldrb	r3, [r7, #7]
 800f4d2:	4413      	add	r3, r2
 800f4d4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	370c      	adds	r7, #12
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bc80      	pop	{r7}
 800f4de:	4770      	bx	lr
 800f4e0:	20000518 	.word	0x20000518
 800f4e4:	2000051c 	.word	0x2000051c
 800f4e8:	20000516 	.word	0x20000516
 800f4ec:	20000510 	.word	0x20000510

0800f4f0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b084      	sub	sp, #16
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f4f8:	4b2e      	ldr	r3, [pc, #184]	; (800f5b4 <tcp_parseopt+0xc4>)
 800f4fa:	881b      	ldrh	r3, [r3, #0]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d055      	beq.n	800f5ac <tcp_parseopt+0xbc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f500:	4b2d      	ldr	r3, [pc, #180]	; (800f5b8 <tcp_parseopt+0xc8>)
 800f502:	2200      	movs	r2, #0
 800f504:	801a      	strh	r2, [r3, #0]
 800f506:	e045      	b.n	800f594 <tcp_parseopt+0xa4>
      u8_t opt = tcp_getoptbyte();
 800f508:	f7ff ffb8 	bl	800f47c <tcp_getoptbyte>
 800f50c:	4603      	mov	r3, r0
 800f50e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f510:	7bfb      	ldrb	r3, [r7, #15]
 800f512:	2b02      	cmp	r3, #2
 800f514:	d006      	beq.n	800f524 <tcp_parseopt+0x34>
 800f516:	2b02      	cmp	r3, #2
 800f518:	dc2b      	bgt.n	800f572 <tcp_parseopt+0x82>
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d041      	beq.n	800f5a2 <tcp_parseopt+0xb2>
 800f51e:	2b01      	cmp	r3, #1
 800f520:	d127      	bne.n	800f572 <tcp_parseopt+0x82>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case LWIP_TCP_OPT_NOP:
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 800f522:	e037      	b.n	800f594 <tcp_parseopt+0xa4>
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f524:	f7ff ffaa 	bl	800f47c <tcp_getoptbyte>
 800f528:	4603      	mov	r3, r0
 800f52a:	2b04      	cmp	r3, #4
 800f52c:	d13b      	bne.n	800f5a6 <tcp_parseopt+0xb6>
 800f52e:	4b22      	ldr	r3, [pc, #136]	; (800f5b8 <tcp_parseopt+0xc8>)
 800f530:	881b      	ldrh	r3, [r3, #0]
 800f532:	3301      	adds	r3, #1
 800f534:	4a1f      	ldr	r2, [pc, #124]	; (800f5b4 <tcp_parseopt+0xc4>)
 800f536:	8812      	ldrh	r2, [r2, #0]
 800f538:	4293      	cmp	r3, r2
 800f53a:	da34      	bge.n	800f5a6 <tcp_parseopt+0xb6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800f53c:	f7ff ff9e 	bl	800f47c <tcp_getoptbyte>
 800f540:	4603      	mov	r3, r0
 800f542:	b29b      	uxth	r3, r3
 800f544:	021b      	lsls	r3, r3, #8
 800f546:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800f548:	f7ff ff98 	bl	800f47c <tcp_getoptbyte>
 800f54c:	4603      	mov	r3, r0
 800f54e:	b29a      	uxth	r2, r3
 800f550:	89bb      	ldrh	r3, [r7, #12]
 800f552:	4313      	orrs	r3, r2
 800f554:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f556:	89bb      	ldrh	r3, [r7, #12]
 800f558:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f55c:	d804      	bhi.n	800f568 <tcp_parseopt+0x78>
 800f55e:	89bb      	ldrh	r3, [r7, #12]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d001      	beq.n	800f568 <tcp_parseopt+0x78>
 800f564:	89ba      	ldrh	r2, [r7, #12]
 800f566:	e001      	b.n	800f56c <tcp_parseopt+0x7c>
 800f568:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800f570:	e010      	b.n	800f594 <tcp_parseopt+0xa4>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800f572:	f7ff ff83 	bl	800f47c <tcp_getoptbyte>
 800f576:	4603      	mov	r3, r0
 800f578:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800f57a:	7afb      	ldrb	r3, [r7, #11]
 800f57c:	2b01      	cmp	r3, #1
 800f57e:	d914      	bls.n	800f5aa <tcp_parseopt+0xba>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800f580:	7afb      	ldrb	r3, [r7, #11]
 800f582:	b29a      	uxth	r2, r3
 800f584:	4b0c      	ldr	r3, [pc, #48]	; (800f5b8 <tcp_parseopt+0xc8>)
 800f586:	881b      	ldrh	r3, [r3, #0]
 800f588:	4413      	add	r3, r2
 800f58a:	b29b      	uxth	r3, r3
 800f58c:	3b02      	subs	r3, #2
 800f58e:	b29a      	uxth	r2, r3
 800f590:	4b09      	ldr	r3, [pc, #36]	; (800f5b8 <tcp_parseopt+0xc8>)
 800f592:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f594:	4b08      	ldr	r3, [pc, #32]	; (800f5b8 <tcp_parseopt+0xc8>)
 800f596:	881a      	ldrh	r2, [r3, #0]
 800f598:	4b06      	ldr	r3, [pc, #24]	; (800f5b4 <tcp_parseopt+0xc4>)
 800f59a:	881b      	ldrh	r3, [r3, #0]
 800f59c:	429a      	cmp	r2, r3
 800f59e:	d3b3      	bcc.n	800f508 <tcp_parseopt+0x18>
 800f5a0:	e004      	b.n	800f5ac <tcp_parseopt+0xbc>
        return;
 800f5a2:	bf00      	nop
 800f5a4:	e002      	b.n	800f5ac <tcp_parseopt+0xbc>
          return;
 800f5a6:	bf00      	nop
 800f5a8:	e000      	b.n	800f5ac <tcp_parseopt+0xbc>
          return;
 800f5aa:	bf00      	nop
      }
    }
  }
}
 800f5ac:	3710      	adds	r7, #16
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bd80      	pop	{r7, pc}
 800f5b2:	bf00      	nop
 800f5b4:	20000514 	.word	0x20000514
 800f5b8:	2000051c 	.word	0x2000051c

0800f5bc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f5bc:	b480      	push	{r7}
 800f5be:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f5c0:	4b05      	ldr	r3, [pc, #20]	; (800f5d8 <tcp_trigger_input_pcb_close+0x1c>)
 800f5c2:	781b      	ldrb	r3, [r3, #0]
 800f5c4:	f043 0310 	orr.w	r3, r3, #16
 800f5c8:	b2da      	uxtb	r2, r3
 800f5ca:	4b03      	ldr	r3, [pc, #12]	; (800f5d8 <tcp_trigger_input_pcb_close+0x1c>)
 800f5cc:	701a      	strb	r2, [r3, #0]
}
 800f5ce:	bf00      	nop
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bc80      	pop	{r7}
 800f5d4:	4770      	bx	lr
 800f5d6:	bf00      	nop
 800f5d8:	2000052d 	.word	0x2000052d

0800f5dc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b086      	sub	sp, #24
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	60f8      	str	r0, [r7, #12]
 800f5e4:	607b      	str	r3, [r7, #4]
 800f5e6:	460b      	mov	r3, r1
 800f5e8:	817b      	strh	r3, [r7, #10]
 800f5ea:	4613      	mov	r3, r2
 800f5ec:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f5ee:	897a      	ldrh	r2, [r7, #10]
 800f5f0:	893b      	ldrh	r3, [r7, #8]
 800f5f2:	4413      	add	r3, r2
 800f5f4:	b29b      	uxth	r3, r3
 800f5f6:	3314      	adds	r3, #20
 800f5f8:	b29b      	uxth	r3, r3
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	4619      	mov	r1, r3
 800f5fe:	2001      	movs	r0, #1
 800f600:	f7fb fd84 	bl	800b10c <pbuf_alloc>
 800f604:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d056      	beq.n	800f6ba <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f60c:	897b      	ldrh	r3, [r7, #10]
 800f60e:	3313      	adds	r3, #19
 800f610:	697a      	ldr	r2, [r7, #20]
 800f612:	8952      	ldrh	r2, [r2, #10]
 800f614:	4293      	cmp	r3, r2
 800f616:	db05      	blt.n	800f624 <tcp_output_alloc_header+0x48>
 800f618:	4b2a      	ldr	r3, [pc, #168]	; (800f6c4 <tcp_output_alloc_header+0xe8>)
 800f61a:	2272      	movs	r2, #114	; 0x72
 800f61c:	492a      	ldr	r1, [pc, #168]	; (800f6c8 <tcp_output_alloc_header+0xec>)
 800f61e:	482b      	ldr	r0, [pc, #172]	; (800f6cc <tcp_output_alloc_header+0xf0>)
 800f620:	f004 f996 	bl	8013950 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	685b      	ldr	r3, [r3, #4]
 800f628:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	8adb      	ldrh	r3, [r3, #22]
 800f62e:	4618      	mov	r0, r3
 800f630:	f7fa ffb1 	bl	800a596 <lwip_htons>
 800f634:	4603      	mov	r3, r0
 800f636:	461a      	mov	r2, r3
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	8b1b      	ldrh	r3, [r3, #24]
 800f640:	4618      	mov	r0, r3
 800f642:	f7fa ffa8 	bl	800a596 <lwip_htons>
 800f646:	4603      	mov	r3, r0
 800f648:	461a      	mov	r2, r3
 800f64a:	693b      	ldr	r3, [r7, #16]
 800f64c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f64e:	693b      	ldr	r3, [r7, #16]
 800f650:	687a      	ldr	r2, [r7, #4]
 800f652:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f658:	4618      	mov	r0, r3
 800f65a:	f7fa ffa9 	bl	800a5b0 <lwip_htonl>
 800f65e:	4602      	mov	r2, r0
 800f660:	693b      	ldr	r3, [r7, #16]
 800f662:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800f664:	897b      	ldrh	r3, [r7, #10]
 800f666:	089b      	lsrs	r3, r3, #2
 800f668:	b29b      	uxth	r3, r3
 800f66a:	3305      	adds	r3, #5
 800f66c:	b29b      	uxth	r3, r3
 800f66e:	031b      	lsls	r3, r3, #12
 800f670:	b29b      	uxth	r3, r3
 800f672:	f043 0310 	orr.w	r3, r3, #16
 800f676:	b29b      	uxth	r3, r3
 800f678:	4618      	mov	r0, r3
 800f67a:	f7fa ff8c 	bl	800a596 <lwip_htons>
 800f67e:	4603      	mov	r3, r0
 800f680:	461a      	mov	r2, r3
 800f682:	693b      	ldr	r3, [r7, #16]
 800f684:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f68a:	4618      	mov	r0, r3
 800f68c:	f7fa ff83 	bl	800a596 <lwip_htons>
 800f690:	4603      	mov	r3, r0
 800f692:	461a      	mov	r2, r3
 800f694:	693b      	ldr	r3, [r7, #16]
 800f696:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f698:	693b      	ldr	r3, [r7, #16]
 800f69a:	2200      	movs	r2, #0
 800f69c:	741a      	strb	r2, [r3, #16]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	749a      	strb	r2, [r3, #18]
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6b0:	68fa      	ldr	r2, [r7, #12]
 800f6b2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f6b4:	441a      	add	r2, r3
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800f6ba:	697b      	ldr	r3, [r7, #20]
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3718      	adds	r7, #24
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}
 800f6c4:	08015f20 	.word	0x08015f20
 800f6c8:	08015f54 	.word	0x08015f54
 800f6cc:	08015f84 	.word	0x08015f84

0800f6d0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f6d0:	b590      	push	{r4, r7, lr}
 800f6d2:	b085      	sub	sp, #20
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d02d      	beq.n	800f73c <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f6e4:	60fb      	str	r3, [r7, #12]
 800f6e6:	e002      	b.n	800f6ee <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d1f8      	bne.n	800f6e8 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	68db      	ldr	r3, [r3, #12]
 800f6fa:	899b      	ldrh	r3, [r3, #12]
 800f6fc:	b29b      	uxth	r3, r3
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7fa ff49 	bl	800a596 <lwip_htons>
 800f704:	4603      	mov	r3, r0
 800f706:	f003 0307 	and.w	r3, r3, #7
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d116      	bne.n	800f73c <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	68db      	ldr	r3, [r3, #12]
 800f712:	899b      	ldrh	r3, [r3, #12]
 800f714:	b29c      	uxth	r4, r3
 800f716:	2001      	movs	r0, #1
 800f718:	f7fa ff3d 	bl	800a596 <lwip_htons>
 800f71c:	4603      	mov	r3, r0
 800f71e:	461a      	mov	r2, r3
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	68db      	ldr	r3, [r3, #12]
 800f724:	4322      	orrs	r2, r4
 800f726:	b292      	uxth	r2, r2
 800f728:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	7e9b      	ldrb	r3, [r3, #26]
 800f72e:	f043 0320 	orr.w	r3, r3, #32
 800f732:	b2da      	uxtb	r2, r3
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800f738:	2300      	movs	r3, #0
 800f73a:	e004      	b.n	800f746 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f73c:	2101      	movs	r1, #1
 800f73e:	6878      	ldr	r0, [r7, #4]
 800f740:	f000 f88e 	bl	800f860 <tcp_enqueue_flags>
 800f744:	4603      	mov	r3, r0
}
 800f746:	4618      	mov	r0, r3
 800f748:	3714      	adds	r7, #20
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd90      	pop	{r4, r7, pc}
	...

0800f750 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800f750:	b590      	push	{r4, r7, lr}
 800f752:	b087      	sub	sp, #28
 800f754:	af00      	add	r7, sp, #0
 800f756:	60f8      	str	r0, [r7, #12]
 800f758:	60b9      	str	r1, [r7, #8]
 800f75a:	603b      	str	r3, [r7, #0]
 800f75c:	4613      	mov	r3, r2
 800f75e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f760:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f764:	009b      	lsls	r3, r3, #2
 800f766:	b2db      	uxtb	r3, r3
 800f768:	f003 0304 	and.w	r3, r3, #4
 800f76c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f76e:	2003      	movs	r0, #3
 800f770:	f7fb faba 	bl	800ace8 <memp_malloc>
 800f774:	6138      	str	r0, [r7, #16]
 800f776:	693b      	ldr	r3, [r7, #16]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d104      	bne.n	800f786 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f77c:	68b8      	ldr	r0, [r7, #8]
 800f77e:	f7fc f837 	bl	800b7f0 <pbuf_free>
    return NULL;
 800f782:	2300      	movs	r3, #0
 800f784:	e061      	b.n	800f84a <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800f786:	693b      	ldr	r3, [r7, #16]
 800f788:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f78c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f78e:	693b      	ldr	r3, [r7, #16]
 800f790:	2200      	movs	r2, #0
 800f792:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f794:	693b      	ldr	r3, [r7, #16]
 800f796:	68ba      	ldr	r2, [r7, #8]
 800f798:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	891a      	ldrh	r2, [r3, #8]
 800f79e:	7dfb      	ldrb	r3, [r7, #23]
 800f7a0:	b29b      	uxth	r3, r3
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d205      	bcs.n	800f7b2 <tcp_create_segment+0x62>
 800f7a6:	4b2b      	ldr	r3, [pc, #172]	; (800f854 <tcp_create_segment+0x104>)
 800f7a8:	22ba      	movs	r2, #186	; 0xba
 800f7aa:	492b      	ldr	r1, [pc, #172]	; (800f858 <tcp_create_segment+0x108>)
 800f7ac:	482b      	ldr	r0, [pc, #172]	; (800f85c <tcp_create_segment+0x10c>)
 800f7ae:	f004 f8cf 	bl	8013950 <iprintf>
  seg->len = p->tot_len - optlen;
 800f7b2:	68bb      	ldr	r3, [r7, #8]
 800f7b4:	891a      	ldrh	r2, [r3, #8]
 800f7b6:	7dfb      	ldrb	r3, [r7, #23]
 800f7b8:	b29b      	uxth	r3, r3
 800f7ba:	1ad3      	subs	r3, r2, r3
 800f7bc:	b29a      	uxth	r2, r3
 800f7be:	693b      	ldr	r3, [r7, #16]
 800f7c0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800f7c2:	2114      	movs	r1, #20
 800f7c4:	68b8      	ldr	r0, [r7, #8]
 800f7c6:	f7fb ffef 	bl	800b7a8 <pbuf_header>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d004      	beq.n	800f7da <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f7d0:	6938      	ldr	r0, [r7, #16]
 800f7d2:	f7fd f9fd 	bl	800cbd0 <tcp_seg_free>
    return NULL;
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	e037      	b.n	800f84a <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f7da:	693b      	ldr	r3, [r7, #16]
 800f7dc:	685b      	ldr	r3, [r3, #4]
 800f7de:	685a      	ldr	r2, [r3, #4]
 800f7e0:	693b      	ldr	r3, [r7, #16]
 800f7e2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	8ada      	ldrh	r2, [r3, #22]
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	68dc      	ldr	r4, [r3, #12]
 800f7ec:	4610      	mov	r0, r2
 800f7ee:	f7fa fed2 	bl	800a596 <lwip_htons>
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	8b1a      	ldrh	r2, [r3, #24]
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	68dc      	ldr	r4, [r3, #12]
 800f7fe:	4610      	mov	r0, r2
 800f800:	f7fa fec9 	bl	800a596 <lwip_htons>
 800f804:	4603      	mov	r3, r0
 800f806:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f808:	693b      	ldr	r3, [r7, #16]
 800f80a:	68dc      	ldr	r4, [r3, #12]
 800f80c:	6838      	ldr	r0, [r7, #0]
 800f80e:	f7fa fecf 	bl	800a5b0 <lwip_htonl>
 800f812:	4603      	mov	r3, r0
 800f814:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800f816:	7dfb      	ldrb	r3, [r7, #23]
 800f818:	089b      	lsrs	r3, r3, #2
 800f81a:	b2db      	uxtb	r3, r3
 800f81c:	b29b      	uxth	r3, r3
 800f81e:	3305      	adds	r3, #5
 800f820:	b29b      	uxth	r3, r3
 800f822:	031b      	lsls	r3, r3, #12
 800f824:	b29a      	uxth	r2, r3
 800f826:	79fb      	ldrb	r3, [r7, #7]
 800f828:	b29b      	uxth	r3, r3
 800f82a:	4313      	orrs	r3, r2
 800f82c:	b29a      	uxth	r2, r3
 800f82e:	693b      	ldr	r3, [r7, #16]
 800f830:	68dc      	ldr	r4, [r3, #12]
 800f832:	4610      	mov	r0, r2
 800f834:	f7fa feaf 	bl	800a596 <lwip_htons>
 800f838:	4603      	mov	r3, r0
 800f83a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f83c:	693b      	ldr	r3, [r7, #16]
 800f83e:	68db      	ldr	r3, [r3, #12]
 800f840:	2200      	movs	r2, #0
 800f842:	749a      	strb	r2, [r3, #18]
 800f844:	2200      	movs	r2, #0
 800f846:	74da      	strb	r2, [r3, #19]
  return seg;
 800f848:	693b      	ldr	r3, [r7, #16]
}
 800f84a:	4618      	mov	r0, r3
 800f84c:	371c      	adds	r7, #28
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd90      	pop	{r4, r7, pc}
 800f852:	bf00      	nop
 800f854:	08015f20 	.word	0x08015f20
 800f858:	08015fac 	.word	0x08015fac
 800f85c:	08015f84 	.word	0x08015f84

0800f860 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b08a      	sub	sp, #40	; 0x28
 800f864:	af02      	add	r7, sp, #8
 800f866:	6078      	str	r0, [r7, #4]
 800f868:	460b      	mov	r3, r1
 800f86a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f86c:	2300      	movs	r3, #0
 800f86e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f870:	2300      	movs	r3, #0
 800f872:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f874:	78fb      	ldrb	r3, [r7, #3]
 800f876:	f003 0303 	and.w	r3, r3, #3
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d106      	bne.n	800f88c <tcp_enqueue_flags+0x2c>
 800f87e:	4b6f      	ldr	r3, [pc, #444]	; (800fa3c <tcp_enqueue_flags+0x1dc>)
 800f880:	f240 321a 	movw	r2, #794	; 0x31a
 800f884:	496e      	ldr	r1, [pc, #440]	; (800fa40 <tcp_enqueue_flags+0x1e0>)
 800f886:	486f      	ldr	r0, [pc, #444]	; (800fa44 <tcp_enqueue_flags+0x1e4>)
 800f888:	f004 f862 	bl	8013950 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f892:	2b08      	cmp	r3, #8
 800f894:	d806      	bhi.n	800f8a4 <tcp_enqueue_flags+0x44>
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f89c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	d90e      	bls.n	800f8c2 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800f8a4:	78fb      	ldrb	r3, [r7, #3]
 800f8a6:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d109      	bne.n	800f8c2 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	7e9b      	ldrb	r3, [r3, #26]
 800f8b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f8b6:	b2da      	uxtb	r2, r3
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800f8bc:	f04f 33ff 	mov.w	r3, #4294967295
 800f8c0:	e0b7      	b.n	800fa32 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800f8c2:	78fb      	ldrb	r3, [r7, #3]
 800f8c4:	f003 0302 	and.w	r3, r3, #2
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d001      	beq.n	800f8d0 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800f8cc:	2301      	movs	r3, #1
 800f8ce:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f8d0:	7ffb      	ldrb	r3, [r7, #31]
 800f8d2:	009b      	lsls	r3, r3, #2
 800f8d4:	b2db      	uxtb	r3, r3
 800f8d6:	f003 0304 	and.w	r3, r3, #4
 800f8da:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f8dc:	7dfb      	ldrb	r3, [r7, #23]
 800f8de:	b29b      	uxth	r3, r3
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	4619      	mov	r1, r3
 800f8e4:	2000      	movs	r0, #0
 800f8e6:	f7fb fc11 	bl	800b10c <pbuf_alloc>
 800f8ea:	6138      	str	r0, [r7, #16]
 800f8ec:	693b      	ldr	r3, [r7, #16]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d109      	bne.n	800f906 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	7e9b      	ldrb	r3, [r3, #26]
 800f8f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f8fa:	b2da      	uxtb	r2, r3
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f900:	f04f 33ff 	mov.w	r3, #4294967295
 800f904:	e095      	b.n	800fa32 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	895a      	ldrh	r2, [r3, #10]
 800f90a:	7dfb      	ldrb	r3, [r7, #23]
 800f90c:	b29b      	uxth	r3, r3
 800f90e:	429a      	cmp	r2, r3
 800f910:	d206      	bcs.n	800f920 <tcp_enqueue_flags+0xc0>
 800f912:	4b4a      	ldr	r3, [pc, #296]	; (800fa3c <tcp_enqueue_flags+0x1dc>)
 800f914:	f44f 7250 	mov.w	r2, #832	; 0x340
 800f918:	494b      	ldr	r1, [pc, #300]	; (800fa48 <tcp_enqueue_flags+0x1e8>)
 800f91a:	484a      	ldr	r0, [pc, #296]	; (800fa44 <tcp_enqueue_flags+0x1e4>)
 800f91c:	f004 f818 	bl	8013950 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800f924:	78fa      	ldrb	r2, [r7, #3]
 800f926:	7ffb      	ldrb	r3, [r7, #31]
 800f928:	9300      	str	r3, [sp, #0]
 800f92a:	460b      	mov	r3, r1
 800f92c:	6939      	ldr	r1, [r7, #16]
 800f92e:	6878      	ldr	r0, [r7, #4]
 800f930:	f7ff ff0e 	bl	800f750 <tcp_create_segment>
 800f934:	60f8      	str	r0, [r7, #12]
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d109      	bne.n	800f950 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	7e9b      	ldrb	r3, [r3, #26]
 800f940:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f944:	b2da      	uxtb	r2, r3
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f94a:	f04f 33ff 	mov.w	r3, #4294967295
 800f94e:	e070      	b.n	800fa32 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	68db      	ldr	r3, [r3, #12]
 800f954:	f003 0303 	and.w	r3, r3, #3
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d006      	beq.n	800f96a <tcp_enqueue_flags+0x10a>
 800f95c:	4b37      	ldr	r3, [pc, #220]	; (800fa3c <tcp_enqueue_flags+0x1dc>)
 800f95e:	f240 3249 	movw	r2, #841	; 0x349
 800f962:	493a      	ldr	r1, [pc, #232]	; (800fa4c <tcp_enqueue_flags+0x1ec>)
 800f964:	4837      	ldr	r0, [pc, #220]	; (800fa44 <tcp_enqueue_flags+0x1e4>)
 800f966:	f003 fff3 	bl	8013950 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	891b      	ldrh	r3, [r3, #8]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d006      	beq.n	800f980 <tcp_enqueue_flags+0x120>
 800f972:	4b32      	ldr	r3, [pc, #200]	; (800fa3c <tcp_enqueue_flags+0x1dc>)
 800f974:	f240 324a 	movw	r2, #842	; 0x34a
 800f978:	4935      	ldr	r1, [pc, #212]	; (800fa50 <tcp_enqueue_flags+0x1f0>)
 800f97a:	4832      	ldr	r0, [pc, #200]	; (800fa44 <tcp_enqueue_flags+0x1e4>)
 800f97c:	f003 ffe8 	bl	8013950 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f984:	2b00      	cmp	r3, #0
 800f986:	d103      	bne.n	800f990 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	68fa      	ldr	r2, [r7, #12]
 800f98c:	669a      	str	r2, [r3, #104]	; 0x68
 800f98e:	e00d      	b.n	800f9ac <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f994:	61bb      	str	r3, [r7, #24]
 800f996:	e002      	b.n	800f99e <tcp_enqueue_flags+0x13e>
 800f998:	69bb      	ldr	r3, [r7, #24]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	61bb      	str	r3, [r7, #24]
 800f99e:	69bb      	ldr	r3, [r7, #24]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d1f8      	bne.n	800f998 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800f9a6:	69bb      	ldr	r3, [r7, #24]
 800f9a8:	68fa      	ldr	r2, [r7, #12]
 800f9aa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f9b4:	78fb      	ldrb	r3, [r7, #3]
 800f9b6:	f003 0302 	and.w	r3, r3, #2
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d104      	bne.n	800f9c8 <tcp_enqueue_flags+0x168>
 800f9be:	78fb      	ldrb	r3, [r7, #3]
 800f9c0:	f003 0301 	and.w	r3, r3, #1
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d004      	beq.n	800f9d2 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9cc:	1c5a      	adds	r2, r3, #1
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f9d2:	78fb      	ldrb	r3, [r7, #3]
 800f9d4:	f003 0301 	and.w	r3, r3, #1
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d006      	beq.n	800f9ea <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	7e9b      	ldrb	r3, [r3, #26]
 800f9e0:	f043 0320 	orr.w	r3, r3, #32
 800f9e4:	b2da      	uxtb	r2, r3
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	685b      	ldr	r3, [r3, #4]
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f7fb ff92 	bl	800b918 <pbuf_clen>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	461a      	mov	r2, r3
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f9fe:	4413      	add	r3, r2
 800fa00:	b29a      	uxth	r2, r3
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d00e      	beq.n	800fa30 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d10a      	bne.n	800fa30 <tcp_enqueue_flags+0x1d0>
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d106      	bne.n	800fa30 <tcp_enqueue_flags+0x1d0>
 800fa22:	4b06      	ldr	r3, [pc, #24]	; (800fa3c <tcp_enqueue_flags+0x1dc>)
 800fa24:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800fa28:	490a      	ldr	r1, [pc, #40]	; (800fa54 <tcp_enqueue_flags+0x1f4>)
 800fa2a:	4806      	ldr	r0, [pc, #24]	; (800fa44 <tcp_enqueue_flags+0x1e4>)
 800fa2c:	f003 ff90 	bl	8013950 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800fa30:	2300      	movs	r3, #0
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3720      	adds	r7, #32
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}
 800fa3a:	bf00      	nop
 800fa3c:	08015f20 	.word	0x08015f20
 800fa40:	08016224 	.word	0x08016224
 800fa44:	08015f84 	.word	0x08015f84
 800fa48:	0801627c 	.word	0x0801627c
 800fa4c:	080162b8 	.word	0x080162b8
 800fa50:	080162d0 	.word	0x080162d0
 800fa54:	080162fc 	.word	0x080162fc

0800fa58 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800fa58:	b590      	push	{r4, r7, lr}
 800fa5a:	b08b      	sub	sp, #44	; 0x2c
 800fa5c:	af04      	add	r7, sp, #16
 800fa5e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800fa60:	2300      	movs	r3, #0
 800fa62:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800fa64:	7dbb      	ldrb	r3, [r7, #22]
 800fa66:	b29c      	uxth	r4, r3
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f7fa fd9f 	bl	800a5b0 <lwip_htonl>
 800fa72:	4603      	mov	r3, r0
 800fa74:	2200      	movs	r2, #0
 800fa76:	4621      	mov	r1, r4
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f7ff fdaf 	bl	800f5dc <tcp_output_alloc_header>
 800fa7e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fa80:	693b      	ldr	r3, [r7, #16]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d109      	bne.n	800fa9a <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	7e9b      	ldrb	r3, [r3, #26]
 800fa8a:	f043 0303 	orr.w	r3, r3, #3
 800fa8e:	b2da      	uxtb	r2, r3
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800fa94:	f06f 0301 	mvn.w	r3, #1
 800fa98:	e036      	b.n	800fb08 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	3304      	adds	r3, #4
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f002 fad8 	bl	8012054 <ip4_route>
 800faa4:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d102      	bne.n	800fab2 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800faac:	23fc      	movs	r3, #252	; 0xfc
 800faae:	75fb      	strb	r3, [r7, #23]
 800fab0:	e012      	b.n	800fad8 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800fab2:	6879      	ldr	r1, [r7, #4]
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	1d18      	adds	r0, r3, #4
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	7a9c      	ldrb	r4, [r3, #10]
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	7a5b      	ldrb	r3, [r3, #9]
 800fac0:	68fa      	ldr	r2, [r7, #12]
 800fac2:	9202      	str	r2, [sp, #8]
 800fac4:	2206      	movs	r2, #6
 800fac6:	9201      	str	r2, [sp, #4]
 800fac8:	9300      	str	r3, [sp, #0]
 800faca:	4623      	mov	r3, r4
 800facc:	4602      	mov	r2, r0
 800face:	6938      	ldr	r0, [r7, #16]
 800fad0:	f002 fc6a 	bl	80123a8 <ip4_output_if>
 800fad4:	4603      	mov	r3, r0
 800fad6:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800fad8:	6938      	ldr	r0, [r7, #16]
 800fada:	f7fb fe89 	bl	800b7f0 <pbuf_free>

  if (err != ERR_OK) {
 800fade:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d007      	beq.n	800faf6 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	7e9b      	ldrb	r3, [r3, #26]
 800faea:	f043 0303 	orr.w	r3, r3, #3
 800faee:	b2da      	uxtb	r2, r3
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	769a      	strb	r2, [r3, #26]
 800faf4:	e006      	b.n	800fb04 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	7e9b      	ldrb	r3, [r3, #26]
 800fafa:	f023 0303 	bic.w	r3, r3, #3
 800fafe:	b2da      	uxtb	r2, r3
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800fb04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	371c      	adds	r7, #28
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd90      	pop	{r4, r7, pc}

0800fb10 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800fb10:	b5b0      	push	{r4, r5, r7, lr}
 800fb12:	b08a      	sub	sp, #40	; 0x28
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	7d1b      	ldrb	r3, [r3, #20]
 800fb1c:	2b01      	cmp	r3, #1
 800fb1e:	d106      	bne.n	800fb2e <tcp_output+0x1e>
 800fb20:	4ba8      	ldr	r3, [pc, #672]	; (800fdc4 <tcp_output+0x2b4>)
 800fb22:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800fb26:	49a8      	ldr	r1, [pc, #672]	; (800fdc8 <tcp_output+0x2b8>)
 800fb28:	48a8      	ldr	r0, [pc, #672]	; (800fdcc <tcp_output+0x2bc>)
 800fb2a:	f003 ff11 	bl	8013950 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800fb2e:	4ba8      	ldr	r3, [pc, #672]	; (800fdd0 <tcp_output+0x2c0>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	687a      	ldr	r2, [r7, #4]
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d101      	bne.n	800fb3c <tcp_output+0x2c>
    return ERR_OK;
 800fb38:	2300      	movs	r3, #0
 800fb3a:	e1cb      	b.n	800fed4 <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	bf28      	it	cs
 800fb4c:	4613      	movcs	r3, r2
 800fb4e:	b29b      	uxth	r3, r3
 800fb50:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fb56:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	7e9b      	ldrb	r3, [r3, #26]
 800fb5c:	f003 0302 	and.w	r3, r3, #2
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d017      	beq.n	800fb94 <tcp_output+0x84>
 800fb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d00f      	beq.n	800fb8a <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800fb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb6c:	68db      	ldr	r3, [r3, #12]
 800fb6e:	685b      	ldr	r3, [r3, #4]
 800fb70:	4618      	mov	r0, r3
 800fb72:	f7fa fd1d 	bl	800a5b0 <lwip_htonl>
 800fb76:	4602      	mov	r2, r0
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb7c:	1ad3      	subs	r3, r2, r3
 800fb7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb80:	8912      	ldrh	r2, [r2, #8]
 800fb82:	4413      	add	r3, r2
     (seg == NULL ||
 800fb84:	69ba      	ldr	r2, [r7, #24]
 800fb86:	429a      	cmp	r2, r3
 800fb88:	d204      	bcs.n	800fb94 <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f7ff ff64 	bl	800fa58 <tcp_send_empty_ack>
 800fb90:	4603      	mov	r3, r0
 800fb92:	e19f      	b.n	800fed4 <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb98:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800fb9a:	6a3b      	ldr	r3, [r7, #32]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d007      	beq.n	800fbb0 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 800fba0:	e002      	b.n	800fba8 <tcp_output+0x98>
 800fba2:	6a3b      	ldr	r3, [r7, #32]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	623b      	str	r3, [r7, #32]
 800fba8:	6a3b      	ldr	r3, [r7, #32]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d1f8      	bne.n	800fba2 <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	3304      	adds	r3, #4
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f002 fa4d 	bl	8012054 <ip4_route>
 800fbba:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d102      	bne.n	800fbc8 <tcp_output+0xb8>
    return ERR_RTE;
 800fbc2:	f06f 0303 	mvn.w	r3, #3
 800fbc6:	e185      	b.n	800fed4 <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d003      	beq.n	800fbd6 <tcp_output+0xc6>
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d111      	bne.n	800fbfa <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d002      	beq.n	800fbe2 <tcp_output+0xd2>
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	3304      	adds	r3, #4
 800fbe0:	e000      	b.n	800fbe4 <tcp_output+0xd4>
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800fbe6:	693b      	ldr	r3, [r7, #16]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d102      	bne.n	800fbf2 <tcp_output+0xe2>
      return ERR_RTE;
 800fbec:	f06f 0303 	mvn.w	r3, #3
 800fbf0:	e170      	b.n	800fed4 <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800fbf2:	693b      	ldr	r3, [r7, #16]
 800fbf4:	681a      	ldr	r2, [r3, #0]
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800fbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	f000 813f 	beq.w	800fe80 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800fc02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc04:	68db      	ldr	r3, [r3, #12]
 800fc06:	685b      	ldr	r3, [r3, #4]
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f7fa fcd1 	bl	800a5b0 <lwip_htonl>
 800fc0e:	4602      	mov	r2, r0
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc14:	1ad3      	subs	r3, r2, r3
 800fc16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc18:	8912      	ldrh	r2, [r2, #8]
 800fc1a:	4413      	add	r3, r2
  if (seg != NULL &&
 800fc1c:	69ba      	ldr	r2, [r7, #24]
 800fc1e:	429a      	cmp	r2, r3
 800fc20:	f080 812e 	bcs.w	800fe80 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800fc24:	69bb      	ldr	r3, [r7, #24]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	f000 812a 	beq.w	800fe80 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fc32:	461a      	mov	r2, r3
 800fc34:	69bb      	ldr	r3, [r7, #24]
 800fc36:	4293      	cmp	r3, r2
 800fc38:	f040 8122 	bne.w	800fe80 <tcp_output+0x370>
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	f040 811d 	bne.w	800fe80 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	f040 812c 	bne.w	800feaa <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2200      	movs	r2, #0
 800fc56:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2201      	movs	r2, #1
 800fc5e:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800fc62:	e122      	b.n	800feaa <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800fc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc66:	68db      	ldr	r3, [r3, #12]
 800fc68:	899b      	ldrh	r3, [r3, #12]
 800fc6a:	b29b      	uxth	r3, r3
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f7fa fc92 	bl	800a596 <lwip_htons>
 800fc72:	4603      	mov	r3, r0
 800fc74:	f003 0304 	and.w	r3, r3, #4
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d006      	beq.n	800fc8a <tcp_output+0x17a>
 800fc7c:	4b51      	ldr	r3, [pc, #324]	; (800fdc4 <tcp_output+0x2b4>)
 800fc7e:	f240 4245 	movw	r2, #1093	; 0x445
 800fc82:	4954      	ldr	r1, [pc, #336]	; (800fdd4 <tcp_output+0x2c4>)
 800fc84:	4851      	ldr	r0, [pc, #324]	; (800fdcc <tcp_output+0x2bc>)
 800fc86:	f003 fe63 	bl	8013950 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d01f      	beq.n	800fcd2 <tcp_output+0x1c2>
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	7e9b      	ldrb	r3, [r3, #26]
 800fc96:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d119      	bne.n	800fcd2 <tcp_output+0x1c2>
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d00b      	beq.n	800fcbe <tcp_output+0x1ae>
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d110      	bne.n	800fcd2 <tcp_output+0x1c2>
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fcb4:	891a      	ldrh	r2, [r3, #8]
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	d209      	bcs.n	800fcd2 <tcp_output+0x1c2>
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d004      	beq.n	800fcd2 <tcp_output+0x1c2>
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fcce:	2b08      	cmp	r3, #8
 800fcd0:	d901      	bls.n	800fcd6 <tcp_output+0x1c6>
 800fcd2:	2301      	movs	r3, #1
 800fcd4:	e000      	b.n	800fcd8 <tcp_output+0x1c8>
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d106      	bne.n	800fcea <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	7e9b      	ldrb	r3, [r3, #26]
 800fce0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	f000 80e2 	beq.w	800feae <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	7d1b      	ldrb	r3, [r3, #20]
 800fcee:	2b02      	cmp	r3, #2
 800fcf0:	d00d      	beq.n	800fd0e <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800fcf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcf4:	68db      	ldr	r3, [r3, #12]
 800fcf6:	899b      	ldrh	r3, [r3, #12]
 800fcf8:	b29c      	uxth	r4, r3
 800fcfa:	2010      	movs	r0, #16
 800fcfc:	f7fa fc4b 	bl	800a596 <lwip_htons>
 800fd00:	4603      	mov	r3, r0
 800fd02:	461a      	mov	r2, r3
 800fd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd06:	68db      	ldr	r3, [r3, #12]
 800fd08:	4322      	orrs	r2, r4
 800fd0a:	b292      	uxth	r2, r2
 800fd0c:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800fd0e:	697a      	ldr	r2, [r7, #20]
 800fd10:	6879      	ldr	r1, [r7, #4]
 800fd12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd14:	f000 f8e2 	bl	800fedc <tcp_output_segment>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800fd1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d009      	beq.n	800fd38 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	7e9b      	ldrb	r3, [r3, #26]
 800fd28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fd2c:	b2da      	uxtb	r2, r3
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	769a      	strb	r2, [r3, #26]
      return err;
 800fd32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd36:	e0cd      	b.n	800fed4 <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 800fd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd3a:	681a      	ldr	r2, [r3, #0]
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	7d1b      	ldrb	r3, [r3, #20]
 800fd44:	2b02      	cmp	r3, #2
 800fd46:	d006      	beq.n	800fd56 <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	7e9b      	ldrb	r3, [r3, #26]
 800fd4c:	f023 0303 	bic.w	r3, r3, #3
 800fd50:	b2da      	uxtb	r2, r3
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd58:	68db      	ldr	r3, [r3, #12]
 800fd5a:	685b      	ldr	r3, [r3, #4]
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f7fa fc27 	bl	800a5b0 <lwip_htonl>
 800fd62:	4604      	mov	r4, r0
 800fd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd66:	891b      	ldrh	r3, [r3, #8]
 800fd68:	461d      	mov	r5, r3
 800fd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd6c:	68db      	ldr	r3, [r3, #12]
 800fd6e:	899b      	ldrh	r3, [r3, #12]
 800fd70:	b29b      	uxth	r3, r3
 800fd72:	4618      	mov	r0, r3
 800fd74:	f7fa fc0f 	bl	800a596 <lwip_htons>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	f003 0303 	and.w	r3, r3, #3
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d001      	beq.n	800fd86 <tcp_output+0x276>
 800fd82:	2301      	movs	r3, #1
 800fd84:	e000      	b.n	800fd88 <tcp_output+0x278>
 800fd86:	2300      	movs	r3, #0
 800fd88:	442b      	add	r3, r5
 800fd8a:	4423      	add	r3, r4
 800fd8c:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	1ad3      	subs	r3, r2, r3
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	da02      	bge.n	800fda0 <tcp_output+0x290>
      pcb->snd_nxt = snd_nxt;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	68ba      	ldr	r2, [r7, #8]
 800fd9e:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800fda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda2:	891b      	ldrh	r3, [r3, #8]
 800fda4:	461c      	mov	r4, r3
 800fda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda8:	68db      	ldr	r3, [r3, #12]
 800fdaa:	899b      	ldrh	r3, [r3, #12]
 800fdac:	b29b      	uxth	r3, r3
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7fa fbf1 	bl	800a596 <lwip_htons>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	f003 0303 	and.w	r3, r3, #3
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d00c      	beq.n	800fdd8 <tcp_output+0x2c8>
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	e00b      	b.n	800fdda <tcp_output+0x2ca>
 800fdc2:	bf00      	nop
 800fdc4:	08015f20 	.word	0x08015f20
 800fdc8:	08016324 	.word	0x08016324
 800fdcc:	08015f84 	.word	0x08015f84
 800fdd0:	20006cb0 	.word	0x20006cb0
 800fdd4:	0801634c 	.word	0x0801634c
 800fdd8:	2300      	movs	r3, #0
 800fdda:	4423      	add	r3, r4
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d049      	beq.n	800fe74 <tcp_output+0x364>
      seg->next = NULL;
 800fde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fde2:	2200      	movs	r2, #0
 800fde4:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d105      	bne.n	800fdfa <tcp_output+0x2ea>
        pcb->unacked = seg;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdf2:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800fdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf6:	623b      	str	r3, [r7, #32]
 800fdf8:	e03f      	b.n	800fe7a <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800fdfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdfc:	68db      	ldr	r3, [r3, #12]
 800fdfe:	685b      	ldr	r3, [r3, #4]
 800fe00:	4618      	mov	r0, r3
 800fe02:	f7fa fbd5 	bl	800a5b0 <lwip_htonl>
 800fe06:	4604      	mov	r4, r0
 800fe08:	6a3b      	ldr	r3, [r7, #32]
 800fe0a:	68db      	ldr	r3, [r3, #12]
 800fe0c:	685b      	ldr	r3, [r3, #4]
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7fa fbce 	bl	800a5b0 <lwip_htonl>
 800fe14:	4603      	mov	r3, r0
 800fe16:	1ae3      	subs	r3, r4, r3
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	da24      	bge.n	800fe66 <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	336c      	adds	r3, #108	; 0x6c
 800fe20:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fe22:	e002      	b.n	800fe2a <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800fe24:	69fb      	ldr	r3, [r7, #28]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fe2a:	69fb      	ldr	r3, [r7, #28]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d011      	beq.n	800fe56 <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fe32:	69fb      	ldr	r3, [r7, #28]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	68db      	ldr	r3, [r3, #12]
 800fe38:	685b      	ldr	r3, [r3, #4]
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	f7fa fbb8 	bl	800a5b0 <lwip_htonl>
 800fe40:	4604      	mov	r4, r0
 800fe42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe44:	68db      	ldr	r3, [r3, #12]
 800fe46:	685b      	ldr	r3, [r3, #4]
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f7fa fbb1 	bl	800a5b0 <lwip_htonl>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	dbe6      	blt.n	800fe24 <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 800fe56:	69fb      	ldr	r3, [r7, #28]
 800fe58:	681a      	ldr	r2, [r3, #0]
 800fe5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe5c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800fe5e:	69fb      	ldr	r3, [r7, #28]
 800fe60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe62:	601a      	str	r2, [r3, #0]
 800fe64:	e009      	b.n	800fe7a <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800fe66:	6a3b      	ldr	r3, [r7, #32]
 800fe68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe6a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800fe6c:	6a3b      	ldr	r3, [r7, #32]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	623b      	str	r3, [r7, #32]
 800fe72:	e002      	b.n	800fe7a <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800fe74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe76:	f7fc feab 	bl	800cbd0 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fe7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800fe80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d015      	beq.n	800feb2 <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800fe86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe88:	68db      	ldr	r3, [r3, #12]
 800fe8a:	685b      	ldr	r3, [r3, #4]
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f7fa fb8f 	bl	800a5b0 <lwip_htonl>
 800fe92:	4602      	mov	r2, r0
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe98:	1ad3      	subs	r3, r2, r3
 800fe9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe9c:	8912      	ldrh	r2, [r2, #8]
 800fe9e:	4413      	add	r3, r2
  while (seg != NULL &&
 800fea0:	69ba      	ldr	r2, [r7, #24]
 800fea2:	429a      	cmp	r2, r3
 800fea4:	f4bf aede 	bcs.w	800fc64 <tcp_output+0x154>
  }
output_done:
 800fea8:	e003      	b.n	800feb2 <tcp_output+0x3a2>
    goto output_done;
 800feaa:	bf00      	nop
 800feac:	e002      	b.n	800feb4 <tcp_output+0x3a4>
      break;
 800feae:	bf00      	nop
 800feb0:	e000      	b.n	800feb4 <tcp_output+0x3a4>
output_done:
 800feb2:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d103      	bne.n	800fec4 <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2200      	movs	r2, #0
 800fec0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	7e9b      	ldrb	r3, [r3, #26]
 800fec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fecc:	b2da      	uxtb	r2, r3
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800fed2:	2300      	movs	r3, #0
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	3728      	adds	r7, #40	; 0x28
 800fed8:	46bd      	mov	sp, r7
 800feda:	bdb0      	pop	{r4, r5, r7, pc}

0800fedc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800fedc:	b5b0      	push	{r4, r5, r7, lr}
 800fede:	b08c      	sub	sp, #48	; 0x30
 800fee0:	af04      	add	r7, sp, #16
 800fee2:	60f8      	str	r0, [r7, #12]
 800fee4:	60b9      	str	r1, [r7, #8]
 800fee6:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	685b      	ldr	r3, [r3, #4]
 800feec:	89db      	ldrh	r3, [r3, #14]
 800feee:	2b01      	cmp	r3, #1
 800fef0:	d001      	beq.n	800fef6 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800fef2:	2300      	movs	r3, #0
 800fef4:	e08a      	b.n	801000c <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	68dc      	ldr	r4, [r3, #12]
 800fefe:	4610      	mov	r0, r2
 800ff00:	f7fa fb56 	bl	800a5b0 <lwip_htonl>
 800ff04:	4603      	mov	r3, r0
 800ff06:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ff08:	68bb      	ldr	r3, [r7, #8]
 800ff0a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	68dc      	ldr	r4, [r3, #12]
 800ff10:	4610      	mov	r0, r2
 800ff12:	f7fa fb40 	bl	800a596 <lwip_htons>
 800ff16:	4603      	mov	r3, r0
 800ff18:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ff1a:	68bb      	ldr	r3, [r7, #8]
 800ff1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff1e:	68ba      	ldr	r2, [r7, #8]
 800ff20:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ff22:	441a      	add	r2, r3
 800ff24:	68bb      	ldr	r3, [r7, #8]
 800ff26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	68db      	ldr	r3, [r3, #12]
 800ff2c:	3314      	adds	r3, #20
 800ff2e:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	7a9b      	ldrb	r3, [r3, #10]
 800ff34:	f003 0301 	and.w	r3, r3, #1
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d014      	beq.n	800ff66 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800ff3c:	68bb      	ldr	r3, [r7, #8]
 800ff3e:	3304      	adds	r3, #4
 800ff40:	4619      	mov	r1, r3
 800ff42:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ff46:	f7fd f8ab 	bl	800d0a0 <tcp_eff_send_mss_impl>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ff4e:	8b7b      	ldrh	r3, [r7, #26]
 800ff50:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800ff54:	4618      	mov	r0, r3
 800ff56:	f7fa fb2b 	bl	800a5b0 <lwip_htonl>
 800ff5a:	4602      	mov	r2, r0
 800ff5c:	69fb      	ldr	r3, [r7, #28]
 800ff5e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ff60:	69fb      	ldr	r3, [r7, #28]
 800ff62:	3304      	adds	r3, #4
 800ff64:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	da02      	bge.n	800ff76 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	2200      	movs	r2, #0
 800ff74:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d10c      	bne.n	800ff98 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800ff7e:	4b25      	ldr	r3, [pc, #148]	; (8010014 <tcp_output_segment+0x138>)
 800ff80:	681a      	ldr	r2, [r3, #0]
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	68db      	ldr	r3, [r3, #12]
 800ff8a:	685b      	ldr	r3, [r3, #4]
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f7fa fb0f 	bl	800a5b0 <lwip_htonl>
 800ff92:	4602      	mov	r2, r0
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	68da      	ldr	r2, [r3, #12]
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	685b      	ldr	r3, [r3, #4]
 800ffa0:	685b      	ldr	r3, [r3, #4]
 800ffa2:	1ad3      	subs	r3, r2, r3
 800ffa4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	685b      	ldr	r3, [r3, #4]
 800ffaa:	8959      	ldrh	r1, [r3, #10]
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	685b      	ldr	r3, [r3, #4]
 800ffb0:	8b3a      	ldrh	r2, [r7, #24]
 800ffb2:	1a8a      	subs	r2, r1, r2
 800ffb4:	b292      	uxth	r2, r2
 800ffb6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	685b      	ldr	r3, [r3, #4]
 800ffbc:	8919      	ldrh	r1, [r3, #8]
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	8b3a      	ldrh	r2, [r7, #24]
 800ffc4:	1a8a      	subs	r2, r1, r2
 800ffc6:	b292      	uxth	r2, r2
 800ffc8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	685b      	ldr	r3, [r3, #4]
 800ffce:	68fa      	ldr	r2, [r7, #12]
 800ffd0:	68d2      	ldr	r2, [r2, #12]
 800ffd2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	68db      	ldr	r3, [r3, #12]
 800ffd8:	2200      	movs	r2, #0
 800ffda:	741a      	strb	r2, [r3, #16]
 800ffdc:	2200      	movs	r2, #0
 800ffde:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	6858      	ldr	r0, [r3, #4]
 800ffe4:	68b9      	ldr	r1, [r7, #8]
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	1d1c      	adds	r4, r3, #4
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	7a9d      	ldrb	r5, [r3, #10]
 800ffee:	68bb      	ldr	r3, [r7, #8]
 800fff0:	7a5b      	ldrb	r3, [r3, #9]
 800fff2:	687a      	ldr	r2, [r7, #4]
 800fff4:	9202      	str	r2, [sp, #8]
 800fff6:	2206      	movs	r2, #6
 800fff8:	9201      	str	r2, [sp, #4]
 800fffa:	9300      	str	r3, [sp, #0]
 800fffc:	462b      	mov	r3, r5
 800fffe:	4622      	mov	r2, r4
 8010000:	f002 f9d2 	bl	80123a8 <ip4_output_if>
 8010004:	4603      	mov	r3, r0
 8010006:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8010008:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801000c:	4618      	mov	r0, r3
 801000e:	3720      	adds	r7, #32
 8010010:	46bd      	mov	sp, r7
 8010012:	bdb0      	pop	{r4, r5, r7, pc}
 8010014:	20006ca0 	.word	0x20006ca0

08010018 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b08c      	sub	sp, #48	; 0x30
 801001c:	af04      	add	r7, sp, #16
 801001e:	60f8      	str	r0, [r7, #12]
 8010020:	60b9      	str	r1, [r7, #8]
 8010022:	607a      	str	r2, [r7, #4]
 8010024:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8010026:	2200      	movs	r2, #0
 8010028:	2114      	movs	r1, #20
 801002a:	2001      	movs	r0, #1
 801002c:	f7fb f86e 	bl	800b10c <pbuf_alloc>
 8010030:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8010032:	69fb      	ldr	r3, [r7, #28]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d05b      	beq.n	80100f0 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010038:	69fb      	ldr	r3, [r7, #28]
 801003a:	895b      	ldrh	r3, [r3, #10]
 801003c:	2b13      	cmp	r3, #19
 801003e:	d806      	bhi.n	801004e <tcp_rst+0x36>
 8010040:	4b2d      	ldr	r3, [pc, #180]	; (80100f8 <tcp_rst+0xe0>)
 8010042:	f240 524c 	movw	r2, #1356	; 0x54c
 8010046:	492d      	ldr	r1, [pc, #180]	; (80100fc <tcp_rst+0xe4>)
 8010048:	482d      	ldr	r0, [pc, #180]	; (8010100 <tcp_rst+0xe8>)
 801004a:	f003 fc81 	bl	8013950 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 801004e:	69fb      	ldr	r3, [r7, #28]
 8010050:	685b      	ldr	r3, [r3, #4]
 8010052:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8010054:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010056:	4618      	mov	r0, r3
 8010058:	f7fa fa9d 	bl	800a596 <lwip_htons>
 801005c:	4603      	mov	r3, r0
 801005e:	461a      	mov	r2, r3
 8010060:	69bb      	ldr	r3, [r7, #24]
 8010062:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8010064:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010066:	4618      	mov	r0, r3
 8010068:	f7fa fa95 	bl	800a596 <lwip_htons>
 801006c:	4603      	mov	r3, r0
 801006e:	461a      	mov	r2, r3
 8010070:	69bb      	ldr	r3, [r7, #24]
 8010072:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8010074:	68f8      	ldr	r0, [r7, #12]
 8010076:	f7fa fa9b 	bl	800a5b0 <lwip_htonl>
 801007a:	4602      	mov	r2, r0
 801007c:	69bb      	ldr	r3, [r7, #24]
 801007e:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8010080:	68b8      	ldr	r0, [r7, #8]
 8010082:	f7fa fa95 	bl	800a5b0 <lwip_htonl>
 8010086:	4602      	mov	r2, r0
 8010088:	69bb      	ldr	r3, [r7, #24]
 801008a:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 801008c:	f245 0014 	movw	r0, #20500	; 0x5014
 8010090:	f7fa fa81 	bl	800a596 <lwip_htons>
 8010094:	4603      	mov	r3, r0
 8010096:	461a      	mov	r2, r3
 8010098:	69bb      	ldr	r3, [r7, #24]
 801009a:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 801009c:	69bb      	ldr	r3, [r7, #24]
 801009e:	2200      	movs	r2, #0
 80100a0:	f042 0208 	orr.w	r2, r2, #8
 80100a4:	739a      	strb	r2, [r3, #14]
 80100a6:	2200      	movs	r2, #0
 80100a8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80100ac:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 80100ae:	69bb      	ldr	r3, [r7, #24]
 80100b0:	2200      	movs	r2, #0
 80100b2:	741a      	strb	r2, [r3, #16]
 80100b4:	2200      	movs	r2, #0
 80100b6:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 80100b8:	69bb      	ldr	r3, [r7, #24]
 80100ba:	2200      	movs	r2, #0
 80100bc:	749a      	strb	r2, [r3, #18]
 80100be:	2200      	movs	r2, #0
 80100c0:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 80100c2:	6838      	ldr	r0, [r7, #0]
 80100c4:	f001 ffc6 	bl	8012054 <ip4_route>
 80100c8:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 80100ca:	697b      	ldr	r3, [r7, #20]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d00b      	beq.n	80100e8 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 80100d0:	697b      	ldr	r3, [r7, #20]
 80100d2:	9302      	str	r3, [sp, #8]
 80100d4:	2306      	movs	r3, #6
 80100d6:	9301      	str	r3, [sp, #4]
 80100d8:	2300      	movs	r3, #0
 80100da:	9300      	str	r3, [sp, #0]
 80100dc:	23ff      	movs	r3, #255	; 0xff
 80100de:	683a      	ldr	r2, [r7, #0]
 80100e0:	6879      	ldr	r1, [r7, #4]
 80100e2:	69f8      	ldr	r0, [r7, #28]
 80100e4:	f002 f960 	bl	80123a8 <ip4_output_if>
  }
  pbuf_free(p);
 80100e8:	69f8      	ldr	r0, [r7, #28]
 80100ea:	f7fb fb81 	bl	800b7f0 <pbuf_free>
 80100ee:	e000      	b.n	80100f2 <tcp_rst+0xda>
    return;
 80100f0:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80100f2:	3720      	adds	r7, #32
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bd80      	pop	{r7, pc}
 80100f8:	08015f20 	.word	0x08015f20
 80100fc:	08015f54 	.word	0x08015f54
 8010100:	08015f84 	.word	0x08015f84

08010104 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b084      	sub	sp, #16
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010110:	2b00      	cmp	r3, #0
 8010112:	d029      	beq.n	8010168 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010118:	60fb      	str	r3, [r7, #12]
 801011a:	e002      	b.n	8010122 <tcp_rexmit_rto+0x1e>
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	60fb      	str	r3, [r7, #12]
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d1f8      	bne.n	801011c <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2200      	movs	r2, #0
 801013e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010146:	2bff      	cmp	r3, #255	; 0xff
 8010148:	d007      	beq.n	801015a <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010150:	3301      	adds	r3, #1
 8010152:	b2da      	uxtb	r2, r3
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2200      	movs	r2, #0
 801015e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	f7ff fcd5 	bl	800fb10 <tcp_output>
 8010166:	e000      	b.n	801016a <tcp_rexmit_rto+0x66>
    return;
 8010168:	bf00      	nop
}
 801016a:	3710      	adds	r7, #16
 801016c:	46bd      	mov	sp, r7
 801016e:	bd80      	pop	{r7, pc}

08010170 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010170:	b590      	push	{r4, r7, lr}
 8010172:	b085      	sub	sp, #20
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801017c:	2b00      	cmp	r3, #0
 801017e:	d043      	beq.n	8010208 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010184:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8010186:	68bb      	ldr	r3, [r7, #8]
 8010188:	681a      	ldr	r2, [r3, #0]
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	3368      	adds	r3, #104	; 0x68
 8010192:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010194:	e002      	b.n	801019c <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d011      	beq.n	80101c8 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	68db      	ldr	r3, [r3, #12]
 80101aa:	685b      	ldr	r3, [r3, #4]
 80101ac:	4618      	mov	r0, r3
 80101ae:	f7fa f9ff 	bl	800a5b0 <lwip_htonl>
 80101b2:	4604      	mov	r4, r0
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	68db      	ldr	r3, [r3, #12]
 80101b8:	685b      	ldr	r3, [r3, #4]
 80101ba:	4618      	mov	r0, r3
 80101bc:	f7fa f9f8 	bl	800a5b0 <lwip_htonl>
 80101c0:	4603      	mov	r3, r0
 80101c2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	dbe6      	blt.n	8010196 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	681a      	ldr	r2, [r3, #0]
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	68ba      	ldr	r2, [r7, #8]
 80101d4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d103      	bne.n	80101e6 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2200      	movs	r2, #0
 80101e2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80101ec:	2bff      	cmp	r3, #255	; 0xff
 80101ee:	d007      	beq.n	8010200 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80101f6:	3301      	adds	r3, #1
 80101f8:	b2da      	uxtb	r2, r3
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	2200      	movs	r2, #0
 8010204:	635a      	str	r2, [r3, #52]	; 0x34
 8010206:	e000      	b.n	801020a <tcp_rexmit+0x9a>
    return;
 8010208:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 801020a:	3714      	adds	r7, #20
 801020c:	46bd      	mov	sp, r7
 801020e:	bd90      	pop	{r4, r7, pc}

08010210 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b082      	sub	sp, #8
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801021c:	2b00      	cmp	r3, #0
 801021e:	d041      	beq.n	80102a4 <tcp_rexmit_fast+0x94>
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	7e9b      	ldrb	r3, [r3, #26]
 8010224:	f003 0304 	and.w	r3, r3, #4
 8010228:	2b00      	cmp	r3, #0
 801022a:	d13b      	bne.n	80102a4 <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 801022c:	6878      	ldr	r0, [r7, #4]
 801022e:	f7ff ff9f 	bl	8010170 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801023e:	4293      	cmp	r3, r2
 8010240:	bf28      	it	cs
 8010242:	4613      	movcs	r3, r2
 8010244:	b29b      	uxth	r3, r3
 8010246:	0fda      	lsrs	r2, r3, #31
 8010248:	4413      	add	r3, r2
 801024a:	105b      	asrs	r3, r3, #1
 801024c:	b29a      	uxth	r2, r3
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801025a:	461a      	mov	r2, r3
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010260:	005b      	lsls	r3, r3, #1
 8010262:	429a      	cmp	r2, r3
 8010264:	d206      	bcs.n	8010274 <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801026a:	005b      	lsls	r3, r3, #1
 801026c:	b29a      	uxth	r2, r3
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801027e:	4619      	mov	r1, r3
 8010280:	0049      	lsls	r1, r1, #1
 8010282:	440b      	add	r3, r1
 8010284:	b29b      	uxth	r3, r3
 8010286:	4413      	add	r3, r2
 8010288:	b29a      	uxth	r2, r3
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	7e9b      	ldrb	r3, [r3, #26]
 8010294:	f043 0304 	orr.w	r3, r3, #4
 8010298:	b2da      	uxtb	r2, r3
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2200      	movs	r2, #0
 80102a2:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 80102a4:	bf00      	nop
 80102a6:	3708      	adds	r7, #8
 80102a8:	46bd      	mov	sp, r7
 80102aa:	bd80      	pop	{r7, pc}

080102ac <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b08a      	sub	sp, #40	; 0x28
 80102b0:	af04      	add	r7, sp, #16
 80102b2:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80102b8:	3b01      	subs	r3, #1
 80102ba:	4618      	mov	r0, r3
 80102bc:	f7fa f978 	bl	800a5b0 <lwip_htonl>
 80102c0:	4603      	mov	r3, r0
 80102c2:	2200      	movs	r2, #0
 80102c4:	2100      	movs	r1, #0
 80102c6:	6878      	ldr	r0, [r7, #4]
 80102c8:	f7ff f988 	bl	800f5dc <tcp_output_alloc_header>
 80102cc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80102ce:	693b      	ldr	r3, [r7, #16]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d102      	bne.n	80102da <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80102d4:	f04f 33ff 	mov.w	r3, #4294967295
 80102d8:	e021      	b.n	801031e <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	3304      	adds	r3, #4
 80102de:	4618      	mov	r0, r3
 80102e0:	f001 feb8 	bl	8012054 <ip4_route>
 80102e4:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d102      	bne.n	80102f2 <tcp_keepalive+0x46>
    err = ERR_RTE;
 80102ec:	23fc      	movs	r3, #252	; 0xfc
 80102ee:	75fb      	strb	r3, [r7, #23]
 80102f0:	e010      	b.n	8010314 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 80102f2:	6879      	ldr	r1, [r7, #4]
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	1d1a      	adds	r2, r3, #4
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	7a98      	ldrb	r0, [r3, #10]
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	9302      	str	r3, [sp, #8]
 8010300:	2306      	movs	r3, #6
 8010302:	9301      	str	r3, [sp, #4]
 8010304:	2300      	movs	r3, #0
 8010306:	9300      	str	r3, [sp, #0]
 8010308:	4603      	mov	r3, r0
 801030a:	6938      	ldr	r0, [r7, #16]
 801030c:	f002 f84c 	bl	80123a8 <ip4_output_if>
 8010310:	4603      	mov	r3, r0
 8010312:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8010314:	6938      	ldr	r0, [r7, #16]
 8010316:	f7fb fa6b 	bl	800b7f0 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801031a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801031e:	4618      	mov	r0, r3
 8010320:	3718      	adds	r7, #24
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}

08010326 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010326:	b590      	push	{r4, r7, lr}
 8010328:	b08f      	sub	sp, #60	; 0x3c
 801032a:	af04      	add	r7, sp, #16
 801032c:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010332:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8010334:	6a3b      	ldr	r3, [r7, #32]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d102      	bne.n	8010340 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801033e:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8010340:	6a3b      	ldr	r3, [r7, #32]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d101      	bne.n	801034a <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8010346:	2300      	movs	r3, #0
 8010348:	e085      	b.n	8010456 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801034a:	6a3b      	ldr	r3, [r7, #32]
 801034c:	68db      	ldr	r3, [r3, #12]
 801034e:	899b      	ldrh	r3, [r3, #12]
 8010350:	b29b      	uxth	r3, r3
 8010352:	4618      	mov	r0, r3
 8010354:	f7fa f91f 	bl	800a596 <lwip_htons>
 8010358:	4603      	mov	r3, r0
 801035a:	f003 0301 	and.w	r3, r3, #1
 801035e:	2b00      	cmp	r3, #0
 8010360:	d005      	beq.n	801036e <tcp_zero_window_probe+0x48>
 8010362:	6a3b      	ldr	r3, [r7, #32]
 8010364:	891b      	ldrh	r3, [r3, #8]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d101      	bne.n	801036e <tcp_zero_window_probe+0x48>
 801036a:	2301      	movs	r3, #1
 801036c:	e000      	b.n	8010370 <tcp_zero_window_probe+0x4a>
 801036e:	2300      	movs	r3, #0
 8010370:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8010372:	7ffb      	ldrb	r3, [r7, #31]
 8010374:	2b00      	cmp	r3, #0
 8010376:	bf0c      	ite	eq
 8010378:	2301      	moveq	r3, #1
 801037a:	2300      	movne	r3, #0
 801037c:	b2db      	uxtb	r3, r3
 801037e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8010380:	6a3b      	ldr	r3, [r7, #32]
 8010382:	68db      	ldr	r3, [r3, #12]
 8010384:	685b      	ldr	r3, [r3, #4]
 8010386:	8bba      	ldrh	r2, [r7, #28]
 8010388:	2100      	movs	r1, #0
 801038a:	6878      	ldr	r0, [r7, #4]
 801038c:	f7ff f926 	bl	800f5dc <tcp_output_alloc_header>
 8010390:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8010392:	69bb      	ldr	r3, [r7, #24]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d102      	bne.n	801039e <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010398:	f04f 33ff 	mov.w	r3, #4294967295
 801039c:	e05b      	b.n	8010456 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801039e:	69bb      	ldr	r3, [r7, #24]
 80103a0:	685b      	ldr	r3, [r3, #4]
 80103a2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80103a4:	7ffb      	ldrb	r3, [r7, #31]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d00e      	beq.n	80103c8 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	899b      	ldrh	r3, [r3, #12]
 80103ae:	b29b      	uxth	r3, r3
 80103b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80103b4:	b29c      	uxth	r4, r3
 80103b6:	2011      	movs	r0, #17
 80103b8:	f7fa f8ed 	bl	800a596 <lwip_htons>
 80103bc:	4603      	mov	r3, r0
 80103be:	4323      	orrs	r3, r4
 80103c0:	b29a      	uxth	r2, r3
 80103c2:	697b      	ldr	r3, [r7, #20]
 80103c4:	819a      	strh	r2, [r3, #12]
 80103c6:	e010      	b.n	80103ea <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80103c8:	69bb      	ldr	r3, [r7, #24]
 80103ca:	685b      	ldr	r3, [r3, #4]
 80103cc:	3314      	adds	r3, #20
 80103ce:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80103d0:	6a3b      	ldr	r3, [r7, #32]
 80103d2:	6858      	ldr	r0, [r3, #4]
 80103d4:	6a3b      	ldr	r3, [r7, #32]
 80103d6:	685b      	ldr	r3, [r3, #4]
 80103d8:	891a      	ldrh	r2, [r3, #8]
 80103da:	6a3b      	ldr	r3, [r7, #32]
 80103dc:	891b      	ldrh	r3, [r3, #8]
 80103de:	1ad3      	subs	r3, r2, r3
 80103e0:	b29b      	uxth	r3, r3
 80103e2:	2201      	movs	r2, #1
 80103e4:	6939      	ldr	r1, [r7, #16]
 80103e6:	f7fb fc01 	bl	800bbec <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80103ea:	6a3b      	ldr	r3, [r7, #32]
 80103ec:	68db      	ldr	r3, [r3, #12]
 80103ee:	685b      	ldr	r3, [r3, #4]
 80103f0:	4618      	mov	r0, r3
 80103f2:	f7fa f8dd 	bl	800a5b0 <lwip_htonl>
 80103f6:	4603      	mov	r3, r0
 80103f8:	3301      	adds	r3, #1
 80103fa:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	1ad3      	subs	r3, r2, r3
 8010404:	2b00      	cmp	r3, #0
 8010406:	da02      	bge.n	801040e <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	68fa      	ldr	r2, [r7, #12]
 801040c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	3304      	adds	r3, #4
 8010412:	4618      	mov	r0, r3
 8010414:	f001 fe1e 	bl	8012054 <ip4_route>
 8010418:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d103      	bne.n	8010428 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8010420:	23fc      	movs	r3, #252	; 0xfc
 8010422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010426:	e011      	b.n	801044c <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010428:	6879      	ldr	r1, [r7, #4]
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	1d1a      	adds	r2, r3, #4
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	7a98      	ldrb	r0, [r3, #10]
 8010432:	68bb      	ldr	r3, [r7, #8]
 8010434:	9302      	str	r3, [sp, #8]
 8010436:	2306      	movs	r3, #6
 8010438:	9301      	str	r3, [sp, #4]
 801043a:	2300      	movs	r3, #0
 801043c:	9300      	str	r3, [sp, #0]
 801043e:	4603      	mov	r3, r0
 8010440:	69b8      	ldr	r0, [r7, #24]
 8010442:	f001 ffb1 	bl	80123a8 <ip4_output_if>
 8010446:	4603      	mov	r3, r0
 8010448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 801044c:	69b8      	ldr	r0, [r7, #24]
 801044e:	f7fb f9cf 	bl	800b7f0 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010452:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010456:	4618      	mov	r0, r3
 8010458:	372c      	adds	r7, #44	; 0x2c
 801045a:	46bd      	mov	sp, r7
 801045c:	bd90      	pop	{r4, r7, pc}
	...

08010460 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b082      	sub	sp, #8
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010468:	f7fb fcd2 	bl	800be10 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801046c:	4b0a      	ldr	r3, [pc, #40]	; (8010498 <tcpip_tcp_timer+0x38>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d103      	bne.n	801047c <tcpip_tcp_timer+0x1c>
 8010474:	4b09      	ldr	r3, [pc, #36]	; (801049c <tcpip_tcp_timer+0x3c>)
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d005      	beq.n	8010488 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801047c:	2200      	movs	r2, #0
 801047e:	4908      	ldr	r1, [pc, #32]	; (80104a0 <tcpip_tcp_timer+0x40>)
 8010480:	20fa      	movs	r0, #250	; 0xfa
 8010482:	f000 f86f 	bl	8010564 <sys_timeout>
 8010486:	e003      	b.n	8010490 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010488:	4b06      	ldr	r3, [pc, #24]	; (80104a4 <tcpip_tcp_timer+0x44>)
 801048a:	2200      	movs	r2, #0
 801048c:	601a      	str	r2, [r3, #0]
  }
}
 801048e:	bf00      	nop
 8010490:	bf00      	nop
 8010492:	3708      	adds	r7, #8
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}
 8010498:	20006c9c 	.word	0x20006c9c
 801049c:	20006cac 	.word	0x20006cac
 80104a0:	08010461 	.word	0x08010461
 80104a4:	2000053c 	.word	0x2000053c

080104a8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80104ac:	4b0a      	ldr	r3, [pc, #40]	; (80104d8 <tcp_timer_needed+0x30>)
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d10f      	bne.n	80104d4 <tcp_timer_needed+0x2c>
 80104b4:	4b09      	ldr	r3, [pc, #36]	; (80104dc <tcp_timer_needed+0x34>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d103      	bne.n	80104c4 <tcp_timer_needed+0x1c>
 80104bc:	4b08      	ldr	r3, [pc, #32]	; (80104e0 <tcp_timer_needed+0x38>)
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d007      	beq.n	80104d4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80104c4:	4b04      	ldr	r3, [pc, #16]	; (80104d8 <tcp_timer_needed+0x30>)
 80104c6:	2201      	movs	r2, #1
 80104c8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80104ca:	2200      	movs	r2, #0
 80104cc:	4905      	ldr	r1, [pc, #20]	; (80104e4 <tcp_timer_needed+0x3c>)
 80104ce:	20fa      	movs	r0, #250	; 0xfa
 80104d0:	f000 f848 	bl	8010564 <sys_timeout>
  }
}
 80104d4:	bf00      	nop
 80104d6:	bd80      	pop	{r7, pc}
 80104d8:	2000053c 	.word	0x2000053c
 80104dc:	20006c9c 	.word	0x20006c9c
 80104e0:	20006cac 	.word	0x20006cac
 80104e4:	08010461 	.word	0x08010461

080104e8 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b084      	sub	sp, #16
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	685b      	ldr	r3, [r3, #4]
 80104f8:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	687a      	ldr	r2, [r7, #4]
 8010500:	4903      	ldr	r1, [pc, #12]	; (8010510 <cyclic_timer+0x28>)
 8010502:	4618      	mov	r0, r3
 8010504:	f000 f82e 	bl	8010564 <sys_timeout>
}
 8010508:	bf00      	nop
 801050a:	3710      	adds	r7, #16
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}
 8010510:	080104e9 	.word	0x080104e9

08010514 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b082      	sub	sp, #8
 8010518:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801051a:	2301      	movs	r3, #1
 801051c:	607b      	str	r3, [r7, #4]
 801051e:	e00e      	b.n	801053e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8010520:	4a0d      	ldr	r2, [pc, #52]	; (8010558 <sys_timeouts_init+0x44>)
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	00db      	lsls	r3, r3, #3
 801052c:	4a0a      	ldr	r2, [pc, #40]	; (8010558 <sys_timeouts_init+0x44>)
 801052e:	4413      	add	r3, r2
 8010530:	461a      	mov	r2, r3
 8010532:	490a      	ldr	r1, [pc, #40]	; (801055c <sys_timeouts_init+0x48>)
 8010534:	f000 f816 	bl	8010564 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	3301      	adds	r3, #1
 801053c:	607b      	str	r3, [r7, #4]
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	2b02      	cmp	r3, #2
 8010542:	d9ed      	bls.n	8010520 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8010544:	f7f9 ff9a 	bl	800a47c <sys_now>
 8010548:	4603      	mov	r3, r0
 801054a:	4a05      	ldr	r2, [pc, #20]	; (8010560 <sys_timeouts_init+0x4c>)
 801054c:	6013      	str	r3, [r2, #0]
}
 801054e:	bf00      	nop
 8010550:	3708      	adds	r7, #8
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}
 8010556:	bf00      	nop
 8010558:	08016c6c 	.word	0x08016c6c
 801055c:	080104e9 	.word	0x080104e9
 8010560:	20000538 	.word	0x20000538

08010564 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b088      	sub	sp, #32
 8010568:	af00      	add	r7, sp, #0
 801056a:	60f8      	str	r0, [r7, #12]
 801056c:	60b9      	str	r1, [r7, #8]
 801056e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010570:	2006      	movs	r0, #6
 8010572:	f7fa fbb9 	bl	800ace8 <memp_malloc>
 8010576:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8010578:	697b      	ldr	r3, [r7, #20]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d10a      	bne.n	8010594 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801057e:	697b      	ldr	r3, [r7, #20]
 8010580:	2b00      	cmp	r3, #0
 8010582:	f040 8084 	bne.w	801068e <sys_timeout+0x12a>
 8010586:	4b44      	ldr	r3, [pc, #272]	; (8010698 <sys_timeout+0x134>)
 8010588:	22d4      	movs	r2, #212	; 0xd4
 801058a:	4944      	ldr	r1, [pc, #272]	; (801069c <sys_timeout+0x138>)
 801058c:	4844      	ldr	r0, [pc, #272]	; (80106a0 <sys_timeout+0x13c>)
 801058e:	f003 f9df 	bl	8013950 <iprintf>
    return;
 8010592:	e07c      	b.n	801068e <sys_timeout+0x12a>
  }

  now = sys_now();
 8010594:	f7f9 ff72 	bl	800a47c <sys_now>
 8010598:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 801059a:	4b42      	ldr	r3, [pc, #264]	; (80106a4 <sys_timeout+0x140>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d105      	bne.n	80105ae <sys_timeout+0x4a>
    diff = 0;
 80105a2:	2300      	movs	r3, #0
 80105a4:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 80105a6:	4a40      	ldr	r2, [pc, #256]	; (80106a8 <sys_timeout+0x144>)
 80105a8:	693b      	ldr	r3, [r7, #16]
 80105aa:	6013      	str	r3, [r2, #0]
 80105ac:	e004      	b.n	80105b8 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 80105ae:	4b3e      	ldr	r3, [pc, #248]	; (80106a8 <sys_timeout+0x144>)
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	693a      	ldr	r2, [r7, #16]
 80105b4:	1ad3      	subs	r3, r2, r3
 80105b6:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 80105b8:	697b      	ldr	r3, [r7, #20]
 80105ba:	2200      	movs	r2, #0
 80105bc:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	68ba      	ldr	r2, [r7, #8]
 80105c2:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80105c4:	697b      	ldr	r3, [r7, #20]
 80105c6:	687a      	ldr	r2, [r7, #4]
 80105c8:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 80105ca:	68fa      	ldr	r2, [r7, #12]
 80105cc:	69bb      	ldr	r3, [r7, #24]
 80105ce:	441a      	add	r2, r3
 80105d0:	697b      	ldr	r3, [r7, #20]
 80105d2:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80105d4:	4b33      	ldr	r3, [pc, #204]	; (80106a4 <sys_timeout+0x140>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d103      	bne.n	80105e4 <sys_timeout+0x80>
    next_timeout = timeout;
 80105dc:	4a31      	ldr	r2, [pc, #196]	; (80106a4 <sys_timeout+0x140>)
 80105de:	697b      	ldr	r3, [r7, #20]
 80105e0:	6013      	str	r3, [r2, #0]
    return;
 80105e2:	e055      	b.n	8010690 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 80105e4:	4b2f      	ldr	r3, [pc, #188]	; (80106a4 <sys_timeout+0x140>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	685b      	ldr	r3, [r3, #4]
 80105ea:	68fa      	ldr	r2, [r7, #12]
 80105ec:	429a      	cmp	r2, r3
 80105ee:	d20f      	bcs.n	8010610 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 80105f0:	4b2c      	ldr	r3, [pc, #176]	; (80106a4 <sys_timeout+0x140>)
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	6859      	ldr	r1, [r3, #4]
 80105f6:	4b2b      	ldr	r3, [pc, #172]	; (80106a4 <sys_timeout+0x140>)
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	68fa      	ldr	r2, [r7, #12]
 80105fc:	1a8a      	subs	r2, r1, r2
 80105fe:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8010600:	4b28      	ldr	r3, [pc, #160]	; (80106a4 <sys_timeout+0x140>)
 8010602:	681a      	ldr	r2, [r3, #0]
 8010604:	697b      	ldr	r3, [r7, #20]
 8010606:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010608:	4a26      	ldr	r2, [pc, #152]	; (80106a4 <sys_timeout+0x140>)
 801060a:	697b      	ldr	r3, [r7, #20]
 801060c:	6013      	str	r3, [r2, #0]
 801060e:	e03f      	b.n	8010690 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8010610:	4b24      	ldr	r3, [pc, #144]	; (80106a4 <sys_timeout+0x140>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	61fb      	str	r3, [r7, #28]
 8010616:	e036      	b.n	8010686 <sys_timeout+0x122>
      timeout->time -= t->time;
 8010618:	697b      	ldr	r3, [r7, #20]
 801061a:	685a      	ldr	r2, [r3, #4]
 801061c:	69fb      	ldr	r3, [r7, #28]
 801061e:	685b      	ldr	r3, [r3, #4]
 8010620:	1ad2      	subs	r2, r2, r3
 8010622:	697b      	ldr	r3, [r7, #20]
 8010624:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8010626:	69fb      	ldr	r3, [r7, #28]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d006      	beq.n	801063c <sys_timeout+0xd8>
 801062e:	69fb      	ldr	r3, [r7, #28]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	685a      	ldr	r2, [r3, #4]
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	685b      	ldr	r3, [r3, #4]
 8010638:	429a      	cmp	r2, r3
 801063a:	d921      	bls.n	8010680 <sys_timeout+0x11c>
        if (t->next != NULL) {
 801063c:	69fb      	ldr	r3, [r7, #28]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d009      	beq.n	8010658 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8010644:	69fb      	ldr	r3, [r7, #28]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	6859      	ldr	r1, [r3, #4]
 801064a:	697b      	ldr	r3, [r7, #20]
 801064c:	685a      	ldr	r2, [r3, #4]
 801064e:	69fb      	ldr	r3, [r7, #28]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	1a8a      	subs	r2, r1, r2
 8010654:	605a      	str	r2, [r3, #4]
 8010656:	e00b      	b.n	8010670 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	685b      	ldr	r3, [r3, #4]
 801065c:	68fa      	ldr	r2, [r7, #12]
 801065e:	429a      	cmp	r2, r3
 8010660:	d206      	bcs.n	8010670 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8010662:	4b10      	ldr	r3, [pc, #64]	; (80106a4 <sys_timeout+0x140>)
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	685a      	ldr	r2, [r3, #4]
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	441a      	add	r2, r3
 801066c:	697b      	ldr	r3, [r7, #20]
 801066e:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8010670:	69fb      	ldr	r3, [r7, #28]
 8010672:	681a      	ldr	r2, [r3, #0]
 8010674:	697b      	ldr	r3, [r7, #20]
 8010676:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010678:	69fb      	ldr	r3, [r7, #28]
 801067a:	697a      	ldr	r2, [r7, #20]
 801067c:	601a      	str	r2, [r3, #0]
        break;
 801067e:	e007      	b.n	8010690 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010680:	69fb      	ldr	r3, [r7, #28]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	61fb      	str	r3, [r7, #28]
 8010686:	69fb      	ldr	r3, [r7, #28]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d1c5      	bne.n	8010618 <sys_timeout+0xb4>
 801068c:	e000      	b.n	8010690 <sys_timeout+0x12c>
    return;
 801068e:	bf00      	nop
      }
    }
  }
}
 8010690:	3720      	adds	r7, #32
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}
 8010696:	bf00      	nop
 8010698:	08016364 	.word	0x08016364
 801069c:	08016398 	.word	0x08016398
 80106a0:	080163d8 	.word	0x080163d8
 80106a4:	20000534 	.word	0x20000534
 80106a8:	20000538 	.word	0x20000538

080106ac <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b086      	sub	sp, #24
 80106b0:	af00      	add	r7, sp, #0
  if (next_timeout) {
 80106b2:	4b24      	ldr	r3, [pc, #144]	; (8010744 <sys_check_timeouts+0x98>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d040      	beq.n	801073c <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 80106ba:	f7f9 fedf 	bl	800a47c <sys_now>
 80106be:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 80106c0:	4b21      	ldr	r3, [pc, #132]	; (8010748 <sys_check_timeouts+0x9c>)
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	68fa      	ldr	r2, [r7, #12]
 80106c6:	1ad3      	subs	r3, r2, r3
 80106c8:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 80106ca:	4b20      	ldr	r3, [pc, #128]	; (801074c <sys_check_timeouts+0xa0>)
 80106cc:	781b      	ldrb	r3, [r3, #0]
 80106ce:	b2db      	uxtb	r3, r3
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d001      	beq.n	80106d8 <sys_check_timeouts+0x2c>
 80106d4:	f7fa fcea 	bl	800b0ac <pbuf_free_ooseq>
      had_one = 0;
 80106d8:	2300      	movs	r3, #0
 80106da:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 80106dc:	4b19      	ldr	r3, [pc, #100]	; (8010744 <sys_check_timeouts+0x98>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 80106e2:	68bb      	ldr	r3, [r7, #8]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d026      	beq.n	8010736 <sys_check_timeouts+0x8a>
 80106e8:	68bb      	ldr	r3, [r7, #8]
 80106ea:	685b      	ldr	r3, [r3, #4]
 80106ec:	697a      	ldr	r2, [r7, #20]
 80106ee:	429a      	cmp	r2, r3
 80106f0:	d321      	bcc.n	8010736 <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 80106f2:	2301      	movs	r3, #1
 80106f4:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 80106f6:	68bb      	ldr	r3, [r7, #8]
 80106f8:	685a      	ldr	r2, [r3, #4]
 80106fa:	4b13      	ldr	r3, [pc, #76]	; (8010748 <sys_check_timeouts+0x9c>)
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	4413      	add	r3, r2
 8010700:	4a11      	ldr	r2, [pc, #68]	; (8010748 <sys_check_timeouts+0x9c>)
 8010702:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8010704:	68bb      	ldr	r3, [r7, #8]
 8010706:	685b      	ldr	r3, [r3, #4]
 8010708:	697a      	ldr	r2, [r7, #20]
 801070a:	1ad3      	subs	r3, r2, r3
 801070c:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	4a0c      	ldr	r2, [pc, #48]	; (8010744 <sys_check_timeouts+0x98>)
 8010714:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	689b      	ldr	r3, [r3, #8]
 801071a:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 801071c:	68bb      	ldr	r3, [r7, #8]
 801071e:	68db      	ldr	r3, [r3, #12]
 8010720:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010722:	68b9      	ldr	r1, [r7, #8]
 8010724:	2006      	movs	r0, #6
 8010726:	f7fa fb2b 	bl	800ad80 <memp_free>
        if (handler != NULL) {
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d002      	beq.n	8010736 <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	6838      	ldr	r0, [r7, #0]
 8010734:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8010736:	7cfb      	ldrb	r3, [r7, #19]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d1c6      	bne.n	80106ca <sys_check_timeouts+0x1e>
  }
}
 801073c:	bf00      	nop
 801073e:	3718      	adds	r7, #24
 8010740:	46bd      	mov	sp, r7
 8010742:	bd80      	pop	{r7, pc}
 8010744:	20000534 	.word	0x20000534
 8010748:	20000538 	.word	0x20000538
 801074c:	20006c94 	.word	0x20006c94

08010750 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010750:	b480      	push	{r7}
 8010752:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8010754:	bf00      	nop
 8010756:	46bd      	mov	sp, r7
 8010758:	bc80      	pop	{r7}
 801075a:	4770      	bx	lr

0801075c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801075c:	b480      	push	{r7}
 801075e:	b083      	sub	sp, #12
 8010760:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8010762:	2300      	movs	r3, #0
 8010764:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8010766:	4b17      	ldr	r3, [pc, #92]	; (80107c4 <udp_new_port+0x68>)
 8010768:	881b      	ldrh	r3, [r3, #0]
 801076a:	1c5a      	adds	r2, r3, #1
 801076c:	b291      	uxth	r1, r2
 801076e:	4a15      	ldr	r2, [pc, #84]	; (80107c4 <udp_new_port+0x68>)
 8010770:	8011      	strh	r1, [r2, #0]
 8010772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010776:	4293      	cmp	r3, r2
 8010778:	d103      	bne.n	8010782 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801077a:	4b12      	ldr	r3, [pc, #72]	; (80107c4 <udp_new_port+0x68>)
 801077c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8010780:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010782:	4b11      	ldr	r3, [pc, #68]	; (80107c8 <udp_new_port+0x6c>)
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	603b      	str	r3, [r7, #0]
 8010788:	e011      	b.n	80107ae <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	8a5a      	ldrh	r2, [r3, #18]
 801078e:	4b0d      	ldr	r3, [pc, #52]	; (80107c4 <udp_new_port+0x68>)
 8010790:	881b      	ldrh	r3, [r3, #0]
 8010792:	429a      	cmp	r2, r3
 8010794:	d108      	bne.n	80107a8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8010796:	88fb      	ldrh	r3, [r7, #6]
 8010798:	3301      	adds	r3, #1
 801079a:	80fb      	strh	r3, [r7, #6]
 801079c:	88fb      	ldrh	r3, [r7, #6]
 801079e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80107a2:	d3e0      	bcc.n	8010766 <udp_new_port+0xa>
        return 0;
 80107a4:	2300      	movs	r3, #0
 80107a6:	e007      	b.n	80107b8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80107a8:	683b      	ldr	r3, [r7, #0]
 80107aa:	68db      	ldr	r3, [r3, #12]
 80107ac:	603b      	str	r3, [r7, #0]
 80107ae:	683b      	ldr	r3, [r7, #0]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d1ea      	bne.n	801078a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80107b4:	4b03      	ldr	r3, [pc, #12]	; (80107c4 <udp_new_port+0x68>)
 80107b6:	881b      	ldrh	r3, [r3, #0]
}
 80107b8:	4618      	mov	r0, r3
 80107ba:	370c      	adds	r7, #12
 80107bc:	46bd      	mov	sp, r7
 80107be:	bc80      	pop	{r7}
 80107c0:	4770      	bx	lr
 80107c2:	bf00      	nop
 80107c4:	20000060 	.word	0x20000060
 80107c8:	20006cb4 	.word	0x20006cb4

080107cc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80107cc:	b480      	push	{r7}
 80107ce:	b085      	sub	sp, #20
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	60f8      	str	r0, [r7, #12]
 80107d4:	60b9      	str	r1, [r7, #8]
 80107d6:	4613      	mov	r3, r2
 80107d8:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80107da:	79fb      	ldrb	r3, [r7, #7]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d018      	beq.n	8010812 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d013      	beq.n	801080e <udp_input_local_match+0x42>
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d00f      	beq.n	801080e <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80107ee:	4b13      	ldr	r3, [pc, #76]	; (801083c <udp_input_local_match+0x70>)
 80107f0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80107f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107f6:	d00a      	beq.n	801080e <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	681a      	ldr	r2, [r3, #0]
 80107fc:	4b0f      	ldr	r3, [pc, #60]	; (801083c <udp_input_local_match+0x70>)
 80107fe:	695b      	ldr	r3, [r3, #20]
 8010800:	405a      	eors	r2, r3
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	3308      	adds	r3, #8
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801080a:	2b00      	cmp	r3, #0
 801080c:	d110      	bne.n	8010830 <udp_input_local_match+0x64>
          return 1;
 801080e:	2301      	movs	r3, #1
 8010810:	e00f      	b.n	8010832 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d009      	beq.n	801082c <udp_input_local_match+0x60>
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d005      	beq.n	801082c <udp_input_local_match+0x60>
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	681a      	ldr	r2, [r3, #0]
 8010824:	4b05      	ldr	r3, [pc, #20]	; (801083c <udp_input_local_match+0x70>)
 8010826:	695b      	ldr	r3, [r3, #20]
 8010828:	429a      	cmp	r2, r3
 801082a:	d101      	bne.n	8010830 <udp_input_local_match+0x64>
      return 1;
 801082c:	2301      	movs	r3, #1
 801082e:	e000      	b.n	8010832 <udp_input_local_match+0x66>
    }
  }

  return 0;
 8010830:	2300      	movs	r3, #0
}
 8010832:	4618      	mov	r0, r3
 8010834:	3714      	adds	r7, #20
 8010836:	46bd      	mov	sp, r7
 8010838:	bc80      	pop	{r7}
 801083a:	4770      	bx	lr
 801083c:	2000376c 	.word	0x2000376c

08010840 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010840:	b590      	push	{r4, r7, lr}
 8010842:	b08d      	sub	sp, #52	; 0x34
 8010844:	af02      	add	r7, sp, #8
 8010846:	6078      	str	r0, [r7, #4]
 8010848:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801084a:	2300      	movs	r3, #0
 801084c:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	895b      	ldrh	r3, [r3, #10]
 8010852:	2b07      	cmp	r3, #7
 8010854:	d803      	bhi.n	801085e <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8010856:	6878      	ldr	r0, [r7, #4]
 8010858:	f7fa ffca 	bl	800b7f0 <pbuf_free>
    goto end;
 801085c:	e0c6      	b.n	80109ec <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	685b      	ldr	r3, [r3, #4]
 8010862:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010864:	4b63      	ldr	r3, [pc, #396]	; (80109f4 <udp_input+0x1b4>)
 8010866:	695b      	ldr	r3, [r3, #20]
 8010868:	4a62      	ldr	r2, [pc, #392]	; (80109f4 <udp_input+0x1b4>)
 801086a:	6812      	ldr	r2, [r2, #0]
 801086c:	4611      	mov	r1, r2
 801086e:	4618      	mov	r0, r3
 8010870:	f001 fe6c 	bl	801254c <ip4_addr_isbroadcast_u32>
 8010874:	4603      	mov	r3, r0
 8010876:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	881b      	ldrh	r3, [r3, #0]
 801087c:	b29b      	uxth	r3, r3
 801087e:	4618      	mov	r0, r3
 8010880:	f7f9 fe89 	bl	800a596 <lwip_htons>
 8010884:	4603      	mov	r3, r0
 8010886:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010888:	697b      	ldr	r3, [r7, #20]
 801088a:	885b      	ldrh	r3, [r3, #2]
 801088c:	b29b      	uxth	r3, r3
 801088e:	4618      	mov	r0, r3
 8010890:	f7f9 fe81 	bl	800a596 <lwip_htons>
 8010894:	4603      	mov	r3, r0
 8010896:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010898:	2300      	movs	r3, #0
 801089a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801089c:	2300      	movs	r3, #0
 801089e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80108a0:	2300      	movs	r3, #0
 80108a2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80108a4:	4b54      	ldr	r3, [pc, #336]	; (80109f8 <udp_input+0x1b8>)
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	627b      	str	r3, [r7, #36]	; 0x24
 80108aa:	e03b      	b.n	8010924 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80108ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ae:	8a5b      	ldrh	r3, [r3, #18]
 80108b0:	89fa      	ldrh	r2, [r7, #14]
 80108b2:	429a      	cmp	r2, r3
 80108b4:	d131      	bne.n	801091a <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80108b6:	7cfb      	ldrb	r3, [r7, #19]
 80108b8:	461a      	mov	r2, r3
 80108ba:	6839      	ldr	r1, [r7, #0]
 80108bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80108be:	f7ff ff85 	bl	80107cc <udp_input_local_match>
 80108c2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d028      	beq.n	801091a <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 80108c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ca:	7c1b      	ldrb	r3, [r3, #16]
 80108cc:	f003 0304 	and.w	r3, r3, #4
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d104      	bne.n	80108de <udp_input+0x9e>
 80108d4:	69fb      	ldr	r3, [r7, #28]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d101      	bne.n	80108de <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 80108da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108dc:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80108de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e0:	8a9b      	ldrh	r3, [r3, #20]
 80108e2:	8a3a      	ldrh	r2, [r7, #16]
 80108e4:	429a      	cmp	r2, r3
 80108e6:	d118      	bne.n	801091a <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80108e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ea:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d005      	beq.n	80108fc <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80108f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f2:	685a      	ldr	r2, [r3, #4]
 80108f4:	4b3f      	ldr	r3, [pc, #252]	; (80109f4 <udp_input+0x1b4>)
 80108f6:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d10e      	bne.n	801091a <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80108fc:	6a3b      	ldr	r3, [r7, #32]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d014      	beq.n	801092c <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010904:	68da      	ldr	r2, [r3, #12]
 8010906:	6a3b      	ldr	r3, [r7, #32]
 8010908:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801090a:	4b3b      	ldr	r3, [pc, #236]	; (80109f8 <udp_input+0x1b8>)
 801090c:	681a      	ldr	r2, [r3, #0]
 801090e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010910:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010912:	4a39      	ldr	r2, [pc, #228]	; (80109f8 <udp_input+0x1b8>)
 8010914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010916:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8010918:	e008      	b.n	801092c <udp_input+0xec>
      }
    }

    prev = pcb;
 801091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801091c:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801091e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010920:	68db      	ldr	r3, [r3, #12]
 8010922:	627b      	str	r3, [r7, #36]	; 0x24
 8010924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010926:	2b00      	cmp	r3, #0
 8010928:	d1c0      	bne.n	80108ac <udp_input+0x6c>
 801092a:	e000      	b.n	801092e <udp_input+0xee>
        break;
 801092c:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801092e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010930:	2b00      	cmp	r3, #0
 8010932:	d101      	bne.n	8010938 <udp_input+0xf8>
    pcb = uncon_pcb;
 8010934:	69fb      	ldr	r3, [r7, #28]
 8010936:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8010938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801093a:	2b00      	cmp	r3, #0
 801093c:	d002      	beq.n	8010944 <udp_input+0x104>
    for_us = 1;
 801093e:	2301      	movs	r3, #1
 8010940:	76fb      	strb	r3, [r7, #27]
 8010942:	e00a      	b.n	801095a <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	3304      	adds	r3, #4
 8010948:	681a      	ldr	r2, [r3, #0]
 801094a:	4b2a      	ldr	r3, [pc, #168]	; (80109f4 <udp_input+0x1b4>)
 801094c:	695b      	ldr	r3, [r3, #20]
 801094e:	429a      	cmp	r2, r3
 8010950:	bf0c      	ite	eq
 8010952:	2301      	moveq	r3, #1
 8010954:	2300      	movne	r3, #0
 8010956:	b2db      	uxtb	r3, r3
 8010958:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801095a:	7efb      	ldrb	r3, [r7, #27]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d042      	beq.n	80109e6 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8010960:	f06f 0107 	mvn.w	r1, #7
 8010964:	6878      	ldr	r0, [r7, #4]
 8010966:	f7fa ff1f 	bl	800b7a8 <pbuf_header>
 801096a:	4603      	mov	r3, r0
 801096c:	2b00      	cmp	r3, #0
 801096e:	d00a      	beq.n	8010986 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8010970:	4b22      	ldr	r3, [pc, #136]	; (80109fc <udp_input+0x1bc>)
 8010972:	f240 1255 	movw	r2, #341	; 0x155
 8010976:	4922      	ldr	r1, [pc, #136]	; (8010a00 <udp_input+0x1c0>)
 8010978:	4822      	ldr	r0, [pc, #136]	; (8010a04 <udp_input+0x1c4>)
 801097a:	f002 ffe9 	bl	8013950 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801097e:	6878      	ldr	r0, [r7, #4]
 8010980:	f7fa ff36 	bl	800b7f0 <pbuf_free>
      goto end;
 8010984:	e032      	b.n	80109ec <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 8010986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010988:	2b00      	cmp	r3, #0
 801098a:	d012      	beq.n	80109b2 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801098c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801098e:	699b      	ldr	r3, [r3, #24]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d00a      	beq.n	80109aa <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010996:	699c      	ldr	r4, [r3, #24]
 8010998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801099a:	69d8      	ldr	r0, [r3, #28]
 801099c:	8a3b      	ldrh	r3, [r7, #16]
 801099e:	9300      	str	r3, [sp, #0]
 80109a0:	4b19      	ldr	r3, [pc, #100]	; (8010a08 <udp_input+0x1c8>)
 80109a2:	687a      	ldr	r2, [r7, #4]
 80109a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80109a6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80109a8:	e021      	b.n	80109ee <udp_input+0x1ae>
        pbuf_free(p);
 80109aa:	6878      	ldr	r0, [r7, #4]
 80109ac:	f7fa ff20 	bl	800b7f0 <pbuf_free>
        goto end;
 80109b0:	e01c      	b.n	80109ec <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80109b2:	7cfb      	ldrb	r3, [r7, #19]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d112      	bne.n	80109de <udp_input+0x19e>
 80109b8:	4b0e      	ldr	r3, [pc, #56]	; (80109f4 <udp_input+0x1b4>)
 80109ba:	695b      	ldr	r3, [r3, #20]
 80109bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80109c0:	2be0      	cmp	r3, #224	; 0xe0
 80109c2:	d00c      	beq.n	80109de <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80109c4:	4b0b      	ldr	r3, [pc, #44]	; (80109f4 <udp_input+0x1b4>)
 80109c6:	899b      	ldrh	r3, [r3, #12]
 80109c8:	3308      	adds	r3, #8
 80109ca:	b29b      	uxth	r3, r3
 80109cc:	b21b      	sxth	r3, r3
 80109ce:	4619      	mov	r1, r3
 80109d0:	6878      	ldr	r0, [r7, #4]
 80109d2:	f7fa fefb 	bl	800b7cc <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80109d6:	2103      	movs	r1, #3
 80109d8:	6878      	ldr	r0, [r7, #4]
 80109da:	f001 fab3 	bl	8011f44 <icmp_dest_unreach>
      pbuf_free(p);
 80109de:	6878      	ldr	r0, [r7, #4]
 80109e0:	f7fa ff06 	bl	800b7f0 <pbuf_free>
  return;
 80109e4:	e003      	b.n	80109ee <udp_input+0x1ae>
    pbuf_free(p);
 80109e6:	6878      	ldr	r0, [r7, #4]
 80109e8:	f7fa ff02 	bl	800b7f0 <pbuf_free>
  return;
 80109ec:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80109ee:	372c      	adds	r7, #44	; 0x2c
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bd90      	pop	{r4, r7, pc}
 80109f4:	2000376c 	.word	0x2000376c
 80109f8:	20006cb4 	.word	0x20006cb4
 80109fc:	08016400 	.word	0x08016400
 8010a00:	08016430 	.word	0x08016430
 8010a04:	08016444 	.word	0x08016444
 8010a08:	2000377c 	.word	0x2000377c

08010a0c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b082      	sub	sp, #8
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
 8010a14:	6039      	str	r1, [r7, #0]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d102      	bne.n	8010a22 <udp_send+0x16>
    return ERR_VAL;
 8010a1c:	f06f 0305 	mvn.w	r3, #5
 8010a20:	e008      	b.n	8010a34 <udp_send+0x28>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	1d1a      	adds	r2, r3, #4
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	8a9b      	ldrh	r3, [r3, #20]
 8010a2a:	6839      	ldr	r1, [r7, #0]
 8010a2c:	6878      	ldr	r0, [r7, #4]
 8010a2e:	f000 f805 	bl	8010a3c <udp_sendto>
 8010a32:	4603      	mov	r3, r0
}
 8010a34:	4618      	mov	r0, r3
 8010a36:	3708      	adds	r7, #8
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd80      	pop	{r7, pc}

08010a3c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b088      	sub	sp, #32
 8010a40:	af02      	add	r7, sp, #8
 8010a42:	60f8      	str	r0, [r7, #12]
 8010a44:	60b9      	str	r1, [r7, #8]
 8010a46:	607a      	str	r2, [r7, #4]
 8010a48:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d002      	beq.n	8010a5a <udp_sendto+0x1e>
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d102      	bne.n	8010a60 <udp_sendto+0x24>
    return ERR_VAL;
 8010a5a:	f06f 0305 	mvn.w	r3, #5
 8010a5e:	e013      	b.n	8010a88 <udp_sendto+0x4c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 8010a60:	6978      	ldr	r0, [r7, #20]
 8010a62:	f001 faf7 	bl	8012054 <ip4_route>
 8010a66:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8010a68:	693b      	ldr	r3, [r7, #16]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d102      	bne.n	8010a74 <udp_sendto+0x38>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8010a6e:	f06f 0303 	mvn.w	r3, #3
 8010a72:	e009      	b.n	8010a88 <udp_sendto+0x4c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8010a74:	887a      	ldrh	r2, [r7, #2]
 8010a76:	693b      	ldr	r3, [r7, #16]
 8010a78:	9300      	str	r3, [sp, #0]
 8010a7a:	4613      	mov	r3, r2
 8010a7c:	687a      	ldr	r2, [r7, #4]
 8010a7e:	68b9      	ldr	r1, [r7, #8]
 8010a80:	68f8      	ldr	r0, [r7, #12]
 8010a82:	f000 f805 	bl	8010a90 <udp_sendto_if>
 8010a86:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010a88:	4618      	mov	r0, r3
 8010a8a:	3718      	adds	r7, #24
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	bd80      	pop	{r7, pc}

08010a90 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b088      	sub	sp, #32
 8010a94:	af02      	add	r7, sp, #8
 8010a96:	60f8      	str	r0, [r7, #12]
 8010a98:	60b9      	str	r1, [r7, #8]
 8010a9a:	607a      	str	r2, [r7, #4]
 8010a9c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d002      	beq.n	8010aaa <udp_sendto_if+0x1a>
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d102      	bne.n	8010ab0 <udp_sendto_if+0x20>
    return ERR_VAL;
 8010aaa:	f06f 0305 	mvn.w	r3, #5
 8010aae:	e028      	b.n	8010b02 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d009      	beq.n	8010aca <udp_sendto_if+0x3a>
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d005      	beq.n	8010aca <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010ac6:	2be0      	cmp	r3, #224	; 0xe0
 8010ac8:	d103      	bne.n	8010ad2 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 8010aca:	6a3b      	ldr	r3, [r7, #32]
 8010acc:	3304      	adds	r3, #4
 8010ace:	617b      	str	r3, [r7, #20]
 8010ad0:	e00b      	b.n	8010aea <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	681a      	ldr	r2, [r3, #0]
 8010ad6:	6a3b      	ldr	r3, [r7, #32]
 8010ad8:	3304      	adds	r3, #4
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	429a      	cmp	r2, r3
 8010ade:	d002      	beq.n	8010ae6 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 8010ae0:	f06f 0303 	mvn.w	r3, #3
 8010ae4:	e00d      	b.n	8010b02 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8010aea:	887a      	ldrh	r2, [r7, #2]
 8010aec:	697b      	ldr	r3, [r7, #20]
 8010aee:	9301      	str	r3, [sp, #4]
 8010af0:	6a3b      	ldr	r3, [r7, #32]
 8010af2:	9300      	str	r3, [sp, #0]
 8010af4:	4613      	mov	r3, r2
 8010af6:	687a      	ldr	r2, [r7, #4]
 8010af8:	68b9      	ldr	r1, [r7, #8]
 8010afa:	68f8      	ldr	r0, [r7, #12]
 8010afc:	f000 f806 	bl	8010b0c <udp_sendto_if_src>
 8010b00:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010b02:	4618      	mov	r0, r3
 8010b04:	3718      	adds	r7, #24
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bd80      	pop	{r7, pc}
	...

08010b0c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b08c      	sub	sp, #48	; 0x30
 8010b10:	af04      	add	r7, sp, #16
 8010b12:	60f8      	str	r0, [r7, #12]
 8010b14:	60b9      	str	r1, [r7, #8]
 8010b16:	607a      	str	r2, [r7, #4]
 8010b18:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d002      	beq.n	8010b26 <udp_sendto_if_src+0x1a>
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d102      	bne.n	8010b2c <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 8010b26:	f06f 0305 	mvn.w	r3, #5
 8010b2a:	e07e      	b.n	8010c2a <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	8a5b      	ldrh	r3, [r3, #18]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d10f      	bne.n	8010b54 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010b34:	68f9      	ldr	r1, [r7, #12]
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	8a5b      	ldrh	r3, [r3, #18]
 8010b3a:	461a      	mov	r2, r3
 8010b3c:	68f8      	ldr	r0, [r7, #12]
 8010b3e:	f000 f87f 	bl	8010c40 <udp_bind>
 8010b42:	4603      	mov	r3, r0
 8010b44:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8010b46:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d002      	beq.n	8010b54 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8010b4e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010b52:	e06a      	b.n	8010c2a <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 8010b54:	2108      	movs	r1, #8
 8010b56:	68b8      	ldr	r0, [r7, #8]
 8010b58:	f7fa fe26 	bl	800b7a8 <pbuf_header>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d014      	beq.n	8010b8c <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8010b62:	2200      	movs	r2, #0
 8010b64:	2108      	movs	r1, #8
 8010b66:	2001      	movs	r0, #1
 8010b68:	f7fa fad0 	bl	800b10c <pbuf_alloc>
 8010b6c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8010b6e:	69fb      	ldr	r3, [r7, #28]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d102      	bne.n	8010b7a <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8010b74:	f04f 33ff 	mov.w	r3, #4294967295
 8010b78:	e057      	b.n	8010c2a <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 8010b7a:	68bb      	ldr	r3, [r7, #8]
 8010b7c:	891b      	ldrh	r3, [r3, #8]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d006      	beq.n	8010b90 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8010b82:	68b9      	ldr	r1, [r7, #8]
 8010b84:	69f8      	ldr	r0, [r7, #28]
 8010b86:	f7fa ff55 	bl	800ba34 <pbuf_chain>
 8010b8a:	e001      	b.n	8010b90 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8010b8c:	68bb      	ldr	r3, [r7, #8]
 8010b8e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8010b90:	69fb      	ldr	r3, [r7, #28]
 8010b92:	895b      	ldrh	r3, [r3, #10]
 8010b94:	2b07      	cmp	r3, #7
 8010b96:	d806      	bhi.n	8010ba6 <udp_sendto_if_src+0x9a>
 8010b98:	4b26      	ldr	r3, [pc, #152]	; (8010c34 <udp_sendto_if_src+0x128>)
 8010b9a:	f240 22db 	movw	r2, #731	; 0x2db
 8010b9e:	4926      	ldr	r1, [pc, #152]	; (8010c38 <udp_sendto_if_src+0x12c>)
 8010ba0:	4826      	ldr	r0, [pc, #152]	; (8010c3c <udp_sendto_if_src+0x130>)
 8010ba2:	f002 fed5 	bl	8013950 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8010ba6:	69fb      	ldr	r3, [r7, #28]
 8010ba8:	685b      	ldr	r3, [r3, #4]
 8010baa:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	8a5b      	ldrh	r3, [r3, #18]
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f7f9 fcf0 	bl	800a596 <lwip_htons>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	461a      	mov	r2, r3
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8010bbe:	887b      	ldrh	r3, [r7, #2]
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f7f9 fce8 	bl	800a596 <lwip_htons>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	461a      	mov	r2, r3
 8010bca:	697b      	ldr	r3, [r7, #20]
 8010bcc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	719a      	strb	r2, [r3, #6]
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8010bd8:	69fb      	ldr	r3, [r7, #28]
 8010bda:	891b      	ldrh	r3, [r3, #8]
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f7f9 fcda 	bl	800a596 <lwip_htons>
 8010be2:	4603      	mov	r3, r0
 8010be4:	461a      	mov	r2, r3
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8010bea:	2311      	movs	r3, #17
 8010bec:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	7a9b      	ldrb	r3, [r3, #10]
 8010bf2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	7a5b      	ldrb	r3, [r3, #9]
 8010bf8:	7cb9      	ldrb	r1, [r7, #18]
 8010bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010bfc:	9202      	str	r2, [sp, #8]
 8010bfe:	7cfa      	ldrb	r2, [r7, #19]
 8010c00:	9201      	str	r2, [sp, #4]
 8010c02:	9300      	str	r3, [sp, #0]
 8010c04:	460b      	mov	r3, r1
 8010c06:	687a      	ldr	r2, [r7, #4]
 8010c08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010c0a:	69f8      	ldr	r0, [r7, #28]
 8010c0c:	f001 fbf6 	bl	80123fc <ip4_output_if_src>
 8010c10:	4603      	mov	r3, r0
 8010c12:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8010c14:	69fa      	ldr	r2, [r7, #28]
 8010c16:	68bb      	ldr	r3, [r7, #8]
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	d004      	beq.n	8010c26 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 8010c1c:	69f8      	ldr	r0, [r7, #28]
 8010c1e:	f7fa fde7 	bl	800b7f0 <pbuf_free>
    q = NULL;
 8010c22:	2300      	movs	r3, #0
 8010c24:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8010c26:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	3720      	adds	r7, #32
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}
 8010c32:	bf00      	nop
 8010c34:	08016400 	.word	0x08016400
 8010c38:	0801646c 	.word	0x0801646c
 8010c3c:	08016444 	.word	0x08016444

08010c40 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b086      	sub	sp, #24
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	60f8      	str	r0, [r7, #12]
 8010c48:	60b9      	str	r1, [r7, #8]
 8010c4a:	4613      	mov	r3, r2
 8010c4c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010c4e:	68bb      	ldr	r3, [r7, #8]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d101      	bne.n	8010c58 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8010c54:	4b30      	ldr	r3, [pc, #192]	; (8010d18 <udp_bind+0xd8>)
 8010c56:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d002      	beq.n	8010c64 <udp_bind+0x24>
 8010c5e:	68bb      	ldr	r3, [r7, #8]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d102      	bne.n	8010c6a <udp_bind+0x2a>
    return ERR_VAL;
 8010c64:	f06f 0305 	mvn.w	r3, #5
 8010c68:	e052      	b.n	8010d10 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010c6e:	4b2b      	ldr	r3, [pc, #172]	; (8010d1c <udp_bind+0xdc>)
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	617b      	str	r3, [r7, #20]
 8010c74:	e009      	b.n	8010c8a <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8010c76:	68fa      	ldr	r2, [r7, #12]
 8010c78:	697b      	ldr	r3, [r7, #20]
 8010c7a:	429a      	cmp	r2, r3
 8010c7c:	d102      	bne.n	8010c84 <udp_bind+0x44>
      rebind = 1;
 8010c7e:	2301      	movs	r3, #1
 8010c80:	74fb      	strb	r3, [r7, #19]
      break;
 8010c82:	e005      	b.n	8010c90 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010c84:	697b      	ldr	r3, [r7, #20]
 8010c86:	68db      	ldr	r3, [r3, #12]
 8010c88:	617b      	str	r3, [r7, #20]
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d1f2      	bne.n	8010c76 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8010c90:	88fb      	ldrh	r3, [r7, #6]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d109      	bne.n	8010caa <udp_bind+0x6a>
    port = udp_new_port();
 8010c96:	f7ff fd61 	bl	801075c <udp_new_port>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010c9e:	88fb      	ldrh	r3, [r7, #6]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d11e      	bne.n	8010ce2 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8010ca4:	f06f 0307 	mvn.w	r3, #7
 8010ca8:	e032      	b.n	8010d10 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010caa:	4b1c      	ldr	r3, [pc, #112]	; (8010d1c <udp_bind+0xdc>)
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	617b      	str	r3, [r7, #20]
 8010cb0:	e014      	b.n	8010cdc <udp_bind+0x9c>
      if (pcb != ipcb) {
 8010cb2:	68fa      	ldr	r2, [r7, #12]
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	429a      	cmp	r2, r3
 8010cb8:	d00d      	beq.n	8010cd6 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8010cba:	697b      	ldr	r3, [r7, #20]
 8010cbc:	8a5b      	ldrh	r3, [r3, #18]
 8010cbe:	88fa      	ldrh	r2, [r7, #6]
 8010cc0:	429a      	cmp	r2, r3
 8010cc2:	d108      	bne.n	8010cd6 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8010cc4:	697b      	ldr	r3, [r7, #20]
 8010cc6:	681a      	ldr	r2, [r3, #0]
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8010ccc:	429a      	cmp	r2, r3
 8010cce:	d102      	bne.n	8010cd6 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8010cd0:	f06f 0307 	mvn.w	r3, #7
 8010cd4:	e01c      	b.n	8010d10 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010cd6:	697b      	ldr	r3, [r7, #20]
 8010cd8:	68db      	ldr	r3, [r3, #12]
 8010cda:	617b      	str	r3, [r7, #20]
 8010cdc:	697b      	ldr	r3, [r7, #20]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d1e7      	bne.n	8010cb2 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010ce2:	68bb      	ldr	r3, [r7, #8]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d002      	beq.n	8010cee <udp_bind+0xae>
 8010ce8:	68bb      	ldr	r3, [r7, #8]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	e000      	b.n	8010cf0 <udp_bind+0xb0>
 8010cee:	2300      	movs	r3, #0
 8010cf0:	68fa      	ldr	r2, [r7, #12]
 8010cf2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	88fa      	ldrh	r2, [r7, #6]
 8010cf8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8010cfa:	7cfb      	ldrb	r3, [r7, #19]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d106      	bne.n	8010d0e <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8010d00:	4b06      	ldr	r3, [pc, #24]	; (8010d1c <udp_bind+0xdc>)
 8010d02:	681a      	ldr	r2, [r3, #0]
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8010d08:	4a04      	ldr	r2, [pc, #16]	; (8010d1c <udp_bind+0xdc>)
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8010d0e:	2300      	movs	r3, #0
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	3718      	adds	r7, #24
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}
 8010d18:	08016c84 	.word	0x08016c84
 8010d1c:	20006cb4 	.word	0x20006cb4

08010d20 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b086      	sub	sp, #24
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	60f8      	str	r0, [r7, #12]
 8010d28:	60b9      	str	r1, [r7, #8]
 8010d2a:	4613      	mov	r3, r2
 8010d2c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d002      	beq.n	8010d3a <udp_connect+0x1a>
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d102      	bne.n	8010d40 <udp_connect+0x20>
    return ERR_VAL;
 8010d3a:	f06f 0305 	mvn.w	r3, #5
 8010d3e:	e03e      	b.n	8010dbe <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	8a5b      	ldrh	r3, [r3, #18]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d10f      	bne.n	8010d68 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010d48:	68f9      	ldr	r1, [r7, #12]
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	8a5b      	ldrh	r3, [r3, #18]
 8010d4e:	461a      	mov	r2, r3
 8010d50:	68f8      	ldr	r0, [r7, #12]
 8010d52:	f7ff ff75 	bl	8010c40 <udp_bind>
 8010d56:	4603      	mov	r3, r0
 8010d58:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010d5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d002      	beq.n	8010d68 <udp_connect+0x48>
      return err;
 8010d62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010d66:	e02a      	b.n	8010dbe <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d002      	beq.n	8010d74 <udp_connect+0x54>
 8010d6e:	68bb      	ldr	r3, [r7, #8]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	e000      	b.n	8010d76 <udp_connect+0x56>
 8010d74:	2300      	movs	r3, #0
 8010d76:	68fa      	ldr	r2, [r7, #12]
 8010d78:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	88fa      	ldrh	r2, [r7, #6]
 8010d7e:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	7c1b      	ldrb	r3, [r3, #16]
 8010d84:	f043 0304 	orr.w	r3, r3, #4
 8010d88:	b2da      	uxtb	r2, r3
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010d8e:	4b0e      	ldr	r3, [pc, #56]	; (8010dc8 <udp_connect+0xa8>)
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	617b      	str	r3, [r7, #20]
 8010d94:	e008      	b.n	8010da8 <udp_connect+0x88>
    if (pcb == ipcb) {
 8010d96:	68fa      	ldr	r2, [r7, #12]
 8010d98:	697b      	ldr	r3, [r7, #20]
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	d101      	bne.n	8010da2 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	e00d      	b.n	8010dbe <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010da2:	697b      	ldr	r3, [r7, #20]
 8010da4:	68db      	ldr	r3, [r3, #12]
 8010da6:	617b      	str	r3, [r7, #20]
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d1f3      	bne.n	8010d96 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8010dae:	4b06      	ldr	r3, [pc, #24]	; (8010dc8 <udp_connect+0xa8>)
 8010db0:	681a      	ldr	r2, [r3, #0]
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8010db6:	4a04      	ldr	r2, [pc, #16]	; (8010dc8 <udp_connect+0xa8>)
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8010dbc:	2300      	movs	r3, #0
}
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	3718      	adds	r7, #24
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}
 8010dc6:	bf00      	nop
 8010dc8:	20006cb4 	.word	0x20006cb4

08010dcc <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8010dcc:	b480      	push	{r7}
 8010dce:	b083      	sub	sp, #12
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	2200      	movs	r2, #0
 8010dd8:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2200      	movs	r2, #0
 8010dde:	829a      	strh	r2, [r3, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	7c1b      	ldrb	r3, [r3, #16]
 8010de4:	f023 0304 	bic.w	r3, r3, #4
 8010de8:	b2da      	uxtb	r2, r3
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	741a      	strb	r2, [r3, #16]
}
 8010dee:	bf00      	nop
 8010df0:	370c      	adds	r7, #12
 8010df2:	46bd      	mov	sp, r7
 8010df4:	bc80      	pop	{r7}
 8010df6:	4770      	bx	lr

08010df8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8010df8:	b480      	push	{r7}
 8010dfa:	b085      	sub	sp, #20
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	60f8      	str	r0, [r7, #12]
 8010e00:	60b9      	str	r1, [r7, #8]
 8010e02:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	68ba      	ldr	r2, [r7, #8]
 8010e08:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	687a      	ldr	r2, [r7, #4]
 8010e0e:	61da      	str	r2, [r3, #28]
}
 8010e10:	bf00      	nop
 8010e12:	3714      	adds	r7, #20
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bc80      	pop	{r7}
 8010e18:	4770      	bx	lr
	...

08010e1c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b084      	sub	sp, #16
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8010e24:	4b15      	ldr	r3, [pc, #84]	; (8010e7c <udp_remove+0x60>)
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	687a      	ldr	r2, [r7, #4]
 8010e2a:	429a      	cmp	r2, r3
 8010e2c:	d105      	bne.n	8010e3a <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8010e2e:	4b13      	ldr	r3, [pc, #76]	; (8010e7c <udp_remove+0x60>)
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	68db      	ldr	r3, [r3, #12]
 8010e34:	4a11      	ldr	r2, [pc, #68]	; (8010e7c <udp_remove+0x60>)
 8010e36:	6013      	str	r3, [r2, #0]
 8010e38:	e017      	b.n	8010e6a <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010e3a:	4b10      	ldr	r3, [pc, #64]	; (8010e7c <udp_remove+0x60>)
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	60fb      	str	r3, [r7, #12]
 8010e40:	e010      	b.n	8010e64 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	68db      	ldr	r3, [r3, #12]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d009      	beq.n	8010e5e <udp_remove+0x42>
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	68db      	ldr	r3, [r3, #12]
 8010e4e:	687a      	ldr	r2, [r7, #4]
 8010e50:	429a      	cmp	r2, r3
 8010e52:	d104      	bne.n	8010e5e <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	68da      	ldr	r2, [r3, #12]
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	60da      	str	r2, [r3, #12]
        break;
 8010e5c:	e005      	b.n	8010e6a <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	68db      	ldr	r3, [r3, #12]
 8010e62:	60fb      	str	r3, [r7, #12]
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d1eb      	bne.n	8010e42 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8010e6a:	6879      	ldr	r1, [r7, #4]
 8010e6c:	2000      	movs	r0, #0
 8010e6e:	f7f9 ff87 	bl	800ad80 <memp_free>
}
 8010e72:	bf00      	nop
 8010e74:	3710      	adds	r7, #16
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}
 8010e7a:	bf00      	nop
 8010e7c:	20006cb4 	.word	0x20006cb4

08010e80 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b082      	sub	sp, #8
 8010e84:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8010e86:	2000      	movs	r0, #0
 8010e88:	f7f9 ff2e 	bl	800ace8 <memp_malloc>
 8010e8c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d007      	beq.n	8010ea4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8010e94:	2220      	movs	r2, #32
 8010e96:	2100      	movs	r1, #0
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f002 fcab 	bl	80137f4 <memset>
    pcb->ttl = UDP_TTL;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	22ff      	movs	r2, #255	; 0xff
 8010ea2:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8010ea4:	687b      	ldr	r3, [r7, #4]
}
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	3708      	adds	r7, #8
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd80      	pop	{r7, pc}
	...

08010eb0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8010eb0:	b480      	push	{r7}
 8010eb2:	b085      	sub	sp, #20
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
 8010eb8:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d01e      	beq.n	8010efe <udp_netif_ip_addr_changed+0x4e>
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d01a      	beq.n	8010efe <udp_netif_ip_addr_changed+0x4e>
 8010ec8:	683b      	ldr	r3, [r7, #0]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d017      	beq.n	8010efe <udp_netif_ip_addr_changed+0x4e>
 8010ece:	683b      	ldr	r3, [r7, #0]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d013      	beq.n	8010efe <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010ed6:	4b0c      	ldr	r3, [pc, #48]	; (8010f08 <udp_netif_ip_addr_changed+0x58>)
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	60fb      	str	r3, [r7, #12]
 8010edc:	e00c      	b.n	8010ef8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	681a      	ldr	r2, [r3, #0]
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	429a      	cmp	r2, r3
 8010ee8:	d103      	bne.n	8010ef2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010eea:	683b      	ldr	r3, [r7, #0]
 8010eec:	681a      	ldr	r2, [r3, #0]
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	68db      	ldr	r3, [r3, #12]
 8010ef6:	60fb      	str	r3, [r7, #12]
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d1ef      	bne.n	8010ede <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010efe:	bf00      	nop
 8010f00:	3714      	adds	r7, #20
 8010f02:	46bd      	mov	sp, r7
 8010f04:	bc80      	pop	{r7}
 8010f06:	4770      	bx	lr
 8010f08:	20006cb4 	.word	0x20006cb4

08010f0c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b082      	sub	sp, #8
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010f14:	4915      	ldr	r1, [pc, #84]	; (8010f6c <etharp_free_entry+0x60>)
 8010f16:	687a      	ldr	r2, [r7, #4]
 8010f18:	4613      	mov	r3, r2
 8010f1a:	005b      	lsls	r3, r3, #1
 8010f1c:	4413      	add	r3, r2
 8010f1e:	00db      	lsls	r3, r3, #3
 8010f20:	440b      	add	r3, r1
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d013      	beq.n	8010f50 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010f28:	4910      	ldr	r1, [pc, #64]	; (8010f6c <etharp_free_entry+0x60>)
 8010f2a:	687a      	ldr	r2, [r7, #4]
 8010f2c:	4613      	mov	r3, r2
 8010f2e:	005b      	lsls	r3, r3, #1
 8010f30:	4413      	add	r3, r2
 8010f32:	00db      	lsls	r3, r3, #3
 8010f34:	440b      	add	r3, r1
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	4618      	mov	r0, r3
 8010f3a:	f7fa fc59 	bl	800b7f0 <pbuf_free>
    arp_table[i].q = NULL;
 8010f3e:	490b      	ldr	r1, [pc, #44]	; (8010f6c <etharp_free_entry+0x60>)
 8010f40:	687a      	ldr	r2, [r7, #4]
 8010f42:	4613      	mov	r3, r2
 8010f44:	005b      	lsls	r3, r3, #1
 8010f46:	4413      	add	r3, r2
 8010f48:	00db      	lsls	r3, r3, #3
 8010f4a:	440b      	add	r3, r1
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010f50:	4906      	ldr	r1, [pc, #24]	; (8010f6c <etharp_free_entry+0x60>)
 8010f52:	687a      	ldr	r2, [r7, #4]
 8010f54:	4613      	mov	r3, r2
 8010f56:	005b      	lsls	r3, r3, #1
 8010f58:	4413      	add	r3, r2
 8010f5a:	00db      	lsls	r3, r3, #3
 8010f5c:	440b      	add	r3, r1
 8010f5e:	3314      	adds	r3, #20
 8010f60:	2200      	movs	r2, #0
 8010f62:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010f64:	bf00      	nop
 8010f66:	3708      	adds	r7, #8
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	bd80      	pop	{r7, pc}
 8010f6c:	20000540 	.word	0x20000540

08010f70 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b082      	sub	sp, #8
 8010f74:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010f76:	2300      	movs	r3, #0
 8010f78:	71fb      	strb	r3, [r7, #7]
 8010f7a:	e096      	b.n	80110aa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010f7c:	79fa      	ldrb	r2, [r7, #7]
 8010f7e:	494f      	ldr	r1, [pc, #316]	; (80110bc <etharp_tmr+0x14c>)
 8010f80:	4613      	mov	r3, r2
 8010f82:	005b      	lsls	r3, r3, #1
 8010f84:	4413      	add	r3, r2
 8010f86:	00db      	lsls	r3, r3, #3
 8010f88:	440b      	add	r3, r1
 8010f8a:	3314      	adds	r3, #20
 8010f8c:	781b      	ldrb	r3, [r3, #0]
 8010f8e:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8010f90:	79bb      	ldrb	r3, [r7, #6]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	f000 8086 	beq.w	80110a4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8010f98:	79fa      	ldrb	r2, [r7, #7]
 8010f9a:	4948      	ldr	r1, [pc, #288]	; (80110bc <etharp_tmr+0x14c>)
 8010f9c:	4613      	mov	r3, r2
 8010f9e:	005b      	lsls	r3, r3, #1
 8010fa0:	4413      	add	r3, r2
 8010fa2:	00db      	lsls	r3, r3, #3
 8010fa4:	440b      	add	r3, r1
 8010fa6:	3312      	adds	r3, #18
 8010fa8:	881b      	ldrh	r3, [r3, #0]
 8010faa:	3301      	adds	r3, #1
 8010fac:	b298      	uxth	r0, r3
 8010fae:	4943      	ldr	r1, [pc, #268]	; (80110bc <etharp_tmr+0x14c>)
 8010fb0:	4613      	mov	r3, r2
 8010fb2:	005b      	lsls	r3, r3, #1
 8010fb4:	4413      	add	r3, r2
 8010fb6:	00db      	lsls	r3, r3, #3
 8010fb8:	440b      	add	r3, r1
 8010fba:	3312      	adds	r3, #18
 8010fbc:	4602      	mov	r2, r0
 8010fbe:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010fc0:	79fa      	ldrb	r2, [r7, #7]
 8010fc2:	493e      	ldr	r1, [pc, #248]	; (80110bc <etharp_tmr+0x14c>)
 8010fc4:	4613      	mov	r3, r2
 8010fc6:	005b      	lsls	r3, r3, #1
 8010fc8:	4413      	add	r3, r2
 8010fca:	00db      	lsls	r3, r3, #3
 8010fcc:	440b      	add	r3, r1
 8010fce:	3312      	adds	r3, #18
 8010fd0:	881b      	ldrh	r3, [r3, #0]
 8010fd2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010fd6:	d215      	bcs.n	8011004 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010fd8:	79fa      	ldrb	r2, [r7, #7]
 8010fda:	4938      	ldr	r1, [pc, #224]	; (80110bc <etharp_tmr+0x14c>)
 8010fdc:	4613      	mov	r3, r2
 8010fde:	005b      	lsls	r3, r3, #1
 8010fe0:	4413      	add	r3, r2
 8010fe2:	00db      	lsls	r3, r3, #3
 8010fe4:	440b      	add	r3, r1
 8010fe6:	3314      	adds	r3, #20
 8010fe8:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010fea:	2b01      	cmp	r3, #1
 8010fec:	d10f      	bne.n	801100e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010fee:	79fa      	ldrb	r2, [r7, #7]
 8010ff0:	4932      	ldr	r1, [pc, #200]	; (80110bc <etharp_tmr+0x14c>)
 8010ff2:	4613      	mov	r3, r2
 8010ff4:	005b      	lsls	r3, r3, #1
 8010ff6:	4413      	add	r3, r2
 8010ff8:	00db      	lsls	r3, r3, #3
 8010ffa:	440b      	add	r3, r1
 8010ffc:	3312      	adds	r3, #18
 8010ffe:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011000:	2b04      	cmp	r3, #4
 8011002:	d904      	bls.n	801100e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011004:	79fb      	ldrb	r3, [r7, #7]
 8011006:	4618      	mov	r0, r3
 8011008:	f7ff ff80 	bl	8010f0c <etharp_free_entry>
 801100c:	e04a      	b.n	80110a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801100e:	79fa      	ldrb	r2, [r7, #7]
 8011010:	492a      	ldr	r1, [pc, #168]	; (80110bc <etharp_tmr+0x14c>)
 8011012:	4613      	mov	r3, r2
 8011014:	005b      	lsls	r3, r3, #1
 8011016:	4413      	add	r3, r2
 8011018:	00db      	lsls	r3, r3, #3
 801101a:	440b      	add	r3, r1
 801101c:	3314      	adds	r3, #20
 801101e:	781b      	ldrb	r3, [r3, #0]
 8011020:	2b03      	cmp	r3, #3
 8011022:	d10a      	bne.n	801103a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011024:	79fa      	ldrb	r2, [r7, #7]
 8011026:	4925      	ldr	r1, [pc, #148]	; (80110bc <etharp_tmr+0x14c>)
 8011028:	4613      	mov	r3, r2
 801102a:	005b      	lsls	r3, r3, #1
 801102c:	4413      	add	r3, r2
 801102e:	00db      	lsls	r3, r3, #3
 8011030:	440b      	add	r3, r1
 8011032:	3314      	adds	r3, #20
 8011034:	2204      	movs	r2, #4
 8011036:	701a      	strb	r2, [r3, #0]
 8011038:	e034      	b.n	80110a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801103a:	79fa      	ldrb	r2, [r7, #7]
 801103c:	491f      	ldr	r1, [pc, #124]	; (80110bc <etharp_tmr+0x14c>)
 801103e:	4613      	mov	r3, r2
 8011040:	005b      	lsls	r3, r3, #1
 8011042:	4413      	add	r3, r2
 8011044:	00db      	lsls	r3, r3, #3
 8011046:	440b      	add	r3, r1
 8011048:	3314      	adds	r3, #20
 801104a:	781b      	ldrb	r3, [r3, #0]
 801104c:	2b04      	cmp	r3, #4
 801104e:	d10a      	bne.n	8011066 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011050:	79fa      	ldrb	r2, [r7, #7]
 8011052:	491a      	ldr	r1, [pc, #104]	; (80110bc <etharp_tmr+0x14c>)
 8011054:	4613      	mov	r3, r2
 8011056:	005b      	lsls	r3, r3, #1
 8011058:	4413      	add	r3, r2
 801105a:	00db      	lsls	r3, r3, #3
 801105c:	440b      	add	r3, r1
 801105e:	3314      	adds	r3, #20
 8011060:	2202      	movs	r2, #2
 8011062:	701a      	strb	r2, [r3, #0]
 8011064:	e01e      	b.n	80110a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011066:	79fa      	ldrb	r2, [r7, #7]
 8011068:	4914      	ldr	r1, [pc, #80]	; (80110bc <etharp_tmr+0x14c>)
 801106a:	4613      	mov	r3, r2
 801106c:	005b      	lsls	r3, r3, #1
 801106e:	4413      	add	r3, r2
 8011070:	00db      	lsls	r3, r3, #3
 8011072:	440b      	add	r3, r1
 8011074:	3314      	adds	r3, #20
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	2b01      	cmp	r3, #1
 801107a:	d113      	bne.n	80110a4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801107c:	79fa      	ldrb	r2, [r7, #7]
 801107e:	490f      	ldr	r1, [pc, #60]	; (80110bc <etharp_tmr+0x14c>)
 8011080:	4613      	mov	r3, r2
 8011082:	005b      	lsls	r3, r3, #1
 8011084:	4413      	add	r3, r2
 8011086:	00db      	lsls	r3, r3, #3
 8011088:	440b      	add	r3, r1
 801108a:	3308      	adds	r3, #8
 801108c:	6818      	ldr	r0, [r3, #0]
 801108e:	79fa      	ldrb	r2, [r7, #7]
 8011090:	4613      	mov	r3, r2
 8011092:	005b      	lsls	r3, r3, #1
 8011094:	4413      	add	r3, r2
 8011096:	00db      	lsls	r3, r3, #3
 8011098:	4a08      	ldr	r2, [pc, #32]	; (80110bc <etharp_tmr+0x14c>)
 801109a:	4413      	add	r3, r2
 801109c:	3304      	adds	r3, #4
 801109e:	4619      	mov	r1, r3
 80110a0:	f000 fe38 	bl	8011d14 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80110a4:	79fb      	ldrb	r3, [r7, #7]
 80110a6:	3301      	adds	r3, #1
 80110a8:	71fb      	strb	r3, [r7, #7]
 80110aa:	79fb      	ldrb	r3, [r7, #7]
 80110ac:	2b09      	cmp	r3, #9
 80110ae:	f67f af65 	bls.w	8010f7c <etharp_tmr+0xc>
      }
    }
  }
}
 80110b2:	bf00      	nop
 80110b4:	bf00      	nop
 80110b6:	3708      	adds	r7, #8
 80110b8:	46bd      	mov	sp, r7
 80110ba:	bd80      	pop	{r7, pc}
 80110bc:	20000540 	.word	0x20000540

080110c0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b088      	sub	sp, #32
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	60f8      	str	r0, [r7, #12]
 80110c8:	460b      	mov	r3, r1
 80110ca:	607a      	str	r2, [r7, #4]
 80110cc:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80110ce:	230a      	movs	r3, #10
 80110d0:	77fb      	strb	r3, [r7, #31]
 80110d2:	230a      	movs	r3, #10
 80110d4:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 80110d6:	230a      	movs	r3, #10
 80110d8:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 80110da:	2300      	movs	r3, #0
 80110dc:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 80110de:	230a      	movs	r3, #10
 80110e0:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80110e2:	2300      	movs	r3, #0
 80110e4:	833b      	strh	r3, [r7, #24]
 80110e6:	2300      	movs	r3, #0
 80110e8:	82fb      	strh	r3, [r7, #22]
 80110ea:	2300      	movs	r3, #0
 80110ec:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80110ee:	2300      	movs	r3, #0
 80110f0:	773b      	strb	r3, [r7, #28]
 80110f2:	e093      	b.n	801121c <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 80110f4:	7f3a      	ldrb	r2, [r7, #28]
 80110f6:	4990      	ldr	r1, [pc, #576]	; (8011338 <etharp_find_entry+0x278>)
 80110f8:	4613      	mov	r3, r2
 80110fa:	005b      	lsls	r3, r3, #1
 80110fc:	4413      	add	r3, r2
 80110fe:	00db      	lsls	r3, r3, #3
 8011100:	440b      	add	r3, r1
 8011102:	3314      	adds	r3, #20
 8011104:	781b      	ldrb	r3, [r3, #0]
 8011106:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011108:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801110c:	2b0a      	cmp	r3, #10
 801110e:	d105      	bne.n	801111c <etharp_find_entry+0x5c>
 8011110:	7cfb      	ldrb	r3, [r7, #19]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d102      	bne.n	801111c <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8011116:	7f3b      	ldrb	r3, [r7, #28]
 8011118:	777b      	strb	r3, [r7, #29]
 801111a:	e07c      	b.n	8011216 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 801111c:	7cfb      	ldrb	r3, [r7, #19]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d079      	beq.n	8011216 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011122:	7cfb      	ldrb	r3, [r7, #19]
 8011124:	2b01      	cmp	r3, #1
 8011126:	d009      	beq.n	801113c <etharp_find_entry+0x7c>
 8011128:	7cfb      	ldrb	r3, [r7, #19]
 801112a:	2b01      	cmp	r3, #1
 801112c:	d806      	bhi.n	801113c <etharp_find_entry+0x7c>
 801112e:	4b83      	ldr	r3, [pc, #524]	; (801133c <etharp_find_entry+0x27c>)
 8011130:	f240 1225 	movw	r2, #293	; 0x125
 8011134:	4982      	ldr	r1, [pc, #520]	; (8011340 <etharp_find_entry+0x280>)
 8011136:	4883      	ldr	r0, [pc, #524]	; (8011344 <etharp_find_entry+0x284>)
 8011138:	f002 fc0a 	bl	8013950 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d00f      	beq.n	8011162 <etharp_find_entry+0xa2>
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	6819      	ldr	r1, [r3, #0]
 8011146:	7f3a      	ldrb	r2, [r7, #28]
 8011148:	487b      	ldr	r0, [pc, #492]	; (8011338 <etharp_find_entry+0x278>)
 801114a:	4613      	mov	r3, r2
 801114c:	005b      	lsls	r3, r3, #1
 801114e:	4413      	add	r3, r2
 8011150:	00db      	lsls	r3, r3, #3
 8011152:	4403      	add	r3, r0
 8011154:	3304      	adds	r3, #4
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	4299      	cmp	r1, r3
 801115a:	d102      	bne.n	8011162 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 801115c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8011160:	e0e5      	b.n	801132e <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011162:	7cfb      	ldrb	r3, [r7, #19]
 8011164:	2b01      	cmp	r3, #1
 8011166:	d13b      	bne.n	80111e0 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011168:	7f3a      	ldrb	r2, [r7, #28]
 801116a:	4973      	ldr	r1, [pc, #460]	; (8011338 <etharp_find_entry+0x278>)
 801116c:	4613      	mov	r3, r2
 801116e:	005b      	lsls	r3, r3, #1
 8011170:	4413      	add	r3, r2
 8011172:	00db      	lsls	r3, r3, #3
 8011174:	440b      	add	r3, r1
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d018      	beq.n	80111ae <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 801117c:	7f3a      	ldrb	r2, [r7, #28]
 801117e:	496e      	ldr	r1, [pc, #440]	; (8011338 <etharp_find_entry+0x278>)
 8011180:	4613      	mov	r3, r2
 8011182:	005b      	lsls	r3, r3, #1
 8011184:	4413      	add	r3, r2
 8011186:	00db      	lsls	r3, r3, #3
 8011188:	440b      	add	r3, r1
 801118a:	3312      	adds	r3, #18
 801118c:	881b      	ldrh	r3, [r3, #0]
 801118e:	8b3a      	ldrh	r2, [r7, #24]
 8011190:	429a      	cmp	r2, r3
 8011192:	d840      	bhi.n	8011216 <etharp_find_entry+0x156>
            old_queue = i;
 8011194:	7f3b      	ldrb	r3, [r7, #28]
 8011196:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8011198:	7f3a      	ldrb	r2, [r7, #28]
 801119a:	4967      	ldr	r1, [pc, #412]	; (8011338 <etharp_find_entry+0x278>)
 801119c:	4613      	mov	r3, r2
 801119e:	005b      	lsls	r3, r3, #1
 80111a0:	4413      	add	r3, r2
 80111a2:	00db      	lsls	r3, r3, #3
 80111a4:	440b      	add	r3, r1
 80111a6:	3312      	adds	r3, #18
 80111a8:	881b      	ldrh	r3, [r3, #0]
 80111aa:	833b      	strh	r3, [r7, #24]
 80111ac:	e033      	b.n	8011216 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80111ae:	7f3a      	ldrb	r2, [r7, #28]
 80111b0:	4961      	ldr	r1, [pc, #388]	; (8011338 <etharp_find_entry+0x278>)
 80111b2:	4613      	mov	r3, r2
 80111b4:	005b      	lsls	r3, r3, #1
 80111b6:	4413      	add	r3, r2
 80111b8:	00db      	lsls	r3, r3, #3
 80111ba:	440b      	add	r3, r1
 80111bc:	3312      	adds	r3, #18
 80111be:	881b      	ldrh	r3, [r3, #0]
 80111c0:	8afa      	ldrh	r2, [r7, #22]
 80111c2:	429a      	cmp	r2, r3
 80111c4:	d827      	bhi.n	8011216 <etharp_find_entry+0x156>
            old_pending = i;
 80111c6:	7f3b      	ldrb	r3, [r7, #28]
 80111c8:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 80111ca:	7f3a      	ldrb	r2, [r7, #28]
 80111cc:	495a      	ldr	r1, [pc, #360]	; (8011338 <etharp_find_entry+0x278>)
 80111ce:	4613      	mov	r3, r2
 80111d0:	005b      	lsls	r3, r3, #1
 80111d2:	4413      	add	r3, r2
 80111d4:	00db      	lsls	r3, r3, #3
 80111d6:	440b      	add	r3, r1
 80111d8:	3312      	adds	r3, #18
 80111da:	881b      	ldrh	r3, [r3, #0]
 80111dc:	82fb      	strh	r3, [r7, #22]
 80111de:	e01a      	b.n	8011216 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80111e0:	7cfb      	ldrb	r3, [r7, #19]
 80111e2:	2b01      	cmp	r3, #1
 80111e4:	d917      	bls.n	8011216 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80111e6:	7f3a      	ldrb	r2, [r7, #28]
 80111e8:	4953      	ldr	r1, [pc, #332]	; (8011338 <etharp_find_entry+0x278>)
 80111ea:	4613      	mov	r3, r2
 80111ec:	005b      	lsls	r3, r3, #1
 80111ee:	4413      	add	r3, r2
 80111f0:	00db      	lsls	r3, r3, #3
 80111f2:	440b      	add	r3, r1
 80111f4:	3312      	adds	r3, #18
 80111f6:	881b      	ldrh	r3, [r3, #0]
 80111f8:	8aba      	ldrh	r2, [r7, #20]
 80111fa:	429a      	cmp	r2, r3
 80111fc:	d80b      	bhi.n	8011216 <etharp_find_entry+0x156>
            old_stable = i;
 80111fe:	7f3b      	ldrb	r3, [r7, #28]
 8011200:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8011202:	7f3a      	ldrb	r2, [r7, #28]
 8011204:	494c      	ldr	r1, [pc, #304]	; (8011338 <etharp_find_entry+0x278>)
 8011206:	4613      	mov	r3, r2
 8011208:	005b      	lsls	r3, r3, #1
 801120a:	4413      	add	r3, r2
 801120c:	00db      	lsls	r3, r3, #3
 801120e:	440b      	add	r3, r1
 8011210:	3312      	adds	r3, #18
 8011212:	881b      	ldrh	r3, [r3, #0]
 8011214:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011216:	7f3b      	ldrb	r3, [r7, #28]
 8011218:	3301      	adds	r3, #1
 801121a:	773b      	strb	r3, [r7, #28]
 801121c:	7f3b      	ldrb	r3, [r7, #28]
 801121e:	2b09      	cmp	r3, #9
 8011220:	f67f af68 	bls.w	80110f4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011224:	7afb      	ldrb	r3, [r7, #11]
 8011226:	f003 0302 	and.w	r3, r3, #2
 801122a:	2b00      	cmp	r3, #0
 801122c:	d108      	bne.n	8011240 <etharp_find_entry+0x180>
 801122e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011232:	2b0a      	cmp	r3, #10
 8011234:	d107      	bne.n	8011246 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011236:	7afb      	ldrb	r3, [r7, #11]
 8011238:	f003 0301 	and.w	r3, r3, #1
 801123c:	2b00      	cmp	r3, #0
 801123e:	d102      	bne.n	8011246 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8011240:	f04f 33ff 	mov.w	r3, #4294967295
 8011244:	e073      	b.n	801132e <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011246:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801124a:	2b09      	cmp	r3, #9
 801124c:	dc02      	bgt.n	8011254 <etharp_find_entry+0x194>
    i = empty;
 801124e:	7f7b      	ldrb	r3, [r7, #29]
 8011250:	773b      	strb	r3, [r7, #28]
 8011252:	e036      	b.n	80112c2 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011254:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011258:	2b09      	cmp	r3, #9
 801125a:	dc13      	bgt.n	8011284 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 801125c:	7fbb      	ldrb	r3, [r7, #30]
 801125e:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011260:	7f3a      	ldrb	r2, [r7, #28]
 8011262:	4935      	ldr	r1, [pc, #212]	; (8011338 <etharp_find_entry+0x278>)
 8011264:	4613      	mov	r3, r2
 8011266:	005b      	lsls	r3, r3, #1
 8011268:	4413      	add	r3, r2
 801126a:	00db      	lsls	r3, r3, #3
 801126c:	440b      	add	r3, r1
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d018      	beq.n	80112a6 <etharp_find_entry+0x1e6>
 8011274:	4b31      	ldr	r3, [pc, #196]	; (801133c <etharp_find_entry+0x27c>)
 8011276:	f240 126f 	movw	r2, #367	; 0x16f
 801127a:	4933      	ldr	r1, [pc, #204]	; (8011348 <etharp_find_entry+0x288>)
 801127c:	4831      	ldr	r0, [pc, #196]	; (8011344 <etharp_find_entry+0x284>)
 801127e:	f002 fb67 	bl	8013950 <iprintf>
 8011282:	e010      	b.n	80112a6 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011284:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011288:	2b09      	cmp	r3, #9
 801128a:	dc02      	bgt.n	8011292 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 801128c:	7ffb      	ldrb	r3, [r7, #31]
 801128e:	773b      	strb	r3, [r7, #28]
 8011290:	e009      	b.n	80112a6 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011292:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011296:	2b09      	cmp	r3, #9
 8011298:	dc02      	bgt.n	80112a0 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801129a:	7efb      	ldrb	r3, [r7, #27]
 801129c:	773b      	strb	r3, [r7, #28]
 801129e:	e002      	b.n	80112a6 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 80112a0:	f04f 33ff 	mov.w	r3, #4294967295
 80112a4:	e043      	b.n	801132e <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80112a6:	7f3b      	ldrb	r3, [r7, #28]
 80112a8:	2b09      	cmp	r3, #9
 80112aa:	d906      	bls.n	80112ba <etharp_find_entry+0x1fa>
 80112ac:	4b23      	ldr	r3, [pc, #140]	; (801133c <etharp_find_entry+0x27c>)
 80112ae:	f240 1281 	movw	r2, #385	; 0x181
 80112b2:	4926      	ldr	r1, [pc, #152]	; (801134c <etharp_find_entry+0x28c>)
 80112b4:	4823      	ldr	r0, [pc, #140]	; (8011344 <etharp_find_entry+0x284>)
 80112b6:	f002 fb4b 	bl	8013950 <iprintf>
    etharp_free_entry(i);
 80112ba:	7f3b      	ldrb	r3, [r7, #28]
 80112bc:	4618      	mov	r0, r3
 80112be:	f7ff fe25 	bl	8010f0c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80112c2:	7f3b      	ldrb	r3, [r7, #28]
 80112c4:	2b09      	cmp	r3, #9
 80112c6:	d906      	bls.n	80112d6 <etharp_find_entry+0x216>
 80112c8:	4b1c      	ldr	r3, [pc, #112]	; (801133c <etharp_find_entry+0x27c>)
 80112ca:	f240 1285 	movw	r2, #389	; 0x185
 80112ce:	491f      	ldr	r1, [pc, #124]	; (801134c <etharp_find_entry+0x28c>)
 80112d0:	481c      	ldr	r0, [pc, #112]	; (8011344 <etharp_find_entry+0x284>)
 80112d2:	f002 fb3d 	bl	8013950 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80112d6:	7f3a      	ldrb	r2, [r7, #28]
 80112d8:	4917      	ldr	r1, [pc, #92]	; (8011338 <etharp_find_entry+0x278>)
 80112da:	4613      	mov	r3, r2
 80112dc:	005b      	lsls	r3, r3, #1
 80112de:	4413      	add	r3, r2
 80112e0:	00db      	lsls	r3, r3, #3
 80112e2:	440b      	add	r3, r1
 80112e4:	3314      	adds	r3, #20
 80112e6:	781b      	ldrb	r3, [r3, #0]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d006      	beq.n	80112fa <etharp_find_entry+0x23a>
 80112ec:	4b13      	ldr	r3, [pc, #76]	; (801133c <etharp_find_entry+0x27c>)
 80112ee:	f44f 72c3 	mov.w	r2, #390	; 0x186
 80112f2:	4917      	ldr	r1, [pc, #92]	; (8011350 <etharp_find_entry+0x290>)
 80112f4:	4813      	ldr	r0, [pc, #76]	; (8011344 <etharp_find_entry+0x284>)
 80112f6:	f002 fb2b 	bl	8013950 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d00a      	beq.n	8011316 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011300:	7f3a      	ldrb	r2, [r7, #28]
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	6819      	ldr	r1, [r3, #0]
 8011306:	480c      	ldr	r0, [pc, #48]	; (8011338 <etharp_find_entry+0x278>)
 8011308:	4613      	mov	r3, r2
 801130a:	005b      	lsls	r3, r3, #1
 801130c:	4413      	add	r3, r2
 801130e:	00db      	lsls	r3, r3, #3
 8011310:	4403      	add	r3, r0
 8011312:	3304      	adds	r3, #4
 8011314:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011316:	7f3a      	ldrb	r2, [r7, #28]
 8011318:	4907      	ldr	r1, [pc, #28]	; (8011338 <etharp_find_entry+0x278>)
 801131a:	4613      	mov	r3, r2
 801131c:	005b      	lsls	r3, r3, #1
 801131e:	4413      	add	r3, r2
 8011320:	00db      	lsls	r3, r3, #3
 8011322:	440b      	add	r3, r1
 8011324:	3312      	adds	r3, #18
 8011326:	2200      	movs	r2, #0
 8011328:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 801132a:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 801132e:	4618      	mov	r0, r3
 8011330:	3720      	adds	r7, #32
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}
 8011336:	bf00      	nop
 8011338:	20000540 	.word	0x20000540
 801133c:	0801649c 	.word	0x0801649c
 8011340:	080164d4 	.word	0x080164d4
 8011344:	08016514 	.word	0x08016514
 8011348:	0801653c 	.word	0x0801653c
 801134c:	08016554 	.word	0x08016554
 8011350:	08016568 	.word	0x08016568

08011354 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b088      	sub	sp, #32
 8011358:	af02      	add	r7, sp, #8
 801135a:	60f8      	str	r0, [r7, #12]
 801135c:	60b9      	str	r1, [r7, #8]
 801135e:	607a      	str	r2, [r7, #4]
 8011360:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011368:	2b06      	cmp	r3, #6
 801136a:	d006      	beq.n	801137a <etharp_update_arp_entry+0x26>
 801136c:	4b48      	ldr	r3, [pc, #288]	; (8011490 <etharp_update_arp_entry+0x13c>)
 801136e:	f240 12ab 	movw	r2, #427	; 0x1ab
 8011372:	4948      	ldr	r1, [pc, #288]	; (8011494 <etharp_update_arp_entry+0x140>)
 8011374:	4848      	ldr	r0, [pc, #288]	; (8011498 <etharp_update_arp_entry+0x144>)
 8011376:	f002 faeb 	bl	8013950 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d012      	beq.n	80113a6 <etharp_update_arp_entry+0x52>
 8011380:	68bb      	ldr	r3, [r7, #8]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d00e      	beq.n	80113a6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011388:	68bb      	ldr	r3, [r7, #8]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	68f9      	ldr	r1, [r7, #12]
 801138e:	4618      	mov	r0, r3
 8011390:	f001 f8dc 	bl	801254c <ip4_addr_isbroadcast_u32>
 8011394:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011396:	2b00      	cmp	r3, #0
 8011398:	d105      	bne.n	80113a6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80113a2:	2be0      	cmp	r3, #224	; 0xe0
 80113a4:	d102      	bne.n	80113ac <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80113a6:	f06f 030f 	mvn.w	r3, #15
 80113aa:	e06c      	b.n	8011486 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80113ac:	78fb      	ldrb	r3, [r7, #3]
 80113ae:	68fa      	ldr	r2, [r7, #12]
 80113b0:	4619      	mov	r1, r3
 80113b2:	68b8      	ldr	r0, [r7, #8]
 80113b4:	f7ff fe84 	bl	80110c0 <etharp_find_entry>
 80113b8:	4603      	mov	r3, r0
 80113ba:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 80113bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	da02      	bge.n	80113ca <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80113c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80113c8:	e05d      	b.n	8011486 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80113ca:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80113ce:	4933      	ldr	r1, [pc, #204]	; (801149c <etharp_update_arp_entry+0x148>)
 80113d0:	4613      	mov	r3, r2
 80113d2:	005b      	lsls	r3, r3, #1
 80113d4:	4413      	add	r3, r2
 80113d6:	00db      	lsls	r3, r3, #3
 80113d8:	440b      	add	r3, r1
 80113da:	3314      	adds	r3, #20
 80113dc:	2202      	movs	r2, #2
 80113de:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80113e0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80113e4:	492d      	ldr	r1, [pc, #180]	; (801149c <etharp_update_arp_entry+0x148>)
 80113e6:	4613      	mov	r3, r2
 80113e8:	005b      	lsls	r3, r3, #1
 80113ea:	4413      	add	r3, r2
 80113ec:	00db      	lsls	r3, r3, #3
 80113ee:	440b      	add	r3, r1
 80113f0:	3308      	adds	r3, #8
 80113f2:	68fa      	ldr	r2, [r7, #12]
 80113f4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80113f6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80113fa:	4613      	mov	r3, r2
 80113fc:	005b      	lsls	r3, r3, #1
 80113fe:	4413      	add	r3, r2
 8011400:	00db      	lsls	r3, r3, #3
 8011402:	3308      	adds	r3, #8
 8011404:	4a25      	ldr	r2, [pc, #148]	; (801149c <etharp_update_arp_entry+0x148>)
 8011406:	4413      	add	r3, r2
 8011408:	3304      	adds	r3, #4
 801140a:	2206      	movs	r2, #6
 801140c:	6879      	ldr	r1, [r7, #4]
 801140e:	4618      	mov	r0, r3
 8011410:	f002 f9c8 	bl	80137a4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011414:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011418:	4920      	ldr	r1, [pc, #128]	; (801149c <etharp_update_arp_entry+0x148>)
 801141a:	4613      	mov	r3, r2
 801141c:	005b      	lsls	r3, r3, #1
 801141e:	4413      	add	r3, r2
 8011420:	00db      	lsls	r3, r3, #3
 8011422:	440b      	add	r3, r1
 8011424:	3312      	adds	r3, #18
 8011426:	2200      	movs	r2, #0
 8011428:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801142a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801142e:	491b      	ldr	r1, [pc, #108]	; (801149c <etharp_update_arp_entry+0x148>)
 8011430:	4613      	mov	r3, r2
 8011432:	005b      	lsls	r3, r3, #1
 8011434:	4413      	add	r3, r2
 8011436:	00db      	lsls	r3, r3, #3
 8011438:	440b      	add	r3, r1
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d021      	beq.n	8011484 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011440:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011444:	4915      	ldr	r1, [pc, #84]	; (801149c <etharp_update_arp_entry+0x148>)
 8011446:	4613      	mov	r3, r2
 8011448:	005b      	lsls	r3, r3, #1
 801144a:	4413      	add	r3, r2
 801144c:	00db      	lsls	r3, r3, #3
 801144e:	440b      	add	r3, r1
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011454:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011458:	4910      	ldr	r1, [pc, #64]	; (801149c <etharp_update_arp_entry+0x148>)
 801145a:	4613      	mov	r3, r2
 801145c:	005b      	lsls	r3, r3, #1
 801145e:	4413      	add	r3, r2
 8011460:	00db      	lsls	r3, r3, #3
 8011462:	440b      	add	r3, r1
 8011464:	2200      	movs	r2, #0
 8011466:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	f103 0229 	add.w	r2, r3, #41	; 0x29
 801146e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011472:	9300      	str	r3, [sp, #0]
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	6939      	ldr	r1, [r7, #16]
 8011478:	68f8      	ldr	r0, [r7, #12]
 801147a:	f001 ff0d 	bl	8013298 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801147e:	6938      	ldr	r0, [r7, #16]
 8011480:	f7fa f9b6 	bl	800b7f0 <pbuf_free>
  }
  return ERR_OK;
 8011484:	2300      	movs	r3, #0
}
 8011486:	4618      	mov	r0, r3
 8011488:	3718      	adds	r7, #24
 801148a:	46bd      	mov	sp, r7
 801148c:	bd80      	pop	{r7, pc}
 801148e:	bf00      	nop
 8011490:	0801649c 	.word	0x0801649c
 8011494:	08016594 	.word	0x08016594
 8011498:	08016514 	.word	0x08016514
 801149c:	20000540 	.word	0x20000540

080114a0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b084      	sub	sp, #16
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80114a8:	2300      	movs	r3, #0
 80114aa:	73fb      	strb	r3, [r7, #15]
 80114ac:	e01f      	b.n	80114ee <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 80114ae:	7bfa      	ldrb	r2, [r7, #15]
 80114b0:	4913      	ldr	r1, [pc, #76]	; (8011500 <etharp_cleanup_netif+0x60>)
 80114b2:	4613      	mov	r3, r2
 80114b4:	005b      	lsls	r3, r3, #1
 80114b6:	4413      	add	r3, r2
 80114b8:	00db      	lsls	r3, r3, #3
 80114ba:	440b      	add	r3, r1
 80114bc:	3314      	adds	r3, #20
 80114be:	781b      	ldrb	r3, [r3, #0]
 80114c0:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80114c2:	7bbb      	ldrb	r3, [r7, #14]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d00f      	beq.n	80114e8 <etharp_cleanup_netif+0x48>
 80114c8:	7bfa      	ldrb	r2, [r7, #15]
 80114ca:	490d      	ldr	r1, [pc, #52]	; (8011500 <etharp_cleanup_netif+0x60>)
 80114cc:	4613      	mov	r3, r2
 80114ce:	005b      	lsls	r3, r3, #1
 80114d0:	4413      	add	r3, r2
 80114d2:	00db      	lsls	r3, r3, #3
 80114d4:	440b      	add	r3, r1
 80114d6:	3308      	adds	r3, #8
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	687a      	ldr	r2, [r7, #4]
 80114dc:	429a      	cmp	r2, r3
 80114de:	d103      	bne.n	80114e8 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 80114e0:	7bfb      	ldrb	r3, [r7, #15]
 80114e2:	4618      	mov	r0, r3
 80114e4:	f7ff fd12 	bl	8010f0c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80114e8:	7bfb      	ldrb	r3, [r7, #15]
 80114ea:	3301      	adds	r3, #1
 80114ec:	73fb      	strb	r3, [r7, #15]
 80114ee:	7bfb      	ldrb	r3, [r7, #15]
 80114f0:	2b09      	cmp	r3, #9
 80114f2:	d9dc      	bls.n	80114ae <etharp_cleanup_netif+0xe>
    }
  }
}
 80114f4:	bf00      	nop
 80114f6:	bf00      	nop
 80114f8:	3710      	adds	r7, #16
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
 80114fe:	bf00      	nop
 8011500:	20000540 	.word	0x20000540

08011504 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011504:	b5b0      	push	{r4, r5, r7, lr}
 8011506:	b08a      	sub	sp, #40	; 0x28
 8011508:	af04      	add	r7, sp, #16
 801150a:	6078      	str	r0, [r7, #4]
 801150c:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801150e:	683b      	ldr	r3, [r7, #0]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d107      	bne.n	8011524 <etharp_input+0x20>
 8011514:	4b3d      	ldr	r3, [pc, #244]	; (801160c <etharp_input+0x108>)
 8011516:	f44f 7222 	mov.w	r2, #648	; 0x288
 801151a:	493d      	ldr	r1, [pc, #244]	; (8011610 <etharp_input+0x10c>)
 801151c:	483d      	ldr	r0, [pc, #244]	; (8011614 <etharp_input+0x110>)
 801151e:	f002 fa17 	bl	8013950 <iprintf>
 8011522:	e06f      	b.n	8011604 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	685b      	ldr	r3, [r3, #4]
 8011528:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801152a:	693b      	ldr	r3, [r7, #16]
 801152c:	881b      	ldrh	r3, [r3, #0]
 801152e:	b29b      	uxth	r3, r3
 8011530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011534:	d10c      	bne.n	8011550 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011536:	693b      	ldr	r3, [r7, #16]
 8011538:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801153a:	2b06      	cmp	r3, #6
 801153c:	d108      	bne.n	8011550 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801153e:	693b      	ldr	r3, [r7, #16]
 8011540:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011542:	2b04      	cmp	r3, #4
 8011544:	d104      	bne.n	8011550 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011546:	693b      	ldr	r3, [r7, #16]
 8011548:	885b      	ldrh	r3, [r3, #2]
 801154a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801154c:	2b08      	cmp	r3, #8
 801154e:	d003      	beq.n	8011558 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011550:	6878      	ldr	r0, [r7, #4]
 8011552:	f7fa f94d 	bl	800b7f0 <pbuf_free>
    return;
 8011556:	e055      	b.n	8011604 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8011558:	693b      	ldr	r3, [r7, #16]
 801155a:	330e      	adds	r3, #14
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8011560:	693b      	ldr	r3, [r7, #16]
 8011562:	3318      	adds	r3, #24
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	3304      	adds	r3, #4
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d102      	bne.n	8011578 <etharp_input+0x74>
    for_us = 0;
 8011572:	2300      	movs	r3, #0
 8011574:	75fb      	strb	r3, [r7, #23]
 8011576:	e009      	b.n	801158c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011578:	68ba      	ldr	r2, [r7, #8]
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	3304      	adds	r3, #4
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	429a      	cmp	r2, r3
 8011582:	bf0c      	ite	eq
 8011584:	2301      	moveq	r3, #1
 8011586:	2300      	movne	r3, #0
 8011588:	b2db      	uxtb	r3, r3
 801158a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801158c:	693b      	ldr	r3, [r7, #16]
 801158e:	f103 0208 	add.w	r2, r3, #8
 8011592:	7dfb      	ldrb	r3, [r7, #23]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d001      	beq.n	801159c <etharp_input+0x98>
 8011598:	2301      	movs	r3, #1
 801159a:	e000      	b.n	801159e <etharp_input+0x9a>
 801159c:	2302      	movs	r3, #2
 801159e:	f107 010c 	add.w	r1, r7, #12
 80115a2:	6838      	ldr	r0, [r7, #0]
 80115a4:	f7ff fed6 	bl	8011354 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80115a8:	693b      	ldr	r3, [r7, #16]
 80115aa:	88db      	ldrh	r3, [r3, #6]
 80115ac:	b29b      	uxth	r3, r3
 80115ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80115b2:	d003      	beq.n	80115bc <etharp_input+0xb8>
 80115b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80115b8:	d01e      	beq.n	80115f8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 80115ba:	e020      	b.n	80115fe <etharp_input+0xfa>
    if (for_us) {
 80115bc:	7dfb      	ldrb	r3, [r7, #23]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d01c      	beq.n	80115fc <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80115c2:	683b      	ldr	r3, [r7, #0]
 80115c4:	f103 0029 	add.w	r0, r3, #41	; 0x29
 80115c8:	693b      	ldr	r3, [r7, #16]
 80115ca:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	f103 0529 	add.w	r5, r3, #41	; 0x29
 80115d4:	683b      	ldr	r3, [r7, #0]
 80115d6:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 80115d8:	693a      	ldr	r2, [r7, #16]
 80115da:	3208      	adds	r2, #8
      etharp_raw(netif,
 80115dc:	2102      	movs	r1, #2
 80115de:	9103      	str	r1, [sp, #12]
 80115e0:	f107 010c 	add.w	r1, r7, #12
 80115e4:	9102      	str	r1, [sp, #8]
 80115e6:	9201      	str	r2, [sp, #4]
 80115e8:	9300      	str	r3, [sp, #0]
 80115ea:	462b      	mov	r3, r5
 80115ec:	4622      	mov	r2, r4
 80115ee:	4601      	mov	r1, r0
 80115f0:	6838      	ldr	r0, [r7, #0]
 80115f2:	f000 fae1 	bl	8011bb8 <etharp_raw>
    break;
 80115f6:	e001      	b.n	80115fc <etharp_input+0xf8>
    break;
 80115f8:	bf00      	nop
 80115fa:	e000      	b.n	80115fe <etharp_input+0xfa>
    break;
 80115fc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80115fe:	6878      	ldr	r0, [r7, #4]
 8011600:	f7fa f8f6 	bl	800b7f0 <pbuf_free>
}
 8011604:	3718      	adds	r7, #24
 8011606:	46bd      	mov	sp, r7
 8011608:	bdb0      	pop	{r4, r5, r7, pc}
 801160a:	bf00      	nop
 801160c:	0801649c 	.word	0x0801649c
 8011610:	080165ec 	.word	0x080165ec
 8011614:	08016514 	.word	0x08016514

08011618 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b086      	sub	sp, #24
 801161c:	af02      	add	r7, sp, #8
 801161e:	60f8      	str	r0, [r7, #12]
 8011620:	60b9      	str	r1, [r7, #8]
 8011622:	4613      	mov	r3, r2
 8011624:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011626:	79fa      	ldrb	r2, [r7, #7]
 8011628:	4944      	ldr	r1, [pc, #272]	; (801173c <etharp_output_to_arp_index+0x124>)
 801162a:	4613      	mov	r3, r2
 801162c:	005b      	lsls	r3, r3, #1
 801162e:	4413      	add	r3, r2
 8011630:	00db      	lsls	r3, r3, #3
 8011632:	440b      	add	r3, r1
 8011634:	3314      	adds	r3, #20
 8011636:	781b      	ldrb	r3, [r3, #0]
 8011638:	2b01      	cmp	r3, #1
 801163a:	d806      	bhi.n	801164a <etharp_output_to_arp_index+0x32>
 801163c:	4b40      	ldr	r3, [pc, #256]	; (8011740 <etharp_output_to_arp_index+0x128>)
 801163e:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 8011642:	4940      	ldr	r1, [pc, #256]	; (8011744 <etharp_output_to_arp_index+0x12c>)
 8011644:	4840      	ldr	r0, [pc, #256]	; (8011748 <etharp_output_to_arp_index+0x130>)
 8011646:	f002 f983 	bl	8013950 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801164a:	79fa      	ldrb	r2, [r7, #7]
 801164c:	493b      	ldr	r1, [pc, #236]	; (801173c <etharp_output_to_arp_index+0x124>)
 801164e:	4613      	mov	r3, r2
 8011650:	005b      	lsls	r3, r3, #1
 8011652:	4413      	add	r3, r2
 8011654:	00db      	lsls	r3, r3, #3
 8011656:	440b      	add	r3, r1
 8011658:	3314      	adds	r3, #20
 801165a:	781b      	ldrb	r3, [r3, #0]
 801165c:	2b02      	cmp	r3, #2
 801165e:	d153      	bne.n	8011708 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011660:	79fa      	ldrb	r2, [r7, #7]
 8011662:	4936      	ldr	r1, [pc, #216]	; (801173c <etharp_output_to_arp_index+0x124>)
 8011664:	4613      	mov	r3, r2
 8011666:	005b      	lsls	r3, r3, #1
 8011668:	4413      	add	r3, r2
 801166a:	00db      	lsls	r3, r3, #3
 801166c:	440b      	add	r3, r1
 801166e:	3312      	adds	r3, #18
 8011670:	881b      	ldrh	r3, [r3, #0]
 8011672:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8011676:	d919      	bls.n	80116ac <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011678:	79fa      	ldrb	r2, [r7, #7]
 801167a:	4613      	mov	r3, r2
 801167c:	005b      	lsls	r3, r3, #1
 801167e:	4413      	add	r3, r2
 8011680:	00db      	lsls	r3, r3, #3
 8011682:	4a2e      	ldr	r2, [pc, #184]	; (801173c <etharp_output_to_arp_index+0x124>)
 8011684:	4413      	add	r3, r2
 8011686:	3304      	adds	r3, #4
 8011688:	4619      	mov	r1, r3
 801168a:	68f8      	ldr	r0, [r7, #12]
 801168c:	f000 fb42 	bl	8011d14 <etharp_request>
 8011690:	4603      	mov	r3, r0
 8011692:	2b00      	cmp	r3, #0
 8011694:	d138      	bne.n	8011708 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011696:	79fa      	ldrb	r2, [r7, #7]
 8011698:	4928      	ldr	r1, [pc, #160]	; (801173c <etharp_output_to_arp_index+0x124>)
 801169a:	4613      	mov	r3, r2
 801169c:	005b      	lsls	r3, r3, #1
 801169e:	4413      	add	r3, r2
 80116a0:	00db      	lsls	r3, r3, #3
 80116a2:	440b      	add	r3, r1
 80116a4:	3314      	adds	r3, #20
 80116a6:	2203      	movs	r2, #3
 80116a8:	701a      	strb	r2, [r3, #0]
 80116aa:	e02d      	b.n	8011708 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80116ac:	79fa      	ldrb	r2, [r7, #7]
 80116ae:	4923      	ldr	r1, [pc, #140]	; (801173c <etharp_output_to_arp_index+0x124>)
 80116b0:	4613      	mov	r3, r2
 80116b2:	005b      	lsls	r3, r3, #1
 80116b4:	4413      	add	r3, r2
 80116b6:	00db      	lsls	r3, r3, #3
 80116b8:	440b      	add	r3, r1
 80116ba:	3312      	adds	r3, #18
 80116bc:	881b      	ldrh	r3, [r3, #0]
 80116be:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80116c2:	d321      	bcc.n	8011708 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80116c4:	79fa      	ldrb	r2, [r7, #7]
 80116c6:	4613      	mov	r3, r2
 80116c8:	005b      	lsls	r3, r3, #1
 80116ca:	4413      	add	r3, r2
 80116cc:	00db      	lsls	r3, r3, #3
 80116ce:	4a1b      	ldr	r2, [pc, #108]	; (801173c <etharp_output_to_arp_index+0x124>)
 80116d0:	4413      	add	r3, r2
 80116d2:	1d19      	adds	r1, r3, #4
 80116d4:	79fa      	ldrb	r2, [r7, #7]
 80116d6:	4613      	mov	r3, r2
 80116d8:	005b      	lsls	r3, r3, #1
 80116da:	4413      	add	r3, r2
 80116dc:	00db      	lsls	r3, r3, #3
 80116de:	3308      	adds	r3, #8
 80116e0:	4a16      	ldr	r2, [pc, #88]	; (801173c <etharp_output_to_arp_index+0x124>)
 80116e2:	4413      	add	r3, r2
 80116e4:	3304      	adds	r3, #4
 80116e6:	461a      	mov	r2, r3
 80116e8:	68f8      	ldr	r0, [r7, #12]
 80116ea:	f000 faf1 	bl	8011cd0 <etharp_request_dst>
 80116ee:	4603      	mov	r3, r0
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d109      	bne.n	8011708 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80116f4:	79fa      	ldrb	r2, [r7, #7]
 80116f6:	4911      	ldr	r1, [pc, #68]	; (801173c <etharp_output_to_arp_index+0x124>)
 80116f8:	4613      	mov	r3, r2
 80116fa:	005b      	lsls	r3, r3, #1
 80116fc:	4413      	add	r3, r2
 80116fe:	00db      	lsls	r3, r3, #3
 8011700:	440b      	add	r3, r1
 8011702:	3314      	adds	r3, #20
 8011704:	2203      	movs	r2, #3
 8011706:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	f103 0129 	add.w	r1, r3, #41	; 0x29
 801170e:	79fa      	ldrb	r2, [r7, #7]
 8011710:	4613      	mov	r3, r2
 8011712:	005b      	lsls	r3, r3, #1
 8011714:	4413      	add	r3, r2
 8011716:	00db      	lsls	r3, r3, #3
 8011718:	3308      	adds	r3, #8
 801171a:	4a08      	ldr	r2, [pc, #32]	; (801173c <etharp_output_to_arp_index+0x124>)
 801171c:	4413      	add	r3, r2
 801171e:	3304      	adds	r3, #4
 8011720:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011724:	9200      	str	r2, [sp, #0]
 8011726:	460a      	mov	r2, r1
 8011728:	68b9      	ldr	r1, [r7, #8]
 801172a:	68f8      	ldr	r0, [r7, #12]
 801172c:	f001 fdb4 	bl	8013298 <ethernet_output>
 8011730:	4603      	mov	r3, r0
}
 8011732:	4618      	mov	r0, r3
 8011734:	3710      	adds	r7, #16
 8011736:	46bd      	mov	sp, r7
 8011738:	bd80      	pop	{r7, pc}
 801173a:	bf00      	nop
 801173c:	20000540 	.word	0x20000540
 8011740:	0801649c 	.word	0x0801649c
 8011744:	0801660c 	.word	0x0801660c
 8011748:	08016514 	.word	0x08016514

0801174c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b08a      	sub	sp, #40	; 0x28
 8011750:	af02      	add	r7, sp, #8
 8011752:	60f8      	str	r0, [r7, #12]
 8011754:	60b9      	str	r1, [r7, #8]
 8011756:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d106      	bne.n	8011770 <etharp_output+0x24>
 8011762:	4b69      	ldr	r3, [pc, #420]	; (8011908 <etharp_output+0x1bc>)
 8011764:	f240 321b 	movw	r2, #795	; 0x31b
 8011768:	4968      	ldr	r1, [pc, #416]	; (801190c <etharp_output+0x1c0>)
 801176a:	4869      	ldr	r0, [pc, #420]	; (8011910 <etharp_output+0x1c4>)
 801176c:	f002 f8f0 	bl	8013950 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011770:	68bb      	ldr	r3, [r7, #8]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d106      	bne.n	8011784 <etharp_output+0x38>
 8011776:	4b64      	ldr	r3, [pc, #400]	; (8011908 <etharp_output+0x1bc>)
 8011778:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801177c:	4965      	ldr	r1, [pc, #404]	; (8011914 <etharp_output+0x1c8>)
 801177e:	4864      	ldr	r0, [pc, #400]	; (8011910 <etharp_output+0x1c4>)
 8011780:	f002 f8e6 	bl	8013950 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d106      	bne.n	8011798 <etharp_output+0x4c>
 801178a:	4b5f      	ldr	r3, [pc, #380]	; (8011908 <etharp_output+0x1bc>)
 801178c:	f240 321d 	movw	r2, #797	; 0x31d
 8011790:	4961      	ldr	r1, [pc, #388]	; (8011918 <etharp_output+0x1cc>)
 8011792:	485f      	ldr	r0, [pc, #380]	; (8011910 <etharp_output+0x1c4>)
 8011794:	f002 f8dc 	bl	8013950 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	68f9      	ldr	r1, [r7, #12]
 801179e:	4618      	mov	r0, r3
 80117a0:	f000 fed4 	bl	801254c <ip4_addr_isbroadcast_u32>
 80117a4:	4603      	mov	r3, r0
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d002      	beq.n	80117b0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80117aa:	4b5c      	ldr	r3, [pc, #368]	; (801191c <etharp_output+0x1d0>)
 80117ac:	61fb      	str	r3, [r7, #28]
 80117ae:	e09b      	b.n	80118e8 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80117b8:	2be0      	cmp	r3, #224	; 0xe0
 80117ba:	d118      	bne.n	80117ee <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80117bc:	2301      	movs	r3, #1
 80117be:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80117c0:	2300      	movs	r3, #0
 80117c2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80117c4:	235e      	movs	r3, #94	; 0x5e
 80117c6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	3301      	adds	r3, #1
 80117cc:	781b      	ldrb	r3, [r3, #0]
 80117ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80117d2:	b2db      	uxtb	r3, r3
 80117d4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	3302      	adds	r3, #2
 80117da:	781b      	ldrb	r3, [r3, #0]
 80117dc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	3303      	adds	r3, #3
 80117e2:	781b      	ldrb	r3, [r3, #0]
 80117e4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80117e6:	f107 0310 	add.w	r3, r7, #16
 80117ea:	61fb      	str	r3, [r7, #28]
 80117ec:	e07c      	b.n	80118e8 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681a      	ldr	r2, [r3, #0]
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	3304      	adds	r3, #4
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	405a      	eors	r2, r3
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	3308      	adds	r3, #8
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	4013      	ands	r3, r2
 8011802:	2b00      	cmp	r3, #0
 8011804:	d012      	beq.n	801182c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801180c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011810:	4293      	cmp	r3, r2
 8011812:	d00b      	beq.n	801182c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	330c      	adds	r3, #12
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d003      	beq.n	8011826 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	330c      	adds	r3, #12
 8011822:	61bb      	str	r3, [r7, #24]
 8011824:	e002      	b.n	801182c <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8011826:	f06f 0303 	mvn.w	r3, #3
 801182a:	e069      	b.n	8011900 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801182c:	4b3c      	ldr	r3, [pc, #240]	; (8011920 <etharp_output+0x1d4>)
 801182e:	781b      	ldrb	r3, [r3, #0]
 8011830:	4619      	mov	r1, r3
 8011832:	4a3c      	ldr	r2, [pc, #240]	; (8011924 <etharp_output+0x1d8>)
 8011834:	460b      	mov	r3, r1
 8011836:	005b      	lsls	r3, r3, #1
 8011838:	440b      	add	r3, r1
 801183a:	00db      	lsls	r3, r3, #3
 801183c:	4413      	add	r3, r2
 801183e:	3314      	adds	r3, #20
 8011840:	781b      	ldrb	r3, [r3, #0]
 8011842:	2b01      	cmp	r3, #1
 8011844:	d917      	bls.n	8011876 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011846:	69bb      	ldr	r3, [r7, #24]
 8011848:	681a      	ldr	r2, [r3, #0]
 801184a:	4b35      	ldr	r3, [pc, #212]	; (8011920 <etharp_output+0x1d4>)
 801184c:	781b      	ldrb	r3, [r3, #0]
 801184e:	4618      	mov	r0, r3
 8011850:	4934      	ldr	r1, [pc, #208]	; (8011924 <etharp_output+0x1d8>)
 8011852:	4603      	mov	r3, r0
 8011854:	005b      	lsls	r3, r3, #1
 8011856:	4403      	add	r3, r0
 8011858:	00db      	lsls	r3, r3, #3
 801185a:	440b      	add	r3, r1
 801185c:	3304      	adds	r3, #4
 801185e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011860:	429a      	cmp	r2, r3
 8011862:	d108      	bne.n	8011876 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011864:	4b2e      	ldr	r3, [pc, #184]	; (8011920 <etharp_output+0x1d4>)
 8011866:	781b      	ldrb	r3, [r3, #0]
 8011868:	461a      	mov	r2, r3
 801186a:	68b9      	ldr	r1, [r7, #8]
 801186c:	68f8      	ldr	r0, [r7, #12]
 801186e:	f7ff fed3 	bl	8011618 <etharp_output_to_arp_index>
 8011872:	4603      	mov	r3, r0
 8011874:	e044      	b.n	8011900 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011876:	2300      	movs	r3, #0
 8011878:	75fb      	strb	r3, [r7, #23]
 801187a:	e02a      	b.n	80118d2 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801187c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011880:	4928      	ldr	r1, [pc, #160]	; (8011924 <etharp_output+0x1d8>)
 8011882:	4613      	mov	r3, r2
 8011884:	005b      	lsls	r3, r3, #1
 8011886:	4413      	add	r3, r2
 8011888:	00db      	lsls	r3, r3, #3
 801188a:	440b      	add	r3, r1
 801188c:	3314      	adds	r3, #20
 801188e:	781b      	ldrb	r3, [r3, #0]
 8011890:	2b01      	cmp	r3, #1
 8011892:	d918      	bls.n	80118c6 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8011894:	69bb      	ldr	r3, [r7, #24]
 8011896:	6819      	ldr	r1, [r3, #0]
 8011898:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801189c:	4821      	ldr	r0, [pc, #132]	; (8011924 <etharp_output+0x1d8>)
 801189e:	4613      	mov	r3, r2
 80118a0:	005b      	lsls	r3, r3, #1
 80118a2:	4413      	add	r3, r2
 80118a4:	00db      	lsls	r3, r3, #3
 80118a6:	4403      	add	r3, r0
 80118a8:	3304      	adds	r3, #4
 80118aa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80118ac:	4299      	cmp	r1, r3
 80118ae:	d10a      	bne.n	80118c6 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 80118b0:	7dfa      	ldrb	r2, [r7, #23]
 80118b2:	4b1b      	ldr	r3, [pc, #108]	; (8011920 <etharp_output+0x1d4>)
 80118b4:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80118b6:	7dfb      	ldrb	r3, [r7, #23]
 80118b8:	461a      	mov	r2, r3
 80118ba:	68b9      	ldr	r1, [r7, #8]
 80118bc:	68f8      	ldr	r0, [r7, #12]
 80118be:	f7ff feab 	bl	8011618 <etharp_output_to_arp_index>
 80118c2:	4603      	mov	r3, r0
 80118c4:	e01c      	b.n	8011900 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80118c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80118ca:	b2db      	uxtb	r3, r3
 80118cc:	3301      	adds	r3, #1
 80118ce:	b2db      	uxtb	r3, r3
 80118d0:	75fb      	strb	r3, [r7, #23]
 80118d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80118d6:	2b09      	cmp	r3, #9
 80118d8:	ddd0      	ble.n	801187c <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80118da:	68ba      	ldr	r2, [r7, #8]
 80118dc:	69b9      	ldr	r1, [r7, #24]
 80118de:	68f8      	ldr	r0, [r7, #12]
 80118e0:	f000 f822 	bl	8011928 <etharp_query>
 80118e4:	4603      	mov	r3, r0
 80118e6:	e00b      	b.n	8011900 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	f103 0229 	add.w	r2, r3, #41	; 0x29
 80118ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80118f2:	9300      	str	r3, [sp, #0]
 80118f4:	69fb      	ldr	r3, [r7, #28]
 80118f6:	68b9      	ldr	r1, [r7, #8]
 80118f8:	68f8      	ldr	r0, [r7, #12]
 80118fa:	f001 fccd 	bl	8013298 <ethernet_output>
 80118fe:	4603      	mov	r3, r0
}
 8011900:	4618      	mov	r0, r3
 8011902:	3720      	adds	r7, #32
 8011904:	46bd      	mov	sp, r7
 8011906:	bd80      	pop	{r7, pc}
 8011908:	0801649c 	.word	0x0801649c
 801190c:	080165ec 	.word	0x080165ec
 8011910:	08016514 	.word	0x08016514
 8011914:	0801663c 	.word	0x0801663c
 8011918:	080165dc 	.word	0x080165dc
 801191c:	08016c88 	.word	0x08016c88
 8011920:	20000630 	.word	0x20000630
 8011924:	20000540 	.word	0x20000540

08011928 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b08c      	sub	sp, #48	; 0x30
 801192c:	af02      	add	r7, sp, #8
 801192e:	60f8      	str	r0, [r7, #12]
 8011930:	60b9      	str	r1, [r7, #8]
 8011932:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	3329      	adds	r3, #41	; 0x29
 8011938:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801193a:	23ff      	movs	r3, #255	; 0xff
 801193c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8011940:	2300      	movs	r3, #0
 8011942:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011944:	68bb      	ldr	r3, [r7, #8]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	68f9      	ldr	r1, [r7, #12]
 801194a:	4618      	mov	r0, r3
 801194c:	f000 fdfe 	bl	801254c <ip4_addr_isbroadcast_u32>
 8011950:	4603      	mov	r3, r0
 8011952:	2b00      	cmp	r3, #0
 8011954:	d10c      	bne.n	8011970 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011956:	68bb      	ldr	r3, [r7, #8]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801195e:	2be0      	cmp	r3, #224	; 0xe0
 8011960:	d006      	beq.n	8011970 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011962:	68bb      	ldr	r3, [r7, #8]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d003      	beq.n	8011970 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011968:	68bb      	ldr	r3, [r7, #8]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d102      	bne.n	8011976 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011970:	f06f 030f 	mvn.w	r3, #15
 8011974:	e10e      	b.n	8011b94 <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011976:	68fa      	ldr	r2, [r7, #12]
 8011978:	2101      	movs	r1, #1
 801197a:	68b8      	ldr	r0, [r7, #8]
 801197c:	f7ff fba0 	bl	80110c0 <etharp_find_entry>
 8011980:	4603      	mov	r3, r0
 8011982:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8011984:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011988:	2b00      	cmp	r3, #0
 801198a:	da02      	bge.n	8011992 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 801198c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011990:	e100      	b.n	8011b94 <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8011992:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011996:	4981      	ldr	r1, [pc, #516]	; (8011b9c <etharp_query+0x274>)
 8011998:	4613      	mov	r3, r2
 801199a:	005b      	lsls	r3, r3, #1
 801199c:	4413      	add	r3, r2
 801199e:	00db      	lsls	r3, r3, #3
 80119a0:	440b      	add	r3, r1
 80119a2:	3314      	adds	r3, #20
 80119a4:	781b      	ldrb	r3, [r3, #0]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d117      	bne.n	80119da <etharp_query+0xb2>
    is_new_entry = 1;
 80119aa:	2301      	movs	r3, #1
 80119ac:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80119ae:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80119b2:	497a      	ldr	r1, [pc, #488]	; (8011b9c <etharp_query+0x274>)
 80119b4:	4613      	mov	r3, r2
 80119b6:	005b      	lsls	r3, r3, #1
 80119b8:	4413      	add	r3, r2
 80119ba:	00db      	lsls	r3, r3, #3
 80119bc:	440b      	add	r3, r1
 80119be:	3314      	adds	r3, #20
 80119c0:	2201      	movs	r2, #1
 80119c2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80119c4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80119c8:	4974      	ldr	r1, [pc, #464]	; (8011b9c <etharp_query+0x274>)
 80119ca:	4613      	mov	r3, r2
 80119cc:	005b      	lsls	r3, r3, #1
 80119ce:	4413      	add	r3, r2
 80119d0:	00db      	lsls	r3, r3, #3
 80119d2:	440b      	add	r3, r1
 80119d4:	3308      	adds	r3, #8
 80119d6:	68fa      	ldr	r2, [r7, #12]
 80119d8:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80119da:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80119de:	496f      	ldr	r1, [pc, #444]	; (8011b9c <etharp_query+0x274>)
 80119e0:	4613      	mov	r3, r2
 80119e2:	005b      	lsls	r3, r3, #1
 80119e4:	4413      	add	r3, r2
 80119e6:	00db      	lsls	r3, r3, #3
 80119e8:	440b      	add	r3, r1
 80119ea:	3314      	adds	r3, #20
 80119ec:	781b      	ldrb	r3, [r3, #0]
 80119ee:	2b01      	cmp	r3, #1
 80119f0:	d012      	beq.n	8011a18 <etharp_query+0xf0>
 80119f2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80119f6:	4969      	ldr	r1, [pc, #420]	; (8011b9c <etharp_query+0x274>)
 80119f8:	4613      	mov	r3, r2
 80119fa:	005b      	lsls	r3, r3, #1
 80119fc:	4413      	add	r3, r2
 80119fe:	00db      	lsls	r3, r3, #3
 8011a00:	440b      	add	r3, r1
 8011a02:	3314      	adds	r3, #20
 8011a04:	781b      	ldrb	r3, [r3, #0]
 8011a06:	2b01      	cmp	r3, #1
 8011a08:	d806      	bhi.n	8011a18 <etharp_query+0xf0>
 8011a0a:	4b65      	ldr	r3, [pc, #404]	; (8011ba0 <etharp_query+0x278>)
 8011a0c:	f240 32c7 	movw	r2, #967	; 0x3c7
 8011a10:	4964      	ldr	r1, [pc, #400]	; (8011ba4 <etharp_query+0x27c>)
 8011a12:	4865      	ldr	r0, [pc, #404]	; (8011ba8 <etharp_query+0x280>)
 8011a14:	f001 ff9c 	bl	8013950 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8011a18:	6a3b      	ldr	r3, [r7, #32]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d102      	bne.n	8011a24 <etharp_query+0xfc>
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d10c      	bne.n	8011a3e <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8011a24:	68b9      	ldr	r1, [r7, #8]
 8011a26:	68f8      	ldr	r0, [r7, #12]
 8011a28:	f000 f974 	bl	8011d14 <etharp_request>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d102      	bne.n	8011a3e <etharp_query+0x116>
      return result;
 8011a38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011a3c:	e0aa      	b.n	8011b94 <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d106      	bne.n	8011a52 <etharp_query+0x12a>
 8011a44:	4b56      	ldr	r3, [pc, #344]	; (8011ba0 <etharp_query+0x278>)
 8011a46:	f240 32db 	movw	r2, #987	; 0x3db
 8011a4a:	4958      	ldr	r1, [pc, #352]	; (8011bac <etharp_query+0x284>)
 8011a4c:	4856      	ldr	r0, [pc, #344]	; (8011ba8 <etharp_query+0x280>)
 8011a4e:	f001 ff7f 	bl	8013950 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011a52:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011a56:	4951      	ldr	r1, [pc, #324]	; (8011b9c <etharp_query+0x274>)
 8011a58:	4613      	mov	r3, r2
 8011a5a:	005b      	lsls	r3, r3, #1
 8011a5c:	4413      	add	r3, r2
 8011a5e:	00db      	lsls	r3, r3, #3
 8011a60:	440b      	add	r3, r1
 8011a62:	3314      	adds	r3, #20
 8011a64:	781b      	ldrb	r3, [r3, #0]
 8011a66:	2b01      	cmp	r3, #1
 8011a68:	d918      	bls.n	8011a9c <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8011a6a:	7cfa      	ldrb	r2, [r7, #19]
 8011a6c:	4b50      	ldr	r3, [pc, #320]	; (8011bb0 <etharp_query+0x288>)
 8011a6e:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011a70:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011a74:	4613      	mov	r3, r2
 8011a76:	005b      	lsls	r3, r3, #1
 8011a78:	4413      	add	r3, r2
 8011a7a:	00db      	lsls	r3, r3, #3
 8011a7c:	3308      	adds	r3, #8
 8011a7e:	4a47      	ldr	r2, [pc, #284]	; (8011b9c <etharp_query+0x274>)
 8011a80:	4413      	add	r3, r2
 8011a82:	3304      	adds	r3, #4
 8011a84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011a88:	9200      	str	r2, [sp, #0]
 8011a8a:	697a      	ldr	r2, [r7, #20]
 8011a8c:	6879      	ldr	r1, [r7, #4]
 8011a8e:	68f8      	ldr	r0, [r7, #12]
 8011a90:	f001 fc02 	bl	8013298 <ethernet_output>
 8011a94:	4603      	mov	r3, r0
 8011a96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011a9a:	e079      	b.n	8011b90 <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011a9c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011aa0:	493e      	ldr	r1, [pc, #248]	; (8011b9c <etharp_query+0x274>)
 8011aa2:	4613      	mov	r3, r2
 8011aa4:	005b      	lsls	r3, r3, #1
 8011aa6:	4413      	add	r3, r2
 8011aa8:	00db      	lsls	r3, r3, #3
 8011aaa:	440b      	add	r3, r1
 8011aac:	3314      	adds	r3, #20
 8011aae:	781b      	ldrb	r3, [r3, #0]
 8011ab0:	2b01      	cmp	r3, #1
 8011ab2:	d16d      	bne.n	8011b90 <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011abc:	e01a      	b.n	8011af4 <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011abe:	69fb      	ldr	r3, [r7, #28]
 8011ac0:	895a      	ldrh	r2, [r3, #10]
 8011ac2:	69fb      	ldr	r3, [r7, #28]
 8011ac4:	891b      	ldrh	r3, [r3, #8]
 8011ac6:	429a      	cmp	r2, r3
 8011ac8:	d10a      	bne.n	8011ae0 <etharp_query+0x1b8>
 8011aca:	69fb      	ldr	r3, [r7, #28]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d006      	beq.n	8011ae0 <etharp_query+0x1b8>
 8011ad2:	4b33      	ldr	r3, [pc, #204]	; (8011ba0 <etharp_query+0x278>)
 8011ad4:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8011ad8:	4936      	ldr	r1, [pc, #216]	; (8011bb4 <etharp_query+0x28c>)
 8011ada:	4833      	ldr	r0, [pc, #204]	; (8011ba8 <etharp_query+0x280>)
 8011adc:	f001 ff38 	bl	8013950 <iprintf>
      if (p->type != PBUF_ROM) {
 8011ae0:	69fb      	ldr	r3, [r7, #28]
 8011ae2:	7b1b      	ldrb	r3, [r3, #12]
 8011ae4:	2b01      	cmp	r3, #1
 8011ae6:	d002      	beq.n	8011aee <etharp_query+0x1c6>
        copy_needed = 1;
 8011ae8:	2301      	movs	r3, #1
 8011aea:	61bb      	str	r3, [r7, #24]
        break;
 8011aec:	e005      	b.n	8011afa <etharp_query+0x1d2>
      }
      p = p->next;
 8011aee:	69fb      	ldr	r3, [r7, #28]
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011af4:	69fb      	ldr	r3, [r7, #28]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d1e1      	bne.n	8011abe <etharp_query+0x196>
    }
    if (copy_needed) {
 8011afa:	69bb      	ldr	r3, [r7, #24]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d017      	beq.n	8011b30 <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8011b00:	69fb      	ldr	r3, [r7, #28]
 8011b02:	891b      	ldrh	r3, [r3, #8]
 8011b04:	2200      	movs	r2, #0
 8011b06:	4619      	mov	r1, r3
 8011b08:	2002      	movs	r0, #2
 8011b0a:	f7f9 faff 	bl	800b10c <pbuf_alloc>
 8011b0e:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8011b10:	69fb      	ldr	r3, [r7, #28]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d011      	beq.n	8011b3a <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 8011b16:	6879      	ldr	r1, [r7, #4]
 8011b18:	69f8      	ldr	r0, [r7, #28]
 8011b1a:	f7f9 ff9b 	bl	800ba54 <pbuf_copy>
 8011b1e:	4603      	mov	r3, r0
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d00a      	beq.n	8011b3a <etharp_query+0x212>
          pbuf_free(p);
 8011b24:	69f8      	ldr	r0, [r7, #28]
 8011b26:	f7f9 fe63 	bl	800b7f0 <pbuf_free>
          p = NULL;
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	61fb      	str	r3, [r7, #28]
 8011b2e:	e004      	b.n	8011b3a <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8011b34:	69f8      	ldr	r0, [r7, #28]
 8011b36:	f7f9 ff05 	bl	800b944 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8011b3a:	69fb      	ldr	r3, [r7, #28]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d024      	beq.n	8011b8a <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011b40:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011b44:	4915      	ldr	r1, [pc, #84]	; (8011b9c <etharp_query+0x274>)
 8011b46:	4613      	mov	r3, r2
 8011b48:	005b      	lsls	r3, r3, #1
 8011b4a:	4413      	add	r3, r2
 8011b4c:	00db      	lsls	r3, r3, #3
 8011b4e:	440b      	add	r3, r1
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d00b      	beq.n	8011b6e <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8011b56:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011b5a:	4910      	ldr	r1, [pc, #64]	; (8011b9c <etharp_query+0x274>)
 8011b5c:	4613      	mov	r3, r2
 8011b5e:	005b      	lsls	r3, r3, #1
 8011b60:	4413      	add	r3, r2
 8011b62:	00db      	lsls	r3, r3, #3
 8011b64:	440b      	add	r3, r1
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	4618      	mov	r0, r3
 8011b6a:	f7f9 fe41 	bl	800b7f0 <pbuf_free>
      }
      arp_table[i].q = p;
 8011b6e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011b72:	490a      	ldr	r1, [pc, #40]	; (8011b9c <etharp_query+0x274>)
 8011b74:	4613      	mov	r3, r2
 8011b76:	005b      	lsls	r3, r3, #1
 8011b78:	4413      	add	r3, r2
 8011b7a:	00db      	lsls	r3, r3, #3
 8011b7c:	440b      	add	r3, r1
 8011b7e:	69fa      	ldr	r2, [r7, #28]
 8011b80:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011b82:	2300      	movs	r3, #0
 8011b84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011b88:	e002      	b.n	8011b90 <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011b8a:	23ff      	movs	r3, #255	; 0xff
 8011b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011b90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011b94:	4618      	mov	r0, r3
 8011b96:	3728      	adds	r7, #40	; 0x28
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	bd80      	pop	{r7, pc}
 8011b9c:	20000540 	.word	0x20000540
 8011ba0:	0801649c 	.word	0x0801649c
 8011ba4:	08016648 	.word	0x08016648
 8011ba8:	08016514 	.word	0x08016514
 8011bac:	0801663c 	.word	0x0801663c
 8011bb0:	20000630 	.word	0x20000630
 8011bb4:	08016670 	.word	0x08016670

08011bb8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b08a      	sub	sp, #40	; 0x28
 8011bbc:	af02      	add	r7, sp, #8
 8011bbe:	60f8      	str	r0, [r7, #12]
 8011bc0:	60b9      	str	r1, [r7, #8]
 8011bc2:	607a      	str	r2, [r7, #4]
 8011bc4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d106      	bne.n	8011bde <etharp_raw+0x26>
 8011bd0:	4b3a      	ldr	r3, [pc, #232]	; (8011cbc <etharp_raw+0x104>)
 8011bd2:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8011bd6:	493a      	ldr	r1, [pc, #232]	; (8011cc0 <etharp_raw+0x108>)
 8011bd8:	483a      	ldr	r0, [pc, #232]	; (8011cc4 <etharp_raw+0x10c>)
 8011bda:	f001 feb9 	bl	8013950 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011bde:	2200      	movs	r2, #0
 8011be0:	211c      	movs	r1, #28
 8011be2:	2002      	movs	r0, #2
 8011be4:	f7f9 fa92 	bl	800b10c <pbuf_alloc>
 8011be8:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011bea:	69bb      	ldr	r3, [r7, #24]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d102      	bne.n	8011bf6 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8011bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8011bf4:	e05d      	b.n	8011cb2 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011bf6:	69bb      	ldr	r3, [r7, #24]
 8011bf8:	895b      	ldrh	r3, [r3, #10]
 8011bfa:	2b1b      	cmp	r3, #27
 8011bfc:	d806      	bhi.n	8011c0c <etharp_raw+0x54>
 8011bfe:	4b2f      	ldr	r3, [pc, #188]	; (8011cbc <etharp_raw+0x104>)
 8011c00:	f240 4263 	movw	r2, #1123	; 0x463
 8011c04:	4930      	ldr	r1, [pc, #192]	; (8011cc8 <etharp_raw+0x110>)
 8011c06:	482f      	ldr	r0, [pc, #188]	; (8011cc4 <etharp_raw+0x10c>)
 8011c08:	f001 fea2 	bl	8013950 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011c0c:	69bb      	ldr	r3, [r7, #24]
 8011c0e:	685b      	ldr	r3, [r3, #4]
 8011c10:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8011c12:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011c14:	4618      	mov	r0, r3
 8011c16:	f7f8 fcbe 	bl	800a596 <lwip_htons>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	461a      	mov	r2, r3
 8011c1e:	697b      	ldr	r3, [r7, #20]
 8011c20:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011c28:	2b06      	cmp	r3, #6
 8011c2a:	d006      	beq.n	8011c3a <etharp_raw+0x82>
 8011c2c:	4b23      	ldr	r3, [pc, #140]	; (8011cbc <etharp_raw+0x104>)
 8011c2e:	f240 426a 	movw	r2, #1130	; 0x46a
 8011c32:	4926      	ldr	r1, [pc, #152]	; (8011ccc <etharp_raw+0x114>)
 8011c34:	4823      	ldr	r0, [pc, #140]	; (8011cc4 <etharp_raw+0x10c>)
 8011c36:	f001 fe8b 	bl	8013950 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8011c3a:	697b      	ldr	r3, [r7, #20]
 8011c3c:	3308      	adds	r3, #8
 8011c3e:	2206      	movs	r2, #6
 8011c40:	6839      	ldr	r1, [r7, #0]
 8011c42:	4618      	mov	r0, r3
 8011c44:	f001 fdae 	bl	80137a4 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8011c48:	697b      	ldr	r3, [r7, #20]
 8011c4a:	3312      	adds	r3, #18
 8011c4c:	2206      	movs	r2, #6
 8011c4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011c50:	4618      	mov	r0, r3
 8011c52:	f001 fda7 	bl	80137a4 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8011c56:	697b      	ldr	r3, [r7, #20]
 8011c58:	330e      	adds	r3, #14
 8011c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c5c:	6812      	ldr	r2, [r2, #0]
 8011c5e:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8011c60:	697b      	ldr	r3, [r7, #20]
 8011c62:	3318      	adds	r3, #24
 8011c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c66:	6812      	ldr	r2, [r2, #0]
 8011c68:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	701a      	strb	r2, [r3, #0]
 8011c70:	2200      	movs	r2, #0
 8011c72:	f042 0201 	orr.w	r2, r2, #1
 8011c76:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011c78:	697b      	ldr	r3, [r7, #20]
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	f042 0208 	orr.w	r2, r2, #8
 8011c80:	709a      	strb	r2, [r3, #2]
 8011c82:	2200      	movs	r2, #0
 8011c84:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011c86:	697b      	ldr	r3, [r7, #20]
 8011c88:	2206      	movs	r2, #6
 8011c8a:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011c8c:	697b      	ldr	r3, [r7, #20]
 8011c8e:	2204      	movs	r2, #4
 8011c90:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011c92:	f640 0306 	movw	r3, #2054	; 0x806
 8011c96:	9300      	str	r3, [sp, #0]
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	68ba      	ldr	r2, [r7, #8]
 8011c9c:	69b9      	ldr	r1, [r7, #24]
 8011c9e:	68f8      	ldr	r0, [r7, #12]
 8011ca0:	f001 fafa 	bl	8013298 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011ca4:	69b8      	ldr	r0, [r7, #24]
 8011ca6:	f7f9 fda3 	bl	800b7f0 <pbuf_free>
  p = NULL;
 8011caa:	2300      	movs	r3, #0
 8011cac:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011cae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	3720      	adds	r7, #32
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}
 8011cba:	bf00      	nop
 8011cbc:	0801649c 	.word	0x0801649c
 8011cc0:	080165ec 	.word	0x080165ec
 8011cc4:	08016514 	.word	0x08016514
 8011cc8:	0801668c 	.word	0x0801668c
 8011ccc:	080166c0 	.word	0x080166c0

08011cd0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b088      	sub	sp, #32
 8011cd4:	af04      	add	r7, sp, #16
 8011cd6:	60f8      	str	r0, [r7, #12]
 8011cd8:	60b9      	str	r1, [r7, #8]
 8011cda:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	f103 0029 	add.w	r0, r3, #41	; 0x29
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011cec:	2201      	movs	r2, #1
 8011cee:	9203      	str	r2, [sp, #12]
 8011cf0:	68ba      	ldr	r2, [r7, #8]
 8011cf2:	9202      	str	r2, [sp, #8]
 8011cf4:	4a06      	ldr	r2, [pc, #24]	; (8011d10 <etharp_request_dst+0x40>)
 8011cf6:	9201      	str	r2, [sp, #4]
 8011cf8:	9300      	str	r3, [sp, #0]
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	687a      	ldr	r2, [r7, #4]
 8011cfe:	68f8      	ldr	r0, [r7, #12]
 8011d00:	f7ff ff5a 	bl	8011bb8 <etharp_raw>
 8011d04:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011d06:	4618      	mov	r0, r3
 8011d08:	3710      	adds	r7, #16
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	bd80      	pop	{r7, pc}
 8011d0e:	bf00      	nop
 8011d10:	08016c90 	.word	0x08016c90

08011d14 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b082      	sub	sp, #8
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
 8011d1c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011d1e:	4a05      	ldr	r2, [pc, #20]	; (8011d34 <etharp_request+0x20>)
 8011d20:	6839      	ldr	r1, [r7, #0]
 8011d22:	6878      	ldr	r0, [r7, #4]
 8011d24:	f7ff ffd4 	bl	8011cd0 <etharp_request_dst>
 8011d28:	4603      	mov	r3, r0
}
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	3708      	adds	r7, #8
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	bd80      	pop	{r7, pc}
 8011d32:	bf00      	nop
 8011d34:	08016c88 	.word	0x08016c88

08011d38 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b08e      	sub	sp, #56	; 0x38
 8011d3c:	af04      	add	r7, sp, #16
 8011d3e:	6078      	str	r0, [r7, #4]
 8011d40:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8011d42:	4b7a      	ldr	r3, [pc, #488]	; (8011f2c <icmp_input+0x1f4>)
 8011d44:	689b      	ldr	r3, [r3, #8]
 8011d46:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8011d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d4a:	781b      	ldrb	r3, [r3, #0]
 8011d4c:	b29b      	uxth	r3, r3
 8011d4e:	f003 030f 	and.w	r3, r3, #15
 8011d52:	b29b      	uxth	r3, r3
 8011d54:	009b      	lsls	r3, r3, #2
 8011d56:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011d58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d5a:	2b13      	cmp	r3, #19
 8011d5c:	f240 80d1 	bls.w	8011f02 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	895b      	ldrh	r3, [r3, #10]
 8011d64:	2b03      	cmp	r3, #3
 8011d66:	f240 80ce 	bls.w	8011f06 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	685b      	ldr	r3, [r3, #4]
 8011d6e:	781b      	ldrb	r3, [r3, #0]
 8011d70:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011d74:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	f000 80bb 	beq.w	8011ef4 <icmp_input+0x1bc>
 8011d7e:	2b08      	cmp	r3, #8
 8011d80:	f040 80bb 	bne.w	8011efa <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8011d84:	4b6a      	ldr	r3, [pc, #424]	; (8011f30 <icmp_input+0x1f8>)
 8011d86:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011d88:	4b68      	ldr	r3, [pc, #416]	; (8011f2c <icmp_input+0x1f4>)
 8011d8a:	695b      	ldr	r3, [r3, #20]
 8011d8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011d90:	2be0      	cmp	r3, #224	; 0xe0
 8011d92:	f000 80bf 	beq.w	8011f14 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011d96:	4b65      	ldr	r3, [pc, #404]	; (8011f2c <icmp_input+0x1f4>)
 8011d98:	695b      	ldr	r3, [r3, #20]
 8011d9a:	4a64      	ldr	r2, [pc, #400]	; (8011f2c <icmp_input+0x1f4>)
 8011d9c:	6812      	ldr	r2, [r2, #0]
 8011d9e:	4611      	mov	r1, r2
 8011da0:	4618      	mov	r0, r3
 8011da2:	f000 fbd3 	bl	801254c <ip4_addr_isbroadcast_u32>
 8011da6:	4603      	mov	r3, r0
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	f040 80b5 	bne.w	8011f18 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	891b      	ldrh	r3, [r3, #8]
 8011db2:	2b07      	cmp	r3, #7
 8011db4:	f240 80a9 	bls.w	8011f0a <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8011db8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011dba:	330e      	adds	r3, #14
 8011dbc:	b29b      	uxth	r3, r3
 8011dbe:	b21b      	sxth	r3, r3
 8011dc0:	4619      	mov	r1, r3
 8011dc2:	6878      	ldr	r0, [r7, #4]
 8011dc4:	f7f9 fcf0 	bl	800b7a8 <pbuf_header>
 8011dc8:	4603      	mov	r3, r0
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d046      	beq.n	8011e5c <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	891a      	ldrh	r2, [r3, #8]
 8011dd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011dd4:	4413      	add	r3, r2
 8011dd6:	b29b      	uxth	r3, r3
 8011dd8:	2200      	movs	r2, #0
 8011dda:	4619      	mov	r1, r3
 8011ddc:	2002      	movs	r0, #2
 8011dde:	f7f9 f995 	bl	800b10c <pbuf_alloc>
 8011de2:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8011de4:	69bb      	ldr	r3, [r7, #24]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	f000 8098 	beq.w	8011f1c <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011dec:	69bb      	ldr	r3, [r7, #24]
 8011dee:	895b      	ldrh	r3, [r3, #10]
 8011df0:	461a      	mov	r2, r3
 8011df2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011df4:	3308      	adds	r3, #8
 8011df6:	429a      	cmp	r2, r3
 8011df8:	d203      	bcs.n	8011e02 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8011dfa:	69b8      	ldr	r0, [r7, #24]
 8011dfc:	f7f9 fcf8 	bl	800b7f0 <pbuf_free>
        goto icmperr;
 8011e00:	e08d      	b.n	8011f1e <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 8011e02:	69bb      	ldr	r3, [r7, #24]
 8011e04:	685b      	ldr	r3, [r3, #4]
 8011e06:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011e08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	f001 fcca 	bl	80137a4 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8011e10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011e12:	425b      	negs	r3, r3
 8011e14:	b29b      	uxth	r3, r3
 8011e16:	b21b      	sxth	r3, r3
 8011e18:	4619      	mov	r1, r3
 8011e1a:	69b8      	ldr	r0, [r7, #24]
 8011e1c:	f7f9 fcc4 	bl	800b7a8 <pbuf_header>
 8011e20:	4603      	mov	r3, r0
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d009      	beq.n	8011e3a <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011e26:	4b43      	ldr	r3, [pc, #268]	; (8011f34 <icmp_input+0x1fc>)
 8011e28:	22af      	movs	r2, #175	; 0xaf
 8011e2a:	4943      	ldr	r1, [pc, #268]	; (8011f38 <icmp_input+0x200>)
 8011e2c:	4843      	ldr	r0, [pc, #268]	; (8011f3c <icmp_input+0x204>)
 8011e2e:	f001 fd8f 	bl	8013950 <iprintf>
        pbuf_free(r);
 8011e32:	69b8      	ldr	r0, [r7, #24]
 8011e34:	f7f9 fcdc 	bl	800b7f0 <pbuf_free>
        goto icmperr;
 8011e38:	e071      	b.n	8011f1e <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8011e3a:	6879      	ldr	r1, [r7, #4]
 8011e3c:	69b8      	ldr	r0, [r7, #24]
 8011e3e:	f7f9 fe09 	bl	800ba54 <pbuf_copy>
 8011e42:	4603      	mov	r3, r0
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d003      	beq.n	8011e50 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8011e48:	69b8      	ldr	r0, [r7, #24]
 8011e4a:	f7f9 fcd1 	bl	800b7f0 <pbuf_free>
        goto icmperr;
 8011e4e:	e066      	b.n	8011f1e <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8011e50:	6878      	ldr	r0, [r7, #4]
 8011e52:	f7f9 fccd 	bl	800b7f0 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 8011e56:	69bb      	ldr	r3, [r7, #24]
 8011e58:	607b      	str	r3, [r7, #4]
 8011e5a:	e015      	b.n	8011e88 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8011e5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011e5e:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8011e62:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8011e66:	33f2      	adds	r3, #242	; 0xf2
 8011e68:	b29b      	uxth	r3, r3
 8011e6a:	b21b      	sxth	r3, r3
 8011e6c:	4619      	mov	r1, r3
 8011e6e:	6878      	ldr	r0, [r7, #4]
 8011e70:	f7f9 fc9a 	bl	800b7a8 <pbuf_header>
 8011e74:	4603      	mov	r3, r0
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d006      	beq.n	8011e88 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011e7a:	4b2e      	ldr	r3, [pc, #184]	; (8011f34 <icmp_input+0x1fc>)
 8011e7c:	22c0      	movs	r2, #192	; 0xc0
 8011e7e:	4930      	ldr	r1, [pc, #192]	; (8011f40 <icmp_input+0x208>)
 8011e80:	482e      	ldr	r0, [pc, #184]	; (8011f3c <icmp_input+0x204>)
 8011e82:	f001 fd65 	bl	8013950 <iprintf>
        goto icmperr;
 8011e86:	e04a      	b.n	8011f1e <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	685b      	ldr	r3, [r3, #4]
 8011e8c:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8011e8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011e92:	4619      	mov	r1, r3
 8011e94:	6878      	ldr	r0, [r7, #4]
 8011e96:	f7f9 fc87 	bl	800b7a8 <pbuf_header>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d12b      	bne.n	8011ef8 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	685b      	ldr	r3, [r3, #4]
 8011ea4:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 8011ea6:	69fb      	ldr	r3, [r7, #28]
 8011ea8:	681a      	ldr	r2, [r3, #0]
 8011eaa:	693b      	ldr	r3, [r7, #16]
 8011eac:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011eae:	4b1f      	ldr	r3, [pc, #124]	; (8011f2c <icmp_input+0x1f4>)
 8011eb0:	691a      	ldr	r2, [r3, #16]
 8011eb2:	693b      	ldr	r3, [r7, #16]
 8011eb4:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011eb6:	697b      	ldr	r3, [r7, #20]
 8011eb8:	2200      	movs	r2, #0
 8011eba:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8011ebc:	697b      	ldr	r3, [r7, #20]
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	709a      	strb	r2, [r3, #2]
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8011ec6:	693b      	ldr	r3, [r7, #16]
 8011ec8:	22ff      	movs	r2, #255	; 0xff
 8011eca:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8011ecc:	693b      	ldr	r3, [r7, #16]
 8011ece:	2200      	movs	r2, #0
 8011ed0:	729a      	strb	r2, [r3, #10]
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011ed6:	683b      	ldr	r3, [r7, #0]
 8011ed8:	9302      	str	r3, [sp, #8]
 8011eda:	2301      	movs	r3, #1
 8011edc:	9301      	str	r3, [sp, #4]
 8011ede:	2300      	movs	r3, #0
 8011ee0:	9300      	str	r3, [sp, #0]
 8011ee2:	23ff      	movs	r3, #255	; 0xff
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	69f9      	ldr	r1, [r7, #28]
 8011ee8:	6878      	ldr	r0, [r7, #4]
 8011eea:	f000 fa5d 	bl	80123a8 <ip4_output_if>
 8011eee:	4603      	mov	r3, r0
 8011ef0:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 8011ef2:	e001      	b.n	8011ef8 <icmp_input+0x1c0>
    break;
 8011ef4:	bf00      	nop
 8011ef6:	e000      	b.n	8011efa <icmp_input+0x1c2>
    break;
 8011ef8:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011efa:	6878      	ldr	r0, [r7, #4]
 8011efc:	f7f9 fc78 	bl	800b7f0 <pbuf_free>
  return;
 8011f00:	e011      	b.n	8011f26 <icmp_input+0x1ee>
    goto lenerr;
 8011f02:	bf00      	nop
 8011f04:	e002      	b.n	8011f0c <icmp_input+0x1d4>
    goto lenerr;
 8011f06:	bf00      	nop
 8011f08:	e000      	b.n	8011f0c <icmp_input+0x1d4>
      goto lenerr;
 8011f0a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	f7f9 fc6f 	bl	800b7f0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011f12:	e008      	b.n	8011f26 <icmp_input+0x1ee>
      goto icmperr;
 8011f14:	bf00      	nop
 8011f16:	e002      	b.n	8011f1e <icmp_input+0x1e6>
      goto icmperr;
 8011f18:	bf00      	nop
 8011f1a:	e000      	b.n	8011f1e <icmp_input+0x1e6>
        goto icmperr;
 8011f1c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011f1e:	6878      	ldr	r0, [r7, #4]
 8011f20:	f7f9 fc66 	bl	800b7f0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011f24:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011f26:	3728      	adds	r7, #40	; 0x28
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	bd80      	pop	{r7, pc}
 8011f2c:	2000376c 	.word	0x2000376c
 8011f30:	20003780 	.word	0x20003780
 8011f34:	08016704 	.word	0x08016704
 8011f38:	0801673c 	.word	0x0801673c
 8011f3c:	08016774 	.word	0x08016774
 8011f40:	0801679c 	.word	0x0801679c

08011f44 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b082      	sub	sp, #8
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]
 8011f4c:	460b      	mov	r3, r1
 8011f4e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011f50:	78fb      	ldrb	r3, [r7, #3]
 8011f52:	461a      	mov	r2, r3
 8011f54:	2103      	movs	r1, #3
 8011f56:	6878      	ldr	r0, [r7, #4]
 8011f58:	f000 f814 	bl	8011f84 <icmp_send_response>
}
 8011f5c:	bf00      	nop
 8011f5e:	3708      	adds	r7, #8
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bd80      	pop	{r7, pc}

08011f64 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b082      	sub	sp, #8
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
 8011f6c:	460b      	mov	r3, r1
 8011f6e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011f70:	78fb      	ldrb	r3, [r7, #3]
 8011f72:	461a      	mov	r2, r3
 8011f74:	210b      	movs	r1, #11
 8011f76:	6878      	ldr	r0, [r7, #4]
 8011f78:	f000 f804 	bl	8011f84 <icmp_send_response>
}
 8011f7c:	bf00      	nop
 8011f7e:	3708      	adds	r7, #8
 8011f80:	46bd      	mov	sp, r7
 8011f82:	bd80      	pop	{r7, pc}

08011f84 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b08c      	sub	sp, #48	; 0x30
 8011f88:	af04      	add	r7, sp, #16
 8011f8a:	6078      	str	r0, [r7, #4]
 8011f8c:	460b      	mov	r3, r1
 8011f8e:	70fb      	strb	r3, [r7, #3]
 8011f90:	4613      	mov	r3, r2
 8011f92:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011f94:	2200      	movs	r2, #0
 8011f96:	2124      	movs	r1, #36	; 0x24
 8011f98:	2001      	movs	r0, #1
 8011f9a:	f7f9 f8b7 	bl	800b10c <pbuf_alloc>
 8011f9e:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011fa0:	69fb      	ldr	r3, [r7, #28]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d04c      	beq.n	8012040 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011fa6:	69fb      	ldr	r3, [r7, #28]
 8011fa8:	895b      	ldrh	r3, [r3, #10]
 8011faa:	2b23      	cmp	r3, #35	; 0x23
 8011fac:	d806      	bhi.n	8011fbc <icmp_send_response+0x38>
 8011fae:	4b26      	ldr	r3, [pc, #152]	; (8012048 <icmp_send_response+0xc4>)
 8011fb0:	f240 1261 	movw	r2, #353	; 0x161
 8011fb4:	4925      	ldr	r1, [pc, #148]	; (801204c <icmp_send_response+0xc8>)
 8011fb6:	4826      	ldr	r0, [pc, #152]	; (8012050 <icmp_send_response+0xcc>)
 8011fb8:	f001 fcca 	bl	8013950 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	685b      	ldr	r3, [r3, #4]
 8011fc0:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011fc2:	69fb      	ldr	r3, [r7, #28]
 8011fc4:	685b      	ldr	r3, [r3, #4]
 8011fc6:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011fc8:	697b      	ldr	r3, [r7, #20]
 8011fca:	78fa      	ldrb	r2, [r7, #3]
 8011fcc:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011fce:	697b      	ldr	r3, [r7, #20]
 8011fd0:	78ba      	ldrb	r2, [r7, #2]
 8011fd2:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011fd4:	697b      	ldr	r3, [r7, #20]
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	711a      	strb	r2, [r3, #4]
 8011fda:	2200      	movs	r2, #0
 8011fdc:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011fde:	697b      	ldr	r3, [r7, #20]
 8011fe0:	2200      	movs	r2, #0
 8011fe2:	719a      	strb	r2, [r3, #6]
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011fe8:	69fb      	ldr	r3, [r7, #28]
 8011fea:	685b      	ldr	r3, [r3, #4]
 8011fec:	f103 0008 	add.w	r0, r3, #8
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	685b      	ldr	r3, [r3, #4]
 8011ff4:	221c      	movs	r2, #28
 8011ff6:	4619      	mov	r1, r3
 8011ff8:	f001 fbd4 	bl	80137a4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011ffc:	69bb      	ldr	r3, [r7, #24]
 8011ffe:	68db      	ldr	r3, [r3, #12]
 8012000:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012002:	f107 030c 	add.w	r3, r7, #12
 8012006:	4618      	mov	r0, r3
 8012008:	f000 f824 	bl	8012054 <ip4_route>
 801200c:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801200e:	693b      	ldr	r3, [r7, #16]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d011      	beq.n	8012038 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012014:	697b      	ldr	r3, [r7, #20]
 8012016:	2200      	movs	r2, #0
 8012018:	709a      	strb	r2, [r3, #2]
 801201a:	2200      	movs	r2, #0
 801201c:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801201e:	f107 020c 	add.w	r2, r7, #12
 8012022:	693b      	ldr	r3, [r7, #16]
 8012024:	9302      	str	r3, [sp, #8]
 8012026:	2301      	movs	r3, #1
 8012028:	9301      	str	r3, [sp, #4]
 801202a:	2300      	movs	r3, #0
 801202c:	9300      	str	r3, [sp, #0]
 801202e:	23ff      	movs	r3, #255	; 0xff
 8012030:	2100      	movs	r1, #0
 8012032:	69f8      	ldr	r0, [r7, #28]
 8012034:	f000 f9b8 	bl	80123a8 <ip4_output_if>
  }
  pbuf_free(q);
 8012038:	69f8      	ldr	r0, [r7, #28]
 801203a:	f7f9 fbd9 	bl	800b7f0 <pbuf_free>
 801203e:	e000      	b.n	8012042 <icmp_send_response+0xbe>
    return;
 8012040:	bf00      	nop
}
 8012042:	3720      	adds	r7, #32
 8012044:	46bd      	mov	sp, r7
 8012046:	bd80      	pop	{r7, pc}
 8012048:	08016704 	.word	0x08016704
 801204c:	080167d0 	.word	0x080167d0
 8012050:	08016774 	.word	0x08016774

08012054 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012054:	b480      	push	{r7}
 8012056:	b085      	sub	sp, #20
 8012058:	af00      	add	r7, sp, #0
 801205a:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801205c:	4b30      	ldr	r3, [pc, #192]	; (8012120 <ip4_route+0xcc>)
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	60fb      	str	r3, [r7, #12]
 8012062:	e036      	b.n	80120d2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801206a:	f003 0301 	and.w	r3, r3, #1
 801206e:	b2db      	uxtb	r3, r3
 8012070:	2b00      	cmp	r3, #0
 8012072:	d02b      	beq.n	80120cc <ip4_route+0x78>
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801207a:	089b      	lsrs	r3, r3, #2
 801207c:	f003 0301 	and.w	r3, r3, #1
 8012080:	b2db      	uxtb	r3, r3
 8012082:	2b00      	cmp	r3, #0
 8012084:	d022      	beq.n	80120cc <ip4_route+0x78>
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	3304      	adds	r3, #4
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d01d      	beq.n	80120cc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	681a      	ldr	r2, [r3, #0]
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	3304      	adds	r3, #4
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	405a      	eors	r2, r3
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	3308      	adds	r3, #8
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	4013      	ands	r3, r2
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d101      	bne.n	80120ac <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	e033      	b.n	8012114 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80120b2:	f003 0302 	and.w	r3, r3, #2
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d108      	bne.n	80120cc <ip4_route+0x78>
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	681a      	ldr	r2, [r3, #0]
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	330c      	adds	r3, #12
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	429a      	cmp	r2, r3
 80120c6:	d101      	bne.n	80120cc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	e023      	b.n	8012114 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	60fb      	str	r3, [r7, #12]
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d1c5      	bne.n	8012064 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80120d8:	4b12      	ldr	r3, [pc, #72]	; (8012124 <ip4_route+0xd0>)
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d015      	beq.n	801210c <ip4_route+0xb8>
 80120e0:	4b10      	ldr	r3, [pc, #64]	; (8012124 <ip4_route+0xd0>)
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80120e8:	f003 0301 	and.w	r3, r3, #1
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d00d      	beq.n	801210c <ip4_route+0xb8>
 80120f0:	4b0c      	ldr	r3, [pc, #48]	; (8012124 <ip4_route+0xd0>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80120f8:	f003 0304 	and.w	r3, r3, #4
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d005      	beq.n	801210c <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8012100:	4b08      	ldr	r3, [pc, #32]	; (8012124 <ip4_route+0xd0>)
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	3304      	adds	r3, #4
 8012106:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012108:	2b00      	cmp	r3, #0
 801210a:	d101      	bne.n	8012110 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801210c:	2300      	movs	r3, #0
 801210e:	e001      	b.n	8012114 <ip4_route+0xc0>
  }

  return netif_default;
 8012110:	4b04      	ldr	r3, [pc, #16]	; (8012124 <ip4_route+0xd0>)
 8012112:	681b      	ldr	r3, [r3, #0]
}
 8012114:	4618      	mov	r0, r3
 8012116:	3714      	adds	r7, #20
 8012118:	46bd      	mov	sp, r7
 801211a:	bc80      	pop	{r7}
 801211c:	4770      	bx	lr
 801211e:	bf00      	nop
 8012120:	20006c8c 	.word	0x20006c8c
 8012124:	20006c90 	.word	0x20006c90

08012128 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b086      	sub	sp, #24
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
 8012130:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	685b      	ldr	r3, [r3, #4]
 8012136:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8012138:	697b      	ldr	r3, [r7, #20]
 801213a:	781b      	ldrb	r3, [r3, #0]
 801213c:	091b      	lsrs	r3, r3, #4
 801213e:	b2db      	uxtb	r3, r3
 8012140:	2b04      	cmp	r3, #4
 8012142:	d004      	beq.n	801214e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012144:	6878      	ldr	r0, [r7, #4]
 8012146:	f7f9 fb53 	bl	800b7f0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801214a:	2300      	movs	r3, #0
 801214c:	e124      	b.n	8012398 <ip4_input+0x270>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 801214e:	697b      	ldr	r3, [r7, #20]
 8012150:	781b      	ldrb	r3, [r3, #0]
 8012152:	b29b      	uxth	r3, r3
 8012154:	f003 030f 	and.w	r3, r3, #15
 8012158:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 801215a:	897b      	ldrh	r3, [r7, #10]
 801215c:	009b      	lsls	r3, r3, #2
 801215e:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012160:	697b      	ldr	r3, [r7, #20]
 8012162:	885b      	ldrh	r3, [r3, #2]
 8012164:	b29b      	uxth	r3, r3
 8012166:	4618      	mov	r0, r3
 8012168:	f7f8 fa15 	bl	800a596 <lwip_htons>
 801216c:	4603      	mov	r3, r0
 801216e:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	891b      	ldrh	r3, [r3, #8]
 8012174:	893a      	ldrh	r2, [r7, #8]
 8012176:	429a      	cmp	r2, r3
 8012178:	d204      	bcs.n	8012184 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 801217a:	893b      	ldrh	r3, [r7, #8]
 801217c:	4619      	mov	r1, r3
 801217e:	6878      	ldr	r0, [r7, #4]
 8012180:	f7f9 f9c2 	bl	800b508 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	895b      	ldrh	r3, [r3, #10]
 8012188:	897a      	ldrh	r2, [r7, #10]
 801218a:	429a      	cmp	r2, r3
 801218c:	d807      	bhi.n	801219e <ip4_input+0x76>
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	891b      	ldrh	r3, [r3, #8]
 8012192:	893a      	ldrh	r2, [r7, #8]
 8012194:	429a      	cmp	r2, r3
 8012196:	d802      	bhi.n	801219e <ip4_input+0x76>
 8012198:	897b      	ldrh	r3, [r7, #10]
 801219a:	2b13      	cmp	r3, #19
 801219c:	d804      	bhi.n	80121a8 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f7f9 fb26 	bl	800b7f0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80121a4:	2300      	movs	r3, #0
 80121a6:	e0f7      	b.n	8012398 <ip4_input+0x270>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80121a8:	697b      	ldr	r3, [r7, #20]
 80121aa:	691b      	ldr	r3, [r3, #16]
 80121ac:	4a7c      	ldr	r2, [pc, #496]	; (80123a0 <ip4_input+0x278>)
 80121ae:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80121b0:	697b      	ldr	r3, [r7, #20]
 80121b2:	68db      	ldr	r3, [r3, #12]
 80121b4:	4a7a      	ldr	r2, [pc, #488]	; (80123a0 <ip4_input+0x278>)
 80121b6:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80121b8:	4b79      	ldr	r3, [pc, #484]	; (80123a0 <ip4_input+0x278>)
 80121ba:	695b      	ldr	r3, [r3, #20]
 80121bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80121c0:	2be0      	cmp	r3, #224	; 0xe0
 80121c2:	d112      	bne.n	80121ea <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80121ca:	f003 0301 	and.w	r3, r3, #1
 80121ce:	b2db      	uxtb	r3, r3
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d007      	beq.n	80121e4 <ip4_input+0xbc>
 80121d4:	683b      	ldr	r3, [r7, #0]
 80121d6:	3304      	adds	r3, #4
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d002      	beq.n	80121e4 <ip4_input+0xbc>
      netif = inp;
 80121de:	683b      	ldr	r3, [r7, #0]
 80121e0:	613b      	str	r3, [r7, #16]
 80121e2:	e041      	b.n	8012268 <ip4_input+0x140>
    } else {
      netif = NULL;
 80121e4:	2300      	movs	r3, #0
 80121e6:	613b      	str	r3, [r7, #16]
 80121e8:	e03e      	b.n	8012268 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 80121ea:	2301      	movs	r3, #1
 80121ec:	60fb      	str	r3, [r7, #12]
    netif = inp;
 80121ee:	683b      	ldr	r3, [r7, #0]
 80121f0:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80121f2:	693b      	ldr	r3, [r7, #16]
 80121f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80121f8:	f003 0301 	and.w	r3, r3, #1
 80121fc:	b2db      	uxtb	r3, r3
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d014      	beq.n	801222c <ip4_input+0x104>
 8012202:	693b      	ldr	r3, [r7, #16]
 8012204:	3304      	adds	r3, #4
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d00f      	beq.n	801222c <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801220c:	4b64      	ldr	r3, [pc, #400]	; (80123a0 <ip4_input+0x278>)
 801220e:	695a      	ldr	r2, [r3, #20]
 8012210:	693b      	ldr	r3, [r7, #16]
 8012212:	3304      	adds	r3, #4
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	429a      	cmp	r2, r3
 8012218:	d026      	beq.n	8012268 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801221a:	4b61      	ldr	r3, [pc, #388]	; (80123a0 <ip4_input+0x278>)
 801221c:	695b      	ldr	r3, [r3, #20]
 801221e:	6939      	ldr	r1, [r7, #16]
 8012220:	4618      	mov	r0, r3
 8012222:	f000 f993 	bl	801254c <ip4_addr_isbroadcast_u32>
 8012226:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012228:	2b00      	cmp	r3, #0
 801222a:	d11d      	bne.n	8012268 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d00d      	beq.n	801224e <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8012232:	4b5b      	ldr	r3, [pc, #364]	; (80123a0 <ip4_input+0x278>)
 8012234:	695b      	ldr	r3, [r3, #20]
 8012236:	b2db      	uxtb	r3, r3
 8012238:	2b7f      	cmp	r3, #127	; 0x7f
 801223a:	d102      	bne.n	8012242 <ip4_input+0x11a>
          netif = NULL;
 801223c:	2300      	movs	r3, #0
 801223e:	613b      	str	r3, [r7, #16]
          break;
 8012240:	e012      	b.n	8012268 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8012242:	2300      	movs	r3, #0
 8012244:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 8012246:	4b57      	ldr	r3, [pc, #348]	; (80123a4 <ip4_input+0x27c>)
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	613b      	str	r3, [r7, #16]
 801224c:	e002      	b.n	8012254 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 801224e:	693b      	ldr	r3, [r7, #16]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 8012254:	693a      	ldr	r2, [r7, #16]
 8012256:	683b      	ldr	r3, [r7, #0]
 8012258:	429a      	cmp	r2, r3
 801225a:	d102      	bne.n	8012262 <ip4_input+0x13a>
        netif = netif->next;
 801225c:	693b      	ldr	r3, [r7, #16]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 8012262:	693b      	ldr	r3, [r7, #16]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d1c4      	bne.n	80121f2 <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012268:	4b4d      	ldr	r3, [pc, #308]	; (80123a0 <ip4_input+0x278>)
 801226a:	691b      	ldr	r3, [r3, #16]
 801226c:	6839      	ldr	r1, [r7, #0]
 801226e:	4618      	mov	r0, r3
 8012270:	f000 f96c 	bl	801254c <ip4_addr_isbroadcast_u32>
 8012274:	4603      	mov	r3, r0
 8012276:	2b00      	cmp	r3, #0
 8012278:	d105      	bne.n	8012286 <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801227a:	4b49      	ldr	r3, [pc, #292]	; (80123a0 <ip4_input+0x278>)
 801227c:	691b      	ldr	r3, [r3, #16]
 801227e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012282:	2be0      	cmp	r3, #224	; 0xe0
 8012284:	d104      	bne.n	8012290 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012286:	6878      	ldr	r0, [r7, #4]
 8012288:	f7f9 fab2 	bl	800b7f0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801228c:	2300      	movs	r3, #0
 801228e:	e083      	b.n	8012398 <ip4_input+0x270>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012290:	693b      	ldr	r3, [r7, #16]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d104      	bne.n	80122a0 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012296:	6878      	ldr	r0, [r7, #4]
 8012298:	f7f9 faaa 	bl	800b7f0 <pbuf_free>
    return ERR_OK;
 801229c:	2300      	movs	r3, #0
 801229e:	e07b      	b.n	8012398 <ip4_input+0x270>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80122a0:	697b      	ldr	r3, [r7, #20]
 80122a2:	88db      	ldrh	r3, [r3, #6]
 80122a4:	b29b      	uxth	r3, r3
 80122a6:	461a      	mov	r2, r3
 80122a8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80122ac:	4013      	ands	r3, r2
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d00b      	beq.n	80122ca <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80122b2:	6878      	ldr	r0, [r7, #4]
 80122b4:	f000 fc8e 	bl	8012bd4 <ip4_reass>
 80122b8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d101      	bne.n	80122c4 <ip4_input+0x19c>
      return ERR_OK;
 80122c0:	2300      	movs	r3, #0
 80122c2:	e069      	b.n	8012398 <ip4_input+0x270>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	685b      	ldr	r3, [r3, #4]
 80122c8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80122ca:	4a35      	ldr	r2, [pc, #212]	; (80123a0 <ip4_input+0x278>)
 80122cc:	693b      	ldr	r3, [r7, #16]
 80122ce:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80122d0:	4a33      	ldr	r2, [pc, #204]	; (80123a0 <ip4_input+0x278>)
 80122d2:	683b      	ldr	r3, [r7, #0]
 80122d4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80122d6:	4a32      	ldr	r2, [pc, #200]	; (80123a0 <ip4_input+0x278>)
 80122d8:	697b      	ldr	r3, [r7, #20]
 80122da:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 80122dc:	697b      	ldr	r3, [r7, #20]
 80122de:	781b      	ldrb	r3, [r3, #0]
 80122e0:	b29b      	uxth	r3, r3
 80122e2:	f003 030f 	and.w	r3, r3, #15
 80122e6:	b29b      	uxth	r3, r3
 80122e8:	009b      	lsls	r3, r3, #2
 80122ea:	b29a      	uxth	r2, r3
 80122ec:	4b2c      	ldr	r3, [pc, #176]	; (80123a0 <ip4_input+0x278>)
 80122ee:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 80122f0:	897b      	ldrh	r3, [r7, #10]
 80122f2:	425b      	negs	r3, r3
 80122f4:	b29b      	uxth	r3, r3
 80122f6:	b21b      	sxth	r3, r3
 80122f8:	4619      	mov	r1, r3
 80122fa:	6878      	ldr	r0, [r7, #4]
 80122fc:	f7f9 fa54 	bl	800b7a8 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8012300:	697b      	ldr	r3, [r7, #20]
 8012302:	7a5b      	ldrb	r3, [r3, #9]
 8012304:	2b11      	cmp	r3, #17
 8012306:	d006      	beq.n	8012316 <ip4_input+0x1ee>
 8012308:	2b11      	cmp	r3, #17
 801230a:	dc13      	bgt.n	8012334 <ip4_input+0x20c>
 801230c:	2b01      	cmp	r3, #1
 801230e:	d00c      	beq.n	801232a <ip4_input+0x202>
 8012310:	2b06      	cmp	r3, #6
 8012312:	d005      	beq.n	8012320 <ip4_input+0x1f8>
 8012314:	e00e      	b.n	8012334 <ip4_input+0x20c>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 8012316:	6839      	ldr	r1, [r7, #0]
 8012318:	6878      	ldr	r0, [r7, #4]
 801231a:	f7fe fa91 	bl	8010840 <udp_input>
      break;
 801231e:	e028      	b.n	8012372 <ip4_input+0x24a>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8012320:	6839      	ldr	r1, [r7, #0]
 8012322:	6878      	ldr	r0, [r7, #4]
 8012324:	f7fa ff42 	bl	800d1ac <tcp_input>
      break;
 8012328:	e023      	b.n	8012372 <ip4_input+0x24a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 801232a:	6839      	ldr	r1, [r7, #0]
 801232c:	6878      	ldr	r0, [r7, #4]
 801232e:	f7ff fd03 	bl	8011d38 <icmp_input>
      break;
 8012332:	e01e      	b.n	8012372 <ip4_input+0x24a>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012334:	4b1a      	ldr	r3, [pc, #104]	; (80123a0 <ip4_input+0x278>)
 8012336:	695b      	ldr	r3, [r3, #20]
 8012338:	6939      	ldr	r1, [r7, #16]
 801233a:	4618      	mov	r0, r3
 801233c:	f000 f906 	bl	801254c <ip4_addr_isbroadcast_u32>
 8012340:	4603      	mov	r3, r0
 8012342:	2b00      	cmp	r3, #0
 8012344:	d112      	bne.n	801236c <ip4_input+0x244>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012346:	4b16      	ldr	r3, [pc, #88]	; (80123a0 <ip4_input+0x278>)
 8012348:	695b      	ldr	r3, [r3, #20]
 801234a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801234e:	2be0      	cmp	r3, #224	; 0xe0
 8012350:	d00c      	beq.n	801236c <ip4_input+0x244>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8012352:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012356:	4619      	mov	r1, r3
 8012358:	6878      	ldr	r0, [r7, #4]
 801235a:	f7f9 fa37 	bl	800b7cc <pbuf_header_force>
        p->payload = iphdr;
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	697a      	ldr	r2, [r7, #20]
 8012362:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012364:	2102      	movs	r1, #2
 8012366:	6878      	ldr	r0, [r7, #4]
 8012368:	f7ff fdec 	bl	8011f44 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 801236c:	6878      	ldr	r0, [r7, #4]
 801236e:	f7f9 fa3f 	bl	800b7f0 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012372:	4b0b      	ldr	r3, [pc, #44]	; (80123a0 <ip4_input+0x278>)
 8012374:	2200      	movs	r2, #0
 8012376:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012378:	4b09      	ldr	r3, [pc, #36]	; (80123a0 <ip4_input+0x278>)
 801237a:	2200      	movs	r2, #0
 801237c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801237e:	4b08      	ldr	r3, [pc, #32]	; (80123a0 <ip4_input+0x278>)
 8012380:	2200      	movs	r2, #0
 8012382:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012384:	4b06      	ldr	r3, [pc, #24]	; (80123a0 <ip4_input+0x278>)
 8012386:	2200      	movs	r2, #0
 8012388:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801238a:	4b05      	ldr	r3, [pc, #20]	; (80123a0 <ip4_input+0x278>)
 801238c:	2200      	movs	r2, #0
 801238e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012390:	4b03      	ldr	r3, [pc, #12]	; (80123a0 <ip4_input+0x278>)
 8012392:	2200      	movs	r2, #0
 8012394:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012396:	2300      	movs	r3, #0
}
 8012398:	4618      	mov	r0, r3
 801239a:	3718      	adds	r7, #24
 801239c:	46bd      	mov	sp, r7
 801239e:	bd80      	pop	{r7, pc}
 80123a0:	2000376c 	.word	0x2000376c
 80123a4:	20006c8c 	.word	0x20006c8c

080123a8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b08a      	sub	sp, #40	; 0x28
 80123ac:	af04      	add	r7, sp, #16
 80123ae:	60f8      	str	r0, [r7, #12]
 80123b0:	60b9      	str	r1, [r7, #8]
 80123b2:	607a      	str	r2, [r7, #4]
 80123b4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80123b6:	68bb      	ldr	r3, [r7, #8]
 80123b8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d009      	beq.n	80123d4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80123c0:	68bb      	ldr	r3, [r7, #8]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d003      	beq.n	80123ce <ip4_output_if+0x26>
 80123c6:	68bb      	ldr	r3, [r7, #8]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d102      	bne.n	80123d4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80123ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123d0:	3304      	adds	r3, #4
 80123d2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80123d4:	78fa      	ldrb	r2, [r7, #3]
 80123d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123d8:	9302      	str	r3, [sp, #8]
 80123da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80123de:	9301      	str	r3, [sp, #4]
 80123e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80123e4:	9300      	str	r3, [sp, #0]
 80123e6:	4613      	mov	r3, r2
 80123e8:	687a      	ldr	r2, [r7, #4]
 80123ea:	6979      	ldr	r1, [r7, #20]
 80123ec:	68f8      	ldr	r0, [r7, #12]
 80123ee:	f000 f805 	bl	80123fc <ip4_output_if_src>
 80123f2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80123f4:	4618      	mov	r0, r3
 80123f6:	3718      	adds	r7, #24
 80123f8:	46bd      	mov	sp, r7
 80123fa:	bd80      	pop	{r7, pc}

080123fc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b088      	sub	sp, #32
 8012400:	af00      	add	r7, sp, #0
 8012402:	60f8      	str	r0, [r7, #12]
 8012404:	60b9      	str	r1, [r7, #8]
 8012406:	607a      	str	r2, [r7, #4]
 8012408:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	89db      	ldrh	r3, [r3, #14]
 801240e:	2b01      	cmp	r3, #1
 8012410:	d006      	beq.n	8012420 <ip4_output_if_src+0x24>
 8012412:	4b48      	ldr	r3, [pc, #288]	; (8012534 <ip4_output_if_src+0x138>)
 8012414:	f240 3233 	movw	r2, #819	; 0x333
 8012418:	4947      	ldr	r1, [pc, #284]	; (8012538 <ip4_output_if_src+0x13c>)
 801241a:	4848      	ldr	r0, [pc, #288]	; (801253c <ip4_output_if_src+0x140>)
 801241c:	f001 fa98 	bl	8013950 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d060      	beq.n	80124e8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012426:	2314      	movs	r3, #20
 8012428:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 801242a:	2114      	movs	r1, #20
 801242c:	68f8      	ldr	r0, [r7, #12]
 801242e:	f7f9 f9bb 	bl	800b7a8 <pbuf_header>
 8012432:	4603      	mov	r3, r0
 8012434:	2b00      	cmp	r3, #0
 8012436:	d002      	beq.n	801243e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012438:	f06f 0301 	mvn.w	r3, #1
 801243c:	e075      	b.n	801252a <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	685b      	ldr	r3, [r3, #4]
 8012442:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	895b      	ldrh	r3, [r3, #10]
 8012448:	2b13      	cmp	r3, #19
 801244a:	d806      	bhi.n	801245a <ip4_output_if_src+0x5e>
 801244c:	4b39      	ldr	r3, [pc, #228]	; (8012534 <ip4_output_if_src+0x138>)
 801244e:	f44f 7258 	mov.w	r2, #864	; 0x360
 8012452:	493b      	ldr	r1, [pc, #236]	; (8012540 <ip4_output_if_src+0x144>)
 8012454:	4839      	ldr	r0, [pc, #228]	; (801253c <ip4_output_if_src+0x140>)
 8012456:	f001 fa7b 	bl	8013950 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801245a:	69fb      	ldr	r3, [r7, #28]
 801245c:	78fa      	ldrb	r2, [r7, #3]
 801245e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012460:	69fb      	ldr	r3, [r7, #28]
 8012462:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012466:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	681a      	ldr	r2, [r3, #0]
 801246c:	69fb      	ldr	r3, [r7, #28]
 801246e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012470:	8b7b      	ldrh	r3, [r7, #26]
 8012472:	089b      	lsrs	r3, r3, #2
 8012474:	b29b      	uxth	r3, r3
 8012476:	b2db      	uxtb	r3, r3
 8012478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801247c:	b2da      	uxtb	r2, r3
 801247e:	69fb      	ldr	r3, [r7, #28]
 8012480:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012482:	69fb      	ldr	r3, [r7, #28]
 8012484:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012488:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	891b      	ldrh	r3, [r3, #8]
 801248e:	4618      	mov	r0, r3
 8012490:	f7f8 f881 	bl	800a596 <lwip_htons>
 8012494:	4603      	mov	r3, r0
 8012496:	461a      	mov	r2, r3
 8012498:	69fb      	ldr	r3, [r7, #28]
 801249a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801249c:	69fb      	ldr	r3, [r7, #28]
 801249e:	2200      	movs	r2, #0
 80124a0:	719a      	strb	r2, [r3, #6]
 80124a2:	2200      	movs	r2, #0
 80124a4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80124a6:	4b27      	ldr	r3, [pc, #156]	; (8012544 <ip4_output_if_src+0x148>)
 80124a8:	881b      	ldrh	r3, [r3, #0]
 80124aa:	4618      	mov	r0, r3
 80124ac:	f7f8 f873 	bl	800a596 <lwip_htons>
 80124b0:	4603      	mov	r3, r0
 80124b2:	461a      	mov	r2, r3
 80124b4:	69fb      	ldr	r3, [r7, #28]
 80124b6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80124b8:	4b22      	ldr	r3, [pc, #136]	; (8012544 <ip4_output_if_src+0x148>)
 80124ba:	881b      	ldrh	r3, [r3, #0]
 80124bc:	3301      	adds	r3, #1
 80124be:	b29a      	uxth	r2, r3
 80124c0:	4b20      	ldr	r3, [pc, #128]	; (8012544 <ip4_output_if_src+0x148>)
 80124c2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80124c4:	68bb      	ldr	r3, [r7, #8]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d104      	bne.n	80124d4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80124ca:	4b1f      	ldr	r3, [pc, #124]	; (8012548 <ip4_output_if_src+0x14c>)
 80124cc:	681a      	ldr	r2, [r3, #0]
 80124ce:	69fb      	ldr	r3, [r7, #28]
 80124d0:	60da      	str	r2, [r3, #12]
 80124d2:	e003      	b.n	80124dc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80124d4:	68bb      	ldr	r3, [r7, #8]
 80124d6:	681a      	ldr	r2, [r3, #0]
 80124d8:	69fb      	ldr	r3, [r7, #28]
 80124da:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80124dc:	69fb      	ldr	r3, [r7, #28]
 80124de:	2200      	movs	r2, #0
 80124e0:	729a      	strb	r2, [r3, #10]
 80124e2:	2200      	movs	r2, #0
 80124e4:	72da      	strb	r2, [r3, #11]
 80124e6:	e008      	b.n	80124fa <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	685b      	ldr	r3, [r3, #4]
 80124ec:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80124ee:	69fb      	ldr	r3, [r7, #28]
 80124f0:	691b      	ldr	r3, [r3, #16]
 80124f2:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80124f4:	f107 0314 	add.w	r3, r7, #20
 80124f8:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80124fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d00c      	beq.n	801251c <ip4_output_if_src+0x120>
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	891a      	ldrh	r2, [r3, #8]
 8012506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012508:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801250a:	429a      	cmp	r2, r3
 801250c:	d906      	bls.n	801251c <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 801250e:	687a      	ldr	r2, [r7, #4]
 8012510:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012512:	68f8      	ldr	r0, [r7, #12]
 8012514:	f000 fd0a 	bl	8012f2c <ip4_frag>
 8012518:	4603      	mov	r3, r0
 801251a:	e006      	b.n	801252a <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801251c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801251e:	695b      	ldr	r3, [r3, #20]
 8012520:	687a      	ldr	r2, [r7, #4]
 8012522:	68f9      	ldr	r1, [r7, #12]
 8012524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012526:	4798      	blx	r3
 8012528:	4603      	mov	r3, r0
}
 801252a:	4618      	mov	r0, r3
 801252c:	3720      	adds	r7, #32
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}
 8012532:	bf00      	nop
 8012534:	080167fc 	.word	0x080167fc
 8012538:	08016830 	.word	0x08016830
 801253c:	0801683c 	.word	0x0801683c
 8012540:	08016864 	.word	0x08016864
 8012544:	20000632 	.word	0x20000632
 8012548:	08016c84 	.word	0x08016c84

0801254c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801254c:	b480      	push	{r7}
 801254e:	b085      	sub	sp, #20
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
 8012554:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012560:	d002      	beq.n	8012568 <ip4_addr_isbroadcast_u32+0x1c>
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d101      	bne.n	801256c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012568:	2301      	movs	r3, #1
 801256a:	e02a      	b.n	80125c2 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801256c:	683b      	ldr	r3, [r7, #0]
 801256e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012572:	f003 0302 	and.w	r3, r3, #2
 8012576:	2b00      	cmp	r3, #0
 8012578:	d101      	bne.n	801257e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801257a:	2300      	movs	r3, #0
 801257c:	e021      	b.n	80125c2 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801257e:	683b      	ldr	r3, [r7, #0]
 8012580:	3304      	adds	r3, #4
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	687a      	ldr	r2, [r7, #4]
 8012586:	429a      	cmp	r2, r3
 8012588:	d101      	bne.n	801258e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801258a:	2300      	movs	r3, #0
 801258c:	e019      	b.n	80125c2 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801258e:	68fa      	ldr	r2, [r7, #12]
 8012590:	683b      	ldr	r3, [r7, #0]
 8012592:	3304      	adds	r3, #4
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	405a      	eors	r2, r3
 8012598:	683b      	ldr	r3, [r7, #0]
 801259a:	3308      	adds	r3, #8
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	4013      	ands	r3, r2
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d10d      	bne.n	80125c0 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80125a4:	683b      	ldr	r3, [r7, #0]
 80125a6:	3308      	adds	r3, #8
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	43da      	mvns	r2, r3
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80125b0:	683b      	ldr	r3, [r7, #0]
 80125b2:	3308      	adds	r3, #8
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80125b8:	429a      	cmp	r2, r3
 80125ba:	d101      	bne.n	80125c0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80125bc:	2301      	movs	r3, #1
 80125be:	e000      	b.n	80125c2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80125c0:	2300      	movs	r3, #0
  }
}
 80125c2:	4618      	mov	r0, r3
 80125c4:	3714      	adds	r7, #20
 80125c6:	46bd      	mov	sp, r7
 80125c8:	bc80      	pop	{r7}
 80125ca:	4770      	bx	lr

080125cc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b084      	sub	sp, #16
 80125d0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80125d2:	2300      	movs	r3, #0
 80125d4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80125d6:	4b12      	ldr	r3, [pc, #72]	; (8012620 <ip_reass_tmr+0x54>)
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80125dc:	e018      	b.n	8012610 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	7fdb      	ldrb	r3, [r3, #31]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d00b      	beq.n	80125fe <ip_reass_tmr+0x32>
      r->timer--;
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	7fdb      	ldrb	r3, [r3, #31]
 80125ea:	3b01      	subs	r3, #1
 80125ec:	b2da      	uxtb	r2, r3
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	60fb      	str	r3, [r7, #12]
 80125fc:	e008      	b.n	8012610 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012608:	68b9      	ldr	r1, [r7, #8]
 801260a:	6878      	ldr	r0, [r7, #4]
 801260c:	f000 f80a 	bl	8012624 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d1e3      	bne.n	80125de <ip_reass_tmr+0x12>
     }
   }
}
 8012616:	bf00      	nop
 8012618:	bf00      	nop
 801261a:	3710      	adds	r7, #16
 801261c:	46bd      	mov	sp, r7
 801261e:	bd80      	pop	{r7, pc}
 8012620:	20000634 	.word	0x20000634

08012624 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b088      	sub	sp, #32
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
 801262c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801262e:	2300      	movs	r3, #0
 8012630:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012632:	683a      	ldr	r2, [r7, #0]
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	429a      	cmp	r2, r3
 8012638:	d105      	bne.n	8012646 <ip_reass_free_complete_datagram+0x22>
 801263a:	4b45      	ldr	r3, [pc, #276]	; (8012750 <ip_reass_free_complete_datagram+0x12c>)
 801263c:	22ab      	movs	r2, #171	; 0xab
 801263e:	4945      	ldr	r1, [pc, #276]	; (8012754 <ip_reass_free_complete_datagram+0x130>)
 8012640:	4845      	ldr	r0, [pc, #276]	; (8012758 <ip_reass_free_complete_datagram+0x134>)
 8012642:	f001 f985 	bl	8013950 <iprintf>
  if (prev != NULL) {
 8012646:	683b      	ldr	r3, [r7, #0]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d00a      	beq.n	8012662 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801264c:	683b      	ldr	r3, [r7, #0]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	687a      	ldr	r2, [r7, #4]
 8012652:	429a      	cmp	r2, r3
 8012654:	d005      	beq.n	8012662 <ip_reass_free_complete_datagram+0x3e>
 8012656:	4b3e      	ldr	r3, [pc, #248]	; (8012750 <ip_reass_free_complete_datagram+0x12c>)
 8012658:	22ad      	movs	r2, #173	; 0xad
 801265a:	4940      	ldr	r1, [pc, #256]	; (801275c <ip_reass_free_complete_datagram+0x138>)
 801265c:	483e      	ldr	r0, [pc, #248]	; (8012758 <ip_reass_free_complete_datagram+0x134>)
 801265e:	f001 f977 	bl	8013950 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	685b      	ldr	r3, [r3, #4]
 8012666:	685b      	ldr	r3, [r3, #4]
 8012668:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801266a:	697b      	ldr	r3, [r7, #20]
 801266c:	889b      	ldrh	r3, [r3, #4]
 801266e:	b29b      	uxth	r3, r3
 8012670:	2b00      	cmp	r3, #0
 8012672:	d12a      	bne.n	80126ca <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	685b      	ldr	r3, [r3, #4]
 8012678:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801267a:	697b      	ldr	r3, [r7, #20]
 801267c:	681a      	ldr	r2, [r3, #0]
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012682:	69bb      	ldr	r3, [r7, #24]
 8012684:	6858      	ldr	r0, [r3, #4]
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	3308      	adds	r3, #8
 801268a:	2214      	movs	r2, #20
 801268c:	4619      	mov	r1, r3
 801268e:	f001 f889 	bl	80137a4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012692:	2101      	movs	r1, #1
 8012694:	69b8      	ldr	r0, [r7, #24]
 8012696:	f7ff fc65 	bl	8011f64 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801269a:	69b8      	ldr	r0, [r7, #24]
 801269c:	f7f9 f93c 	bl	800b918 <pbuf_clen>
 80126a0:	4603      	mov	r3, r0
 80126a2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80126a4:	8bfa      	ldrh	r2, [r7, #30]
 80126a6:	8a7b      	ldrh	r3, [r7, #18]
 80126a8:	4413      	add	r3, r2
 80126aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80126ae:	db05      	blt.n	80126bc <ip_reass_free_complete_datagram+0x98>
 80126b0:	4b27      	ldr	r3, [pc, #156]	; (8012750 <ip_reass_free_complete_datagram+0x12c>)
 80126b2:	22bc      	movs	r2, #188	; 0xbc
 80126b4:	492a      	ldr	r1, [pc, #168]	; (8012760 <ip_reass_free_complete_datagram+0x13c>)
 80126b6:	4828      	ldr	r0, [pc, #160]	; (8012758 <ip_reass_free_complete_datagram+0x134>)
 80126b8:	f001 f94a 	bl	8013950 <iprintf>
    pbufs_freed += clen;
 80126bc:	8bfa      	ldrh	r2, [r7, #30]
 80126be:	8a7b      	ldrh	r3, [r7, #18]
 80126c0:	4413      	add	r3, r2
 80126c2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80126c4:	69b8      	ldr	r0, [r7, #24]
 80126c6:	f7f9 f893 	bl	800b7f0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	685b      	ldr	r3, [r3, #4]
 80126ce:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80126d0:	e01f      	b.n	8012712 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80126d2:	69bb      	ldr	r3, [r7, #24]
 80126d4:	685b      	ldr	r3, [r3, #4]
 80126d6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80126d8:	69bb      	ldr	r3, [r7, #24]
 80126da:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80126dc:	697b      	ldr	r3, [r7, #20]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80126e2:	68f8      	ldr	r0, [r7, #12]
 80126e4:	f7f9 f918 	bl	800b918 <pbuf_clen>
 80126e8:	4603      	mov	r3, r0
 80126ea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80126ec:	8bfa      	ldrh	r2, [r7, #30]
 80126ee:	8a7b      	ldrh	r3, [r7, #18]
 80126f0:	4413      	add	r3, r2
 80126f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80126f6:	db05      	blt.n	8012704 <ip_reass_free_complete_datagram+0xe0>
 80126f8:	4b15      	ldr	r3, [pc, #84]	; (8012750 <ip_reass_free_complete_datagram+0x12c>)
 80126fa:	22cc      	movs	r2, #204	; 0xcc
 80126fc:	4918      	ldr	r1, [pc, #96]	; (8012760 <ip_reass_free_complete_datagram+0x13c>)
 80126fe:	4816      	ldr	r0, [pc, #88]	; (8012758 <ip_reass_free_complete_datagram+0x134>)
 8012700:	f001 f926 	bl	8013950 <iprintf>
    pbufs_freed += clen;
 8012704:	8bfa      	ldrh	r2, [r7, #30]
 8012706:	8a7b      	ldrh	r3, [r7, #18]
 8012708:	4413      	add	r3, r2
 801270a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801270c:	68f8      	ldr	r0, [r7, #12]
 801270e:	f7f9 f86f 	bl	800b7f0 <pbuf_free>
  while (p != NULL) {
 8012712:	69bb      	ldr	r3, [r7, #24]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d1dc      	bne.n	80126d2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012718:	6839      	ldr	r1, [r7, #0]
 801271a:	6878      	ldr	r0, [r7, #4]
 801271c:	f000 f8c2 	bl	80128a4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8012720:	4b10      	ldr	r3, [pc, #64]	; (8012764 <ip_reass_free_complete_datagram+0x140>)
 8012722:	881b      	ldrh	r3, [r3, #0]
 8012724:	8bfa      	ldrh	r2, [r7, #30]
 8012726:	429a      	cmp	r2, r3
 8012728:	d905      	bls.n	8012736 <ip_reass_free_complete_datagram+0x112>
 801272a:	4b09      	ldr	r3, [pc, #36]	; (8012750 <ip_reass_free_complete_datagram+0x12c>)
 801272c:	22d2      	movs	r2, #210	; 0xd2
 801272e:	490e      	ldr	r1, [pc, #56]	; (8012768 <ip_reass_free_complete_datagram+0x144>)
 8012730:	4809      	ldr	r0, [pc, #36]	; (8012758 <ip_reass_free_complete_datagram+0x134>)
 8012732:	f001 f90d 	bl	8013950 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8012736:	4b0b      	ldr	r3, [pc, #44]	; (8012764 <ip_reass_free_complete_datagram+0x140>)
 8012738:	881a      	ldrh	r2, [r3, #0]
 801273a:	8bfb      	ldrh	r3, [r7, #30]
 801273c:	1ad3      	subs	r3, r2, r3
 801273e:	b29a      	uxth	r2, r3
 8012740:	4b08      	ldr	r3, [pc, #32]	; (8012764 <ip_reass_free_complete_datagram+0x140>)
 8012742:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012744:	8bfb      	ldrh	r3, [r7, #30]
}
 8012746:	4618      	mov	r0, r3
 8012748:	3720      	adds	r7, #32
 801274a:	46bd      	mov	sp, r7
 801274c:	bd80      	pop	{r7, pc}
 801274e:	bf00      	nop
 8012750:	08016894 	.word	0x08016894
 8012754:	080168d0 	.word	0x080168d0
 8012758:	080168dc 	.word	0x080168dc
 801275c:	08016904 	.word	0x08016904
 8012760:	08016918 	.word	0x08016918
 8012764:	20000638 	.word	0x20000638
 8012768:	08016938 	.word	0x08016938

0801276c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801276c:	b580      	push	{r7, lr}
 801276e:	b08a      	sub	sp, #40	; 0x28
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
 8012774:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012776:	2300      	movs	r3, #0
 8012778:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801277a:	2300      	movs	r3, #0
 801277c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801277e:	2300      	movs	r3, #0
 8012780:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012782:	2300      	movs	r3, #0
 8012784:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012786:	2300      	movs	r3, #0
 8012788:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801278a:	4b28      	ldr	r3, [pc, #160]	; (801282c <ip_reass_remove_oldest_datagram+0xc0>)
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012790:	e030      	b.n	80127f4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012794:	695a      	ldr	r2, [r3, #20]
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	68db      	ldr	r3, [r3, #12]
 801279a:	429a      	cmp	r2, r3
 801279c:	d10c      	bne.n	80127b8 <ip_reass_remove_oldest_datagram+0x4c>
 801279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127a0:	699a      	ldr	r2, [r3, #24]
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	691b      	ldr	r3, [r3, #16]
 80127a6:	429a      	cmp	r2, r3
 80127a8:	d106      	bne.n	80127b8 <ip_reass_remove_oldest_datagram+0x4c>
 80127aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ac:	899a      	ldrh	r2, [r3, #12]
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	889b      	ldrh	r3, [r3, #4]
 80127b2:	b29b      	uxth	r3, r3
 80127b4:	429a      	cmp	r2, r3
 80127b6:	d014      	beq.n	80127e2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80127b8:	693b      	ldr	r3, [r7, #16]
 80127ba:	3301      	adds	r3, #1
 80127bc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80127be:	6a3b      	ldr	r3, [r7, #32]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d104      	bne.n	80127ce <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80127c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80127c8:	69fb      	ldr	r3, [r7, #28]
 80127ca:	61bb      	str	r3, [r7, #24]
 80127cc:	e009      	b.n	80127e2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80127ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127d0:	7fda      	ldrb	r2, [r3, #31]
 80127d2:	6a3b      	ldr	r3, [r7, #32]
 80127d4:	7fdb      	ldrb	r3, [r3, #31]
 80127d6:	429a      	cmp	r2, r3
 80127d8:	d803      	bhi.n	80127e2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80127da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127dc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80127de:	69fb      	ldr	r3, [r7, #28]
 80127e0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80127e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d001      	beq.n	80127ee <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80127ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ec:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80127ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80127f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d1cb      	bne.n	8012792 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80127fa:	6a3b      	ldr	r3, [r7, #32]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d008      	beq.n	8012812 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012800:	69b9      	ldr	r1, [r7, #24]
 8012802:	6a38      	ldr	r0, [r7, #32]
 8012804:	f7ff ff0e 	bl	8012624 <ip_reass_free_complete_datagram>
 8012808:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801280a:	697a      	ldr	r2, [r7, #20]
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	4413      	add	r3, r2
 8012810:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012812:	697a      	ldr	r2, [r7, #20]
 8012814:	683b      	ldr	r3, [r7, #0]
 8012816:	429a      	cmp	r2, r3
 8012818:	da02      	bge.n	8012820 <ip_reass_remove_oldest_datagram+0xb4>
 801281a:	693b      	ldr	r3, [r7, #16]
 801281c:	2b01      	cmp	r3, #1
 801281e:	dcac      	bgt.n	801277a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012820:	697b      	ldr	r3, [r7, #20]
}
 8012822:	4618      	mov	r0, r3
 8012824:	3728      	adds	r7, #40	; 0x28
 8012826:	46bd      	mov	sp, r7
 8012828:	bd80      	pop	{r7, pc}
 801282a:	bf00      	nop
 801282c:	20000634 	.word	0x20000634

08012830 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b084      	sub	sp, #16
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
 8012838:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801283a:	2004      	movs	r0, #4
 801283c:	f7f8 fa54 	bl	800ace8 <memp_malloc>
 8012840:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d110      	bne.n	801286a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012848:	6839      	ldr	r1, [r7, #0]
 801284a:	6878      	ldr	r0, [r7, #4]
 801284c:	f7ff ff8e 	bl	801276c <ip_reass_remove_oldest_datagram>
 8012850:	4602      	mov	r2, r0
 8012852:	683b      	ldr	r3, [r7, #0]
 8012854:	4293      	cmp	r3, r2
 8012856:	dc03      	bgt.n	8012860 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012858:	2004      	movs	r0, #4
 801285a:	f7f8 fa45 	bl	800ace8 <memp_malloc>
 801285e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d101      	bne.n	801286a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8012866:	2300      	movs	r3, #0
 8012868:	e016      	b.n	8012898 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801286a:	2220      	movs	r2, #32
 801286c:	2100      	movs	r1, #0
 801286e:	68f8      	ldr	r0, [r7, #12]
 8012870:	f000 ffc0 	bl	80137f4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	2203      	movs	r2, #3
 8012878:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801287a:	4b09      	ldr	r3, [pc, #36]	; (80128a0 <ip_reass_enqueue_new_datagram+0x70>)
 801287c:	681a      	ldr	r2, [r3, #0]
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012882:	4a07      	ldr	r2, [pc, #28]	; (80128a0 <ip_reass_enqueue_new_datagram+0x70>)
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	3308      	adds	r3, #8
 801288c:	2214      	movs	r2, #20
 801288e:	6879      	ldr	r1, [r7, #4]
 8012890:	4618      	mov	r0, r3
 8012892:	f000 ff87 	bl	80137a4 <memcpy>
  return ipr;
 8012896:	68fb      	ldr	r3, [r7, #12]
}
 8012898:	4618      	mov	r0, r3
 801289a:	3710      	adds	r7, #16
 801289c:	46bd      	mov	sp, r7
 801289e:	bd80      	pop	{r7, pc}
 80128a0:	20000634 	.word	0x20000634

080128a4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b082      	sub	sp, #8
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]
 80128ac:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80128ae:	4b10      	ldr	r3, [pc, #64]	; (80128f0 <ip_reass_dequeue_datagram+0x4c>)
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	687a      	ldr	r2, [r7, #4]
 80128b4:	429a      	cmp	r2, r3
 80128b6:	d104      	bne.n	80128c2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	4a0c      	ldr	r2, [pc, #48]	; (80128f0 <ip_reass_dequeue_datagram+0x4c>)
 80128be:	6013      	str	r3, [r2, #0]
 80128c0:	e00d      	b.n	80128de <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80128c2:	683b      	ldr	r3, [r7, #0]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d106      	bne.n	80128d6 <ip_reass_dequeue_datagram+0x32>
 80128c8:	4b0a      	ldr	r3, [pc, #40]	; (80128f4 <ip_reass_dequeue_datagram+0x50>)
 80128ca:	f240 1245 	movw	r2, #325	; 0x145
 80128ce:	490a      	ldr	r1, [pc, #40]	; (80128f8 <ip_reass_dequeue_datagram+0x54>)
 80128d0:	480a      	ldr	r0, [pc, #40]	; (80128fc <ip_reass_dequeue_datagram+0x58>)
 80128d2:	f001 f83d 	bl	8013950 <iprintf>
    prev->next = ipr->next;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	681a      	ldr	r2, [r3, #0]
 80128da:	683b      	ldr	r3, [r7, #0]
 80128dc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80128de:	6879      	ldr	r1, [r7, #4]
 80128e0:	2004      	movs	r0, #4
 80128e2:	f7f8 fa4d 	bl	800ad80 <memp_free>
}
 80128e6:	bf00      	nop
 80128e8:	3708      	adds	r7, #8
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd80      	pop	{r7, pc}
 80128ee:	bf00      	nop
 80128f0:	20000634 	.word	0x20000634
 80128f4:	08016894 	.word	0x08016894
 80128f8:	08016954 	.word	0x08016954
 80128fc:	080168dc 	.word	0x080168dc

08012900 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b08c      	sub	sp, #48	; 0x30
 8012904:	af00      	add	r7, sp, #0
 8012906:	60f8      	str	r0, [r7, #12]
 8012908:	60b9      	str	r1, [r7, #8]
 801290a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 801290c:	2300      	movs	r3, #0
 801290e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012910:	2301      	movs	r3, #1
 8012912:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8012914:	68bb      	ldr	r3, [r7, #8]
 8012916:	685b      	ldr	r3, [r3, #4]
 8012918:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801291a:	69fb      	ldr	r3, [r7, #28]
 801291c:	885b      	ldrh	r3, [r3, #2]
 801291e:	b29b      	uxth	r3, r3
 8012920:	4618      	mov	r0, r3
 8012922:	f7f7 fe38 	bl	800a596 <lwip_htons>
 8012926:	4603      	mov	r3, r0
 8012928:	461a      	mov	r2, r3
 801292a:	69fb      	ldr	r3, [r7, #28]
 801292c:	781b      	ldrb	r3, [r3, #0]
 801292e:	b29b      	uxth	r3, r3
 8012930:	f003 030f 	and.w	r3, r3, #15
 8012934:	b29b      	uxth	r3, r3
 8012936:	009b      	lsls	r3, r3, #2
 8012938:	b29b      	uxth	r3, r3
 801293a:	1ad3      	subs	r3, r2, r3
 801293c:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801293e:	69fb      	ldr	r3, [r7, #28]
 8012940:	88db      	ldrh	r3, [r3, #6]
 8012942:	b29b      	uxth	r3, r3
 8012944:	4618      	mov	r0, r3
 8012946:	f7f7 fe26 	bl	800a596 <lwip_htons>
 801294a:	4603      	mov	r3, r0
 801294c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012950:	b29b      	uxth	r3, r3
 8012952:	00db      	lsls	r3, r3, #3
 8012954:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8012956:	68bb      	ldr	r3, [r7, #8]
 8012958:	685b      	ldr	r3, [r3, #4]
 801295a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801295c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801295e:	2200      	movs	r2, #0
 8012960:	701a      	strb	r2, [r3, #0]
 8012962:	2200      	movs	r2, #0
 8012964:	705a      	strb	r2, [r3, #1]
 8012966:	2200      	movs	r2, #0
 8012968:	709a      	strb	r2, [r3, #2]
 801296a:	2200      	movs	r2, #0
 801296c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801296e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012970:	8b3a      	ldrh	r2, [r7, #24]
 8012972:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8012974:	8b3a      	ldrh	r2, [r7, #24]
 8012976:	8b7b      	ldrh	r3, [r7, #26]
 8012978:	4413      	add	r3, r2
 801297a:	b29a      	uxth	r2, r3
 801297c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801297e:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	685b      	ldr	r3, [r3, #4]
 8012984:	627b      	str	r3, [r7, #36]	; 0x24
 8012986:	e061      	b.n	8012a4c <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8012988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801298a:	685b      	ldr	r3, [r3, #4]
 801298c:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 801298e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012990:	889b      	ldrh	r3, [r3, #4]
 8012992:	b29a      	uxth	r2, r3
 8012994:	697b      	ldr	r3, [r7, #20]
 8012996:	889b      	ldrh	r3, [r3, #4]
 8012998:	b29b      	uxth	r3, r3
 801299a:	429a      	cmp	r2, r3
 801299c:	d232      	bcs.n	8012a04 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801299e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129a2:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80129a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d01f      	beq.n	80129ea <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80129aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ac:	889b      	ldrh	r3, [r3, #4]
 80129ae:	b29a      	uxth	r2, r3
 80129b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129b2:	88db      	ldrh	r3, [r3, #6]
 80129b4:	b29b      	uxth	r3, r3
 80129b6:	429a      	cmp	r2, r3
 80129b8:	f0c0 80e3 	bcc.w	8012b82 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 80129bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129be:	88db      	ldrh	r3, [r3, #6]
 80129c0:	b29a      	uxth	r2, r3
 80129c2:	697b      	ldr	r3, [r7, #20]
 80129c4:	889b      	ldrh	r3, [r3, #4]
 80129c6:	b29b      	uxth	r3, r3
 80129c8:	429a      	cmp	r2, r3
 80129ca:	f200 80da 	bhi.w	8012b82 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80129ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129d0:	68ba      	ldr	r2, [r7, #8]
 80129d2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80129d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129d6:	88db      	ldrh	r3, [r3, #6]
 80129d8:	b29a      	uxth	r2, r3
 80129da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129dc:	889b      	ldrh	r3, [r3, #4]
 80129de:	b29b      	uxth	r3, r3
 80129e0:	429a      	cmp	r2, r3
 80129e2:	d037      	beq.n	8012a54 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80129e4:	2300      	movs	r3, #0
 80129e6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80129e8:	e034      	b.n	8012a54 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 80129ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ec:	88db      	ldrh	r3, [r3, #6]
 80129ee:	b29a      	uxth	r2, r3
 80129f0:	697b      	ldr	r3, [r7, #20]
 80129f2:	889b      	ldrh	r3, [r3, #4]
 80129f4:	b29b      	uxth	r3, r3
 80129f6:	429a      	cmp	r2, r3
 80129f8:	f200 80c5 	bhi.w	8012b86 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	68ba      	ldr	r2, [r7, #8]
 8012a00:	605a      	str	r2, [r3, #4]
      break;
 8012a02:	e027      	b.n	8012a54 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8012a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a06:	889b      	ldrh	r3, [r3, #4]
 8012a08:	b29a      	uxth	r2, r3
 8012a0a:	697b      	ldr	r3, [r7, #20]
 8012a0c:	889b      	ldrh	r3, [r3, #4]
 8012a0e:	b29b      	uxth	r3, r3
 8012a10:	429a      	cmp	r2, r3
 8012a12:	f000 80ba 	beq.w	8012b8a <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a18:	889b      	ldrh	r3, [r3, #4]
 8012a1a:	b29a      	uxth	r2, r3
 8012a1c:	697b      	ldr	r3, [r7, #20]
 8012a1e:	88db      	ldrh	r3, [r3, #6]
 8012a20:	b29b      	uxth	r3, r3
 8012a22:	429a      	cmp	r2, r3
 8012a24:	f0c0 80b3 	bcc.w	8012b8e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d009      	beq.n	8012a42 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8012a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a30:	88db      	ldrh	r3, [r3, #6]
 8012a32:	b29a      	uxth	r2, r3
 8012a34:	697b      	ldr	r3, [r7, #20]
 8012a36:	889b      	ldrh	r3, [r3, #4]
 8012a38:	b29b      	uxth	r3, r3
 8012a3a:	429a      	cmp	r2, r3
 8012a3c:	d001      	beq.n	8012a42 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012a3e:	2300      	movs	r3, #0
 8012a40:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012a42:	697b      	ldr	r3, [r7, #20]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012a48:	697b      	ldr	r3, [r7, #20]
 8012a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d19a      	bne.n	8012988 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8012a52:	e000      	b.n	8012a56 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8012a54:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8012a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d12d      	bne.n	8012ab8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8012a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d01c      	beq.n	8012a9c <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a64:	88db      	ldrh	r3, [r3, #6]
 8012a66:	b29a      	uxth	r2, r3
 8012a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a6a:	889b      	ldrh	r3, [r3, #4]
 8012a6c:	b29b      	uxth	r3, r3
 8012a6e:	429a      	cmp	r2, r3
 8012a70:	d906      	bls.n	8012a80 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8012a72:	4b51      	ldr	r3, [pc, #324]	; (8012bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8012a74:	f240 12ab 	movw	r2, #427	; 0x1ab
 8012a78:	4950      	ldr	r1, [pc, #320]	; (8012bbc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012a7a:	4851      	ldr	r0, [pc, #324]	; (8012bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012a7c:	f000 ff68 	bl	8013950 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a82:	68ba      	ldr	r2, [r7, #8]
 8012a84:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8012a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a88:	88db      	ldrh	r3, [r3, #6]
 8012a8a:	b29a      	uxth	r2, r3
 8012a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a8e:	889b      	ldrh	r3, [r3, #4]
 8012a90:	b29b      	uxth	r3, r3
 8012a92:	429a      	cmp	r2, r3
 8012a94:	d010      	beq.n	8012ab8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 8012a96:	2300      	movs	r3, #0
 8012a98:	623b      	str	r3, [r7, #32]
 8012a9a:	e00d      	b.n	8012ab8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	685b      	ldr	r3, [r3, #4]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d006      	beq.n	8012ab2 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8012aa4:	4b44      	ldr	r3, [pc, #272]	; (8012bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8012aa6:	f240 12b3 	movw	r2, #435	; 0x1b3
 8012aaa:	4946      	ldr	r1, [pc, #280]	; (8012bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012aac:	4844      	ldr	r0, [pc, #272]	; (8012bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012aae:	f000 ff4f 	bl	8013950 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	68ba      	ldr	r2, [r7, #8]
 8012ab6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d105      	bne.n	8012aca <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	7f9b      	ldrb	r3, [r3, #30]
 8012ac2:	f003 0301 	and.w	r3, r3, #1
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d059      	beq.n	8012b7e <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8012aca:	6a3b      	ldr	r3, [r7, #32]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d04f      	beq.n	8012b70 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	685b      	ldr	r3, [r3, #4]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d006      	beq.n	8012ae6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	685b      	ldr	r3, [r3, #4]
 8012adc:	685b      	ldr	r3, [r3, #4]
 8012ade:	889b      	ldrh	r3, [r3, #4]
 8012ae0:	b29b      	uxth	r3, r3
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d002      	beq.n	8012aec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	623b      	str	r3, [r7, #32]
 8012aea:	e041      	b.n	8012b70 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aee:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012af6:	e012      	b.n	8012b1e <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8012af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012afa:	685b      	ldr	r3, [r3, #4]
 8012afc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8012afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b00:	88db      	ldrh	r3, [r3, #6]
 8012b02:	b29a      	uxth	r2, r3
 8012b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b06:	889b      	ldrh	r3, [r3, #4]
 8012b08:	b29b      	uxth	r3, r3
 8012b0a:	429a      	cmp	r2, r3
 8012b0c:	d002      	beq.n	8012b14 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8012b0e:	2300      	movs	r3, #0
 8012b10:	623b      	str	r3, [r7, #32]
            break;
 8012b12:	e007      	b.n	8012b24 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8012b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b16:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d1e9      	bne.n	8012af8 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012b24:	6a3b      	ldr	r3, [r7, #32]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d022      	beq.n	8012b70 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	685b      	ldr	r3, [r3, #4]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d106      	bne.n	8012b40 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8012b32:	4b21      	ldr	r3, [pc, #132]	; (8012bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8012b34:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8012b38:	4923      	ldr	r1, [pc, #140]	; (8012bc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012b3a:	4821      	ldr	r0, [pc, #132]	; (8012bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012b3c:	f000 ff08 	bl	8013950 <iprintf>
          LWIP_ASSERT("sanity check",
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	685b      	ldr	r3, [r3, #4]
 8012b44:	685b      	ldr	r3, [r3, #4]
 8012b46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b48:	429a      	cmp	r2, r3
 8012b4a:	d106      	bne.n	8012b5a <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8012b4c:	4b1a      	ldr	r3, [pc, #104]	; (8012bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8012b4e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8012b52:	491d      	ldr	r1, [pc, #116]	; (8012bc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012b54:	481a      	ldr	r0, [pc, #104]	; (8012bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012b56:	f000 fefb 	bl	8013950 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d006      	beq.n	8012b70 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8012b62:	4b15      	ldr	r3, [pc, #84]	; (8012bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8012b64:	f240 12d7 	movw	r2, #471	; 0x1d7
 8012b68:	4918      	ldr	r1, [pc, #96]	; (8012bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012b6a:	4815      	ldr	r0, [pc, #84]	; (8012bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012b6c:	f000 fef0 	bl	8013950 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012b70:	6a3b      	ldr	r3, [r7, #32]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	bf14      	ite	ne
 8012b76:	2301      	movne	r3, #1
 8012b78:	2300      	moveq	r3, #0
 8012b7a:	b2db      	uxtb	r3, r3
 8012b7c:	e018      	b.n	8012bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012b7e:	2300      	movs	r3, #0
 8012b80:	e016      	b.n	8012bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
          goto freepbuf;
 8012b82:	bf00      	nop
 8012b84:	e004      	b.n	8012b90 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 8012b86:	bf00      	nop
 8012b88:	e002      	b.n	8012b90 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8012b8a:	bf00      	nop
 8012b8c:	e000      	b.n	8012b90 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8012b8e:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8012b90:	68b8      	ldr	r0, [r7, #8]
 8012b92:	f7f8 fec1 	bl	800b918 <pbuf_clen>
 8012b96:	4603      	mov	r3, r0
 8012b98:	461a      	mov	r2, r3
 8012b9a:	4b0d      	ldr	r3, [pc, #52]	; (8012bd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012b9c:	881b      	ldrh	r3, [r3, #0]
 8012b9e:	1a9b      	subs	r3, r3, r2
 8012ba0:	b29a      	uxth	r2, r3
 8012ba2:	4b0b      	ldr	r3, [pc, #44]	; (8012bd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012ba4:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8012ba6:	68b8      	ldr	r0, [r7, #8]
 8012ba8:	f7f8 fe22 	bl	800b7f0 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012bac:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	3730      	adds	r7, #48	; 0x30
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}
 8012bb8:	08016894 	.word	0x08016894
 8012bbc:	08016970 	.word	0x08016970
 8012bc0:	080168dc 	.word	0x080168dc
 8012bc4:	08016990 	.word	0x08016990
 8012bc8:	080169c8 	.word	0x080169c8
 8012bcc:	080169d8 	.word	0x080169d8
 8012bd0:	20000638 	.word	0x20000638

08012bd4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b08e      	sub	sp, #56	; 0x38
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	685b      	ldr	r3, [r3, #4]
 8012be0:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8012be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012be4:	781b      	ldrb	r3, [r3, #0]
 8012be6:	f003 030f 	and.w	r3, r3, #15
 8012bea:	009b      	lsls	r3, r3, #2
 8012bec:	2b14      	cmp	r3, #20
 8012bee:	f040 8131 	bne.w	8012e54 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8012bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bf4:	88db      	ldrh	r3, [r3, #6]
 8012bf6:	b29b      	uxth	r3, r3
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	f7f7 fccc 	bl	800a596 <lwip_htons>
 8012bfe:	4603      	mov	r3, r0
 8012c00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012c04:	b29b      	uxth	r3, r3
 8012c06:	00db      	lsls	r3, r3, #3
 8012c08:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8012c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c0c:	885b      	ldrh	r3, [r3, #2]
 8012c0e:	b29b      	uxth	r3, r3
 8012c10:	4618      	mov	r0, r3
 8012c12:	f7f7 fcc0 	bl	800a596 <lwip_htons>
 8012c16:	4603      	mov	r3, r0
 8012c18:	461a      	mov	r2, r3
 8012c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c1c:	781b      	ldrb	r3, [r3, #0]
 8012c1e:	b29b      	uxth	r3, r3
 8012c20:	f003 030f 	and.w	r3, r3, #15
 8012c24:	b29b      	uxth	r3, r3
 8012c26:	009b      	lsls	r3, r3, #2
 8012c28:	b29b      	uxth	r3, r3
 8012c2a:	1ad3      	subs	r3, r2, r3
 8012c2c:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012c2e:	6878      	ldr	r0, [r7, #4]
 8012c30:	f7f8 fe72 	bl	800b918 <pbuf_clen>
 8012c34:	4603      	mov	r3, r0
 8012c36:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012c38:	4b8e      	ldr	r3, [pc, #568]	; (8012e74 <ip4_reass+0x2a0>)
 8012c3a:	881b      	ldrh	r3, [r3, #0]
 8012c3c:	461a      	mov	r2, r3
 8012c3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012c40:	4413      	add	r3, r2
 8012c42:	2b0a      	cmp	r3, #10
 8012c44:	dd10      	ble.n	8012c68 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012c46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012c48:	4619      	mov	r1, r3
 8012c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c4c:	f7ff fd8e 	bl	801276c <ip_reass_remove_oldest_datagram>
 8012c50:	4603      	mov	r3, r0
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	f000 8100 	beq.w	8012e58 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012c58:	4b86      	ldr	r3, [pc, #536]	; (8012e74 <ip4_reass+0x2a0>)
 8012c5a:	881b      	ldrh	r3, [r3, #0]
 8012c5c:	461a      	mov	r2, r3
 8012c5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012c60:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012c62:	2b0a      	cmp	r3, #10
 8012c64:	f300 80f8 	bgt.w	8012e58 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012c68:	4b83      	ldr	r3, [pc, #524]	; (8012e78 <ip4_reass+0x2a4>)
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	633b      	str	r3, [r7, #48]	; 0x30
 8012c6e:	e015      	b.n	8012c9c <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c72:	695a      	ldr	r2, [r3, #20]
 8012c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c76:	68db      	ldr	r3, [r3, #12]
 8012c78:	429a      	cmp	r2, r3
 8012c7a:	d10c      	bne.n	8012c96 <ip4_reass+0xc2>
 8012c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c7e:	699a      	ldr	r2, [r3, #24]
 8012c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c82:	691b      	ldr	r3, [r3, #16]
 8012c84:	429a      	cmp	r2, r3
 8012c86:	d106      	bne.n	8012c96 <ip4_reass+0xc2>
 8012c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c8a:	899a      	ldrh	r2, [r3, #12]
 8012c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c8e:	889b      	ldrh	r3, [r3, #4]
 8012c90:	b29b      	uxth	r3, r3
 8012c92:	429a      	cmp	r2, r3
 8012c94:	d006      	beq.n	8012ca4 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	633b      	str	r3, [r7, #48]	; 0x30
 8012c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d1e6      	bne.n	8012c70 <ip4_reass+0x9c>
 8012ca2:	e000      	b.n	8012ca6 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8012ca4:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d109      	bne.n	8012cc0 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012cac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012cae:	4619      	mov	r1, r3
 8012cb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012cb2:	f7ff fdbd 	bl	8012830 <ip_reass_enqueue_new_datagram>
 8012cb6:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d11c      	bne.n	8012cf8 <ip4_reass+0x124>
      goto nullreturn;
 8012cbe:	e0d0      	b.n	8012e62 <ip4_reass+0x28e>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cc2:	88db      	ldrh	r3, [r3, #6]
 8012cc4:	b29b      	uxth	r3, r3
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	f7f7 fc65 	bl	800a596 <lwip_htons>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d110      	bne.n	8012cf8 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cd8:	89db      	ldrh	r3, [r3, #14]
 8012cda:	4618      	mov	r0, r3
 8012cdc:	f7f7 fc5b 	bl	800a596 <lwip_htons>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d006      	beq.n	8012cf8 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cec:	3308      	adds	r3, #8
 8012cee:	2214      	movs	r2, #20
 8012cf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	f000 fd56 	bl	80137a4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cfa:	88db      	ldrh	r3, [r3, #6]
 8012cfc:	b29b      	uxth	r3, r3
 8012cfe:	f003 0320 	and.w	r3, r3, #32
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	bf0c      	ite	eq
 8012d06:	2301      	moveq	r3, #1
 8012d08:	2300      	movne	r3, #0
 8012d0a:	b2db      	uxtb	r3, r3
 8012d0c:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012d0e:	69fb      	ldr	r3, [r7, #28]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d00e      	beq.n	8012d32 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8012d14:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012d16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d18:	4413      	add	r3, r2
 8012d1a:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012d1c:	8b7a      	ldrh	r2, [r7, #26]
 8012d1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012d20:	429a      	cmp	r2, r3
 8012d22:	f0c0 809b 	bcc.w	8012e5c <ip4_reass+0x288>
 8012d26:	8b7b      	ldrh	r3, [r7, #26]
 8012d28:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012d2c:	4293      	cmp	r3, r2
 8012d2e:	f200 8095 	bhi.w	8012e5c <ip4_reass+0x288>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012d32:	69fa      	ldr	r2, [r7, #28]
 8012d34:	6879      	ldr	r1, [r7, #4]
 8012d36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d38:	f7ff fde2 	bl	8012900 <ip_reass_chain_frag_into_datagram_and_validate>
 8012d3c:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012d3e:	697b      	ldr	r3, [r7, #20]
 8012d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d44:	f000 808c 	beq.w	8012e60 <ip4_reass+0x28c>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012d48:	4b4a      	ldr	r3, [pc, #296]	; (8012e74 <ip4_reass+0x2a0>)
 8012d4a:	881a      	ldrh	r2, [r3, #0]
 8012d4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012d4e:	4413      	add	r3, r2
 8012d50:	b29a      	uxth	r2, r3
 8012d52:	4b48      	ldr	r3, [pc, #288]	; (8012e74 <ip4_reass+0x2a0>)
 8012d54:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012d56:	69fb      	ldr	r3, [r7, #28]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d00d      	beq.n	8012d78 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8012d5c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012d5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d60:	4413      	add	r3, r2
 8012d62:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d66:	8a7a      	ldrh	r2, [r7, #18]
 8012d68:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d6c:	7f9b      	ldrb	r3, [r3, #30]
 8012d6e:	f043 0301 	orr.w	r3, r3, #1
 8012d72:	b2da      	uxtb	r2, r3
 8012d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d76:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012d78:	697b      	ldr	r3, [r7, #20]
 8012d7a:	2b01      	cmp	r3, #1
 8012d7c:	d168      	bne.n	8012e50 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8012d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d80:	8b9b      	ldrh	r3, [r3, #28]
 8012d82:	3314      	adds	r3, #20
 8012d84:	b29a      	uxth	r2, r3
 8012d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d88:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8012d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d8c:	685b      	ldr	r3, [r3, #4]
 8012d8e:	685b      	ldr	r3, [r3, #4]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8012d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d96:	685b      	ldr	r3, [r3, #4]
 8012d98:	685b      	ldr	r3, [r3, #4]
 8012d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d9e:	3308      	adds	r3, #8
 8012da0:	2214      	movs	r2, #20
 8012da2:	4619      	mov	r1, r3
 8012da4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012da6:	f000 fcfd 	bl	80137a4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8012daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dac:	8b9b      	ldrh	r3, [r3, #28]
 8012dae:	4618      	mov	r0, r3
 8012db0:	f7f7 fbf1 	bl	800a596 <lwip_htons>
 8012db4:	4603      	mov	r3, r0
 8012db6:	461a      	mov	r2, r3
 8012db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dba:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	719a      	strb	r2, [r3, #6]
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dc8:	2200      	movs	r2, #0
 8012dca:	729a      	strb	r2, [r3, #10]
 8012dcc:	2200      	movs	r2, #0
 8012dce:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dd2:	685b      	ldr	r3, [r3, #4]
 8012dd4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012dd6:	e00e      	b.n	8012df6 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8012dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dda:	685b      	ldr	r3, [r3, #4]
 8012ddc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8012dde:	f06f 0113 	mvn.w	r1, #19
 8012de2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012de4:	f7f8 fce0 	bl	800b7a8 <pbuf_header>
      pbuf_cat(p, r);
 8012de8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012dea:	6878      	ldr	r0, [r7, #4]
 8012dec:	f7f8 fdcc 	bl	800b988 <pbuf_cat>
      r = iprh->next_pbuf;
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d1ed      	bne.n	8012dd8 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012dfc:	4b1e      	ldr	r3, [pc, #120]	; (8012e78 <ip4_reass+0x2a4>)
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e02:	429a      	cmp	r2, r3
 8012e04:	d102      	bne.n	8012e0c <ip4_reass+0x238>
      ipr_prev = NULL;
 8012e06:	2300      	movs	r3, #0
 8012e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e0a:	e010      	b.n	8012e2e <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012e0c:	4b1a      	ldr	r3, [pc, #104]	; (8012e78 <ip4_reass+0x2a4>)
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e12:	e007      	b.n	8012e24 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8012e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e1a:	429a      	cmp	r2, r3
 8012e1c:	d006      	beq.n	8012e2c <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d1f4      	bne.n	8012e14 <ip4_reass+0x240>
 8012e2a:	e000      	b.n	8012e2e <ip4_reass+0x25a>
          break;
 8012e2c:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012e2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012e32:	f7ff fd37 	bl	80128a4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 8012e36:	6878      	ldr	r0, [r7, #4]
 8012e38:	f7f8 fd6e 	bl	800b918 <pbuf_clen>
 8012e3c:	4603      	mov	r3, r0
 8012e3e:	461a      	mov	r2, r3
 8012e40:	4b0c      	ldr	r3, [pc, #48]	; (8012e74 <ip4_reass+0x2a0>)
 8012e42:	881b      	ldrh	r3, [r3, #0]
 8012e44:	1a9b      	subs	r3, r3, r2
 8012e46:	b29a      	uxth	r2, r3
 8012e48:	4b0a      	ldr	r3, [pc, #40]	; (8012e74 <ip4_reass+0x2a0>)
 8012e4a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	e00c      	b.n	8012e6a <ip4_reass+0x296>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012e50:	2300      	movs	r3, #0
 8012e52:	e00a      	b.n	8012e6a <ip4_reass+0x296>
    goto nullreturn;
 8012e54:	bf00      	nop
 8012e56:	e004      	b.n	8012e62 <ip4_reass+0x28e>
      goto nullreturn;
 8012e58:	bf00      	nop
 8012e5a:	e002      	b.n	8012e62 <ip4_reass+0x28e>
      goto nullreturn;
 8012e5c:	bf00      	nop
 8012e5e:	e000      	b.n	8012e62 <ip4_reass+0x28e>
    goto nullreturn;
 8012e60:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012e62:	6878      	ldr	r0, [r7, #4]
 8012e64:	f7f8 fcc4 	bl	800b7f0 <pbuf_free>
  return NULL;
 8012e68:	2300      	movs	r3, #0
}
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	3738      	adds	r7, #56	; 0x38
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	bd80      	pop	{r7, pc}
 8012e72:	bf00      	nop
 8012e74:	20000638 	.word	0x20000638
 8012e78:	20000634 	.word	0x20000634

08012e7c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8012e80:	2005      	movs	r0, #5
 8012e82:	f7f7 ff31 	bl	800ace8 <memp_malloc>
 8012e86:	4603      	mov	r3, r0
}
 8012e88:	4618      	mov	r0, r3
 8012e8a:	bd80      	pop	{r7, pc}

08012e8c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b082      	sub	sp, #8
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d106      	bne.n	8012ea8 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012e9a:	4b07      	ldr	r3, [pc, #28]	; (8012eb8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012e9c:	f240 22ae 	movw	r2, #686	; 0x2ae
 8012ea0:	4906      	ldr	r1, [pc, #24]	; (8012ebc <ip_frag_free_pbuf_custom_ref+0x30>)
 8012ea2:	4807      	ldr	r0, [pc, #28]	; (8012ec0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8012ea4:	f000 fd54 	bl	8013950 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012ea8:	6879      	ldr	r1, [r7, #4]
 8012eaa:	2005      	movs	r0, #5
 8012eac:	f7f7 ff68 	bl	800ad80 <memp_free>
}
 8012eb0:	bf00      	nop
 8012eb2:	3708      	adds	r7, #8
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	bd80      	pop	{r7, pc}
 8012eb8:	08016894 	.word	0x08016894
 8012ebc:	080169fc 	.word	0x080169fc
 8012ec0:	080168dc 	.word	0x080168dc

08012ec4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012ec4:	b580      	push	{r7, lr}
 8012ec6:	b084      	sub	sp, #16
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d106      	bne.n	8012ee4 <ipfrag_free_pbuf_custom+0x20>
 8012ed6:	4b11      	ldr	r3, [pc, #68]	; (8012f1c <ipfrag_free_pbuf_custom+0x58>)
 8012ed8:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8012edc:	4910      	ldr	r1, [pc, #64]	; (8012f20 <ipfrag_free_pbuf_custom+0x5c>)
 8012ede:	4811      	ldr	r0, [pc, #68]	; (8012f24 <ipfrag_free_pbuf_custom+0x60>)
 8012ee0:	f000 fd36 	bl	8013950 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8012ee4:	68fa      	ldr	r2, [r7, #12]
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	429a      	cmp	r2, r3
 8012eea:	d006      	beq.n	8012efa <ipfrag_free_pbuf_custom+0x36>
 8012eec:	4b0b      	ldr	r3, [pc, #44]	; (8012f1c <ipfrag_free_pbuf_custom+0x58>)
 8012eee:	f240 22b9 	movw	r2, #697	; 0x2b9
 8012ef2:	490d      	ldr	r1, [pc, #52]	; (8012f28 <ipfrag_free_pbuf_custom+0x64>)
 8012ef4:	480b      	ldr	r0, [pc, #44]	; (8012f24 <ipfrag_free_pbuf_custom+0x60>)
 8012ef6:	f000 fd2b 	bl	8013950 <iprintf>
  if (pcr->original != NULL) {
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	695b      	ldr	r3, [r3, #20]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d004      	beq.n	8012f0c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	695b      	ldr	r3, [r3, #20]
 8012f06:	4618      	mov	r0, r3
 8012f08:	f7f8 fc72 	bl	800b7f0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012f0c:	68f8      	ldr	r0, [r7, #12]
 8012f0e:	f7ff ffbd 	bl	8012e8c <ip_frag_free_pbuf_custom_ref>
}
 8012f12:	bf00      	nop
 8012f14:	3710      	adds	r7, #16
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}
 8012f1a:	bf00      	nop
 8012f1c:	08016894 	.word	0x08016894
 8012f20:	08016a08 	.word	0x08016a08
 8012f24:	080168dc 	.word	0x080168dc
 8012f28:	08016a14 	.word	0x08016a14

08012f2c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b092      	sub	sp, #72	; 0x48
 8012f30:	af02      	add	r7, sp, #8
 8012f32:	60f8      	str	r0, [r7, #12]
 8012f34:	60b9      	str	r1, [r7, #8]
 8012f36:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012f38:	2300      	movs	r3, #0
 8012f3a:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8012f3c:	68bb      	ldr	r3, [r7, #8]
 8012f3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012f40:	3b14      	subs	r3, #20
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	da00      	bge.n	8012f48 <ip4_frag+0x1c>
 8012f46:	3307      	adds	r3, #7
 8012f48:	10db      	asrs	r3, r3, #3
 8012f4a:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012f4c:	2314      	movs	r3, #20
 8012f4e:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	685b      	ldr	r3, [r3, #4]
 8012f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8012f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f58:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8012f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f5c:	781b      	ldrb	r3, [r3, #0]
 8012f5e:	f003 030f 	and.w	r3, r3, #15
 8012f62:	009b      	lsls	r3, r3, #2
 8012f64:	2b14      	cmp	r3, #20
 8012f66:	d009      	beq.n	8012f7c <ip4_frag+0x50>
 8012f68:	4b7a      	ldr	r3, [pc, #488]	; (8013154 <ip4_frag+0x228>)
 8012f6a:	f240 22e1 	movw	r2, #737	; 0x2e1
 8012f6e:	497a      	ldr	r1, [pc, #488]	; (8013158 <ip4_frag+0x22c>)
 8012f70:	487a      	ldr	r0, [pc, #488]	; (801315c <ip4_frag+0x230>)
 8012f72:	f000 fced 	bl	8013950 <iprintf>
 8012f76:	f06f 0305 	mvn.w	r3, #5
 8012f7a:	e0e6      	b.n	801314a <ip4_frag+0x21e>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f7e:	88db      	ldrh	r3, [r3, #6]
 8012f80:	b29b      	uxth	r3, r3
 8012f82:	4618      	mov	r0, r3
 8012f84:	f7f7 fb07 	bl	800a596 <lwip_htons>
 8012f88:	4603      	mov	r3, r0
 8012f8a:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8012f8c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012f8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012f92:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8012f94:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012f96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d009      	beq.n	8012fb2 <ip4_frag+0x86>
 8012f9e:	4b6d      	ldr	r3, [pc, #436]	; (8013154 <ip4_frag+0x228>)
 8012fa0:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012fa4:	496e      	ldr	r1, [pc, #440]	; (8013160 <ip4_frag+0x234>)
 8012fa6:	486d      	ldr	r0, [pc, #436]	; (801315c <ip4_frag+0x230>)
 8012fa8:	f000 fcd2 	bl	8013950 <iprintf>
 8012fac:	f06f 0305 	mvn.w	r3, #5
 8012fb0:	e0cb      	b.n	801314a <ip4_frag+0x21e>

  left = p->tot_len - IP_HLEN;
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	891b      	ldrh	r3, [r3, #8]
 8012fb6:	3b14      	subs	r3, #20
 8012fb8:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 8012fba:	e0bd      	b.n	8013138 <ip4_frag+0x20c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8012fbc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8012fbe:	00da      	lsls	r2, r3, #3
 8012fc0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012fc2:	4293      	cmp	r3, r2
 8012fc4:	bfa8      	it	ge
 8012fc6:	4613      	movge	r3, r2
 8012fc8:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012fca:	2200      	movs	r2, #0
 8012fcc:	2114      	movs	r1, #20
 8012fce:	2002      	movs	r0, #2
 8012fd0:	f7f8 f89c 	bl	800b10c <pbuf_alloc>
 8012fd4:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8012fd6:	6a3b      	ldr	r3, [r7, #32]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	f000 80b3 	beq.w	8013144 <ip4_frag+0x218>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	895b      	ldrh	r3, [r3, #10]
 8012fe2:	2b13      	cmp	r3, #19
 8012fe4:	d806      	bhi.n	8012ff4 <ip4_frag+0xc8>
 8012fe6:	4b5b      	ldr	r3, [pc, #364]	; (8013154 <ip4_frag+0x228>)
 8012fe8:	f44f 7242 	mov.w	r2, #776	; 0x308
 8012fec:	495d      	ldr	r1, [pc, #372]	; (8013164 <ip4_frag+0x238>)
 8012fee:	485b      	ldr	r0, [pc, #364]	; (801315c <ip4_frag+0x230>)
 8012ff0:	f000 fcae 	bl	8013950 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012ff4:	6a3b      	ldr	r3, [r7, #32]
 8012ff6:	685b      	ldr	r3, [r3, #4]
 8012ff8:	2214      	movs	r2, #20
 8012ffa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f000 fbd1 	bl	80137a4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013002:	6a3b      	ldr	r3, [r7, #32]
 8013004:	685b      	ldr	r3, [r3, #4]
 8013006:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8013008:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801300a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 801300c:	e04f      	b.n	80130ae <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	895a      	ldrh	r2, [r3, #10]
 8013012:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013014:	1ad3      	subs	r3, r2, r3
 8013016:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013018:	8b7a      	ldrh	r2, [r7, #26]
 801301a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801301c:	4293      	cmp	r3, r2
 801301e:	bf28      	it	cs
 8013020:	4613      	movcs	r3, r2
 8013022:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013024:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013026:	2b00      	cmp	r3, #0
 8013028:	d105      	bne.n	8013036 <ip4_frag+0x10a>
        poff = 0;
 801302a:	2300      	movs	r3, #0
 801302c:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	60fb      	str	r3, [r7, #12]
        continue;
 8013034:	e03b      	b.n	80130ae <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013036:	f7ff ff21 	bl	8012e7c <ip_frag_alloc_pbuf_custom_ref>
 801303a:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 801303c:	697b      	ldr	r3, [r7, #20]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d103      	bne.n	801304a <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8013042:	6a38      	ldr	r0, [r7, #32]
 8013044:	f7f8 fbd4 	bl	800b7f0 <pbuf_free>
        goto memerr;
 8013048:	e07d      	b.n	8013146 <ip4_frag+0x21a>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801304a:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013050:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013052:	4413      	add	r3, r2
 8013054:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8013056:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013058:	9201      	str	r2, [sp, #4]
 801305a:	9300      	str	r3, [sp, #0]
 801305c:	4603      	mov	r3, r0
 801305e:	2202      	movs	r2, #2
 8013060:	2004      	movs	r0, #4
 8013062:	f7f8 f9e7 	bl	800b434 <pbuf_alloced_custom>
 8013066:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8013068:	693b      	ldr	r3, [r7, #16]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d106      	bne.n	801307c <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 801306e:	6978      	ldr	r0, [r7, #20]
 8013070:	f7ff ff0c 	bl	8012e8c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013074:	6a38      	ldr	r0, [r7, #32]
 8013076:	f7f8 fbbb 	bl	800b7f0 <pbuf_free>
        goto memerr;
 801307a:	e064      	b.n	8013146 <ip4_frag+0x21a>
      }
      pbuf_ref(p);
 801307c:	68f8      	ldr	r0, [r7, #12]
 801307e:	f7f8 fc61 	bl	800b944 <pbuf_ref>
      pcr->original = p;
 8013082:	697b      	ldr	r3, [r7, #20]
 8013084:	68fa      	ldr	r2, [r7, #12]
 8013086:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013088:	697b      	ldr	r3, [r7, #20]
 801308a:	4a37      	ldr	r2, [pc, #220]	; (8013168 <ip4_frag+0x23c>)
 801308c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801308e:	6939      	ldr	r1, [r7, #16]
 8013090:	6a38      	ldr	r0, [r7, #32]
 8013092:	f7f8 fc79 	bl	800b988 <pbuf_cat>
      left_to_copy -= newpbuflen;
 8013096:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8013098:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801309a:	1ad3      	subs	r3, r2, r3
 801309c:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 801309e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d004      	beq.n	80130ae <ip4_frag+0x182>
        poff = 0;
 80130a4:	2300      	movs	r3, #0
 80130a6:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80130ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d1ac      	bne.n	801300e <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 80130b4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80130b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80130b8:	4413      	add	r3, r2
 80130ba:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80130bc:	68bb      	ldr	r3, [r7, #8]
 80130be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80130c0:	f1a3 0213 	sub.w	r2, r3, #19
 80130c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80130c6:	429a      	cmp	r2, r3
 80130c8:	bfcc      	ite	gt
 80130ca:	2301      	movgt	r3, #1
 80130cc:	2300      	movle	r3, #0
 80130ce:	b2db      	uxtb	r3, r3
 80130d0:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80130d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80130d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80130d8:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 80130da:	69fb      	ldr	r3, [r7, #28]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d103      	bne.n	80130e8 <ip4_frag+0x1bc>
      tmp = tmp | IP_MF;
 80130e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80130e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80130e6:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80130e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80130ea:	4618      	mov	r0, r3
 80130ec:	f7f7 fa53 	bl	800a596 <lwip_htons>
 80130f0:	4603      	mov	r3, r0
 80130f2:	461a      	mov	r2, r3
 80130f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130f6:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80130f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80130fa:	3314      	adds	r3, #20
 80130fc:	b29b      	uxth	r3, r3
 80130fe:	4618      	mov	r0, r3
 8013100:	f7f7 fa49 	bl	800a596 <lwip_htons>
 8013104:	4603      	mov	r3, r0
 8013106:	461a      	mov	r2, r3
 8013108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801310a:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801310c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801310e:	2200      	movs	r2, #0
 8013110:	729a      	strb	r2, [r3, #10]
 8013112:	2200      	movs	r2, #0
 8013114:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	695b      	ldr	r3, [r3, #20]
 801311a:	687a      	ldr	r2, [r7, #4]
 801311c:	6a39      	ldr	r1, [r7, #32]
 801311e:	68b8      	ldr	r0, [r7, #8]
 8013120:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013122:	6a38      	ldr	r0, [r7, #32]
 8013124:	f7f8 fb64 	bl	800b7f0 <pbuf_free>
    left -= fragsize;
 8013128:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801312a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801312c:	1ad3      	subs	r3, r2, r3
 801312e:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8013130:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8013132:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013134:	4413      	add	r3, r2
 8013136:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8013138:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801313a:	2b00      	cmp	r3, #0
 801313c:	f47f af3e 	bne.w	8012fbc <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013140:	2300      	movs	r3, #0
 8013142:	e002      	b.n	801314a <ip4_frag+0x21e>
      goto memerr;
 8013144:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013146:	f04f 33ff 	mov.w	r3, #4294967295
}
 801314a:	4618      	mov	r0, r3
 801314c:	3740      	adds	r7, #64	; 0x40
 801314e:	46bd      	mov	sp, r7
 8013150:	bd80      	pop	{r7, pc}
 8013152:	bf00      	nop
 8013154:	08016894 	.word	0x08016894
 8013158:	08016a20 	.word	0x08016a20
 801315c:	080168dc 	.word	0x080168dc
 8013160:	08016a48 	.word	0x08016a48
 8013164:	08016a64 	.word	0x08016a64
 8013168:	08012ec5 	.word	0x08012ec5

0801316c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b086      	sub	sp, #24
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]
 8013174:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8013176:	230e      	movs	r3, #14
 8013178:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	895b      	ldrh	r3, [r3, #10]
 801317e:	2b0e      	cmp	r3, #14
 8013180:	d977      	bls.n	8013272 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	685b      	ldr	r3, [r3, #4]
 8013186:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013188:	693b      	ldr	r3, [r7, #16]
 801318a:	7b1a      	ldrb	r2, [r3, #12]
 801318c:	7b5b      	ldrb	r3, [r3, #13]
 801318e:	021b      	lsls	r3, r3, #8
 8013190:	4313      	orrs	r3, r2
 8013192:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013194:	693b      	ldr	r3, [r7, #16]
 8013196:	781b      	ldrb	r3, [r3, #0]
 8013198:	f003 0301 	and.w	r3, r3, #1
 801319c:	2b00      	cmp	r3, #0
 801319e:	d023      	beq.n	80131e8 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80131a0:	693b      	ldr	r3, [r7, #16]
 80131a2:	781b      	ldrb	r3, [r3, #0]
 80131a4:	2b01      	cmp	r3, #1
 80131a6:	d10f      	bne.n	80131c8 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80131a8:	693b      	ldr	r3, [r7, #16]
 80131aa:	785b      	ldrb	r3, [r3, #1]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d11b      	bne.n	80131e8 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80131b0:	693b      	ldr	r3, [r7, #16]
 80131b2:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80131b4:	2b5e      	cmp	r3, #94	; 0x5e
 80131b6:	d117      	bne.n	80131e8 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	7b5b      	ldrb	r3, [r3, #13]
 80131bc:	f043 0310 	orr.w	r3, r3, #16
 80131c0:	b2da      	uxtb	r2, r3
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	735a      	strb	r2, [r3, #13]
 80131c6:	e00f      	b.n	80131e8 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80131c8:	693b      	ldr	r3, [r7, #16]
 80131ca:	2206      	movs	r2, #6
 80131cc:	4931      	ldr	r1, [pc, #196]	; (8013294 <ethernet_input+0x128>)
 80131ce:	4618      	mov	r0, r3
 80131d0:	f000 fada 	bl	8013788 <memcmp>
 80131d4:	4603      	mov	r3, r0
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d106      	bne.n	80131e8 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	7b5b      	ldrb	r3, [r3, #13]
 80131de:	f043 0308 	orr.w	r3, r3, #8
 80131e2:	b2da      	uxtb	r2, r3
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80131e8:	89fb      	ldrh	r3, [r7, #14]
 80131ea:	2b08      	cmp	r3, #8
 80131ec:	d003      	beq.n	80131f6 <ethernet_input+0x8a>
 80131ee:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80131f2:	d01e      	beq.n	8013232 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80131f4:	e046      	b.n	8013284 <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80131f6:	683b      	ldr	r3, [r7, #0]
 80131f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80131fc:	f003 0308 	and.w	r3, r3, #8
 8013200:	2b00      	cmp	r3, #0
 8013202:	d038      	beq.n	8013276 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	895b      	ldrh	r3, [r3, #10]
 8013208:	461a      	mov	r2, r3
 801320a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801320e:	429a      	cmp	r2, r3
 8013210:	db33      	blt.n	801327a <ethernet_input+0x10e>
 8013212:	8afb      	ldrh	r3, [r7, #22]
 8013214:	425b      	negs	r3, r3
 8013216:	b29b      	uxth	r3, r3
 8013218:	b21b      	sxth	r3, r3
 801321a:	4619      	mov	r1, r3
 801321c:	6878      	ldr	r0, [r7, #4]
 801321e:	f7f8 fac3 	bl	800b7a8 <pbuf_header>
 8013222:	4603      	mov	r3, r0
 8013224:	2b00      	cmp	r3, #0
 8013226:	d128      	bne.n	801327a <ethernet_input+0x10e>
        ip4_input(p, netif);
 8013228:	6839      	ldr	r1, [r7, #0]
 801322a:	6878      	ldr	r0, [r7, #4]
 801322c:	f7fe ff7c 	bl	8012128 <ip4_input>
      break;
 8013230:	e01d      	b.n	801326e <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013232:	683b      	ldr	r3, [r7, #0]
 8013234:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013238:	f003 0308 	and.w	r3, r3, #8
 801323c:	2b00      	cmp	r3, #0
 801323e:	d01e      	beq.n	801327e <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	895b      	ldrh	r3, [r3, #10]
 8013244:	461a      	mov	r2, r3
 8013246:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801324a:	429a      	cmp	r2, r3
 801324c:	db19      	blt.n	8013282 <ethernet_input+0x116>
 801324e:	8afb      	ldrh	r3, [r7, #22]
 8013250:	425b      	negs	r3, r3
 8013252:	b29b      	uxth	r3, r3
 8013254:	b21b      	sxth	r3, r3
 8013256:	4619      	mov	r1, r3
 8013258:	6878      	ldr	r0, [r7, #4]
 801325a:	f7f8 faa5 	bl	800b7a8 <pbuf_header>
 801325e:	4603      	mov	r3, r0
 8013260:	2b00      	cmp	r3, #0
 8013262:	d10e      	bne.n	8013282 <ethernet_input+0x116>
        etharp_input(p, netif);
 8013264:	6839      	ldr	r1, [r7, #0]
 8013266:	6878      	ldr	r0, [r7, #4]
 8013268:	f7fe f94c 	bl	8011504 <etharp_input>
      break;
 801326c:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801326e:	2300      	movs	r3, #0
 8013270:	e00c      	b.n	801328c <ethernet_input+0x120>
    goto free_and_return;
 8013272:	bf00      	nop
 8013274:	e006      	b.n	8013284 <ethernet_input+0x118>
        goto free_and_return;
 8013276:	bf00      	nop
 8013278:	e004      	b.n	8013284 <ethernet_input+0x118>
        goto free_and_return;
 801327a:	bf00      	nop
 801327c:	e002      	b.n	8013284 <ethernet_input+0x118>
        goto free_and_return;
 801327e:	bf00      	nop
 8013280:	e000      	b.n	8013284 <ethernet_input+0x118>
        goto free_and_return;
 8013282:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013284:	6878      	ldr	r0, [r7, #4]
 8013286:	f7f8 fab3 	bl	800b7f0 <pbuf_free>
  return ERR_OK;
 801328a:	2300      	movs	r3, #0
}
 801328c:	4618      	mov	r0, r3
 801328e:	3718      	adds	r7, #24
 8013290:	46bd      	mov	sp, r7
 8013292:	bd80      	pop	{r7, pc}
 8013294:	08016c88 	.word	0x08016c88

08013298 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8013298:	b580      	push	{r7, lr}
 801329a:	b086      	sub	sp, #24
 801329c:	af00      	add	r7, sp, #0
 801329e:	60f8      	str	r0, [r7, #12]
 80132a0:	60b9      	str	r1, [r7, #8]
 80132a2:	607a      	str	r2, [r7, #4]
 80132a4:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80132a6:	8c3b      	ldrh	r3, [r7, #32]
 80132a8:	4618      	mov	r0, r3
 80132aa:	f7f7 f974 	bl	800a596 <lwip_htons>
 80132ae:	4603      	mov	r3, r0
 80132b0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80132b2:	210e      	movs	r1, #14
 80132b4:	68b8      	ldr	r0, [r7, #8]
 80132b6:	f7f8 fa77 	bl	800b7a8 <pbuf_header>
 80132ba:	4603      	mov	r3, r0
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d125      	bne.n	801330c <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 80132c0:	68bb      	ldr	r3, [r7, #8]
 80132c2:	685b      	ldr	r3, [r3, #4]
 80132c4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80132c6:	693b      	ldr	r3, [r7, #16]
 80132c8:	8afa      	ldrh	r2, [r7, #22]
 80132ca:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 80132cc:	693b      	ldr	r3, [r7, #16]
 80132ce:	2206      	movs	r2, #6
 80132d0:	6839      	ldr	r1, [r7, #0]
 80132d2:	4618      	mov	r0, r3
 80132d4:	f000 fa66 	bl	80137a4 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 80132d8:	693b      	ldr	r3, [r7, #16]
 80132da:	3306      	adds	r3, #6
 80132dc:	2206      	movs	r2, #6
 80132de:	6879      	ldr	r1, [r7, #4]
 80132e0:	4618      	mov	r0, r3
 80132e2:	f000 fa5f 	bl	80137a4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80132ec:	2b06      	cmp	r3, #6
 80132ee:	d006      	beq.n	80132fe <ethernet_output+0x66>
 80132f0:	4b0a      	ldr	r3, [pc, #40]	; (801331c <ethernet_output+0x84>)
 80132f2:	f240 122b 	movw	r2, #299	; 0x12b
 80132f6:	490a      	ldr	r1, [pc, #40]	; (8013320 <ethernet_output+0x88>)
 80132f8:	480a      	ldr	r0, [pc, #40]	; (8013324 <ethernet_output+0x8c>)
 80132fa:	f000 fb29 	bl	8013950 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	699b      	ldr	r3, [r3, #24]
 8013302:	68b9      	ldr	r1, [r7, #8]
 8013304:	68f8      	ldr	r0, [r7, #12]
 8013306:	4798      	blx	r3
 8013308:	4603      	mov	r3, r0
 801330a:	e002      	b.n	8013312 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801330c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801330e:	f06f 0301 	mvn.w	r3, #1
}
 8013312:	4618      	mov	r0, r3
 8013314:	3718      	adds	r7, #24
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
 801331a:	bf00      	nop
 801331c:	08016a84 	.word	0x08016a84
 8013320:	08016abc 	.word	0x08016abc
 8013324:	08016af0 	.word	0x08016af0

08013328 <_ZdlPv>:
 8013328:	f000 ba18 	b.w	801375c <free>

0801332c <_ZdlPvj>:
 801332c:	f7ff bffc 	b.w	8013328 <_ZdlPv>

08013330 <__cxa_guard_acquire>:
 8013330:	6802      	ldr	r2, [r0, #0]
 8013332:	4603      	mov	r3, r0
 8013334:	07d2      	lsls	r2, r2, #31
 8013336:	d405      	bmi.n	8013344 <__cxa_guard_acquire+0x14>
 8013338:	7842      	ldrb	r2, [r0, #1]
 801333a:	b102      	cbz	r2, 801333e <__cxa_guard_acquire+0xe>
 801333c:	deff      	udf	#255	; 0xff
 801333e:	2001      	movs	r0, #1
 8013340:	7058      	strb	r0, [r3, #1]
 8013342:	4770      	bx	lr
 8013344:	2000      	movs	r0, #0
 8013346:	4770      	bx	lr

08013348 <__cxa_guard_release>:
 8013348:	2301      	movs	r3, #1
 801334a:	6003      	str	r3, [r0, #0]
 801334c:	4770      	bx	lr

0801334e <_Znwj>:
 801334e:	2801      	cmp	r0, #1
 8013350:	bf38      	it	cc
 8013352:	2001      	movcc	r0, #1
 8013354:	b510      	push	{r4, lr}
 8013356:	4604      	mov	r4, r0
 8013358:	4620      	mov	r0, r4
 801335a:	f000 f9f7 	bl	801374c <malloc>
 801335e:	b930      	cbnz	r0, 801336e <_Znwj+0x20>
 8013360:	f000 f9c0 	bl	80136e4 <_ZSt15get_new_handlerv>
 8013364:	b908      	cbnz	r0, 801336a <_Znwj+0x1c>
 8013366:	f000 f9c5 	bl	80136f4 <abort>
 801336a:	4780      	blx	r0
 801336c:	e7f4      	b.n	8013358 <_Znwj+0xa>
 801336e:	bd10      	pop	{r4, pc}

08013370 <__cxa_pure_virtual>:
 8013370:	b508      	push	{r3, lr}
 8013372:	f000 f9b1 	bl	80136d8 <_ZSt9terminatev>

08013376 <_ZNSaIcEC1Ev>:
 8013376:	4770      	bx	lr

08013378 <_ZNSaIcED1Ev>:
 8013378:	4770      	bx	lr

0801337a <_ZSt17__throw_bad_allocv>:
 801337a:	b508      	push	{r3, lr}
 801337c:	f000 f9ba 	bl	80136f4 <abort>

08013380 <_ZSt19__throw_logic_errorPKc>:
 8013380:	b508      	push	{r3, lr}
 8013382:	f000 f9b7 	bl	80136f4 <abort>

08013386 <_ZSt20__throw_length_errorPKc>:
 8013386:	b508      	push	{r3, lr}
 8013388:	f000 f9b4 	bl	80136f4 <abort>

0801338c <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 801338c:	b10a      	cbz	r2, 8013392 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 801338e:	f000 ba09 	b.w	80137a4 <memcpy>
 8013392:	4770      	bx	lr

08013394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8013394:	b508      	push	{r3, lr}
 8013396:	680b      	ldr	r3, [r1, #0]
 8013398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801339c:	d302      	bcc.n	80133a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 801339e:	480d      	ldr	r0, [pc, #52]	; (80133d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80133a0:	f7ff fff1 	bl	8013386 <_ZSt20__throw_length_errorPKc>
 80133a4:	4293      	cmp	r3, r2
 80133a6:	d90b      	bls.n	80133c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80133a8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80133ac:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80133b0:	d206      	bcs.n	80133c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80133b2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80133b6:	bf2a      	itet	cs
 80133b8:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 80133bc:	6008      	strcc	r0, [r1, #0]
 80133be:	600b      	strcs	r3, [r1, #0]
 80133c0:	6808      	ldr	r0, [r1, #0]
 80133c2:	3001      	adds	r0, #1
 80133c4:	d501      	bpl.n	80133ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80133c6:	f7ff ffd8 	bl	801337a <_ZSt17__throw_bad_allocv>
 80133ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80133ce:	f7ff bfbe 	b.w	801334e <_Znwj>
 80133d2:	bf00      	nop
 80133d4:	08016c96 	.word	0x08016c96

080133d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80133d8:	4603      	mov	r3, r0
 80133da:	f853 0b08 	ldr.w	r0, [r3], #8
 80133de:	4298      	cmp	r0, r3
 80133e0:	d001      	beq.n	80133e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80133e2:	f7ff bfa1 	b.w	8013328 <_ZdlPv>
 80133e6:	4770      	bx	lr

080133e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80133e8:	6840      	ldr	r0, [r0, #4]
 80133ea:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80133ee:	3901      	subs	r1, #1
 80133f0:	1a09      	subs	r1, r1, r0
 80133f2:	4291      	cmp	r1, r2
 80133f4:	b508      	push	{r3, lr}
 80133f6:	d202      	bcs.n	80133fe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80133f8:	4618      	mov	r0, r3
 80133fa:	f7ff ffc4 	bl	8013386 <_ZSt20__throw_length_errorPKc>
 80133fe:	bd08      	pop	{r3, pc}

08013400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8013400:	2a01      	cmp	r2, #1
 8013402:	b510      	push	{r4, lr}
 8013404:	d102      	bne.n	801340c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8013406:	780a      	ldrb	r2, [r1, #0]
 8013408:	7002      	strb	r2, [r0, #0]
 801340a:	bd10      	pop	{r4, pc}
 801340c:	f7ff ffbe 	bl	801338c <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8013410:	e7fb      	b.n	801340a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08013412 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8013412:	2a01      	cmp	r2, #1
 8013414:	b430      	push	{r4, r5}
 8013416:	d103      	bne.n	8013420 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8013418:	780b      	ldrb	r3, [r1, #0]
 801341a:	7003      	strb	r3, [r0, #0]
 801341c:	bc30      	pop	{r4, r5}
 801341e:	4770      	bx	lr
 8013420:	2a00      	cmp	r2, #0
 8013422:	d0fb      	beq.n	801341c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8013424:	bc30      	pop	{r4, r5}
 8013426:	f000 b9cb 	b.w	80137c0 <memmove>

0801342a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 801342a:	460b      	mov	r3, r1
 801342c:	2b01      	cmp	r3, #1
 801342e:	b410      	push	{r4}
 8013430:	4611      	mov	r1, r2
 8013432:	4604      	mov	r4, r0
 8013434:	d102      	bne.n	801343c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x12>
 8013436:	7022      	strb	r2, [r4, #0]
 8013438:	bc10      	pop	{r4}
 801343a:	4770      	bx	lr
 801343c:	2b00      	cmp	r3, #0
 801343e:	d0fb      	beq.n	8013438 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8013440:	461a      	mov	r2, r3
 8013442:	bc10      	pop	{r4}
 8013444:	f000 b9d6 	b.w	80137f4 <memset>

08013448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8013448:	b508      	push	{r3, lr}
 801344a:	1a52      	subs	r2, r2, r1
 801344c:	f7ff ffd8 	bl	8013400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8013450:	bd08      	pop	{r3, pc}

08013452 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8013452:	b508      	push	{r3, lr}
 8013454:	1a52      	subs	r2, r2, r1
 8013456:	f7ff ffd3 	bl	8013400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801345a:	bd08      	pop	{r3, pc}

0801345c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 801345c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8013460:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8013462:	461f      	mov	r7, r3
 8013464:	6843      	ldr	r3, [r0, #4]
 8013466:	eb01 0802 	add.w	r8, r1, r2
 801346a:	1ab2      	subs	r2, r6, r2
 801346c:	441a      	add	r2, r3
 801346e:	eba3 0908 	sub.w	r9, r3, r8
 8013472:	4603      	mov	r3, r0
 8013474:	9201      	str	r2, [sp, #4]
 8013476:	f853 2b08 	ldr.w	r2, [r3], #8
 801347a:	460d      	mov	r5, r1
 801347c:	429a      	cmp	r2, r3
 801347e:	bf0c      	ite	eq
 8013480:	220f      	moveq	r2, #15
 8013482:	6882      	ldrne	r2, [r0, #8]
 8013484:	a901      	add	r1, sp, #4
 8013486:	4604      	mov	r4, r0
 8013488:	f7ff ff84 	bl	8013394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801348c:	4682      	mov	sl, r0
 801348e:	b11d      	cbz	r5, 8013498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3c>
 8013490:	462a      	mov	r2, r5
 8013492:	6821      	ldr	r1, [r4, #0]
 8013494:	f7ff ffb4 	bl	8013400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8013498:	b137      	cbz	r7, 80134a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4c>
 801349a:	b12e      	cbz	r6, 80134a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4c>
 801349c:	4632      	mov	r2, r6
 801349e:	4639      	mov	r1, r7
 80134a0:	eb0a 0005 	add.w	r0, sl, r5
 80134a4:	f7ff ffac 	bl	8013400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80134a8:	f1b9 0f00 	cmp.w	r9, #0
 80134ac:	d007      	beq.n	80134be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x62>
 80134ae:	6821      	ldr	r1, [r4, #0]
 80134b0:	4435      	add	r5, r6
 80134b2:	464a      	mov	r2, r9
 80134b4:	4441      	add	r1, r8
 80134b6:	eb0a 0005 	add.w	r0, sl, r5
 80134ba:	f7ff ffa1 	bl	8013400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80134be:	4620      	mov	r0, r4
 80134c0:	f7ff ff8a 	bl	80133d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80134c4:	9b01      	ldr	r3, [sp, #4]
 80134c6:	f8c4 a000 	str.w	sl, [r4]
 80134ca:	60a3      	str	r3, [r4, #8]
 80134cc:	b002      	add	sp, #8
 80134ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080134d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 80134d2:	f100 0208 	add.w	r2, r0, #8
 80134d6:	6002      	str	r2, [r0, #0]
 80134d8:	2200      	movs	r2, #0
 80134da:	6042      	str	r2, [r0, #4]
 80134dc:	7202      	strb	r2, [r0, #8]
 80134de:	4770      	bx	lr

080134e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80134e0:	b510      	push	{r4, lr}
 80134e2:	4604      	mov	r4, r0
 80134e4:	f7ff ff78 	bl	80133d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80134e8:	4620      	mov	r0, r4
 80134ea:	bd10      	pop	{r4, pc}

080134ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 80134ec:	6800      	ldr	r0, [r0, #0]
 80134ee:	4408      	add	r0, r1
 80134f0:	4770      	bx	lr

080134f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 80134f2:	4603      	mov	r3, r0
 80134f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80134f6:	f853 2b08 	ldr.w	r2, [r3], #8
 80134fa:	6846      	ldr	r6, [r0, #4]
 80134fc:	429a      	cmp	r2, r3
 80134fe:	bf0c      	ite	eq
 8013500:	230f      	moveq	r3, #15
 8013502:	6883      	ldrne	r3, [r0, #8]
 8013504:	1c75      	adds	r5, r6, #1
 8013506:	429d      	cmp	r5, r3
 8013508:	4604      	mov	r4, r0
 801350a:	460f      	mov	r7, r1
 801350c:	d906      	bls.n	801351c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2a>
 801350e:	2301      	movs	r3, #1
 8013510:	9300      	str	r3, [sp, #0]
 8013512:	2300      	movs	r3, #0
 8013514:	4631      	mov	r1, r6
 8013516:	461a      	mov	r2, r3
 8013518:	f7ff ffa0 	bl	801345c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801351c:	2200      	movs	r2, #0
 801351e:	6823      	ldr	r3, [r4, #0]
 8013520:	559f      	strb	r7, [r3, r6]
 8013522:	6823      	ldr	r3, [r4, #0]
 8013524:	6065      	str	r5, [r4, #4]
 8013526:	555a      	strb	r2, [r3, r5]
 8013528:	b003      	add	sp, #12
 801352a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801352c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 801352c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013530:	4616      	mov	r6, r2
 8013532:	461d      	mov	r5, r3
 8013534:	4604      	mov	r4, r0
 8013536:	462a      	mov	r2, r5
 8013538:	4b1a      	ldr	r3, [pc, #104]	; (80135a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x78>)
 801353a:	460f      	mov	r7, r1
 801353c:	4631      	mov	r1, r6
 801353e:	f7ff ff53 	bl	80133e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8013542:	4623      	mov	r3, r4
 8013544:	f853 0b08 	ldr.w	r0, [r3], #8
 8013548:	6862      	ldr	r2, [r4, #4]
 801354a:	4298      	cmp	r0, r3
 801354c:	bf0c      	ite	eq
 801354e:	230f      	moveq	r3, #15
 8013550:	68a3      	ldrne	r3, [r4, #8]
 8013552:	eba5 0806 	sub.w	r8, r5, r6
 8013556:	4490      	add	r8, r2
 8013558:	4543      	cmp	r3, r8
 801355a:	d31b      	bcc.n	8013594 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x68>
 801355c:	19f3      	adds	r3, r6, r7
 801355e:	1ad2      	subs	r2, r2, r3
 8013560:	d006      	beq.n	8013570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x44>
 8013562:	42ae      	cmp	r6, r5
 8013564:	d004      	beq.n	8013570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x44>
 8013566:	4438      	add	r0, r7
 8013568:	1981      	adds	r1, r0, r6
 801356a:	4428      	add	r0, r5
 801356c:	f7ff ff51 	bl	8013412 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8013570:	b135      	cbz	r5, 8013580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x54>
 8013572:	6820      	ldr	r0, [r4, #0]
 8013574:	4629      	mov	r1, r5
 8013576:	f89d 2020 	ldrb.w	r2, [sp, #32]
 801357a:	4438      	add	r0, r7
 801357c:	f7ff ff55 	bl	801342a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8013580:	2200      	movs	r2, #0
 8013582:	4620      	mov	r0, r4
 8013584:	6823      	ldr	r3, [r4, #0]
 8013586:	f8c4 8004 	str.w	r8, [r4, #4]
 801358a:	f803 2008 	strb.w	r2, [r3, r8]
 801358e:	b002      	add	sp, #8
 8013590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013594:	2300      	movs	r3, #0
 8013596:	4632      	mov	r2, r6
 8013598:	4639      	mov	r1, r7
 801359a:	4620      	mov	r0, r4
 801359c:	9500      	str	r5, [sp, #0]
 801359e:	f7ff ff5d 	bl	801345c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80135a2:	e7e5      	b.n	8013570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x44>
 80135a4:	08016cae 	.word	0x08016cae

080135a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 80135a8:	b507      	push	{r0, r1, r2, lr}
 80135aa:	9200      	str	r2, [sp, #0]
 80135ac:	460b      	mov	r3, r1
 80135ae:	2200      	movs	r2, #0
 80135b0:	6841      	ldr	r1, [r0, #4]
 80135b2:	f7ff ffbb 	bl	801352c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 80135b6:	b003      	add	sp, #12
 80135b8:	f85d fb04 	ldr.w	pc, [sp], #4

080135bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEjc>:
 80135bc:	b510      	push	{r4, lr}
 80135be:	6844      	ldr	r4, [r0, #4]
 80135c0:	4603      	mov	r3, r0
 80135c2:	428c      	cmp	r4, r1
 80135c4:	d203      	bcs.n	80135ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEjc+0x12>
 80135c6:	1b09      	subs	r1, r1, r4
 80135c8:	f7ff ffee 	bl	80135a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
 80135cc:	bd10      	pop	{r4, pc}
 80135ce:	bf81      	itttt	hi
 80135d0:	2200      	movhi	r2, #0
 80135d2:	6803      	ldrhi	r3, [r0, #0]
 80135d4:	6041      	strhi	r1, [r0, #4]
 80135d6:	545a      	strbhi	r2, [r3, r1]
 80135d8:	e7f8      	b.n	80135cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEjc+0x10>

080135da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEj>:
 80135da:	b508      	push	{r3, lr}
 80135dc:	2200      	movs	r2, #0
 80135de:	f7ff ffed 	bl	80135bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEjc>
 80135e2:	bd08      	pop	{r3, pc}

080135e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80135e4:	6800      	ldr	r0, [r0, #0]
 80135e6:	4770      	bx	lr

080135e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 80135e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80135ea:	4604      	mov	r4, r0
 80135ec:	4616      	mov	r6, r2
 80135ee:	460d      	mov	r5, r1
 80135f0:	b919      	cbnz	r1, 80135fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 80135f2:	b112      	cbz	r2, 80135fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 80135f4:	480d      	ldr	r0, [pc, #52]	; (801362c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 80135f6:	f7ff fec3 	bl	8013380 <_ZSt19__throw_logic_errorPKc>
 80135fa:	1b73      	subs	r3, r6, r5
 80135fc:	2b0f      	cmp	r3, #15
 80135fe:	9301      	str	r3, [sp, #4]
 8013600:	d907      	bls.n	8013612 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 8013602:	2200      	movs	r2, #0
 8013604:	4620      	mov	r0, r4
 8013606:	a901      	add	r1, sp, #4
 8013608:	f7ff fec4 	bl	8013394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801360c:	9b01      	ldr	r3, [sp, #4]
 801360e:	6020      	str	r0, [r4, #0]
 8013610:	60a3      	str	r3, [r4, #8]
 8013612:	4632      	mov	r2, r6
 8013614:	4629      	mov	r1, r5
 8013616:	6820      	ldr	r0, [r4, #0]
 8013618:	f7ff ff16 	bl	8013448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 801361c:	2100      	movs	r1, #0
 801361e:	9b01      	ldr	r3, [sp, #4]
 8013620:	6822      	ldr	r2, [r4, #0]
 8013622:	6063      	str	r3, [r4, #4]
 8013624:	54d1      	strb	r1, [r2, r3]
 8013626:	b002      	add	sp, #8
 8013628:	bd70      	pop	{r4, r5, r6, pc}
 801362a:	bf00      	nop
 801362c:	08016ccb 	.word	0x08016ccb

08013630 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8013630:	b510      	push	{r4, lr}
 8013632:	4604      	mov	r4, r0
 8013634:	f100 0208 	add.w	r2, r0, #8
 8013638:	6002      	str	r2, [r0, #0]
 801363a:	e9d1 1200 	ldrd	r1, r2, [r1]
 801363e:	f04f 0300 	mov.w	r3, #0
 8013642:	440a      	add	r2, r1
 8013644:	f7ff ffd0 	bl	80135e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8013648:	4620      	mov	r0, r4
 801364a:	bd10      	pop	{r4, pc}

0801364c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 801364c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801364e:	4604      	mov	r4, r0
 8013650:	4616      	mov	r6, r2
 8013652:	460d      	mov	r5, r1
 8013654:	b919      	cbnz	r1, 801365e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8013656:	b112      	cbz	r2, 801365e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8013658:	480d      	ldr	r0, [pc, #52]	; (8013690 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 801365a:	f7ff fe91 	bl	8013380 <_ZSt19__throw_logic_errorPKc>
 801365e:	1b73      	subs	r3, r6, r5
 8013660:	2b0f      	cmp	r3, #15
 8013662:	9301      	str	r3, [sp, #4]
 8013664:	d907      	bls.n	8013676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8013666:	2200      	movs	r2, #0
 8013668:	4620      	mov	r0, r4
 801366a:	a901      	add	r1, sp, #4
 801366c:	f7ff fe92 	bl	8013394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8013670:	9b01      	ldr	r3, [sp, #4]
 8013672:	6020      	str	r0, [r4, #0]
 8013674:	60a3      	str	r3, [r4, #8]
 8013676:	4632      	mov	r2, r6
 8013678:	4629      	mov	r1, r5
 801367a:	6820      	ldr	r0, [r4, #0]
 801367c:	f7ff fee9 	bl	8013452 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8013680:	2100      	movs	r1, #0
 8013682:	9b01      	ldr	r3, [sp, #4]
 8013684:	6822      	ldr	r2, [r4, #0]
 8013686:	6063      	str	r3, [r4, #4]
 8013688:	54d1      	strb	r1, [r2, r3]
 801368a:	b002      	add	sp, #8
 801368c:	bd70      	pop	{r4, r5, r6, pc}
 801368e:	bf00      	nop
 8013690:	08016ccb 	.word	0x08016ccb

08013694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8013694:	b538      	push	{r3, r4, r5, lr}
 8013696:	f100 0308 	add.w	r3, r0, #8
 801369a:	4604      	mov	r4, r0
 801369c:	460d      	mov	r5, r1
 801369e:	6003      	str	r3, [r0, #0]
 80136a0:	b159      	cbz	r1, 80136ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 80136a2:	4608      	mov	r0, r1
 80136a4:	f7ec fd98 	bl	80001d8 <strlen>
 80136a8:	182a      	adds	r2, r5, r0
 80136aa:	4620      	mov	r0, r4
 80136ac:	f04f 0300 	mov.w	r3, #0
 80136b0:	4629      	mov	r1, r5
 80136b2:	f7ff ffcb 	bl	801364c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80136b6:	4620      	mov	r0, r4
 80136b8:	bd38      	pop	{r3, r4, r5, pc}
 80136ba:	f04f 32ff 	mov.w	r2, #4294967295
 80136be:	e7f4      	b.n	80136aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080136c0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80136c0:	b508      	push	{r3, lr}
 80136c2:	4780      	blx	r0
 80136c4:	f000 f816 	bl	80136f4 <abort>

080136c8 <_ZSt13get_terminatev>:
 80136c8:	4b02      	ldr	r3, [pc, #8]	; (80136d4 <_ZSt13get_terminatev+0xc>)
 80136ca:	6818      	ldr	r0, [r3, #0]
 80136cc:	f3bf 8f5b 	dmb	ish
 80136d0:	4770      	bx	lr
 80136d2:	bf00      	nop
 80136d4:	20000064 	.word	0x20000064

080136d8 <_ZSt9terminatev>:
 80136d8:	b508      	push	{r3, lr}
 80136da:	f7ff fff5 	bl	80136c8 <_ZSt13get_terminatev>
 80136de:	f7ff ffef 	bl	80136c0 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080136e4 <_ZSt15get_new_handlerv>:
 80136e4:	4b02      	ldr	r3, [pc, #8]	; (80136f0 <_ZSt15get_new_handlerv+0xc>)
 80136e6:	6818      	ldr	r0, [r3, #0]
 80136e8:	f3bf 8f5b 	dmb	ish
 80136ec:	4770      	bx	lr
 80136ee:	bf00      	nop
 80136f0:	2000063c 	.word	0x2000063c

080136f4 <abort>:
 80136f4:	2006      	movs	r0, #6
 80136f6:	b508      	push	{r3, lr}
 80136f8:	f000 f9f0 	bl	8013adc <raise>
 80136fc:	2001      	movs	r0, #1
 80136fe:	f7f1 fcf1 	bl	80050e4 <_exit>
	...

08013704 <__libc_init_array>:
 8013704:	b570      	push	{r4, r5, r6, lr}
 8013706:	2600      	movs	r6, #0
 8013708:	4d0c      	ldr	r5, [pc, #48]	; (801373c <__libc_init_array+0x38>)
 801370a:	4c0d      	ldr	r4, [pc, #52]	; (8013740 <__libc_init_array+0x3c>)
 801370c:	1b64      	subs	r4, r4, r5
 801370e:	10a4      	asrs	r4, r4, #2
 8013710:	42a6      	cmp	r6, r4
 8013712:	d109      	bne.n	8013728 <__libc_init_array+0x24>
 8013714:	f001 f882 	bl	801481c <_init>
 8013718:	2600      	movs	r6, #0
 801371a:	4d0a      	ldr	r5, [pc, #40]	; (8013744 <__libc_init_array+0x40>)
 801371c:	4c0a      	ldr	r4, [pc, #40]	; (8013748 <__libc_init_array+0x44>)
 801371e:	1b64      	subs	r4, r4, r5
 8013720:	10a4      	asrs	r4, r4, #2
 8013722:	42a6      	cmp	r6, r4
 8013724:	d105      	bne.n	8013732 <__libc_init_array+0x2e>
 8013726:	bd70      	pop	{r4, r5, r6, pc}
 8013728:	f855 3b04 	ldr.w	r3, [r5], #4
 801372c:	4798      	blx	r3
 801372e:	3601      	adds	r6, #1
 8013730:	e7ee      	b.n	8013710 <__libc_init_array+0xc>
 8013732:	f855 3b04 	ldr.w	r3, [r5], #4
 8013736:	4798      	blx	r3
 8013738:	3601      	adds	r6, #1
 801373a:	e7f2      	b.n	8013722 <__libc_init_array+0x1e>
 801373c:	08016d98 	.word	0x08016d98
 8013740:	08016d98 	.word	0x08016d98
 8013744:	08016d98 	.word	0x08016d98
 8013748:	08016da0 	.word	0x08016da0

0801374c <malloc>:
 801374c:	4b02      	ldr	r3, [pc, #8]	; (8013758 <malloc+0xc>)
 801374e:	4601      	mov	r1, r0
 8013750:	6818      	ldr	r0, [r3, #0]
 8013752:	f000 b8a3 	b.w	801389c <_malloc_r>
 8013756:	bf00      	nop
 8013758:	20000068 	.word	0x20000068

0801375c <free>:
 801375c:	4b02      	ldr	r3, [pc, #8]	; (8013768 <free+0xc>)
 801375e:	4601      	mov	r1, r0
 8013760:	6818      	ldr	r0, [r3, #0]
 8013762:	f000 b84f 	b.w	8013804 <_free_r>
 8013766:	bf00      	nop
 8013768:	20000068 	.word	0x20000068

0801376c <memchr>:
 801376c:	4603      	mov	r3, r0
 801376e:	b510      	push	{r4, lr}
 8013770:	b2c9      	uxtb	r1, r1
 8013772:	4402      	add	r2, r0
 8013774:	4293      	cmp	r3, r2
 8013776:	4618      	mov	r0, r3
 8013778:	d101      	bne.n	801377e <memchr+0x12>
 801377a:	2000      	movs	r0, #0
 801377c:	e003      	b.n	8013786 <memchr+0x1a>
 801377e:	7804      	ldrb	r4, [r0, #0]
 8013780:	3301      	adds	r3, #1
 8013782:	428c      	cmp	r4, r1
 8013784:	d1f6      	bne.n	8013774 <memchr+0x8>
 8013786:	bd10      	pop	{r4, pc}

08013788 <memcmp>:
 8013788:	b530      	push	{r4, r5, lr}
 801378a:	2400      	movs	r4, #0
 801378c:	3901      	subs	r1, #1
 801378e:	42a2      	cmp	r2, r4
 8013790:	d101      	bne.n	8013796 <memcmp+0xe>
 8013792:	2000      	movs	r0, #0
 8013794:	e005      	b.n	80137a2 <memcmp+0x1a>
 8013796:	5d03      	ldrb	r3, [r0, r4]
 8013798:	3401      	adds	r4, #1
 801379a:	5d0d      	ldrb	r5, [r1, r4]
 801379c:	42ab      	cmp	r3, r5
 801379e:	d0f6      	beq.n	801378e <memcmp+0x6>
 80137a0:	1b58      	subs	r0, r3, r5
 80137a2:	bd30      	pop	{r4, r5, pc}

080137a4 <memcpy>:
 80137a4:	440a      	add	r2, r1
 80137a6:	4291      	cmp	r1, r2
 80137a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80137ac:	d100      	bne.n	80137b0 <memcpy+0xc>
 80137ae:	4770      	bx	lr
 80137b0:	b510      	push	{r4, lr}
 80137b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80137b6:	4291      	cmp	r1, r2
 80137b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80137bc:	d1f9      	bne.n	80137b2 <memcpy+0xe>
 80137be:	bd10      	pop	{r4, pc}

080137c0 <memmove>:
 80137c0:	4288      	cmp	r0, r1
 80137c2:	b510      	push	{r4, lr}
 80137c4:	eb01 0402 	add.w	r4, r1, r2
 80137c8:	d902      	bls.n	80137d0 <memmove+0x10>
 80137ca:	4284      	cmp	r4, r0
 80137cc:	4623      	mov	r3, r4
 80137ce:	d807      	bhi.n	80137e0 <memmove+0x20>
 80137d0:	1e43      	subs	r3, r0, #1
 80137d2:	42a1      	cmp	r1, r4
 80137d4:	d008      	beq.n	80137e8 <memmove+0x28>
 80137d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80137da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80137de:	e7f8      	b.n	80137d2 <memmove+0x12>
 80137e0:	4601      	mov	r1, r0
 80137e2:	4402      	add	r2, r0
 80137e4:	428a      	cmp	r2, r1
 80137e6:	d100      	bne.n	80137ea <memmove+0x2a>
 80137e8:	bd10      	pop	{r4, pc}
 80137ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80137ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80137f2:	e7f7      	b.n	80137e4 <memmove+0x24>

080137f4 <memset>:
 80137f4:	4603      	mov	r3, r0
 80137f6:	4402      	add	r2, r0
 80137f8:	4293      	cmp	r3, r2
 80137fa:	d100      	bne.n	80137fe <memset+0xa>
 80137fc:	4770      	bx	lr
 80137fe:	f803 1b01 	strb.w	r1, [r3], #1
 8013802:	e7f9      	b.n	80137f8 <memset+0x4>

08013804 <_free_r>:
 8013804:	b538      	push	{r3, r4, r5, lr}
 8013806:	4605      	mov	r5, r0
 8013808:	2900      	cmp	r1, #0
 801380a:	d043      	beq.n	8013894 <_free_r+0x90>
 801380c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013810:	1f0c      	subs	r4, r1, #4
 8013812:	2b00      	cmp	r3, #0
 8013814:	bfb8      	it	lt
 8013816:	18e4      	addlt	r4, r4, r3
 8013818:	f000 fc5a 	bl	80140d0 <__malloc_lock>
 801381c:	4a1e      	ldr	r2, [pc, #120]	; (8013898 <_free_r+0x94>)
 801381e:	6813      	ldr	r3, [r2, #0]
 8013820:	4610      	mov	r0, r2
 8013822:	b933      	cbnz	r3, 8013832 <_free_r+0x2e>
 8013824:	6063      	str	r3, [r4, #4]
 8013826:	6014      	str	r4, [r2, #0]
 8013828:	4628      	mov	r0, r5
 801382a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801382e:	f000 bc55 	b.w	80140dc <__malloc_unlock>
 8013832:	42a3      	cmp	r3, r4
 8013834:	d90a      	bls.n	801384c <_free_r+0x48>
 8013836:	6821      	ldr	r1, [r4, #0]
 8013838:	1862      	adds	r2, r4, r1
 801383a:	4293      	cmp	r3, r2
 801383c:	bf01      	itttt	eq
 801383e:	681a      	ldreq	r2, [r3, #0]
 8013840:	685b      	ldreq	r3, [r3, #4]
 8013842:	1852      	addeq	r2, r2, r1
 8013844:	6022      	streq	r2, [r4, #0]
 8013846:	6063      	str	r3, [r4, #4]
 8013848:	6004      	str	r4, [r0, #0]
 801384a:	e7ed      	b.n	8013828 <_free_r+0x24>
 801384c:	461a      	mov	r2, r3
 801384e:	685b      	ldr	r3, [r3, #4]
 8013850:	b10b      	cbz	r3, 8013856 <_free_r+0x52>
 8013852:	42a3      	cmp	r3, r4
 8013854:	d9fa      	bls.n	801384c <_free_r+0x48>
 8013856:	6811      	ldr	r1, [r2, #0]
 8013858:	1850      	adds	r0, r2, r1
 801385a:	42a0      	cmp	r0, r4
 801385c:	d10b      	bne.n	8013876 <_free_r+0x72>
 801385e:	6820      	ldr	r0, [r4, #0]
 8013860:	4401      	add	r1, r0
 8013862:	1850      	adds	r0, r2, r1
 8013864:	4283      	cmp	r3, r0
 8013866:	6011      	str	r1, [r2, #0]
 8013868:	d1de      	bne.n	8013828 <_free_r+0x24>
 801386a:	6818      	ldr	r0, [r3, #0]
 801386c:	685b      	ldr	r3, [r3, #4]
 801386e:	4401      	add	r1, r0
 8013870:	6011      	str	r1, [r2, #0]
 8013872:	6053      	str	r3, [r2, #4]
 8013874:	e7d8      	b.n	8013828 <_free_r+0x24>
 8013876:	d902      	bls.n	801387e <_free_r+0x7a>
 8013878:	230c      	movs	r3, #12
 801387a:	602b      	str	r3, [r5, #0]
 801387c:	e7d4      	b.n	8013828 <_free_r+0x24>
 801387e:	6820      	ldr	r0, [r4, #0]
 8013880:	1821      	adds	r1, r4, r0
 8013882:	428b      	cmp	r3, r1
 8013884:	bf01      	itttt	eq
 8013886:	6819      	ldreq	r1, [r3, #0]
 8013888:	685b      	ldreq	r3, [r3, #4]
 801388a:	1809      	addeq	r1, r1, r0
 801388c:	6021      	streq	r1, [r4, #0]
 801388e:	6063      	str	r3, [r4, #4]
 8013890:	6054      	str	r4, [r2, #4]
 8013892:	e7c9      	b.n	8013828 <_free_r+0x24>
 8013894:	bd38      	pop	{r3, r4, r5, pc}
 8013896:	bf00      	nop
 8013898:	20000640 	.word	0x20000640

0801389c <_malloc_r>:
 801389c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801389e:	1ccd      	adds	r5, r1, #3
 80138a0:	f025 0503 	bic.w	r5, r5, #3
 80138a4:	3508      	adds	r5, #8
 80138a6:	2d0c      	cmp	r5, #12
 80138a8:	bf38      	it	cc
 80138aa:	250c      	movcc	r5, #12
 80138ac:	2d00      	cmp	r5, #0
 80138ae:	4606      	mov	r6, r0
 80138b0:	db01      	blt.n	80138b6 <_malloc_r+0x1a>
 80138b2:	42a9      	cmp	r1, r5
 80138b4:	d903      	bls.n	80138be <_malloc_r+0x22>
 80138b6:	230c      	movs	r3, #12
 80138b8:	6033      	str	r3, [r6, #0]
 80138ba:	2000      	movs	r0, #0
 80138bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138be:	f000 fc07 	bl	80140d0 <__malloc_lock>
 80138c2:	4921      	ldr	r1, [pc, #132]	; (8013948 <_malloc_r+0xac>)
 80138c4:	680a      	ldr	r2, [r1, #0]
 80138c6:	4614      	mov	r4, r2
 80138c8:	b99c      	cbnz	r4, 80138f2 <_malloc_r+0x56>
 80138ca:	4f20      	ldr	r7, [pc, #128]	; (801394c <_malloc_r+0xb0>)
 80138cc:	683b      	ldr	r3, [r7, #0]
 80138ce:	b923      	cbnz	r3, 80138da <_malloc_r+0x3e>
 80138d0:	4621      	mov	r1, r4
 80138d2:	4630      	mov	r0, r6
 80138d4:	f000 f8ca 	bl	8013a6c <_sbrk_r>
 80138d8:	6038      	str	r0, [r7, #0]
 80138da:	4629      	mov	r1, r5
 80138dc:	4630      	mov	r0, r6
 80138de:	f000 f8c5 	bl	8013a6c <_sbrk_r>
 80138e2:	1c43      	adds	r3, r0, #1
 80138e4:	d123      	bne.n	801392e <_malloc_r+0x92>
 80138e6:	230c      	movs	r3, #12
 80138e8:	4630      	mov	r0, r6
 80138ea:	6033      	str	r3, [r6, #0]
 80138ec:	f000 fbf6 	bl	80140dc <__malloc_unlock>
 80138f0:	e7e3      	b.n	80138ba <_malloc_r+0x1e>
 80138f2:	6823      	ldr	r3, [r4, #0]
 80138f4:	1b5b      	subs	r3, r3, r5
 80138f6:	d417      	bmi.n	8013928 <_malloc_r+0x8c>
 80138f8:	2b0b      	cmp	r3, #11
 80138fa:	d903      	bls.n	8013904 <_malloc_r+0x68>
 80138fc:	6023      	str	r3, [r4, #0]
 80138fe:	441c      	add	r4, r3
 8013900:	6025      	str	r5, [r4, #0]
 8013902:	e004      	b.n	801390e <_malloc_r+0x72>
 8013904:	6863      	ldr	r3, [r4, #4]
 8013906:	42a2      	cmp	r2, r4
 8013908:	bf0c      	ite	eq
 801390a:	600b      	streq	r3, [r1, #0]
 801390c:	6053      	strne	r3, [r2, #4]
 801390e:	4630      	mov	r0, r6
 8013910:	f000 fbe4 	bl	80140dc <__malloc_unlock>
 8013914:	f104 000b 	add.w	r0, r4, #11
 8013918:	1d23      	adds	r3, r4, #4
 801391a:	f020 0007 	bic.w	r0, r0, #7
 801391e:	1ac2      	subs	r2, r0, r3
 8013920:	d0cc      	beq.n	80138bc <_malloc_r+0x20>
 8013922:	1a1b      	subs	r3, r3, r0
 8013924:	50a3      	str	r3, [r4, r2]
 8013926:	e7c9      	b.n	80138bc <_malloc_r+0x20>
 8013928:	4622      	mov	r2, r4
 801392a:	6864      	ldr	r4, [r4, #4]
 801392c:	e7cc      	b.n	80138c8 <_malloc_r+0x2c>
 801392e:	1cc4      	adds	r4, r0, #3
 8013930:	f024 0403 	bic.w	r4, r4, #3
 8013934:	42a0      	cmp	r0, r4
 8013936:	d0e3      	beq.n	8013900 <_malloc_r+0x64>
 8013938:	1a21      	subs	r1, r4, r0
 801393a:	4630      	mov	r0, r6
 801393c:	f000 f896 	bl	8013a6c <_sbrk_r>
 8013940:	3001      	adds	r0, #1
 8013942:	d1dd      	bne.n	8013900 <_malloc_r+0x64>
 8013944:	e7cf      	b.n	80138e6 <_malloc_r+0x4a>
 8013946:	bf00      	nop
 8013948:	20000640 	.word	0x20000640
 801394c:	20000644 	.word	0x20000644

08013950 <iprintf>:
 8013950:	b40f      	push	{r0, r1, r2, r3}
 8013952:	4b0a      	ldr	r3, [pc, #40]	; (801397c <iprintf+0x2c>)
 8013954:	b513      	push	{r0, r1, r4, lr}
 8013956:	681c      	ldr	r4, [r3, #0]
 8013958:	b124      	cbz	r4, 8013964 <iprintf+0x14>
 801395a:	69a3      	ldr	r3, [r4, #24]
 801395c:	b913      	cbnz	r3, 8013964 <iprintf+0x14>
 801395e:	4620      	mov	r0, r4
 8013960:	f000 fab2 	bl	8013ec8 <__sinit>
 8013964:	ab05      	add	r3, sp, #20
 8013966:	4620      	mov	r0, r4
 8013968:	9a04      	ldr	r2, [sp, #16]
 801396a:	68a1      	ldr	r1, [r4, #8]
 801396c:	9301      	str	r3, [sp, #4]
 801396e:	f000 fbe3 	bl	8014138 <_vfiprintf_r>
 8013972:	b002      	add	sp, #8
 8013974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013978:	b004      	add	sp, #16
 801397a:	4770      	bx	lr
 801397c:	20000068 	.word	0x20000068

08013980 <_puts_r>:
 8013980:	b570      	push	{r4, r5, r6, lr}
 8013982:	460e      	mov	r6, r1
 8013984:	4605      	mov	r5, r0
 8013986:	b118      	cbz	r0, 8013990 <_puts_r+0x10>
 8013988:	6983      	ldr	r3, [r0, #24]
 801398a:	b90b      	cbnz	r3, 8013990 <_puts_r+0x10>
 801398c:	f000 fa9c 	bl	8013ec8 <__sinit>
 8013990:	69ab      	ldr	r3, [r5, #24]
 8013992:	68ac      	ldr	r4, [r5, #8]
 8013994:	b913      	cbnz	r3, 801399c <_puts_r+0x1c>
 8013996:	4628      	mov	r0, r5
 8013998:	f000 fa96 	bl	8013ec8 <__sinit>
 801399c:	4b2c      	ldr	r3, [pc, #176]	; (8013a50 <_puts_r+0xd0>)
 801399e:	429c      	cmp	r4, r3
 80139a0:	d120      	bne.n	80139e4 <_puts_r+0x64>
 80139a2:	686c      	ldr	r4, [r5, #4]
 80139a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80139a6:	07db      	lsls	r3, r3, #31
 80139a8:	d405      	bmi.n	80139b6 <_puts_r+0x36>
 80139aa:	89a3      	ldrh	r3, [r4, #12]
 80139ac:	0598      	lsls	r0, r3, #22
 80139ae:	d402      	bmi.n	80139b6 <_puts_r+0x36>
 80139b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80139b2:	f000 fb27 	bl	8014004 <__retarget_lock_acquire_recursive>
 80139b6:	89a3      	ldrh	r3, [r4, #12]
 80139b8:	0719      	lsls	r1, r3, #28
 80139ba:	d51d      	bpl.n	80139f8 <_puts_r+0x78>
 80139bc:	6923      	ldr	r3, [r4, #16]
 80139be:	b1db      	cbz	r3, 80139f8 <_puts_r+0x78>
 80139c0:	3e01      	subs	r6, #1
 80139c2:	68a3      	ldr	r3, [r4, #8]
 80139c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80139c8:	3b01      	subs	r3, #1
 80139ca:	60a3      	str	r3, [r4, #8]
 80139cc:	bb39      	cbnz	r1, 8013a1e <_puts_r+0x9e>
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	da38      	bge.n	8013a44 <_puts_r+0xc4>
 80139d2:	4622      	mov	r2, r4
 80139d4:	210a      	movs	r1, #10
 80139d6:	4628      	mov	r0, r5
 80139d8:	f000 f89c 	bl	8013b14 <__swbuf_r>
 80139dc:	3001      	adds	r0, #1
 80139de:	d011      	beq.n	8013a04 <_puts_r+0x84>
 80139e0:	250a      	movs	r5, #10
 80139e2:	e011      	b.n	8013a08 <_puts_r+0x88>
 80139e4:	4b1b      	ldr	r3, [pc, #108]	; (8013a54 <_puts_r+0xd4>)
 80139e6:	429c      	cmp	r4, r3
 80139e8:	d101      	bne.n	80139ee <_puts_r+0x6e>
 80139ea:	68ac      	ldr	r4, [r5, #8]
 80139ec:	e7da      	b.n	80139a4 <_puts_r+0x24>
 80139ee:	4b1a      	ldr	r3, [pc, #104]	; (8013a58 <_puts_r+0xd8>)
 80139f0:	429c      	cmp	r4, r3
 80139f2:	bf08      	it	eq
 80139f4:	68ec      	ldreq	r4, [r5, #12]
 80139f6:	e7d5      	b.n	80139a4 <_puts_r+0x24>
 80139f8:	4621      	mov	r1, r4
 80139fa:	4628      	mov	r0, r5
 80139fc:	f000 f8dc 	bl	8013bb8 <__swsetup_r>
 8013a00:	2800      	cmp	r0, #0
 8013a02:	d0dd      	beq.n	80139c0 <_puts_r+0x40>
 8013a04:	f04f 35ff 	mov.w	r5, #4294967295
 8013a08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013a0a:	07da      	lsls	r2, r3, #31
 8013a0c:	d405      	bmi.n	8013a1a <_puts_r+0x9a>
 8013a0e:	89a3      	ldrh	r3, [r4, #12]
 8013a10:	059b      	lsls	r3, r3, #22
 8013a12:	d402      	bmi.n	8013a1a <_puts_r+0x9a>
 8013a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a16:	f000 faf6 	bl	8014006 <__retarget_lock_release_recursive>
 8013a1a:	4628      	mov	r0, r5
 8013a1c:	bd70      	pop	{r4, r5, r6, pc}
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	da04      	bge.n	8013a2c <_puts_r+0xac>
 8013a22:	69a2      	ldr	r2, [r4, #24]
 8013a24:	429a      	cmp	r2, r3
 8013a26:	dc06      	bgt.n	8013a36 <_puts_r+0xb6>
 8013a28:	290a      	cmp	r1, #10
 8013a2a:	d004      	beq.n	8013a36 <_puts_r+0xb6>
 8013a2c:	6823      	ldr	r3, [r4, #0]
 8013a2e:	1c5a      	adds	r2, r3, #1
 8013a30:	6022      	str	r2, [r4, #0]
 8013a32:	7019      	strb	r1, [r3, #0]
 8013a34:	e7c5      	b.n	80139c2 <_puts_r+0x42>
 8013a36:	4622      	mov	r2, r4
 8013a38:	4628      	mov	r0, r5
 8013a3a:	f000 f86b 	bl	8013b14 <__swbuf_r>
 8013a3e:	3001      	adds	r0, #1
 8013a40:	d1bf      	bne.n	80139c2 <_puts_r+0x42>
 8013a42:	e7df      	b.n	8013a04 <_puts_r+0x84>
 8013a44:	250a      	movs	r5, #10
 8013a46:	6823      	ldr	r3, [r4, #0]
 8013a48:	1c5a      	adds	r2, r3, #1
 8013a4a:	6022      	str	r2, [r4, #0]
 8013a4c:	701d      	strb	r5, [r3, #0]
 8013a4e:	e7db      	b.n	8013a08 <_puts_r+0x88>
 8013a50:	08016d1c 	.word	0x08016d1c
 8013a54:	08016d3c 	.word	0x08016d3c
 8013a58:	08016cfc 	.word	0x08016cfc

08013a5c <puts>:
 8013a5c:	4b02      	ldr	r3, [pc, #8]	; (8013a68 <puts+0xc>)
 8013a5e:	4601      	mov	r1, r0
 8013a60:	6818      	ldr	r0, [r3, #0]
 8013a62:	f7ff bf8d 	b.w	8013980 <_puts_r>
 8013a66:	bf00      	nop
 8013a68:	20000068 	.word	0x20000068

08013a6c <_sbrk_r>:
 8013a6c:	b538      	push	{r3, r4, r5, lr}
 8013a6e:	2300      	movs	r3, #0
 8013a70:	4d05      	ldr	r5, [pc, #20]	; (8013a88 <_sbrk_r+0x1c>)
 8013a72:	4604      	mov	r4, r0
 8013a74:	4608      	mov	r0, r1
 8013a76:	602b      	str	r3, [r5, #0]
 8013a78:	f7f1 fba8 	bl	80051cc <_sbrk>
 8013a7c:	1c43      	adds	r3, r0, #1
 8013a7e:	d102      	bne.n	8013a86 <_sbrk_r+0x1a>
 8013a80:	682b      	ldr	r3, [r5, #0]
 8013a82:	b103      	cbz	r3, 8013a86 <_sbrk_r+0x1a>
 8013a84:	6023      	str	r3, [r4, #0]
 8013a86:	bd38      	pop	{r3, r4, r5, pc}
 8013a88:	20006cb8 	.word	0x20006cb8

08013a8c <_raise_r>:
 8013a8c:	291f      	cmp	r1, #31
 8013a8e:	b538      	push	{r3, r4, r5, lr}
 8013a90:	4604      	mov	r4, r0
 8013a92:	460d      	mov	r5, r1
 8013a94:	d904      	bls.n	8013aa0 <_raise_r+0x14>
 8013a96:	2316      	movs	r3, #22
 8013a98:	6003      	str	r3, [r0, #0]
 8013a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8013a9e:	bd38      	pop	{r3, r4, r5, pc}
 8013aa0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013aa2:	b112      	cbz	r2, 8013aaa <_raise_r+0x1e>
 8013aa4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013aa8:	b94b      	cbnz	r3, 8013abe <_raise_r+0x32>
 8013aaa:	4620      	mov	r0, r4
 8013aac:	f000 f830 	bl	8013b10 <_getpid_r>
 8013ab0:	462a      	mov	r2, r5
 8013ab2:	4601      	mov	r1, r0
 8013ab4:	4620      	mov	r0, r4
 8013ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013aba:	f000 b817 	b.w	8013aec <_kill_r>
 8013abe:	2b01      	cmp	r3, #1
 8013ac0:	d00a      	beq.n	8013ad8 <_raise_r+0x4c>
 8013ac2:	1c59      	adds	r1, r3, #1
 8013ac4:	d103      	bne.n	8013ace <_raise_r+0x42>
 8013ac6:	2316      	movs	r3, #22
 8013ac8:	6003      	str	r3, [r0, #0]
 8013aca:	2001      	movs	r0, #1
 8013acc:	e7e7      	b.n	8013a9e <_raise_r+0x12>
 8013ace:	2400      	movs	r4, #0
 8013ad0:	4628      	mov	r0, r5
 8013ad2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013ad6:	4798      	blx	r3
 8013ad8:	2000      	movs	r0, #0
 8013ada:	e7e0      	b.n	8013a9e <_raise_r+0x12>

08013adc <raise>:
 8013adc:	4b02      	ldr	r3, [pc, #8]	; (8013ae8 <raise+0xc>)
 8013ade:	4601      	mov	r1, r0
 8013ae0:	6818      	ldr	r0, [r3, #0]
 8013ae2:	f7ff bfd3 	b.w	8013a8c <_raise_r>
 8013ae6:	bf00      	nop
 8013ae8:	20000068 	.word	0x20000068

08013aec <_kill_r>:
 8013aec:	b538      	push	{r3, r4, r5, lr}
 8013aee:	2300      	movs	r3, #0
 8013af0:	4d06      	ldr	r5, [pc, #24]	; (8013b0c <_kill_r+0x20>)
 8013af2:	4604      	mov	r4, r0
 8013af4:	4608      	mov	r0, r1
 8013af6:	4611      	mov	r1, r2
 8013af8:	602b      	str	r3, [r5, #0]
 8013afa:	f7f1 fae1 	bl	80050c0 <_kill>
 8013afe:	1c43      	adds	r3, r0, #1
 8013b00:	d102      	bne.n	8013b08 <_kill_r+0x1c>
 8013b02:	682b      	ldr	r3, [r5, #0]
 8013b04:	b103      	cbz	r3, 8013b08 <_kill_r+0x1c>
 8013b06:	6023      	str	r3, [r4, #0]
 8013b08:	bd38      	pop	{r3, r4, r5, pc}
 8013b0a:	bf00      	nop
 8013b0c:	20006cb8 	.word	0x20006cb8

08013b10 <_getpid_r>:
 8013b10:	f7f1 bacf 	b.w	80050b2 <_getpid>

08013b14 <__swbuf_r>:
 8013b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b16:	460e      	mov	r6, r1
 8013b18:	4614      	mov	r4, r2
 8013b1a:	4605      	mov	r5, r0
 8013b1c:	b118      	cbz	r0, 8013b26 <__swbuf_r+0x12>
 8013b1e:	6983      	ldr	r3, [r0, #24]
 8013b20:	b90b      	cbnz	r3, 8013b26 <__swbuf_r+0x12>
 8013b22:	f000 f9d1 	bl	8013ec8 <__sinit>
 8013b26:	4b21      	ldr	r3, [pc, #132]	; (8013bac <__swbuf_r+0x98>)
 8013b28:	429c      	cmp	r4, r3
 8013b2a:	d12b      	bne.n	8013b84 <__swbuf_r+0x70>
 8013b2c:	686c      	ldr	r4, [r5, #4]
 8013b2e:	69a3      	ldr	r3, [r4, #24]
 8013b30:	60a3      	str	r3, [r4, #8]
 8013b32:	89a3      	ldrh	r3, [r4, #12]
 8013b34:	071a      	lsls	r2, r3, #28
 8013b36:	d52f      	bpl.n	8013b98 <__swbuf_r+0x84>
 8013b38:	6923      	ldr	r3, [r4, #16]
 8013b3a:	b36b      	cbz	r3, 8013b98 <__swbuf_r+0x84>
 8013b3c:	6923      	ldr	r3, [r4, #16]
 8013b3e:	6820      	ldr	r0, [r4, #0]
 8013b40:	b2f6      	uxtb	r6, r6
 8013b42:	1ac0      	subs	r0, r0, r3
 8013b44:	6963      	ldr	r3, [r4, #20]
 8013b46:	4637      	mov	r7, r6
 8013b48:	4283      	cmp	r3, r0
 8013b4a:	dc04      	bgt.n	8013b56 <__swbuf_r+0x42>
 8013b4c:	4621      	mov	r1, r4
 8013b4e:	4628      	mov	r0, r5
 8013b50:	f000 f926 	bl	8013da0 <_fflush_r>
 8013b54:	bb30      	cbnz	r0, 8013ba4 <__swbuf_r+0x90>
 8013b56:	68a3      	ldr	r3, [r4, #8]
 8013b58:	3001      	adds	r0, #1
 8013b5a:	3b01      	subs	r3, #1
 8013b5c:	60a3      	str	r3, [r4, #8]
 8013b5e:	6823      	ldr	r3, [r4, #0]
 8013b60:	1c5a      	adds	r2, r3, #1
 8013b62:	6022      	str	r2, [r4, #0]
 8013b64:	701e      	strb	r6, [r3, #0]
 8013b66:	6963      	ldr	r3, [r4, #20]
 8013b68:	4283      	cmp	r3, r0
 8013b6a:	d004      	beq.n	8013b76 <__swbuf_r+0x62>
 8013b6c:	89a3      	ldrh	r3, [r4, #12]
 8013b6e:	07db      	lsls	r3, r3, #31
 8013b70:	d506      	bpl.n	8013b80 <__swbuf_r+0x6c>
 8013b72:	2e0a      	cmp	r6, #10
 8013b74:	d104      	bne.n	8013b80 <__swbuf_r+0x6c>
 8013b76:	4621      	mov	r1, r4
 8013b78:	4628      	mov	r0, r5
 8013b7a:	f000 f911 	bl	8013da0 <_fflush_r>
 8013b7e:	b988      	cbnz	r0, 8013ba4 <__swbuf_r+0x90>
 8013b80:	4638      	mov	r0, r7
 8013b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b84:	4b0a      	ldr	r3, [pc, #40]	; (8013bb0 <__swbuf_r+0x9c>)
 8013b86:	429c      	cmp	r4, r3
 8013b88:	d101      	bne.n	8013b8e <__swbuf_r+0x7a>
 8013b8a:	68ac      	ldr	r4, [r5, #8]
 8013b8c:	e7cf      	b.n	8013b2e <__swbuf_r+0x1a>
 8013b8e:	4b09      	ldr	r3, [pc, #36]	; (8013bb4 <__swbuf_r+0xa0>)
 8013b90:	429c      	cmp	r4, r3
 8013b92:	bf08      	it	eq
 8013b94:	68ec      	ldreq	r4, [r5, #12]
 8013b96:	e7ca      	b.n	8013b2e <__swbuf_r+0x1a>
 8013b98:	4621      	mov	r1, r4
 8013b9a:	4628      	mov	r0, r5
 8013b9c:	f000 f80c 	bl	8013bb8 <__swsetup_r>
 8013ba0:	2800      	cmp	r0, #0
 8013ba2:	d0cb      	beq.n	8013b3c <__swbuf_r+0x28>
 8013ba4:	f04f 37ff 	mov.w	r7, #4294967295
 8013ba8:	e7ea      	b.n	8013b80 <__swbuf_r+0x6c>
 8013baa:	bf00      	nop
 8013bac:	08016d1c 	.word	0x08016d1c
 8013bb0:	08016d3c 	.word	0x08016d3c
 8013bb4:	08016cfc 	.word	0x08016cfc

08013bb8 <__swsetup_r>:
 8013bb8:	4b32      	ldr	r3, [pc, #200]	; (8013c84 <__swsetup_r+0xcc>)
 8013bba:	b570      	push	{r4, r5, r6, lr}
 8013bbc:	681d      	ldr	r5, [r3, #0]
 8013bbe:	4606      	mov	r6, r0
 8013bc0:	460c      	mov	r4, r1
 8013bc2:	b125      	cbz	r5, 8013bce <__swsetup_r+0x16>
 8013bc4:	69ab      	ldr	r3, [r5, #24]
 8013bc6:	b913      	cbnz	r3, 8013bce <__swsetup_r+0x16>
 8013bc8:	4628      	mov	r0, r5
 8013bca:	f000 f97d 	bl	8013ec8 <__sinit>
 8013bce:	4b2e      	ldr	r3, [pc, #184]	; (8013c88 <__swsetup_r+0xd0>)
 8013bd0:	429c      	cmp	r4, r3
 8013bd2:	d10f      	bne.n	8013bf4 <__swsetup_r+0x3c>
 8013bd4:	686c      	ldr	r4, [r5, #4]
 8013bd6:	89a3      	ldrh	r3, [r4, #12]
 8013bd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013bdc:	0719      	lsls	r1, r3, #28
 8013bde:	d42c      	bmi.n	8013c3a <__swsetup_r+0x82>
 8013be0:	06dd      	lsls	r5, r3, #27
 8013be2:	d411      	bmi.n	8013c08 <__swsetup_r+0x50>
 8013be4:	2309      	movs	r3, #9
 8013be6:	6033      	str	r3, [r6, #0]
 8013be8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013bec:	f04f 30ff 	mov.w	r0, #4294967295
 8013bf0:	81a3      	strh	r3, [r4, #12]
 8013bf2:	e03e      	b.n	8013c72 <__swsetup_r+0xba>
 8013bf4:	4b25      	ldr	r3, [pc, #148]	; (8013c8c <__swsetup_r+0xd4>)
 8013bf6:	429c      	cmp	r4, r3
 8013bf8:	d101      	bne.n	8013bfe <__swsetup_r+0x46>
 8013bfa:	68ac      	ldr	r4, [r5, #8]
 8013bfc:	e7eb      	b.n	8013bd6 <__swsetup_r+0x1e>
 8013bfe:	4b24      	ldr	r3, [pc, #144]	; (8013c90 <__swsetup_r+0xd8>)
 8013c00:	429c      	cmp	r4, r3
 8013c02:	bf08      	it	eq
 8013c04:	68ec      	ldreq	r4, [r5, #12]
 8013c06:	e7e6      	b.n	8013bd6 <__swsetup_r+0x1e>
 8013c08:	0758      	lsls	r0, r3, #29
 8013c0a:	d512      	bpl.n	8013c32 <__swsetup_r+0x7a>
 8013c0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c0e:	b141      	cbz	r1, 8013c22 <__swsetup_r+0x6a>
 8013c10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c14:	4299      	cmp	r1, r3
 8013c16:	d002      	beq.n	8013c1e <__swsetup_r+0x66>
 8013c18:	4630      	mov	r0, r6
 8013c1a:	f7ff fdf3 	bl	8013804 <_free_r>
 8013c1e:	2300      	movs	r3, #0
 8013c20:	6363      	str	r3, [r4, #52]	; 0x34
 8013c22:	89a3      	ldrh	r3, [r4, #12]
 8013c24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013c28:	81a3      	strh	r3, [r4, #12]
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	6063      	str	r3, [r4, #4]
 8013c2e:	6923      	ldr	r3, [r4, #16]
 8013c30:	6023      	str	r3, [r4, #0]
 8013c32:	89a3      	ldrh	r3, [r4, #12]
 8013c34:	f043 0308 	orr.w	r3, r3, #8
 8013c38:	81a3      	strh	r3, [r4, #12]
 8013c3a:	6923      	ldr	r3, [r4, #16]
 8013c3c:	b94b      	cbnz	r3, 8013c52 <__swsetup_r+0x9a>
 8013c3e:	89a3      	ldrh	r3, [r4, #12]
 8013c40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013c48:	d003      	beq.n	8013c52 <__swsetup_r+0x9a>
 8013c4a:	4621      	mov	r1, r4
 8013c4c:	4630      	mov	r0, r6
 8013c4e:	f000 f9ff 	bl	8014050 <__smakebuf_r>
 8013c52:	89a0      	ldrh	r0, [r4, #12]
 8013c54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013c58:	f010 0301 	ands.w	r3, r0, #1
 8013c5c:	d00a      	beq.n	8013c74 <__swsetup_r+0xbc>
 8013c5e:	2300      	movs	r3, #0
 8013c60:	60a3      	str	r3, [r4, #8]
 8013c62:	6963      	ldr	r3, [r4, #20]
 8013c64:	425b      	negs	r3, r3
 8013c66:	61a3      	str	r3, [r4, #24]
 8013c68:	6923      	ldr	r3, [r4, #16]
 8013c6a:	b943      	cbnz	r3, 8013c7e <__swsetup_r+0xc6>
 8013c6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013c70:	d1ba      	bne.n	8013be8 <__swsetup_r+0x30>
 8013c72:	bd70      	pop	{r4, r5, r6, pc}
 8013c74:	0781      	lsls	r1, r0, #30
 8013c76:	bf58      	it	pl
 8013c78:	6963      	ldrpl	r3, [r4, #20]
 8013c7a:	60a3      	str	r3, [r4, #8]
 8013c7c:	e7f4      	b.n	8013c68 <__swsetup_r+0xb0>
 8013c7e:	2000      	movs	r0, #0
 8013c80:	e7f7      	b.n	8013c72 <__swsetup_r+0xba>
 8013c82:	bf00      	nop
 8013c84:	20000068 	.word	0x20000068
 8013c88:	08016d1c 	.word	0x08016d1c
 8013c8c:	08016d3c 	.word	0x08016d3c
 8013c90:	08016cfc 	.word	0x08016cfc

08013c94 <__sflush_r>:
 8013c94:	898a      	ldrh	r2, [r1, #12]
 8013c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c9a:	4605      	mov	r5, r0
 8013c9c:	0710      	lsls	r0, r2, #28
 8013c9e:	460c      	mov	r4, r1
 8013ca0:	d458      	bmi.n	8013d54 <__sflush_r+0xc0>
 8013ca2:	684b      	ldr	r3, [r1, #4]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	dc05      	bgt.n	8013cb4 <__sflush_r+0x20>
 8013ca8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	dc02      	bgt.n	8013cb4 <__sflush_r+0x20>
 8013cae:	2000      	movs	r0, #0
 8013cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013cb6:	2e00      	cmp	r6, #0
 8013cb8:	d0f9      	beq.n	8013cae <__sflush_r+0x1a>
 8013cba:	2300      	movs	r3, #0
 8013cbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013cc0:	682f      	ldr	r7, [r5, #0]
 8013cc2:	602b      	str	r3, [r5, #0]
 8013cc4:	d032      	beq.n	8013d2c <__sflush_r+0x98>
 8013cc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013cc8:	89a3      	ldrh	r3, [r4, #12]
 8013cca:	075a      	lsls	r2, r3, #29
 8013ccc:	d505      	bpl.n	8013cda <__sflush_r+0x46>
 8013cce:	6863      	ldr	r3, [r4, #4]
 8013cd0:	1ac0      	subs	r0, r0, r3
 8013cd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013cd4:	b10b      	cbz	r3, 8013cda <__sflush_r+0x46>
 8013cd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013cd8:	1ac0      	subs	r0, r0, r3
 8013cda:	2300      	movs	r3, #0
 8013cdc:	4602      	mov	r2, r0
 8013cde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013ce0:	4628      	mov	r0, r5
 8013ce2:	6a21      	ldr	r1, [r4, #32]
 8013ce4:	47b0      	blx	r6
 8013ce6:	1c43      	adds	r3, r0, #1
 8013ce8:	89a3      	ldrh	r3, [r4, #12]
 8013cea:	d106      	bne.n	8013cfa <__sflush_r+0x66>
 8013cec:	6829      	ldr	r1, [r5, #0]
 8013cee:	291d      	cmp	r1, #29
 8013cf0:	d82c      	bhi.n	8013d4c <__sflush_r+0xb8>
 8013cf2:	4a2a      	ldr	r2, [pc, #168]	; (8013d9c <__sflush_r+0x108>)
 8013cf4:	40ca      	lsrs	r2, r1
 8013cf6:	07d6      	lsls	r6, r2, #31
 8013cf8:	d528      	bpl.n	8013d4c <__sflush_r+0xb8>
 8013cfa:	2200      	movs	r2, #0
 8013cfc:	6062      	str	r2, [r4, #4]
 8013cfe:	6922      	ldr	r2, [r4, #16]
 8013d00:	04d9      	lsls	r1, r3, #19
 8013d02:	6022      	str	r2, [r4, #0]
 8013d04:	d504      	bpl.n	8013d10 <__sflush_r+0x7c>
 8013d06:	1c42      	adds	r2, r0, #1
 8013d08:	d101      	bne.n	8013d0e <__sflush_r+0x7a>
 8013d0a:	682b      	ldr	r3, [r5, #0]
 8013d0c:	b903      	cbnz	r3, 8013d10 <__sflush_r+0x7c>
 8013d0e:	6560      	str	r0, [r4, #84]	; 0x54
 8013d10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013d12:	602f      	str	r7, [r5, #0]
 8013d14:	2900      	cmp	r1, #0
 8013d16:	d0ca      	beq.n	8013cae <__sflush_r+0x1a>
 8013d18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013d1c:	4299      	cmp	r1, r3
 8013d1e:	d002      	beq.n	8013d26 <__sflush_r+0x92>
 8013d20:	4628      	mov	r0, r5
 8013d22:	f7ff fd6f 	bl	8013804 <_free_r>
 8013d26:	2000      	movs	r0, #0
 8013d28:	6360      	str	r0, [r4, #52]	; 0x34
 8013d2a:	e7c1      	b.n	8013cb0 <__sflush_r+0x1c>
 8013d2c:	6a21      	ldr	r1, [r4, #32]
 8013d2e:	2301      	movs	r3, #1
 8013d30:	4628      	mov	r0, r5
 8013d32:	47b0      	blx	r6
 8013d34:	1c41      	adds	r1, r0, #1
 8013d36:	d1c7      	bne.n	8013cc8 <__sflush_r+0x34>
 8013d38:	682b      	ldr	r3, [r5, #0]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d0c4      	beq.n	8013cc8 <__sflush_r+0x34>
 8013d3e:	2b1d      	cmp	r3, #29
 8013d40:	d001      	beq.n	8013d46 <__sflush_r+0xb2>
 8013d42:	2b16      	cmp	r3, #22
 8013d44:	d101      	bne.n	8013d4a <__sflush_r+0xb6>
 8013d46:	602f      	str	r7, [r5, #0]
 8013d48:	e7b1      	b.n	8013cae <__sflush_r+0x1a>
 8013d4a:	89a3      	ldrh	r3, [r4, #12]
 8013d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d50:	81a3      	strh	r3, [r4, #12]
 8013d52:	e7ad      	b.n	8013cb0 <__sflush_r+0x1c>
 8013d54:	690f      	ldr	r7, [r1, #16]
 8013d56:	2f00      	cmp	r7, #0
 8013d58:	d0a9      	beq.n	8013cae <__sflush_r+0x1a>
 8013d5a:	0793      	lsls	r3, r2, #30
 8013d5c:	bf18      	it	ne
 8013d5e:	2300      	movne	r3, #0
 8013d60:	680e      	ldr	r6, [r1, #0]
 8013d62:	bf08      	it	eq
 8013d64:	694b      	ldreq	r3, [r1, #20]
 8013d66:	eba6 0807 	sub.w	r8, r6, r7
 8013d6a:	600f      	str	r7, [r1, #0]
 8013d6c:	608b      	str	r3, [r1, #8]
 8013d6e:	f1b8 0f00 	cmp.w	r8, #0
 8013d72:	dd9c      	ble.n	8013cae <__sflush_r+0x1a>
 8013d74:	4643      	mov	r3, r8
 8013d76:	463a      	mov	r2, r7
 8013d78:	4628      	mov	r0, r5
 8013d7a:	6a21      	ldr	r1, [r4, #32]
 8013d7c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013d7e:	47b0      	blx	r6
 8013d80:	2800      	cmp	r0, #0
 8013d82:	dc06      	bgt.n	8013d92 <__sflush_r+0xfe>
 8013d84:	89a3      	ldrh	r3, [r4, #12]
 8013d86:	f04f 30ff 	mov.w	r0, #4294967295
 8013d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d8e:	81a3      	strh	r3, [r4, #12]
 8013d90:	e78e      	b.n	8013cb0 <__sflush_r+0x1c>
 8013d92:	4407      	add	r7, r0
 8013d94:	eba8 0800 	sub.w	r8, r8, r0
 8013d98:	e7e9      	b.n	8013d6e <__sflush_r+0xda>
 8013d9a:	bf00      	nop
 8013d9c:	20400001 	.word	0x20400001

08013da0 <_fflush_r>:
 8013da0:	b538      	push	{r3, r4, r5, lr}
 8013da2:	690b      	ldr	r3, [r1, #16]
 8013da4:	4605      	mov	r5, r0
 8013da6:	460c      	mov	r4, r1
 8013da8:	b913      	cbnz	r3, 8013db0 <_fflush_r+0x10>
 8013daa:	2500      	movs	r5, #0
 8013dac:	4628      	mov	r0, r5
 8013dae:	bd38      	pop	{r3, r4, r5, pc}
 8013db0:	b118      	cbz	r0, 8013dba <_fflush_r+0x1a>
 8013db2:	6983      	ldr	r3, [r0, #24]
 8013db4:	b90b      	cbnz	r3, 8013dba <_fflush_r+0x1a>
 8013db6:	f000 f887 	bl	8013ec8 <__sinit>
 8013dba:	4b14      	ldr	r3, [pc, #80]	; (8013e0c <_fflush_r+0x6c>)
 8013dbc:	429c      	cmp	r4, r3
 8013dbe:	d11b      	bne.n	8013df8 <_fflush_r+0x58>
 8013dc0:	686c      	ldr	r4, [r5, #4]
 8013dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d0ef      	beq.n	8013daa <_fflush_r+0xa>
 8013dca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013dcc:	07d0      	lsls	r0, r2, #31
 8013dce:	d404      	bmi.n	8013dda <_fflush_r+0x3a>
 8013dd0:	0599      	lsls	r1, r3, #22
 8013dd2:	d402      	bmi.n	8013dda <_fflush_r+0x3a>
 8013dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013dd6:	f000 f915 	bl	8014004 <__retarget_lock_acquire_recursive>
 8013dda:	4628      	mov	r0, r5
 8013ddc:	4621      	mov	r1, r4
 8013dde:	f7ff ff59 	bl	8013c94 <__sflush_r>
 8013de2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013de4:	4605      	mov	r5, r0
 8013de6:	07da      	lsls	r2, r3, #31
 8013de8:	d4e0      	bmi.n	8013dac <_fflush_r+0xc>
 8013dea:	89a3      	ldrh	r3, [r4, #12]
 8013dec:	059b      	lsls	r3, r3, #22
 8013dee:	d4dd      	bmi.n	8013dac <_fflush_r+0xc>
 8013df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013df2:	f000 f908 	bl	8014006 <__retarget_lock_release_recursive>
 8013df6:	e7d9      	b.n	8013dac <_fflush_r+0xc>
 8013df8:	4b05      	ldr	r3, [pc, #20]	; (8013e10 <_fflush_r+0x70>)
 8013dfa:	429c      	cmp	r4, r3
 8013dfc:	d101      	bne.n	8013e02 <_fflush_r+0x62>
 8013dfe:	68ac      	ldr	r4, [r5, #8]
 8013e00:	e7df      	b.n	8013dc2 <_fflush_r+0x22>
 8013e02:	4b04      	ldr	r3, [pc, #16]	; (8013e14 <_fflush_r+0x74>)
 8013e04:	429c      	cmp	r4, r3
 8013e06:	bf08      	it	eq
 8013e08:	68ec      	ldreq	r4, [r5, #12]
 8013e0a:	e7da      	b.n	8013dc2 <_fflush_r+0x22>
 8013e0c:	08016d1c 	.word	0x08016d1c
 8013e10:	08016d3c 	.word	0x08016d3c
 8013e14:	08016cfc 	.word	0x08016cfc

08013e18 <std>:
 8013e18:	2300      	movs	r3, #0
 8013e1a:	b510      	push	{r4, lr}
 8013e1c:	4604      	mov	r4, r0
 8013e1e:	e9c0 3300 	strd	r3, r3, [r0]
 8013e22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013e26:	6083      	str	r3, [r0, #8]
 8013e28:	8181      	strh	r1, [r0, #12]
 8013e2a:	6643      	str	r3, [r0, #100]	; 0x64
 8013e2c:	81c2      	strh	r2, [r0, #14]
 8013e2e:	6183      	str	r3, [r0, #24]
 8013e30:	4619      	mov	r1, r3
 8013e32:	2208      	movs	r2, #8
 8013e34:	305c      	adds	r0, #92	; 0x5c
 8013e36:	f7ff fcdd 	bl	80137f4 <memset>
 8013e3a:	4b05      	ldr	r3, [pc, #20]	; (8013e50 <std+0x38>)
 8013e3c:	6224      	str	r4, [r4, #32]
 8013e3e:	6263      	str	r3, [r4, #36]	; 0x24
 8013e40:	4b04      	ldr	r3, [pc, #16]	; (8013e54 <std+0x3c>)
 8013e42:	62a3      	str	r3, [r4, #40]	; 0x28
 8013e44:	4b04      	ldr	r3, [pc, #16]	; (8013e58 <std+0x40>)
 8013e46:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013e48:	4b04      	ldr	r3, [pc, #16]	; (8013e5c <std+0x44>)
 8013e4a:	6323      	str	r3, [r4, #48]	; 0x30
 8013e4c:	bd10      	pop	{r4, pc}
 8013e4e:	bf00      	nop
 8013e50:	080146c5 	.word	0x080146c5
 8013e54:	080146e7 	.word	0x080146e7
 8013e58:	0801471f 	.word	0x0801471f
 8013e5c:	08014743 	.word	0x08014743

08013e60 <_cleanup_r>:
 8013e60:	4901      	ldr	r1, [pc, #4]	; (8013e68 <_cleanup_r+0x8>)
 8013e62:	f000 b8af 	b.w	8013fc4 <_fwalk_reent>
 8013e66:	bf00      	nop
 8013e68:	08013da1 	.word	0x08013da1

08013e6c <__sfmoreglue>:
 8013e6c:	b570      	push	{r4, r5, r6, lr}
 8013e6e:	2568      	movs	r5, #104	; 0x68
 8013e70:	1e4a      	subs	r2, r1, #1
 8013e72:	4355      	muls	r5, r2
 8013e74:	460e      	mov	r6, r1
 8013e76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013e7a:	f7ff fd0f 	bl	801389c <_malloc_r>
 8013e7e:	4604      	mov	r4, r0
 8013e80:	b140      	cbz	r0, 8013e94 <__sfmoreglue+0x28>
 8013e82:	2100      	movs	r1, #0
 8013e84:	e9c0 1600 	strd	r1, r6, [r0]
 8013e88:	300c      	adds	r0, #12
 8013e8a:	60a0      	str	r0, [r4, #8]
 8013e8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013e90:	f7ff fcb0 	bl	80137f4 <memset>
 8013e94:	4620      	mov	r0, r4
 8013e96:	bd70      	pop	{r4, r5, r6, pc}

08013e98 <__sfp_lock_acquire>:
 8013e98:	4801      	ldr	r0, [pc, #4]	; (8013ea0 <__sfp_lock_acquire+0x8>)
 8013e9a:	f000 b8b3 	b.w	8014004 <__retarget_lock_acquire_recursive>
 8013e9e:	bf00      	nop
 8013ea0:	20006cc4 	.word	0x20006cc4

08013ea4 <__sfp_lock_release>:
 8013ea4:	4801      	ldr	r0, [pc, #4]	; (8013eac <__sfp_lock_release+0x8>)
 8013ea6:	f000 b8ae 	b.w	8014006 <__retarget_lock_release_recursive>
 8013eaa:	bf00      	nop
 8013eac:	20006cc4 	.word	0x20006cc4

08013eb0 <__sinit_lock_acquire>:
 8013eb0:	4801      	ldr	r0, [pc, #4]	; (8013eb8 <__sinit_lock_acquire+0x8>)
 8013eb2:	f000 b8a7 	b.w	8014004 <__retarget_lock_acquire_recursive>
 8013eb6:	bf00      	nop
 8013eb8:	20006cbf 	.word	0x20006cbf

08013ebc <__sinit_lock_release>:
 8013ebc:	4801      	ldr	r0, [pc, #4]	; (8013ec4 <__sinit_lock_release+0x8>)
 8013ebe:	f000 b8a2 	b.w	8014006 <__retarget_lock_release_recursive>
 8013ec2:	bf00      	nop
 8013ec4:	20006cbf 	.word	0x20006cbf

08013ec8 <__sinit>:
 8013ec8:	b510      	push	{r4, lr}
 8013eca:	4604      	mov	r4, r0
 8013ecc:	f7ff fff0 	bl	8013eb0 <__sinit_lock_acquire>
 8013ed0:	69a3      	ldr	r3, [r4, #24]
 8013ed2:	b11b      	cbz	r3, 8013edc <__sinit+0x14>
 8013ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ed8:	f7ff bff0 	b.w	8013ebc <__sinit_lock_release>
 8013edc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013ee0:	6523      	str	r3, [r4, #80]	; 0x50
 8013ee2:	4b13      	ldr	r3, [pc, #76]	; (8013f30 <__sinit+0x68>)
 8013ee4:	4a13      	ldr	r2, [pc, #76]	; (8013f34 <__sinit+0x6c>)
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	62a2      	str	r2, [r4, #40]	; 0x28
 8013eea:	42a3      	cmp	r3, r4
 8013eec:	bf08      	it	eq
 8013eee:	2301      	moveq	r3, #1
 8013ef0:	4620      	mov	r0, r4
 8013ef2:	bf08      	it	eq
 8013ef4:	61a3      	streq	r3, [r4, #24]
 8013ef6:	f000 f81f 	bl	8013f38 <__sfp>
 8013efa:	6060      	str	r0, [r4, #4]
 8013efc:	4620      	mov	r0, r4
 8013efe:	f000 f81b 	bl	8013f38 <__sfp>
 8013f02:	60a0      	str	r0, [r4, #8]
 8013f04:	4620      	mov	r0, r4
 8013f06:	f000 f817 	bl	8013f38 <__sfp>
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	2104      	movs	r1, #4
 8013f0e:	60e0      	str	r0, [r4, #12]
 8013f10:	6860      	ldr	r0, [r4, #4]
 8013f12:	f7ff ff81 	bl	8013e18 <std>
 8013f16:	2201      	movs	r2, #1
 8013f18:	2109      	movs	r1, #9
 8013f1a:	68a0      	ldr	r0, [r4, #8]
 8013f1c:	f7ff ff7c 	bl	8013e18 <std>
 8013f20:	2202      	movs	r2, #2
 8013f22:	2112      	movs	r1, #18
 8013f24:	68e0      	ldr	r0, [r4, #12]
 8013f26:	f7ff ff77 	bl	8013e18 <std>
 8013f2a:	2301      	movs	r3, #1
 8013f2c:	61a3      	str	r3, [r4, #24]
 8013f2e:	e7d1      	b.n	8013ed4 <__sinit+0xc>
 8013f30:	08016cf8 	.word	0x08016cf8
 8013f34:	08013e61 	.word	0x08013e61

08013f38 <__sfp>:
 8013f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f3a:	4607      	mov	r7, r0
 8013f3c:	f7ff ffac 	bl	8013e98 <__sfp_lock_acquire>
 8013f40:	4b1e      	ldr	r3, [pc, #120]	; (8013fbc <__sfp+0x84>)
 8013f42:	681e      	ldr	r6, [r3, #0]
 8013f44:	69b3      	ldr	r3, [r6, #24]
 8013f46:	b913      	cbnz	r3, 8013f4e <__sfp+0x16>
 8013f48:	4630      	mov	r0, r6
 8013f4a:	f7ff ffbd 	bl	8013ec8 <__sinit>
 8013f4e:	3648      	adds	r6, #72	; 0x48
 8013f50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013f54:	3b01      	subs	r3, #1
 8013f56:	d503      	bpl.n	8013f60 <__sfp+0x28>
 8013f58:	6833      	ldr	r3, [r6, #0]
 8013f5a:	b30b      	cbz	r3, 8013fa0 <__sfp+0x68>
 8013f5c:	6836      	ldr	r6, [r6, #0]
 8013f5e:	e7f7      	b.n	8013f50 <__sfp+0x18>
 8013f60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013f64:	b9d5      	cbnz	r5, 8013f9c <__sfp+0x64>
 8013f66:	4b16      	ldr	r3, [pc, #88]	; (8013fc0 <__sfp+0x88>)
 8013f68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013f6c:	60e3      	str	r3, [r4, #12]
 8013f6e:	6665      	str	r5, [r4, #100]	; 0x64
 8013f70:	f000 f847 	bl	8014002 <__retarget_lock_init_recursive>
 8013f74:	f7ff ff96 	bl	8013ea4 <__sfp_lock_release>
 8013f78:	2208      	movs	r2, #8
 8013f7a:	4629      	mov	r1, r5
 8013f7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013f80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013f84:	6025      	str	r5, [r4, #0]
 8013f86:	61a5      	str	r5, [r4, #24]
 8013f88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013f8c:	f7ff fc32 	bl	80137f4 <memset>
 8013f90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013f94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013f98:	4620      	mov	r0, r4
 8013f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f9c:	3468      	adds	r4, #104	; 0x68
 8013f9e:	e7d9      	b.n	8013f54 <__sfp+0x1c>
 8013fa0:	2104      	movs	r1, #4
 8013fa2:	4638      	mov	r0, r7
 8013fa4:	f7ff ff62 	bl	8013e6c <__sfmoreglue>
 8013fa8:	4604      	mov	r4, r0
 8013faa:	6030      	str	r0, [r6, #0]
 8013fac:	2800      	cmp	r0, #0
 8013fae:	d1d5      	bne.n	8013f5c <__sfp+0x24>
 8013fb0:	f7ff ff78 	bl	8013ea4 <__sfp_lock_release>
 8013fb4:	230c      	movs	r3, #12
 8013fb6:	603b      	str	r3, [r7, #0]
 8013fb8:	e7ee      	b.n	8013f98 <__sfp+0x60>
 8013fba:	bf00      	nop
 8013fbc:	08016cf8 	.word	0x08016cf8
 8013fc0:	ffff0001 	.word	0xffff0001

08013fc4 <_fwalk_reent>:
 8013fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013fc8:	4606      	mov	r6, r0
 8013fca:	4688      	mov	r8, r1
 8013fcc:	2700      	movs	r7, #0
 8013fce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013fd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013fd6:	f1b9 0901 	subs.w	r9, r9, #1
 8013fda:	d505      	bpl.n	8013fe8 <_fwalk_reent+0x24>
 8013fdc:	6824      	ldr	r4, [r4, #0]
 8013fde:	2c00      	cmp	r4, #0
 8013fe0:	d1f7      	bne.n	8013fd2 <_fwalk_reent+0xe>
 8013fe2:	4638      	mov	r0, r7
 8013fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013fe8:	89ab      	ldrh	r3, [r5, #12]
 8013fea:	2b01      	cmp	r3, #1
 8013fec:	d907      	bls.n	8013ffe <_fwalk_reent+0x3a>
 8013fee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013ff2:	3301      	adds	r3, #1
 8013ff4:	d003      	beq.n	8013ffe <_fwalk_reent+0x3a>
 8013ff6:	4629      	mov	r1, r5
 8013ff8:	4630      	mov	r0, r6
 8013ffa:	47c0      	blx	r8
 8013ffc:	4307      	orrs	r7, r0
 8013ffe:	3568      	adds	r5, #104	; 0x68
 8014000:	e7e9      	b.n	8013fd6 <_fwalk_reent+0x12>

08014002 <__retarget_lock_init_recursive>:
 8014002:	4770      	bx	lr

08014004 <__retarget_lock_acquire_recursive>:
 8014004:	4770      	bx	lr

08014006 <__retarget_lock_release_recursive>:
 8014006:	4770      	bx	lr

08014008 <__swhatbuf_r>:
 8014008:	b570      	push	{r4, r5, r6, lr}
 801400a:	460e      	mov	r6, r1
 801400c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014010:	4614      	mov	r4, r2
 8014012:	2900      	cmp	r1, #0
 8014014:	461d      	mov	r5, r3
 8014016:	b096      	sub	sp, #88	; 0x58
 8014018:	da07      	bge.n	801402a <__swhatbuf_r+0x22>
 801401a:	2300      	movs	r3, #0
 801401c:	602b      	str	r3, [r5, #0]
 801401e:	89b3      	ldrh	r3, [r6, #12]
 8014020:	061a      	lsls	r2, r3, #24
 8014022:	d410      	bmi.n	8014046 <__swhatbuf_r+0x3e>
 8014024:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014028:	e00e      	b.n	8014048 <__swhatbuf_r+0x40>
 801402a:	466a      	mov	r2, sp
 801402c:	f000 fbb0 	bl	8014790 <_fstat_r>
 8014030:	2800      	cmp	r0, #0
 8014032:	dbf2      	blt.n	801401a <__swhatbuf_r+0x12>
 8014034:	9a01      	ldr	r2, [sp, #4]
 8014036:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801403a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801403e:	425a      	negs	r2, r3
 8014040:	415a      	adcs	r2, r3
 8014042:	602a      	str	r2, [r5, #0]
 8014044:	e7ee      	b.n	8014024 <__swhatbuf_r+0x1c>
 8014046:	2340      	movs	r3, #64	; 0x40
 8014048:	2000      	movs	r0, #0
 801404a:	6023      	str	r3, [r4, #0]
 801404c:	b016      	add	sp, #88	; 0x58
 801404e:	bd70      	pop	{r4, r5, r6, pc}

08014050 <__smakebuf_r>:
 8014050:	898b      	ldrh	r3, [r1, #12]
 8014052:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014054:	079d      	lsls	r5, r3, #30
 8014056:	4606      	mov	r6, r0
 8014058:	460c      	mov	r4, r1
 801405a:	d507      	bpl.n	801406c <__smakebuf_r+0x1c>
 801405c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014060:	6023      	str	r3, [r4, #0]
 8014062:	6123      	str	r3, [r4, #16]
 8014064:	2301      	movs	r3, #1
 8014066:	6163      	str	r3, [r4, #20]
 8014068:	b002      	add	sp, #8
 801406a:	bd70      	pop	{r4, r5, r6, pc}
 801406c:	466a      	mov	r2, sp
 801406e:	ab01      	add	r3, sp, #4
 8014070:	f7ff ffca 	bl	8014008 <__swhatbuf_r>
 8014074:	9900      	ldr	r1, [sp, #0]
 8014076:	4605      	mov	r5, r0
 8014078:	4630      	mov	r0, r6
 801407a:	f7ff fc0f 	bl	801389c <_malloc_r>
 801407e:	b948      	cbnz	r0, 8014094 <__smakebuf_r+0x44>
 8014080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014084:	059a      	lsls	r2, r3, #22
 8014086:	d4ef      	bmi.n	8014068 <__smakebuf_r+0x18>
 8014088:	f023 0303 	bic.w	r3, r3, #3
 801408c:	f043 0302 	orr.w	r3, r3, #2
 8014090:	81a3      	strh	r3, [r4, #12]
 8014092:	e7e3      	b.n	801405c <__smakebuf_r+0xc>
 8014094:	4b0d      	ldr	r3, [pc, #52]	; (80140cc <__smakebuf_r+0x7c>)
 8014096:	62b3      	str	r3, [r6, #40]	; 0x28
 8014098:	89a3      	ldrh	r3, [r4, #12]
 801409a:	6020      	str	r0, [r4, #0]
 801409c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80140a0:	81a3      	strh	r3, [r4, #12]
 80140a2:	9b00      	ldr	r3, [sp, #0]
 80140a4:	6120      	str	r0, [r4, #16]
 80140a6:	6163      	str	r3, [r4, #20]
 80140a8:	9b01      	ldr	r3, [sp, #4]
 80140aa:	b15b      	cbz	r3, 80140c4 <__smakebuf_r+0x74>
 80140ac:	4630      	mov	r0, r6
 80140ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80140b2:	f000 fb7f 	bl	80147b4 <_isatty_r>
 80140b6:	b128      	cbz	r0, 80140c4 <__smakebuf_r+0x74>
 80140b8:	89a3      	ldrh	r3, [r4, #12]
 80140ba:	f023 0303 	bic.w	r3, r3, #3
 80140be:	f043 0301 	orr.w	r3, r3, #1
 80140c2:	81a3      	strh	r3, [r4, #12]
 80140c4:	89a0      	ldrh	r0, [r4, #12]
 80140c6:	4305      	orrs	r5, r0
 80140c8:	81a5      	strh	r5, [r4, #12]
 80140ca:	e7cd      	b.n	8014068 <__smakebuf_r+0x18>
 80140cc:	08013e61 	.word	0x08013e61

080140d0 <__malloc_lock>:
 80140d0:	4801      	ldr	r0, [pc, #4]	; (80140d8 <__malloc_lock+0x8>)
 80140d2:	f7ff bf97 	b.w	8014004 <__retarget_lock_acquire_recursive>
 80140d6:	bf00      	nop
 80140d8:	20006cc0 	.word	0x20006cc0

080140dc <__malloc_unlock>:
 80140dc:	4801      	ldr	r0, [pc, #4]	; (80140e4 <__malloc_unlock+0x8>)
 80140de:	f7ff bf92 	b.w	8014006 <__retarget_lock_release_recursive>
 80140e2:	bf00      	nop
 80140e4:	20006cc0 	.word	0x20006cc0

080140e8 <__sfputc_r>:
 80140e8:	6893      	ldr	r3, [r2, #8]
 80140ea:	b410      	push	{r4}
 80140ec:	3b01      	subs	r3, #1
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	6093      	str	r3, [r2, #8]
 80140f2:	da07      	bge.n	8014104 <__sfputc_r+0x1c>
 80140f4:	6994      	ldr	r4, [r2, #24]
 80140f6:	42a3      	cmp	r3, r4
 80140f8:	db01      	blt.n	80140fe <__sfputc_r+0x16>
 80140fa:	290a      	cmp	r1, #10
 80140fc:	d102      	bne.n	8014104 <__sfputc_r+0x1c>
 80140fe:	bc10      	pop	{r4}
 8014100:	f7ff bd08 	b.w	8013b14 <__swbuf_r>
 8014104:	6813      	ldr	r3, [r2, #0]
 8014106:	1c58      	adds	r0, r3, #1
 8014108:	6010      	str	r0, [r2, #0]
 801410a:	7019      	strb	r1, [r3, #0]
 801410c:	4608      	mov	r0, r1
 801410e:	bc10      	pop	{r4}
 8014110:	4770      	bx	lr

08014112 <__sfputs_r>:
 8014112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014114:	4606      	mov	r6, r0
 8014116:	460f      	mov	r7, r1
 8014118:	4614      	mov	r4, r2
 801411a:	18d5      	adds	r5, r2, r3
 801411c:	42ac      	cmp	r4, r5
 801411e:	d101      	bne.n	8014124 <__sfputs_r+0x12>
 8014120:	2000      	movs	r0, #0
 8014122:	e007      	b.n	8014134 <__sfputs_r+0x22>
 8014124:	463a      	mov	r2, r7
 8014126:	4630      	mov	r0, r6
 8014128:	f814 1b01 	ldrb.w	r1, [r4], #1
 801412c:	f7ff ffdc 	bl	80140e8 <__sfputc_r>
 8014130:	1c43      	adds	r3, r0, #1
 8014132:	d1f3      	bne.n	801411c <__sfputs_r+0xa>
 8014134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014138 <_vfiprintf_r>:
 8014138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801413c:	460d      	mov	r5, r1
 801413e:	4614      	mov	r4, r2
 8014140:	4698      	mov	r8, r3
 8014142:	4606      	mov	r6, r0
 8014144:	b09d      	sub	sp, #116	; 0x74
 8014146:	b118      	cbz	r0, 8014150 <_vfiprintf_r+0x18>
 8014148:	6983      	ldr	r3, [r0, #24]
 801414a:	b90b      	cbnz	r3, 8014150 <_vfiprintf_r+0x18>
 801414c:	f7ff febc 	bl	8013ec8 <__sinit>
 8014150:	4b89      	ldr	r3, [pc, #548]	; (8014378 <_vfiprintf_r+0x240>)
 8014152:	429d      	cmp	r5, r3
 8014154:	d11b      	bne.n	801418e <_vfiprintf_r+0x56>
 8014156:	6875      	ldr	r5, [r6, #4]
 8014158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801415a:	07d9      	lsls	r1, r3, #31
 801415c:	d405      	bmi.n	801416a <_vfiprintf_r+0x32>
 801415e:	89ab      	ldrh	r3, [r5, #12]
 8014160:	059a      	lsls	r2, r3, #22
 8014162:	d402      	bmi.n	801416a <_vfiprintf_r+0x32>
 8014164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014166:	f7ff ff4d 	bl	8014004 <__retarget_lock_acquire_recursive>
 801416a:	89ab      	ldrh	r3, [r5, #12]
 801416c:	071b      	lsls	r3, r3, #28
 801416e:	d501      	bpl.n	8014174 <_vfiprintf_r+0x3c>
 8014170:	692b      	ldr	r3, [r5, #16]
 8014172:	b9eb      	cbnz	r3, 80141b0 <_vfiprintf_r+0x78>
 8014174:	4629      	mov	r1, r5
 8014176:	4630      	mov	r0, r6
 8014178:	f7ff fd1e 	bl	8013bb8 <__swsetup_r>
 801417c:	b1c0      	cbz	r0, 80141b0 <_vfiprintf_r+0x78>
 801417e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014180:	07dc      	lsls	r4, r3, #31
 8014182:	d50e      	bpl.n	80141a2 <_vfiprintf_r+0x6a>
 8014184:	f04f 30ff 	mov.w	r0, #4294967295
 8014188:	b01d      	add	sp, #116	; 0x74
 801418a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801418e:	4b7b      	ldr	r3, [pc, #492]	; (801437c <_vfiprintf_r+0x244>)
 8014190:	429d      	cmp	r5, r3
 8014192:	d101      	bne.n	8014198 <_vfiprintf_r+0x60>
 8014194:	68b5      	ldr	r5, [r6, #8]
 8014196:	e7df      	b.n	8014158 <_vfiprintf_r+0x20>
 8014198:	4b79      	ldr	r3, [pc, #484]	; (8014380 <_vfiprintf_r+0x248>)
 801419a:	429d      	cmp	r5, r3
 801419c:	bf08      	it	eq
 801419e:	68f5      	ldreq	r5, [r6, #12]
 80141a0:	e7da      	b.n	8014158 <_vfiprintf_r+0x20>
 80141a2:	89ab      	ldrh	r3, [r5, #12]
 80141a4:	0598      	lsls	r0, r3, #22
 80141a6:	d4ed      	bmi.n	8014184 <_vfiprintf_r+0x4c>
 80141a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80141aa:	f7ff ff2c 	bl	8014006 <__retarget_lock_release_recursive>
 80141ae:	e7e9      	b.n	8014184 <_vfiprintf_r+0x4c>
 80141b0:	2300      	movs	r3, #0
 80141b2:	9309      	str	r3, [sp, #36]	; 0x24
 80141b4:	2320      	movs	r3, #32
 80141b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80141ba:	2330      	movs	r3, #48	; 0x30
 80141bc:	f04f 0901 	mov.w	r9, #1
 80141c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80141c4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8014384 <_vfiprintf_r+0x24c>
 80141c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80141cc:	4623      	mov	r3, r4
 80141ce:	469a      	mov	sl, r3
 80141d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80141d4:	b10a      	cbz	r2, 80141da <_vfiprintf_r+0xa2>
 80141d6:	2a25      	cmp	r2, #37	; 0x25
 80141d8:	d1f9      	bne.n	80141ce <_vfiprintf_r+0x96>
 80141da:	ebba 0b04 	subs.w	fp, sl, r4
 80141de:	d00b      	beq.n	80141f8 <_vfiprintf_r+0xc0>
 80141e0:	465b      	mov	r3, fp
 80141e2:	4622      	mov	r2, r4
 80141e4:	4629      	mov	r1, r5
 80141e6:	4630      	mov	r0, r6
 80141e8:	f7ff ff93 	bl	8014112 <__sfputs_r>
 80141ec:	3001      	adds	r0, #1
 80141ee:	f000 80aa 	beq.w	8014346 <_vfiprintf_r+0x20e>
 80141f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80141f4:	445a      	add	r2, fp
 80141f6:	9209      	str	r2, [sp, #36]	; 0x24
 80141f8:	f89a 3000 	ldrb.w	r3, [sl]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	f000 80a2 	beq.w	8014346 <_vfiprintf_r+0x20e>
 8014202:	2300      	movs	r3, #0
 8014204:	f04f 32ff 	mov.w	r2, #4294967295
 8014208:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801420c:	f10a 0a01 	add.w	sl, sl, #1
 8014210:	9304      	str	r3, [sp, #16]
 8014212:	9307      	str	r3, [sp, #28]
 8014214:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014218:	931a      	str	r3, [sp, #104]	; 0x68
 801421a:	4654      	mov	r4, sl
 801421c:	2205      	movs	r2, #5
 801421e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014222:	4858      	ldr	r0, [pc, #352]	; (8014384 <_vfiprintf_r+0x24c>)
 8014224:	f7ff faa2 	bl	801376c <memchr>
 8014228:	9a04      	ldr	r2, [sp, #16]
 801422a:	b9d8      	cbnz	r0, 8014264 <_vfiprintf_r+0x12c>
 801422c:	06d1      	lsls	r1, r2, #27
 801422e:	bf44      	itt	mi
 8014230:	2320      	movmi	r3, #32
 8014232:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014236:	0713      	lsls	r3, r2, #28
 8014238:	bf44      	itt	mi
 801423a:	232b      	movmi	r3, #43	; 0x2b
 801423c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014240:	f89a 3000 	ldrb.w	r3, [sl]
 8014244:	2b2a      	cmp	r3, #42	; 0x2a
 8014246:	d015      	beq.n	8014274 <_vfiprintf_r+0x13c>
 8014248:	4654      	mov	r4, sl
 801424a:	2000      	movs	r0, #0
 801424c:	f04f 0c0a 	mov.w	ip, #10
 8014250:	9a07      	ldr	r2, [sp, #28]
 8014252:	4621      	mov	r1, r4
 8014254:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014258:	3b30      	subs	r3, #48	; 0x30
 801425a:	2b09      	cmp	r3, #9
 801425c:	d94e      	bls.n	80142fc <_vfiprintf_r+0x1c4>
 801425e:	b1b0      	cbz	r0, 801428e <_vfiprintf_r+0x156>
 8014260:	9207      	str	r2, [sp, #28]
 8014262:	e014      	b.n	801428e <_vfiprintf_r+0x156>
 8014264:	eba0 0308 	sub.w	r3, r0, r8
 8014268:	fa09 f303 	lsl.w	r3, r9, r3
 801426c:	4313      	orrs	r3, r2
 801426e:	46a2      	mov	sl, r4
 8014270:	9304      	str	r3, [sp, #16]
 8014272:	e7d2      	b.n	801421a <_vfiprintf_r+0xe2>
 8014274:	9b03      	ldr	r3, [sp, #12]
 8014276:	1d19      	adds	r1, r3, #4
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	9103      	str	r1, [sp, #12]
 801427c:	2b00      	cmp	r3, #0
 801427e:	bfbb      	ittet	lt
 8014280:	425b      	neglt	r3, r3
 8014282:	f042 0202 	orrlt.w	r2, r2, #2
 8014286:	9307      	strge	r3, [sp, #28]
 8014288:	9307      	strlt	r3, [sp, #28]
 801428a:	bfb8      	it	lt
 801428c:	9204      	strlt	r2, [sp, #16]
 801428e:	7823      	ldrb	r3, [r4, #0]
 8014290:	2b2e      	cmp	r3, #46	; 0x2e
 8014292:	d10c      	bne.n	80142ae <_vfiprintf_r+0x176>
 8014294:	7863      	ldrb	r3, [r4, #1]
 8014296:	2b2a      	cmp	r3, #42	; 0x2a
 8014298:	d135      	bne.n	8014306 <_vfiprintf_r+0x1ce>
 801429a:	9b03      	ldr	r3, [sp, #12]
 801429c:	3402      	adds	r4, #2
 801429e:	1d1a      	adds	r2, r3, #4
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	9203      	str	r2, [sp, #12]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	bfb8      	it	lt
 80142a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80142ac:	9305      	str	r3, [sp, #20]
 80142ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014394 <_vfiprintf_r+0x25c>
 80142b2:	2203      	movs	r2, #3
 80142b4:	4650      	mov	r0, sl
 80142b6:	7821      	ldrb	r1, [r4, #0]
 80142b8:	f7ff fa58 	bl	801376c <memchr>
 80142bc:	b140      	cbz	r0, 80142d0 <_vfiprintf_r+0x198>
 80142be:	2340      	movs	r3, #64	; 0x40
 80142c0:	eba0 000a 	sub.w	r0, r0, sl
 80142c4:	fa03 f000 	lsl.w	r0, r3, r0
 80142c8:	9b04      	ldr	r3, [sp, #16]
 80142ca:	3401      	adds	r4, #1
 80142cc:	4303      	orrs	r3, r0
 80142ce:	9304      	str	r3, [sp, #16]
 80142d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142d4:	2206      	movs	r2, #6
 80142d6:	482c      	ldr	r0, [pc, #176]	; (8014388 <_vfiprintf_r+0x250>)
 80142d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80142dc:	f7ff fa46 	bl	801376c <memchr>
 80142e0:	2800      	cmp	r0, #0
 80142e2:	d03f      	beq.n	8014364 <_vfiprintf_r+0x22c>
 80142e4:	4b29      	ldr	r3, [pc, #164]	; (801438c <_vfiprintf_r+0x254>)
 80142e6:	bb1b      	cbnz	r3, 8014330 <_vfiprintf_r+0x1f8>
 80142e8:	9b03      	ldr	r3, [sp, #12]
 80142ea:	3307      	adds	r3, #7
 80142ec:	f023 0307 	bic.w	r3, r3, #7
 80142f0:	3308      	adds	r3, #8
 80142f2:	9303      	str	r3, [sp, #12]
 80142f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142f6:	443b      	add	r3, r7
 80142f8:	9309      	str	r3, [sp, #36]	; 0x24
 80142fa:	e767      	b.n	80141cc <_vfiprintf_r+0x94>
 80142fc:	460c      	mov	r4, r1
 80142fe:	2001      	movs	r0, #1
 8014300:	fb0c 3202 	mla	r2, ip, r2, r3
 8014304:	e7a5      	b.n	8014252 <_vfiprintf_r+0x11a>
 8014306:	2300      	movs	r3, #0
 8014308:	f04f 0c0a 	mov.w	ip, #10
 801430c:	4619      	mov	r1, r3
 801430e:	3401      	adds	r4, #1
 8014310:	9305      	str	r3, [sp, #20]
 8014312:	4620      	mov	r0, r4
 8014314:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014318:	3a30      	subs	r2, #48	; 0x30
 801431a:	2a09      	cmp	r2, #9
 801431c:	d903      	bls.n	8014326 <_vfiprintf_r+0x1ee>
 801431e:	2b00      	cmp	r3, #0
 8014320:	d0c5      	beq.n	80142ae <_vfiprintf_r+0x176>
 8014322:	9105      	str	r1, [sp, #20]
 8014324:	e7c3      	b.n	80142ae <_vfiprintf_r+0x176>
 8014326:	4604      	mov	r4, r0
 8014328:	2301      	movs	r3, #1
 801432a:	fb0c 2101 	mla	r1, ip, r1, r2
 801432e:	e7f0      	b.n	8014312 <_vfiprintf_r+0x1da>
 8014330:	ab03      	add	r3, sp, #12
 8014332:	9300      	str	r3, [sp, #0]
 8014334:	462a      	mov	r2, r5
 8014336:	4630      	mov	r0, r6
 8014338:	4b15      	ldr	r3, [pc, #84]	; (8014390 <_vfiprintf_r+0x258>)
 801433a:	a904      	add	r1, sp, #16
 801433c:	f3af 8000 	nop.w
 8014340:	4607      	mov	r7, r0
 8014342:	1c78      	adds	r0, r7, #1
 8014344:	d1d6      	bne.n	80142f4 <_vfiprintf_r+0x1bc>
 8014346:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014348:	07d9      	lsls	r1, r3, #31
 801434a:	d405      	bmi.n	8014358 <_vfiprintf_r+0x220>
 801434c:	89ab      	ldrh	r3, [r5, #12]
 801434e:	059a      	lsls	r2, r3, #22
 8014350:	d402      	bmi.n	8014358 <_vfiprintf_r+0x220>
 8014352:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014354:	f7ff fe57 	bl	8014006 <__retarget_lock_release_recursive>
 8014358:	89ab      	ldrh	r3, [r5, #12]
 801435a:	065b      	lsls	r3, r3, #25
 801435c:	f53f af12 	bmi.w	8014184 <_vfiprintf_r+0x4c>
 8014360:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014362:	e711      	b.n	8014188 <_vfiprintf_r+0x50>
 8014364:	ab03      	add	r3, sp, #12
 8014366:	9300      	str	r3, [sp, #0]
 8014368:	462a      	mov	r2, r5
 801436a:	4630      	mov	r0, r6
 801436c:	4b08      	ldr	r3, [pc, #32]	; (8014390 <_vfiprintf_r+0x258>)
 801436e:	a904      	add	r1, sp, #16
 8014370:	f000 f882 	bl	8014478 <_printf_i>
 8014374:	e7e4      	b.n	8014340 <_vfiprintf_r+0x208>
 8014376:	bf00      	nop
 8014378:	08016d1c 	.word	0x08016d1c
 801437c:	08016d3c 	.word	0x08016d3c
 8014380:	08016cfc 	.word	0x08016cfc
 8014384:	08016d5c 	.word	0x08016d5c
 8014388:	08016d66 	.word	0x08016d66
 801438c:	00000000 	.word	0x00000000
 8014390:	08014113 	.word	0x08014113
 8014394:	08016d62 	.word	0x08016d62

08014398 <_printf_common>:
 8014398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801439c:	4616      	mov	r6, r2
 801439e:	4699      	mov	r9, r3
 80143a0:	688a      	ldr	r2, [r1, #8]
 80143a2:	690b      	ldr	r3, [r1, #16]
 80143a4:	4607      	mov	r7, r0
 80143a6:	4293      	cmp	r3, r2
 80143a8:	bfb8      	it	lt
 80143aa:	4613      	movlt	r3, r2
 80143ac:	6033      	str	r3, [r6, #0]
 80143ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80143b2:	460c      	mov	r4, r1
 80143b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80143b8:	b10a      	cbz	r2, 80143be <_printf_common+0x26>
 80143ba:	3301      	adds	r3, #1
 80143bc:	6033      	str	r3, [r6, #0]
 80143be:	6823      	ldr	r3, [r4, #0]
 80143c0:	0699      	lsls	r1, r3, #26
 80143c2:	bf42      	ittt	mi
 80143c4:	6833      	ldrmi	r3, [r6, #0]
 80143c6:	3302      	addmi	r3, #2
 80143c8:	6033      	strmi	r3, [r6, #0]
 80143ca:	6825      	ldr	r5, [r4, #0]
 80143cc:	f015 0506 	ands.w	r5, r5, #6
 80143d0:	d106      	bne.n	80143e0 <_printf_common+0x48>
 80143d2:	f104 0a19 	add.w	sl, r4, #25
 80143d6:	68e3      	ldr	r3, [r4, #12]
 80143d8:	6832      	ldr	r2, [r6, #0]
 80143da:	1a9b      	subs	r3, r3, r2
 80143dc:	42ab      	cmp	r3, r5
 80143de:	dc28      	bgt.n	8014432 <_printf_common+0x9a>
 80143e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80143e4:	1e13      	subs	r3, r2, #0
 80143e6:	6822      	ldr	r2, [r4, #0]
 80143e8:	bf18      	it	ne
 80143ea:	2301      	movne	r3, #1
 80143ec:	0692      	lsls	r2, r2, #26
 80143ee:	d42d      	bmi.n	801444c <_printf_common+0xb4>
 80143f0:	4649      	mov	r1, r9
 80143f2:	4638      	mov	r0, r7
 80143f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80143f8:	47c0      	blx	r8
 80143fa:	3001      	adds	r0, #1
 80143fc:	d020      	beq.n	8014440 <_printf_common+0xa8>
 80143fe:	6823      	ldr	r3, [r4, #0]
 8014400:	68e5      	ldr	r5, [r4, #12]
 8014402:	f003 0306 	and.w	r3, r3, #6
 8014406:	2b04      	cmp	r3, #4
 8014408:	bf18      	it	ne
 801440a:	2500      	movne	r5, #0
 801440c:	6832      	ldr	r2, [r6, #0]
 801440e:	f04f 0600 	mov.w	r6, #0
 8014412:	68a3      	ldr	r3, [r4, #8]
 8014414:	bf08      	it	eq
 8014416:	1aad      	subeq	r5, r5, r2
 8014418:	6922      	ldr	r2, [r4, #16]
 801441a:	bf08      	it	eq
 801441c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014420:	4293      	cmp	r3, r2
 8014422:	bfc4      	itt	gt
 8014424:	1a9b      	subgt	r3, r3, r2
 8014426:	18ed      	addgt	r5, r5, r3
 8014428:	341a      	adds	r4, #26
 801442a:	42b5      	cmp	r5, r6
 801442c:	d11a      	bne.n	8014464 <_printf_common+0xcc>
 801442e:	2000      	movs	r0, #0
 8014430:	e008      	b.n	8014444 <_printf_common+0xac>
 8014432:	2301      	movs	r3, #1
 8014434:	4652      	mov	r2, sl
 8014436:	4649      	mov	r1, r9
 8014438:	4638      	mov	r0, r7
 801443a:	47c0      	blx	r8
 801443c:	3001      	adds	r0, #1
 801443e:	d103      	bne.n	8014448 <_printf_common+0xb0>
 8014440:	f04f 30ff 	mov.w	r0, #4294967295
 8014444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014448:	3501      	adds	r5, #1
 801444a:	e7c4      	b.n	80143d6 <_printf_common+0x3e>
 801444c:	2030      	movs	r0, #48	; 0x30
 801444e:	18e1      	adds	r1, r4, r3
 8014450:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014454:	1c5a      	adds	r2, r3, #1
 8014456:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801445a:	4422      	add	r2, r4
 801445c:	3302      	adds	r3, #2
 801445e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014462:	e7c5      	b.n	80143f0 <_printf_common+0x58>
 8014464:	2301      	movs	r3, #1
 8014466:	4622      	mov	r2, r4
 8014468:	4649      	mov	r1, r9
 801446a:	4638      	mov	r0, r7
 801446c:	47c0      	blx	r8
 801446e:	3001      	adds	r0, #1
 8014470:	d0e6      	beq.n	8014440 <_printf_common+0xa8>
 8014472:	3601      	adds	r6, #1
 8014474:	e7d9      	b.n	801442a <_printf_common+0x92>
	...

08014478 <_printf_i>:
 8014478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801447c:	460c      	mov	r4, r1
 801447e:	7e27      	ldrb	r7, [r4, #24]
 8014480:	4691      	mov	r9, r2
 8014482:	2f78      	cmp	r7, #120	; 0x78
 8014484:	4680      	mov	r8, r0
 8014486:	469a      	mov	sl, r3
 8014488:	990c      	ldr	r1, [sp, #48]	; 0x30
 801448a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801448e:	d807      	bhi.n	80144a0 <_printf_i+0x28>
 8014490:	2f62      	cmp	r7, #98	; 0x62
 8014492:	d80a      	bhi.n	80144aa <_printf_i+0x32>
 8014494:	2f00      	cmp	r7, #0
 8014496:	f000 80d9 	beq.w	801464c <_printf_i+0x1d4>
 801449a:	2f58      	cmp	r7, #88	; 0x58
 801449c:	f000 80a4 	beq.w	80145e8 <_printf_i+0x170>
 80144a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80144a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80144a8:	e03a      	b.n	8014520 <_printf_i+0xa8>
 80144aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80144ae:	2b15      	cmp	r3, #21
 80144b0:	d8f6      	bhi.n	80144a0 <_printf_i+0x28>
 80144b2:	a001      	add	r0, pc, #4	; (adr r0, 80144b8 <_printf_i+0x40>)
 80144b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80144b8:	08014511 	.word	0x08014511
 80144bc:	08014525 	.word	0x08014525
 80144c0:	080144a1 	.word	0x080144a1
 80144c4:	080144a1 	.word	0x080144a1
 80144c8:	080144a1 	.word	0x080144a1
 80144cc:	080144a1 	.word	0x080144a1
 80144d0:	08014525 	.word	0x08014525
 80144d4:	080144a1 	.word	0x080144a1
 80144d8:	080144a1 	.word	0x080144a1
 80144dc:	080144a1 	.word	0x080144a1
 80144e0:	080144a1 	.word	0x080144a1
 80144e4:	08014633 	.word	0x08014633
 80144e8:	08014555 	.word	0x08014555
 80144ec:	08014615 	.word	0x08014615
 80144f0:	080144a1 	.word	0x080144a1
 80144f4:	080144a1 	.word	0x080144a1
 80144f8:	08014655 	.word	0x08014655
 80144fc:	080144a1 	.word	0x080144a1
 8014500:	08014555 	.word	0x08014555
 8014504:	080144a1 	.word	0x080144a1
 8014508:	080144a1 	.word	0x080144a1
 801450c:	0801461d 	.word	0x0801461d
 8014510:	680b      	ldr	r3, [r1, #0]
 8014512:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014516:	1d1a      	adds	r2, r3, #4
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	600a      	str	r2, [r1, #0]
 801451c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014520:	2301      	movs	r3, #1
 8014522:	e0a4      	b.n	801466e <_printf_i+0x1f6>
 8014524:	6825      	ldr	r5, [r4, #0]
 8014526:	6808      	ldr	r0, [r1, #0]
 8014528:	062e      	lsls	r6, r5, #24
 801452a:	f100 0304 	add.w	r3, r0, #4
 801452e:	d50a      	bpl.n	8014546 <_printf_i+0xce>
 8014530:	6805      	ldr	r5, [r0, #0]
 8014532:	600b      	str	r3, [r1, #0]
 8014534:	2d00      	cmp	r5, #0
 8014536:	da03      	bge.n	8014540 <_printf_i+0xc8>
 8014538:	232d      	movs	r3, #45	; 0x2d
 801453a:	426d      	negs	r5, r5
 801453c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014540:	230a      	movs	r3, #10
 8014542:	485e      	ldr	r0, [pc, #376]	; (80146bc <_printf_i+0x244>)
 8014544:	e019      	b.n	801457a <_printf_i+0x102>
 8014546:	f015 0f40 	tst.w	r5, #64	; 0x40
 801454a:	6805      	ldr	r5, [r0, #0]
 801454c:	600b      	str	r3, [r1, #0]
 801454e:	bf18      	it	ne
 8014550:	b22d      	sxthne	r5, r5
 8014552:	e7ef      	b.n	8014534 <_printf_i+0xbc>
 8014554:	680b      	ldr	r3, [r1, #0]
 8014556:	6825      	ldr	r5, [r4, #0]
 8014558:	1d18      	adds	r0, r3, #4
 801455a:	6008      	str	r0, [r1, #0]
 801455c:	0628      	lsls	r0, r5, #24
 801455e:	d501      	bpl.n	8014564 <_printf_i+0xec>
 8014560:	681d      	ldr	r5, [r3, #0]
 8014562:	e002      	b.n	801456a <_printf_i+0xf2>
 8014564:	0669      	lsls	r1, r5, #25
 8014566:	d5fb      	bpl.n	8014560 <_printf_i+0xe8>
 8014568:	881d      	ldrh	r5, [r3, #0]
 801456a:	2f6f      	cmp	r7, #111	; 0x6f
 801456c:	bf0c      	ite	eq
 801456e:	2308      	moveq	r3, #8
 8014570:	230a      	movne	r3, #10
 8014572:	4852      	ldr	r0, [pc, #328]	; (80146bc <_printf_i+0x244>)
 8014574:	2100      	movs	r1, #0
 8014576:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801457a:	6866      	ldr	r6, [r4, #4]
 801457c:	2e00      	cmp	r6, #0
 801457e:	bfa8      	it	ge
 8014580:	6821      	ldrge	r1, [r4, #0]
 8014582:	60a6      	str	r6, [r4, #8]
 8014584:	bfa4      	itt	ge
 8014586:	f021 0104 	bicge.w	r1, r1, #4
 801458a:	6021      	strge	r1, [r4, #0]
 801458c:	b90d      	cbnz	r5, 8014592 <_printf_i+0x11a>
 801458e:	2e00      	cmp	r6, #0
 8014590:	d04d      	beq.n	801462e <_printf_i+0x1b6>
 8014592:	4616      	mov	r6, r2
 8014594:	fbb5 f1f3 	udiv	r1, r5, r3
 8014598:	fb03 5711 	mls	r7, r3, r1, r5
 801459c:	5dc7      	ldrb	r7, [r0, r7]
 801459e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80145a2:	462f      	mov	r7, r5
 80145a4:	42bb      	cmp	r3, r7
 80145a6:	460d      	mov	r5, r1
 80145a8:	d9f4      	bls.n	8014594 <_printf_i+0x11c>
 80145aa:	2b08      	cmp	r3, #8
 80145ac:	d10b      	bne.n	80145c6 <_printf_i+0x14e>
 80145ae:	6823      	ldr	r3, [r4, #0]
 80145b0:	07df      	lsls	r7, r3, #31
 80145b2:	d508      	bpl.n	80145c6 <_printf_i+0x14e>
 80145b4:	6923      	ldr	r3, [r4, #16]
 80145b6:	6861      	ldr	r1, [r4, #4]
 80145b8:	4299      	cmp	r1, r3
 80145ba:	bfde      	ittt	le
 80145bc:	2330      	movle	r3, #48	; 0x30
 80145be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80145c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80145c6:	1b92      	subs	r2, r2, r6
 80145c8:	6122      	str	r2, [r4, #16]
 80145ca:	464b      	mov	r3, r9
 80145cc:	4621      	mov	r1, r4
 80145ce:	4640      	mov	r0, r8
 80145d0:	f8cd a000 	str.w	sl, [sp]
 80145d4:	aa03      	add	r2, sp, #12
 80145d6:	f7ff fedf 	bl	8014398 <_printf_common>
 80145da:	3001      	adds	r0, #1
 80145dc:	d14c      	bne.n	8014678 <_printf_i+0x200>
 80145de:	f04f 30ff 	mov.w	r0, #4294967295
 80145e2:	b004      	add	sp, #16
 80145e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145e8:	4834      	ldr	r0, [pc, #208]	; (80146bc <_printf_i+0x244>)
 80145ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80145ee:	680e      	ldr	r6, [r1, #0]
 80145f0:	6823      	ldr	r3, [r4, #0]
 80145f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80145f6:	061f      	lsls	r7, r3, #24
 80145f8:	600e      	str	r6, [r1, #0]
 80145fa:	d514      	bpl.n	8014626 <_printf_i+0x1ae>
 80145fc:	07d9      	lsls	r1, r3, #31
 80145fe:	bf44      	itt	mi
 8014600:	f043 0320 	orrmi.w	r3, r3, #32
 8014604:	6023      	strmi	r3, [r4, #0]
 8014606:	b91d      	cbnz	r5, 8014610 <_printf_i+0x198>
 8014608:	6823      	ldr	r3, [r4, #0]
 801460a:	f023 0320 	bic.w	r3, r3, #32
 801460e:	6023      	str	r3, [r4, #0]
 8014610:	2310      	movs	r3, #16
 8014612:	e7af      	b.n	8014574 <_printf_i+0xfc>
 8014614:	6823      	ldr	r3, [r4, #0]
 8014616:	f043 0320 	orr.w	r3, r3, #32
 801461a:	6023      	str	r3, [r4, #0]
 801461c:	2378      	movs	r3, #120	; 0x78
 801461e:	4828      	ldr	r0, [pc, #160]	; (80146c0 <_printf_i+0x248>)
 8014620:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014624:	e7e3      	b.n	80145ee <_printf_i+0x176>
 8014626:	065e      	lsls	r6, r3, #25
 8014628:	bf48      	it	mi
 801462a:	b2ad      	uxthmi	r5, r5
 801462c:	e7e6      	b.n	80145fc <_printf_i+0x184>
 801462e:	4616      	mov	r6, r2
 8014630:	e7bb      	b.n	80145aa <_printf_i+0x132>
 8014632:	680b      	ldr	r3, [r1, #0]
 8014634:	6826      	ldr	r6, [r4, #0]
 8014636:	1d1d      	adds	r5, r3, #4
 8014638:	6960      	ldr	r0, [r4, #20]
 801463a:	600d      	str	r5, [r1, #0]
 801463c:	0635      	lsls	r5, r6, #24
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	d501      	bpl.n	8014646 <_printf_i+0x1ce>
 8014642:	6018      	str	r0, [r3, #0]
 8014644:	e002      	b.n	801464c <_printf_i+0x1d4>
 8014646:	0671      	lsls	r1, r6, #25
 8014648:	d5fb      	bpl.n	8014642 <_printf_i+0x1ca>
 801464a:	8018      	strh	r0, [r3, #0]
 801464c:	2300      	movs	r3, #0
 801464e:	4616      	mov	r6, r2
 8014650:	6123      	str	r3, [r4, #16]
 8014652:	e7ba      	b.n	80145ca <_printf_i+0x152>
 8014654:	680b      	ldr	r3, [r1, #0]
 8014656:	1d1a      	adds	r2, r3, #4
 8014658:	600a      	str	r2, [r1, #0]
 801465a:	681e      	ldr	r6, [r3, #0]
 801465c:	2100      	movs	r1, #0
 801465e:	4630      	mov	r0, r6
 8014660:	6862      	ldr	r2, [r4, #4]
 8014662:	f7ff f883 	bl	801376c <memchr>
 8014666:	b108      	cbz	r0, 801466c <_printf_i+0x1f4>
 8014668:	1b80      	subs	r0, r0, r6
 801466a:	6060      	str	r0, [r4, #4]
 801466c:	6863      	ldr	r3, [r4, #4]
 801466e:	6123      	str	r3, [r4, #16]
 8014670:	2300      	movs	r3, #0
 8014672:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014676:	e7a8      	b.n	80145ca <_printf_i+0x152>
 8014678:	4632      	mov	r2, r6
 801467a:	4649      	mov	r1, r9
 801467c:	4640      	mov	r0, r8
 801467e:	6923      	ldr	r3, [r4, #16]
 8014680:	47d0      	blx	sl
 8014682:	3001      	adds	r0, #1
 8014684:	d0ab      	beq.n	80145de <_printf_i+0x166>
 8014686:	6823      	ldr	r3, [r4, #0]
 8014688:	079b      	lsls	r3, r3, #30
 801468a:	d413      	bmi.n	80146b4 <_printf_i+0x23c>
 801468c:	68e0      	ldr	r0, [r4, #12]
 801468e:	9b03      	ldr	r3, [sp, #12]
 8014690:	4298      	cmp	r0, r3
 8014692:	bfb8      	it	lt
 8014694:	4618      	movlt	r0, r3
 8014696:	e7a4      	b.n	80145e2 <_printf_i+0x16a>
 8014698:	2301      	movs	r3, #1
 801469a:	4632      	mov	r2, r6
 801469c:	4649      	mov	r1, r9
 801469e:	4640      	mov	r0, r8
 80146a0:	47d0      	blx	sl
 80146a2:	3001      	adds	r0, #1
 80146a4:	d09b      	beq.n	80145de <_printf_i+0x166>
 80146a6:	3501      	adds	r5, #1
 80146a8:	68e3      	ldr	r3, [r4, #12]
 80146aa:	9903      	ldr	r1, [sp, #12]
 80146ac:	1a5b      	subs	r3, r3, r1
 80146ae:	42ab      	cmp	r3, r5
 80146b0:	dcf2      	bgt.n	8014698 <_printf_i+0x220>
 80146b2:	e7eb      	b.n	801468c <_printf_i+0x214>
 80146b4:	2500      	movs	r5, #0
 80146b6:	f104 0619 	add.w	r6, r4, #25
 80146ba:	e7f5      	b.n	80146a8 <_printf_i+0x230>
 80146bc:	08016d6d 	.word	0x08016d6d
 80146c0:	08016d7e 	.word	0x08016d7e

080146c4 <__sread>:
 80146c4:	b510      	push	{r4, lr}
 80146c6:	460c      	mov	r4, r1
 80146c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146cc:	f000 f894 	bl	80147f8 <_read_r>
 80146d0:	2800      	cmp	r0, #0
 80146d2:	bfab      	itete	ge
 80146d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80146d6:	89a3      	ldrhlt	r3, [r4, #12]
 80146d8:	181b      	addge	r3, r3, r0
 80146da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80146de:	bfac      	ite	ge
 80146e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80146e2:	81a3      	strhlt	r3, [r4, #12]
 80146e4:	bd10      	pop	{r4, pc}

080146e6 <__swrite>:
 80146e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146ea:	461f      	mov	r7, r3
 80146ec:	898b      	ldrh	r3, [r1, #12]
 80146ee:	4605      	mov	r5, r0
 80146f0:	05db      	lsls	r3, r3, #23
 80146f2:	460c      	mov	r4, r1
 80146f4:	4616      	mov	r6, r2
 80146f6:	d505      	bpl.n	8014704 <__swrite+0x1e>
 80146f8:	2302      	movs	r3, #2
 80146fa:	2200      	movs	r2, #0
 80146fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014700:	f000 f868 	bl	80147d4 <_lseek_r>
 8014704:	89a3      	ldrh	r3, [r4, #12]
 8014706:	4632      	mov	r2, r6
 8014708:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801470c:	81a3      	strh	r3, [r4, #12]
 801470e:	4628      	mov	r0, r5
 8014710:	463b      	mov	r3, r7
 8014712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801471a:	f000 b817 	b.w	801474c <_write_r>

0801471e <__sseek>:
 801471e:	b510      	push	{r4, lr}
 8014720:	460c      	mov	r4, r1
 8014722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014726:	f000 f855 	bl	80147d4 <_lseek_r>
 801472a:	1c43      	adds	r3, r0, #1
 801472c:	89a3      	ldrh	r3, [r4, #12]
 801472e:	bf15      	itete	ne
 8014730:	6560      	strne	r0, [r4, #84]	; 0x54
 8014732:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014736:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801473a:	81a3      	strheq	r3, [r4, #12]
 801473c:	bf18      	it	ne
 801473e:	81a3      	strhne	r3, [r4, #12]
 8014740:	bd10      	pop	{r4, pc}

08014742 <__sclose>:
 8014742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014746:	f000 b813 	b.w	8014770 <_close_r>
	...

0801474c <_write_r>:
 801474c:	b538      	push	{r3, r4, r5, lr}
 801474e:	4604      	mov	r4, r0
 8014750:	4608      	mov	r0, r1
 8014752:	4611      	mov	r1, r2
 8014754:	2200      	movs	r2, #0
 8014756:	4d05      	ldr	r5, [pc, #20]	; (801476c <_write_r+0x20>)
 8014758:	602a      	str	r2, [r5, #0]
 801475a:	461a      	mov	r2, r3
 801475c:	f7f0 fce9 	bl	8005132 <_write>
 8014760:	1c43      	adds	r3, r0, #1
 8014762:	d102      	bne.n	801476a <_write_r+0x1e>
 8014764:	682b      	ldr	r3, [r5, #0]
 8014766:	b103      	cbz	r3, 801476a <_write_r+0x1e>
 8014768:	6023      	str	r3, [r4, #0]
 801476a:	bd38      	pop	{r3, r4, r5, pc}
 801476c:	20006cb8 	.word	0x20006cb8

08014770 <_close_r>:
 8014770:	b538      	push	{r3, r4, r5, lr}
 8014772:	2300      	movs	r3, #0
 8014774:	4d05      	ldr	r5, [pc, #20]	; (801478c <_close_r+0x1c>)
 8014776:	4604      	mov	r4, r0
 8014778:	4608      	mov	r0, r1
 801477a:	602b      	str	r3, [r5, #0]
 801477c:	f7f0 fcf5 	bl	800516a <_close>
 8014780:	1c43      	adds	r3, r0, #1
 8014782:	d102      	bne.n	801478a <_close_r+0x1a>
 8014784:	682b      	ldr	r3, [r5, #0]
 8014786:	b103      	cbz	r3, 801478a <_close_r+0x1a>
 8014788:	6023      	str	r3, [r4, #0]
 801478a:	bd38      	pop	{r3, r4, r5, pc}
 801478c:	20006cb8 	.word	0x20006cb8

08014790 <_fstat_r>:
 8014790:	b538      	push	{r3, r4, r5, lr}
 8014792:	2300      	movs	r3, #0
 8014794:	4d06      	ldr	r5, [pc, #24]	; (80147b0 <_fstat_r+0x20>)
 8014796:	4604      	mov	r4, r0
 8014798:	4608      	mov	r0, r1
 801479a:	4611      	mov	r1, r2
 801479c:	602b      	str	r3, [r5, #0]
 801479e:	f7f0 fcef 	bl	8005180 <_fstat>
 80147a2:	1c43      	adds	r3, r0, #1
 80147a4:	d102      	bne.n	80147ac <_fstat_r+0x1c>
 80147a6:	682b      	ldr	r3, [r5, #0]
 80147a8:	b103      	cbz	r3, 80147ac <_fstat_r+0x1c>
 80147aa:	6023      	str	r3, [r4, #0]
 80147ac:	bd38      	pop	{r3, r4, r5, pc}
 80147ae:	bf00      	nop
 80147b0:	20006cb8 	.word	0x20006cb8

080147b4 <_isatty_r>:
 80147b4:	b538      	push	{r3, r4, r5, lr}
 80147b6:	2300      	movs	r3, #0
 80147b8:	4d05      	ldr	r5, [pc, #20]	; (80147d0 <_isatty_r+0x1c>)
 80147ba:	4604      	mov	r4, r0
 80147bc:	4608      	mov	r0, r1
 80147be:	602b      	str	r3, [r5, #0]
 80147c0:	f7f0 fced 	bl	800519e <_isatty>
 80147c4:	1c43      	adds	r3, r0, #1
 80147c6:	d102      	bne.n	80147ce <_isatty_r+0x1a>
 80147c8:	682b      	ldr	r3, [r5, #0]
 80147ca:	b103      	cbz	r3, 80147ce <_isatty_r+0x1a>
 80147cc:	6023      	str	r3, [r4, #0]
 80147ce:	bd38      	pop	{r3, r4, r5, pc}
 80147d0:	20006cb8 	.word	0x20006cb8

080147d4 <_lseek_r>:
 80147d4:	b538      	push	{r3, r4, r5, lr}
 80147d6:	4604      	mov	r4, r0
 80147d8:	4608      	mov	r0, r1
 80147da:	4611      	mov	r1, r2
 80147dc:	2200      	movs	r2, #0
 80147de:	4d05      	ldr	r5, [pc, #20]	; (80147f4 <_lseek_r+0x20>)
 80147e0:	602a      	str	r2, [r5, #0]
 80147e2:	461a      	mov	r2, r3
 80147e4:	f7f0 fce5 	bl	80051b2 <_lseek>
 80147e8:	1c43      	adds	r3, r0, #1
 80147ea:	d102      	bne.n	80147f2 <_lseek_r+0x1e>
 80147ec:	682b      	ldr	r3, [r5, #0]
 80147ee:	b103      	cbz	r3, 80147f2 <_lseek_r+0x1e>
 80147f0:	6023      	str	r3, [r4, #0]
 80147f2:	bd38      	pop	{r3, r4, r5, pc}
 80147f4:	20006cb8 	.word	0x20006cb8

080147f8 <_read_r>:
 80147f8:	b538      	push	{r3, r4, r5, lr}
 80147fa:	4604      	mov	r4, r0
 80147fc:	4608      	mov	r0, r1
 80147fe:	4611      	mov	r1, r2
 8014800:	2200      	movs	r2, #0
 8014802:	4d05      	ldr	r5, [pc, #20]	; (8014818 <_read_r+0x20>)
 8014804:	602a      	str	r2, [r5, #0]
 8014806:	461a      	mov	r2, r3
 8014808:	f7f0 fc76 	bl	80050f8 <_read>
 801480c:	1c43      	adds	r3, r0, #1
 801480e:	d102      	bne.n	8014816 <_read_r+0x1e>
 8014810:	682b      	ldr	r3, [r5, #0]
 8014812:	b103      	cbz	r3, 8014816 <_read_r+0x1e>
 8014814:	6023      	str	r3, [r4, #0]
 8014816:	bd38      	pop	{r3, r4, r5, pc}
 8014818:	20006cb8 	.word	0x20006cb8

0801481c <_init>:
 801481c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801481e:	bf00      	nop
 8014820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014822:	bc08      	pop	{r3}
 8014824:	469e      	mov	lr, r3
 8014826:	4770      	bx	lr

08014828 <_fini>:
 8014828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801482a:	bf00      	nop
 801482c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801482e:	bc08      	pop	{r3}
 8014830:	469e      	mov	lr, r3
 8014832:	4770      	bx	lr
